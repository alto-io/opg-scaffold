{
  "address": "0xFF811A1D98F34845990cD7A3f8D3611A859F7C84",
  "abi": [
    {
      "inputs": [],
      "name": "AddressUtils__NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__ERC721ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Metadata__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__NonExistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolidStateERC721__PayableApproveNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolidStateERC721__PayableTransferNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ArcadianClaimedMerkle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldArcadiansAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newArcadiansAddress",
          "type": "address"
        }
      ],
      "name": "ArcadiansAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldBaseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "BaseURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldInventoryAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newInventoryAddress",
          "type": "address"
        }
      ],
      "name": "InventoryAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "ItemsAllowedInSlotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxMintPerUser",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "MaxMintPerUserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMintPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "MintPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "unequippable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum InventoryStorage.SlotCategory",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "SlotCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalElegibleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimedAmount",
          "type": "uint256"
        }
      ],
      "name": "WhitelistBalanceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMerkle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimedAmountMerkle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "slotIds",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "itemsToEquip",
          "type": "tuple[]"
        }
      ],
      "name": "mintAndEquipp",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintPerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x58830e2f240bd19be5f7b8ca7d6bf9e09b4fd1ec543740fbc12abe92f5bf48b7",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0xFF811A1D98F34845990cD7A3f8D3611A859F7C84",
    "transactionIndex": 0,
    "gasUsed": "3424900",
    "logsBloom": "0x
    "blockHash": "0x0f6d7ce18a4aea21e5252f31530bd0a9d78f5c448597f73f5d22511fa2170e7e",
    "transactionHash": "0x58830e2f240bd19be5f7b8ca7d6bf9e09b4fd1ec543740fbc12abe92f5bf48b7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33693589,
        "transactionHash": "0x58830e2f240bd19be5f7b8ca7d6bf9e09b4fd1ec543740fbc12abe92f5bf48b7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001e6b522d86217c00000000000000000000000000000000000000000000000001f1db96672c3c851000000000000000000000000000000000000000000002f39886770f9aa2ab9090000000000000000000000000000000000000000000000001d3704439a61b091000000000000000000000000000000000000000000002f398a4e261c828cd0c9",
        "logIndex": 0,
        "blockHash": "0x0f6d7ce18a4aea21e5252f31530bd0a9d78f5c448597f73f5d22511fa2170e7e"
      }
    ],
    "blockNumber": 33693589,
    "cumulativeGasUsed": "3424900",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "f1e3877b8f8ef72bb892491c6379771c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__ERC721ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Metadata__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__NonExistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolidStateERC721__PayableApproveNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolidStateERC721__PayableTransferNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ArcadianClaimedMerkle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldArcadiansAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newArcadiansAddress\",\"type\":\"address\"}],\"name\":\"ArcadiansAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldBaseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldInventoryAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newInventoryAddress\",\"type\":\"address\"}],\"name\":\"InventoryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"ItemsAllowedInSlotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxMintPerUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"MaxMintPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"MintPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unequippable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"SlotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalElegibleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"}],\"name\":\"WhitelistBalanceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimMerkle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimedAmountMerkle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"slotIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"itemsToEquip\",\"type\":\"tuple[]\"}],\"name\":\"mintAndEquipp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"setMaxMintPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"address to be approved\",\"tokenId\":\"token to approve\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"quantity of tokens held\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"address approved to spend token\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"array of function call data payloads\"},\"returns\":{\"results\":\"array of function call results\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token owner\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"data payload\",\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address to be approved\",\"status\":\"approval status\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"position in global token list to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"position in owner's token list to query\",\"owner\":\"token holder to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total supply\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"grant approval to given account to spend token\"},\"balanceOf(address)\":{\"notice\":\"query the balance of given address\"},\"getApproved(uint256)\":{\"notice\":\"get approval status for given token\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"multicall(bytes[])\":{\"notice\":\"batch function calls to the contract and return the results of each\"},\"name()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"ownerOf(uint256)\":{\"notice\":\"query the owner of given token\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given account to spend all tokens held by sender\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"symbol()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"tokenByIndex(uint256)\":{\"notice\":\"get token at given internal storage index\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"get token of given owner at given internal storage index\"},\"totalSupply()\":{\"notice\":\"get total token supply\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/arcadians/ArcadiansFacet.sol\":\"ArcadiansFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Merkle tree verification utility\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @notice verify whether given leaf is contained within Merkle tree defined by given root\\n     * @param proof proof that Merkle tree contains given leaf\\n     * @param root Merkle tree root\\n     * @param leaf element whose presence in Merkle tree to prove\\n     * @return whether leaf is proven to be contained within Merkle tree defined by root\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            bytes32 computedHash = leaf;\\n\\n            for (uint256 i = 0; i < proof.length; i++) {\\n                bytes32 proofElement = proof[i];\\n\\n                if (computedHash <= proofElement) {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(computedHash, proofElement)\\n                    );\\n                } else {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(proofElement, computedHash)\\n                    );\\n                }\\n            }\\n\\n            return computedHash == root;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3a6592d4e2c90f92ccae441401241b4a8837e95a15f3c3887abc544e85e362c\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Map implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableMap {\\n    error EnumerableMap__IndexOutOfBounds();\\n    error EnumerableMap__NonExistentKey();\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        MapEntry[] _entries;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct AddressToAddressMap {\\n        Map _inner;\\n    }\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    function at(\\n        AddressToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (address, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n\\n        return (\\n            address(uint160(uint256(key))),\\n            address(uint160(uint256(value)))\\n        );\\n    }\\n\\n    function at(\\n        UintToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    function contains(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function contains(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    function length(\\n        AddressToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function length(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function get(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (address) {\\n        return\\n            address(\\n                uint160(\\n                    uint256(_get(map._inner, bytes32(uint256(uint160(key)))))\\n                )\\n            );\\n    }\\n\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    function set(\\n        AddressToAddressMap storage map,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return\\n            _set(\\n                map._inner,\\n                bytes32(uint256(uint160(key))),\\n                bytes32(uint256(uint160(value)))\\n            );\\n    }\\n\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function remove(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    function toArray(\\n        AddressToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (address[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function toArray(\\n        UintToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (uint256[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n            }\\n        }\\n    }\\n\\n    function values(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function values(\\n        UintToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function _at(\\n        Map storage map,\\n        uint256 index\\n    ) private view returns (bytes32, bytes32) {\\n        if (index >= map._entries.length)\\n            revert EnumerableMap__IndexOutOfBounds();\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    function _contains(\\n        Map storage map,\\n        bytes32 key\\n    ) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) revert EnumerableMap__NonExistentKey();\\n        unchecked {\\n            return map._entries[keyIndex - 1]._value;\\n        }\\n    }\\n\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            unchecked {\\n                map._entries[keyIndex - 1]._value = value;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            unchecked {\\n                MapEntry storage last = map._entries[map._entries.length - 1];\\n\\n                // move last entry to now-vacant index\\n                map._entries[keyIndex - 1] = last;\\n                map._indexes[last._key] = keyIndex;\\n            }\\n\\n            // clear last index\\n            map._entries.pop();\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1140a8669a93db82ea70d7f53e112049d42a813fe7188f50aa2f7ec5e529d38a\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x38ca94617ab4a4cdc08d9fed753f1b17d91a9823b36f7f485cd1ed5e5324aa8f\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/ISolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Base } from './base/IERC721Base.sol';\\nimport { IERC721Enumerable } from './enumerable/IERC721Enumerable.sol';\\nimport { IERC721Metadata } from './metadata/IERC721Metadata.sol';\\n\\ninterface ISolidStateERC721 is IERC721Base, IERC721Enumerable, IERC721Metadata {\\n    error SolidStateERC721__PayableApproveNotSupported();\\n    error SolidStateERC721__PayableTransferNotSupported();\\n}\\n\",\"keccak256\":\"0x4fc3b4d30c0f7124751439c3289e060cd0a566fad2beca51e9f05737bd8cf825\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC165Base } from '../../introspection/ERC165/base/ERC165Base.sol';\\nimport { ERC721Base, ERC721BaseInternal } from './base/ERC721Base.sol';\\nimport { ERC721Enumerable } from './enumerable/ERC721Enumerable.sol';\\nimport { ERC721Metadata } from './metadata/ERC721Metadata.sol';\\nimport { ISolidStateERC721 } from './ISolidStateERC721.sol';\\n\\n/**\\n * @title SolidState ERC721 implementation, including recommended extensions\\n */\\nabstract contract SolidStateERC721 is\\n    ISolidStateERC721,\\n    ERC721Base,\\n    ERC721Enumerable,\\n    ERC721Metadata,\\n    ERC165Base\\n{\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external approve function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableApproveNotSupported();\\n        super._handleApproveMessageValue(operator, tokenId, value);\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external transfer function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableTransferNotSupported();\\n        super._handleTransferMessageValue(from, to, tokenId, value);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721BaseInternal, ERC721Metadata) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x397706dffa317a4d7da18896ae98562ac14a50361a06bedc7e2d4c68f83abf3f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721Base } from './IERC721Base.sol';\\nimport { ERC721BaseInternal } from './ERC721BaseInternal.sol';\\n\\n/**\\n * @title Base ERC721 implementation, excluding optional extensions\\n */\\nabstract contract ERC721Base is IERC721Base, ERC721BaseInternal {\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address) {\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address) {\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool) {\\n        return _isApprovedForAll(account, operator);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable {\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable {\\n        _safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable {\\n        _safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function approve(address operator, uint256 tokenId) external payable {\\n        _approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function setApprovalForAll(address operator, bool status) external {\\n        _setApprovalForAll(operator, status);\\n    }\\n}\\n\",\"keccak256\":\"0x388e07a6595f57c70508f6cc1f25b00f3c44f343bf6ab44898cd262186304630\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\n\\n/**\\n * @title Base ERC721 internal functions\\n */\\nabstract contract ERC721BaseInternal is IERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function _balanceOf(\\n        address account\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0)) revert ERC721Base__BalanceQueryZeroAddress();\\n        return ERC721BaseStorage.layout().holderTokens[account].length();\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        address owner = ERC721BaseStorage.layout().tokenOwners.get(tokenId);\\n        if (owner == address(0)) revert ERC721Base__InvalidOwner();\\n        return owner;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().tokenOwners.contains(tokenId);\\n    }\\n\\n    function _getApproved(\\n        uint256 tokenId\\n    ) internal view virtual returns (address) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        return ERC721BaseStorage.layout().tokenApprovals[tokenId];\\n    }\\n\\n    function _isApprovedForAll(\\n        address account,\\n        address operator\\n    ) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        return (spender == owner ||\\n            _getApproved(tokenId) == spender ||\\n            _isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        if (to == address(0)) revert ERC721Base__MintToZeroAddress();\\n        if (_exists(tokenId)) revert ERC721Base__TokenAlreadyMinted();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[owner].remove(tokenId);\\n        l.tokenOwners.remove(tokenId);\\n\\n        l.tokenApprovals[tokenId] = address(0);\\n\\n        emit Approval(owner, address(0), tokenId);\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        if (owner != from) revert ERC721Base__NotTokenOwner();\\n        if (to == address(0)) revert ERC721Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[from].remove(tokenId);\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n        l.tokenApprovals[tokenId] = address(0);\\n\\n        emit Approval(owner, address(0), tokenId);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    function _approve(address operator, uint256 tokenId) internal virtual {\\n        _handleApproveMessageValue(operator, tokenId, msg.value);\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        if (operator == owner) revert ERC721Base__SelfApproval();\\n        if (msg.sender != owner && !_isApprovedForAll(owner, msg.sender))\\n            revert ERC721Base__NotOwnerOrApproved();\\n\\n        ERC721BaseStorage.layout().tokenApprovals[tokenId] = operator;\\n        emit Approval(owner, operator, tokenId);\\n    }\\n\\n    function _setApprovalForAll(\\n        address operator,\\n        bool status\\n    ) internal virtual {\\n        if (operator == msg.sender) revert ERC721Base__SelfApproval();\\n        ERC721BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes memory returnData = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n\\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\\n        return returnValue == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called approvals for processing of included message value\\n     * @param operator beneficiary of approval\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called transfers for processing of included message value\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xcc7bc3523871dc4f4e67c88f9c12931fd92d261de914144e749a1b71a3787dae\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC721BaseStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Base');\\n\\n    struct Layout {\\n        EnumerableMap.UintToAddressMap tokenOwners;\\n        mapping(address => EnumerableSet.UintSet) holderTokens;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9570596eca4d18e1c872177aa12125fcaba1dd7db940e5affa44e6ce2231b0a1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721Base is IERC721BaseInternal, IERC721 {\\n\\n}\\n\",\"keccak256\":\"0x5b99ebbddcc97f5a825cb21fb377b04c9ad184c4e4b69b92685334b6d42b7636\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../../../interfaces/IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721BaseInternal is IERC721Internal {\\n    error ERC721Base__NotOwnerOrApproved();\\n    error ERC721Base__SelfApproval();\\n    error ERC721Base__BalanceQueryZeroAddress();\\n    error ERC721Base__ERC721ReceiverNotImplemented();\\n    error ERC721Base__InvalidOwner();\\n    error ERC721Base__MintToZeroAddress();\\n    error ERC721Base__NonExistentToken();\\n    error ERC721Base__NotTokenOwner();\\n    error ERC721Base__TokenAlreadyMinted();\\n    error ERC721Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0x3118e4b75bc32c0c5b1f7aca49d30bf618966260179d848171b2ce3e3e0b5373\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { IERC721Enumerable } from './IERC721Enumerable.sol';\\nimport { ERC721EnumerableInternal } from './ERC721EnumerableInternal.sol';\\n\\nabstract contract ERC721Enumerable is\\n    IERC721Enumerable,\\n    ERC721EnumerableInternal\\n{\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view returns (uint256) {\\n        return _tokenOfOwnerByIndex(owner, index);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        return _tokenByIndex(index);\\n    }\\n}\\n\",\"keccak256\":\"0x762db931dbe79f32fa48ba2f66b23b096e9c43e89c09310a98c10ab18b6e73b6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\n\\nabstract contract ERC721EnumerableInternal {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _totalSupply() internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().tokenOwners.length();\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenByIndex(\\n        uint256 index\\n    ) internal view returns (uint256 tokenId) {\\n        (tokenId, ) = ERC721BaseStorage.layout().tokenOwners.at(index);\\n    }\\n}\\n\",\"keccak256\":\"0xcb195fe5d264a1756a67b0c9bf8ac5493c12d25f947290196f15a67d7f3e81ad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Enumerable {\\n    /**\\n     * @notice get total token supply\\n     * @return total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice get token of given owner at given internal storage index\\n     * @param owner token holder to query\\n     * @param index position in owner's token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @notice get token at given internal storage index\\n     * @param index position in global token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x4dcc1d41df336f28a2ea6fa2e7ec17e3d1745938146db5385400238a7e7a1bad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\nimport { IERC721Metadata } from './IERC721Metadata.sol';\\n\\n/**\\n * @title ERC721 metadata extensions\\n */\\nabstract contract ERC721Metadata is IERC721Metadata, ERC721MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view virtual returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721MetadataInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc626c723aa50119564d77caa3749a728526ca8a93b385000e3d52208b6bc40c5\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from '../base/ERC721Base.sol';\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\nimport { ERC721MetadataStorage } from './ERC721MetadataStorage.sol';\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal functions\\n */\\nabstract contract ERC721MetadataInternal is\\n    IERC721MetadataInternal,\\n    ERC721BaseInternal\\n{\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function _name() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function _symbol() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function _tokenURI(\\n        uint256 tokenId\\n    ) internal view virtual returns (string memory) {\\n        if (!_exists(tokenId)) revert ERC721Metadata__NonExistentToken();\\n\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: clear per-token URI data on burn\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (to == address(0)) {\\n            delete ERC721MetadataStorage.layout().tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x087a3302cd70010787bcdb1eb2e225eff23ac2e5ab5f77d6dc26289cb8863a19\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721MetadataInternal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x281dd4dbf81c3acf12bf43bc6e0f77ae68cb2764450cce8121a53c061bf87960\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721BaseInternal } from '../base/IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal interface\\n */\\ninterface IERC721MetadataInternal is IERC721BaseInternal {\\n    error ERC721Metadata__NonExistentToken();\\n}\\n\",\"keccak256\":\"0xd420b4227db773f26b0e40cb6ea4819d340d0ee5ea59d6321c27e79ae7ecca86\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 minValue = bytes32(type(uint256).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(address[] memory array) internal pure returns (address) {\\n        address minValue = address(type(uint160).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 minValue = type(uint256).max;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 maxValue = bytes32(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(address[] memory array) internal pure returns (address) {\\n        address maxValue = address(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 maxValue = 0;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86a2953855b8df5a5ded23a79016f1584b6321ef2c04f44466ebfbb6d23e728c\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Interface for the Multicall utility contract\\n */\\ninterface IMulticall {\\n    /**\\n     * @notice batch function calls to the contract and return the results of each\\n     * @param data array of function call data payloads\\n     * @return results array of function call results\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x39e630bc189607ae119c1208a632009fe418cc4eb2687b28e7fdbe78af7b79b0\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IMulticall } from './IMulticall.sol';\\n\\n/**\\n * @title Utility contract for supporting processing of multiple function calls in a single transaction\\n */\\nabstract contract Multicall is IMulticall {\\n    /**\\n     * @inheritdoc IMulticall\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        unchecked {\\n            for (uint256 i; i < data.length; i++) {\\n                (bool success, bytes memory returndata) = address(this)\\n                    .delegatecall(data[i]);\\n\\n                if (success) {\\n                    results[i] = returndata;\\n                } else {\\n                    assembly {\\n                        returndatacopy(0, 0, returndatasize())\\n                        revert(0, returndatasize())\\n                    }\\n                }\\n            }\\n        }\\n\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x762f15ac4c28be19d0d7fb303ade8dea6ba52ff558fb6fba36df84a839e216b3\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ERC721BaseInternal } from \\\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\\\";\\nimport { ERC721BaseStorage } from \\\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\\\";\\nimport { ERC721Metadata } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\\\";\\nimport { ISolidStateERC721 } from \\\"@solidstate/contracts/token/ERC721/ISolidStateERC721.sol\\\";\\nimport { SolidStateERC721 } from \\\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\\\";\\nimport { ERC721Enumerable } from \\\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\\\";\\nimport { ERC721Base } from \\\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\\\";\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IERC721Metadata } from \\\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\\\";\\nimport { ArcadiansInternal } from \\\"./ArcadiansInternal.sol\\\";\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { EnumerableMap } from '@solidstate/contracts/data/EnumerableMap.sol';\\nimport { Multicall } from \\\"@solidstate/contracts/utils/Multicall.sol\\\";\\nimport { InventoryStorage } from \\\"../inventory/InventoryStorage.sol\\\";\\n\\ncontract ArcadiansFacet is SolidStateERC721, ArcadiansInternal, Multicall {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view override (ERC721Metadata, IERC721Metadata) returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    function claimMerkle(uint totalAmount, bytes32[] memory proof)\\n        external nonReentrant\\n    {\\n        ArcadiansStorage.Layout storage es = ArcadiansStorage.layout();\\n\\n        // Revert if the token was already claimed before\\n        require(es.amountClaimed[msg.sender] < totalAmount, \\\"All tokens claimed\\\");\\n\\n        // Verify if is elegible\\n        bytes memory leaf = abi.encode(msg.sender, totalAmount);\\n        _validateLeaf(proof, leaf);\\n\\n        // Mint token to address\\n        uint amountLeftToClaim = totalAmount - es.amountClaimed[msg.sender];\\n        for (uint256 i = 0; i < amountLeftToClaim; i++) {\\n            _safeMint(msg.sender, _totalSupply());\\n        }\\n        es.amountClaimed[msg.sender] += amountLeftToClaim;\\n        emit ArcadianClaimedMerkle(msg.sender, amountLeftToClaim);\\n    }\\n\\n    function claimedAmountMerkle(address account) external view returns (uint) {\\n        return _claimedAmountMerkle(account);\\n    }\\n\\n    function claimWhitelist(uint amount) external nonReentrant {\\n        _consumeWhitelist(msg.sender, amount);\\n        for (uint i = 0; i < amount; i++) {\\n            _safeMint(msg.sender, _totalSupply());\\n        }\\n    }\\n\\n    function mint()\\n        external payable nonReentrant\\n    {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        require(msg.value == arcadiansSL.mintPrice, \\\"ArcadiansInternal._mint: Invalid pay amount\\\");\\n        uint mintedTokens = _balanceOf(msg.sender) - arcadiansSL.amountClaimed[msg.sender];\\n        require(mintedTokens < arcadiansSL.maxMintPerUser, \\\"ArcadiansInternal._mint: User maximum minted tokens reached\\\");\\n        _safeMint(msg.sender, _totalSupply());\\n    }\\n\\n    function mintAndEquipp(\\n        uint[] calldata slotIds,\\n        InventoryStorage.Item[] calldata itemsToEquip\\n    )\\n        external payable nonReentrant\\n    {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        require(msg.value == arcadiansSL.mintPrice, \\\"ArcadiansInternal._mint: Invalid pay amount\\\");\\n        uint mintedTokens = _balanceOf(msg.sender) - arcadiansSL.amountClaimed[msg.sender];\\n        require(mintedTokens < arcadiansSL.maxMintPerUser, \\\"ArcadiansInternal._mint: User maximum minted tokens reached\\\");\\n        uint tokenId = _totalSupply();\\n        _safeMint(msg.sender, tokenId);\\n        _equipBatch(tokenId, slotIds, itemsToEquip);\\n    }\\n\\n    function setMintPrice(uint newMintPrice) external onlyManager {\\n        _setMintPrice(newMintPrice);\\n    }\\n    function mintPrice() external view returns (uint) {\\n        return _mintPrice();\\n    }\\n\\n    function setMaxMintPerUser(uint newMaxMintPerUser) external onlyManager {\\n        _setMaxMintPerUser(newMaxMintPerUser);\\n    }\\n    function maxMintPerUser() external view returns (uint) {\\n        return _maxMintPerUser();\\n    }\\n\\n    function setBaseURI(string memory newBaseURI) external onlyManager {\\n        _setBaseURI(newBaseURI);\\n    }\\n    function baseURI() external view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n\\n    // required overrides\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableApproveNotSupported();\\n        super._handleApproveMessageValue(operator, tokenId, value);\\n    }\\n\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableTransferNotSupported();\\n        super._handleTransferMessageValue(from, to, tokenId, value);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        _unequipAllUnchecked(tokenId);\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\",\"keccak256\":\"0x6d082d0aa728ae6317d93d57ddf798c0a82551f8c2a04fdf2e2dce0f47fa6178\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ERC721MetadataStorage } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\\\";\\nimport { UintUtils } from '@solidstate/contracts/utils/UintUtils.sol';\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { WhitelistInternal } from \\\"../whitelist/WhitelistInternal.sol\\\";\\nimport { MerkleInternal } from \\\"../merkle/MerkleInternal.sol\\\";\\nimport { InventoryInternal } from \\\"../inventory/InventoryInternal.sol\\\";\\n\\ncontract ArcadiansInternal is RolesInternal, WhitelistInternal, MerkleInternal, InventoryInternal {\\n\\n    event MaxMintPerUserChanged(address indexed by, uint oldMaxMintPerUser, uint newMaxMintPerUser);\\n    event MintPriceChanged(address indexed by, uint oldMintPrice, uint newMintPrice);\\n    event BaseURIChanged(address indexed by, string oldBaseURI, string newBaseURI);\\n    event InventoryAddressChanged(address indexed by, address indexed oldInventoryAddress, address indexed newInventoryAddress);\\n    event ArcadianClaimedMerkle(address indexed to, uint256 indexed amount);\\n\\n    using UintUtils for uint256;\\n\\n    function _setBaseURI(string memory newBaseURI) internal {\\n        ERC721MetadataStorage.Layout storage ERC721SL = ERC721MetadataStorage.layout();\\n        emit BaseURIChanged(msg.sender, ERC721SL.baseURI, newBaseURI);\\n        ERC721SL.baseURI = newBaseURI;\\n    }\\n\\n    function _baseURI() internal view returns (string memory) {\\n        return ERC721MetadataStorage.layout().baseURI;\\n    }\\n\\n    function _claimedAmountMerkle(address account) internal view returns (uint) {\\n        return ArcadiansStorage.layout().amountClaimed[account];\\n    }\\n\\n    function _setMaxMintPerUser(uint newMaxMintPerUser) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MaxMintPerUserChanged(msg.sender, arcadiansSL.maxMintPerUser, newMaxMintPerUser);\\n        arcadiansSL.maxMintPerUser = newMaxMintPerUser;\\n    }\\n\\n    function _mintPrice() internal view returns (uint) {\\n        return ArcadiansStorage.layout().mintPrice;\\n    }\\n\\n    function _setMintPrice(uint newMintPrice) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MintPriceChanged(msg.sender, arcadiansSL.mintPrice, newMintPrice);\\n        arcadiansSL.mintPrice = newMintPrice;\\n    }\\n\\n    function _maxMintPerUser() internal view returns (uint) {\\n        return ArcadiansStorage.layout().maxMintPerUser;\\n    }\\n}\",\"keccak256\":\"0x94a48d94cf571633355adbe62c0fb575c1a50fb76c1ab6f1c4445bff370058ce\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary ArcadiansStorage {\\n\\n    bytes32 constant ARCADIANS_STORAGE_POSITION =\\n        keccak256(\\\"equippable.storage.position\\\");\\n\\n    struct Layout {\\n        // wallet => amount claimed \\n        mapping(address => uint) amountClaimed;\\n        uint maxMintPerUser;\\n        uint mintPrice;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ARCADIANS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x609e1c20a44ac29ea86adc79933e8ebdee9a3a57dd9ae1ee6b672fa49f680f02\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { AddressUtils } from \\\"@solidstate/contracts/utils/AddressUtils.sol\\\";\\nimport { ArrayUtils } from \\\"@solidstate/contracts/utils/ArrayUtils.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { IERC1155 } from \\\"@solidstate/contracts/interfaces/IERC1155.sol\\\";\\n\\ncontract InventoryInternal is\\n    ReentrancyGuard,\\n    RolesInternal\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using AddressUtils for address;\\n\\n    event ArcadiansAddressChanged(address indexed oldArcadiansAddress, address indexed newArcadiansAddress);\\n\\n    event ItemsAllowedInSlotUpdated(\\n        address indexed by,\\n        uint slotId\\n    );\\n\\n    event ItemsEquipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event ItemsUnequipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event SlotCreated(\\n        address indexed by,\\n        uint slotId,\\n        bool unequippable,\\n        InventoryStorage.SlotCategory category\\n    );\\n\\n    modifier onlyValidSlot(uint slotId) {\\n        require(slotId != 0, \\\"InventoryFacet: Slot id can't be zero\\\");\\n        require(slotId <= InventoryStorage.layout().numSlots, \\\"InventoryFacet: Invalid slot\\\");\\n        _;\\n    }\\n\\n    modifier onlyArcadianOwner(uint arcadianId) {\\n        IERC721 arcadiansContract = IERC721(address(this));\\n        require(\\n            msg.sender == arcadiansContract.ownerOf(arcadianId),\\n            \\\"InventoryFacet: Message sender is not owner of the arcadian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyValidAddress(address _address) {\\n        require(_address != address(0), \\\"Invalid Address\\\");\\n        _;\\n    }\\n\\n    modifier onlyContract(address _address) {\\n        require(_address.isContract(), \\\"InventoryFacet: Address given is not a contract\\\");\\n        _;\\n    }\\n\\n    function _numSlots() internal view returns (uint) {\\n        return InventoryStorage.layout().numSlots;\\n    }\\n\\n    function _equip(\\n        uint arcadianId,\\n        uint slotId,\\n        InventoryStorage.Item calldata itemToEquip\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        require(inventorySL.itemSlot[itemToEquip.contractAddress][itemToEquip.id] == slotId, \\\"InventoryFacet.equip: Item not elegible for slot\\\");\\n        require(!inventorySL.slots[slotId].unequippable || inventorySL.equippedItems[arcadianId][slotId].contractAddress == address(0), \\\"InventoryFacet.equip: Unequippable slots already has an item\\\");\\n        _unequipUnchecked(arcadianId, slotId);\\n\\n        IERC1155 erc1155Contract = IERC1155(itemToEquip.contractAddress);\\n        require(\\n            erc1155Contract.balanceOf(msg.sender, itemToEquip.id) > 0,\\n            \\\"InventoryFacet.equip: Message sender does not own enough of that item to equip\\\"\\n        );\\n\\n        erc1155Contract.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            itemToEquip.id,\\n            1,\\n            ''\\n        );\\n\\n        uint[] memory slotsIds = new uint[](1);\\n        slotsIds[0] = slotId;\\n        emit ItemsEquipped(\\n            msg.sender,\\n            arcadianId,\\n            slotsIds\\n        );\\n\\n        inventorySL.equippedItems[arcadianId][slotId] = itemToEquip;\\n        require(_hashBaseItemsUnchecked(arcadianId), \\\"InventoryFacet._equip: Base items are not unique\\\");\\n    }\\n\\n    function _equipBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds,\\n        InventoryStorage.Item[] calldata itemsToEquip\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        // current: 1954977\\n        require(slotIds.length > 0, \\\"InventoryFacet._unequip: Should specify at least one slot\\\");\\n        require(slotIds.length == itemsToEquip.length, \\\"InventoryFacet._equipBatch: Input data length mismatch\\\");\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            uint slotId = slotIds[i];\\n            require(\\n                slotId > 0 && slotId <= numSlots, \\n                \\\"InventoryFacet._equipBatch: Invalid slot\\\"\\n            );\\n            require(\\n                inventorySL.itemSlot[itemsToEquip[i].contractAddress][itemsToEquip[i].id] == slotId, \\n                \\\"InventoryFacet._equipBatch: Item not elegible for slot\\\"\\n            );\\n\\n            IERC1155 erc1155Contract = IERC1155(itemsToEquip[i].contractAddress);\\n            require(\\n                erc1155Contract.balanceOf(msg.sender, itemsToEquip[i].id) > 0,\\n                \\\"InventoryFacet.equip: Sender has insufficient item balance\\\"\\n            );\\n\\n            InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n            require(\\n                !inventorySL.slots[slotId].unequippable || existingItem.contractAddress == address(0), \\n                \\\"InventoryFacet.equip: Unequippable slots already has an item\\\"\\n            );\\n\\n            if (existingItem.contractAddress == itemsToEquip[i].contractAddress && existingItem.id == itemsToEquip[i].id) {\\n                continue;\\n            }\\n\\n            if (existingItem.contractAddress != address(0)) {\\n                erc1155Contract.safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    existingItem.id,\\n                    1,\\n                    ''\\n                );\\n            }\\n\\n            inventorySL.equippedItems[arcadianId][slotId] = itemsToEquip[i];\\n\\n            erc1155Contract.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                itemsToEquip[i].id,\\n                1,\\n                ''\\n            );\\n        }\\n\\n        emit ItemsEquipped(\\n            msg.sender,\\n            arcadianId,\\n            slotIds\\n        );\\n\\n        require(_hashBaseItemsUnchecked(arcadianId), \\\"InventoryFacet._equipBatch: Base items are not unique\\\");\\n    }\\n\\n    function _unequipUnchecked(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n        IERC1155 erc1155Contract = IERC1155(existingItem.contractAddress);\\n        if (existingItem.contractAddress != address(0)) {\\n            erc1155Contract.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                existingItem.id,\\n                1,\\n                ''\\n            );\\n            delete inventorySL.equippedItems[arcadianId][slotId];\\n        }\\n    }\\n\\n    function _unequip(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal onlyArcadianOwner(arcadianId) onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        require(!inventorySL.slots[slotId].unequippable, \\\"InventoryFacet._unequip: Slot is unequippable\\\");\\n        require(inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0), \\\"InventoryFacet._unequip: Slot not equipped\\\");\\n        \\n        _unequipUnchecked(arcadianId, slotId);\\n\\n        uint[] memory slots = new uint[](1);\\n        slots[0] = slotId;\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slots\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _unequipBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        require(slotIds.length > 0, \\\"InventoryFacet._unequip: Should specify at least one slot\\\");\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            uint slotId = slotIds[i];\\n            require(slotId > 0 && slotId <= inventorySL.numSlots, \\\"InventoryFacet._unequip: Invalid slot\\\");\\n            require(!inventorySL.slots[slotId].unequippable, \\\"InventoryFacet._unequip: Slot is unequippable\\\");\\n            require(inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0), \\\"InventoryFacet._unequip: Slot not equipped\\\");\\n            \\n            _unequipUnchecked(arcadianId, slotId);\\n        }\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slotIds\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _unequipAllUnchecked(\\n        uint arcadianId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        uint numUnequippableSlots;\\n        for (uint slotId = 1; slotId <= numSlots; slotId++) {\\n            if (!inventorySL.slots[slotId].unequippable && inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0)) {\\n                numUnequippableSlots++;\\n            }\\n        }\\n\\n        uint[] memory unequippedSlots = new uint[](numUnequippableSlots);\\n        uint counter;\\n        for (uint slotId = 1; slotId <= numSlots; slotId++) {\\n            if (!inventorySL.slots[slotId].unequippable && inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0)) {\\n                _unequipUnchecked(arcadianId, slotId);\\n                unequippedSlots[counter] = slotId;\\n                counter++;\\n            }\\n        }\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            unequippedSlots\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _equipped(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal view returns (InventoryStorage.Item memory) {\\n        return InventoryStorage.layout().equippedItems[arcadianId][slotId];\\n    }\\n\\n    function _equippedAll(\\n        uint arcadianId\\n    ) internal view returns (InventoryStorage.Item[] memory) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        InventoryStorage.Item[] memory items = new InventoryStorage.Item[](numSlots);\\n        for (uint i = 0; i < numSlots; i++) {\\n            items[i] = inventorySL.equippedItems[arcadianId][i+1];\\n        }\\n        return items;\\n    }\\n\\n    function _isArcadianUnique(\\n        uint arcadianId,\\n        uint[] calldata slotsIds,\\n        InventoryStorage.Item[] calldata items\\n    ) internal view returns (bool) {\\n        require(slotsIds.length == items.length, \\\"InventoryFacet._isArcadianUnique: Input data length mismatch\\\");\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n\\n        uint baseSlotsLength = baseSlots.length();\\n        uint[] memory baseSlotsIds = new uint[](baseSlotsLength);\\n        InventoryStorage.Item[] memory baseItems = new InventoryStorage.Item[](baseSlotsLength);\\n        uint numSlots = inventorySL.numSlots;\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            require(slotId > 0 && slotId <= numSlots, \\\"InventoryFacet._isArcadianUnique: Invalid slot\\\");\\n            baseSlotsIds[i] = slotId;\\n            baseItems[i] = inventorySL.equippedItems[arcadianId][slotId];\\n        }\\n\\n        for (uint i = 0; i < slotsIds.length; i++) {\\n            if (!baseSlots.contains(slotsIds[i])) continue;\\n            baseSlotsIds[i] = slotsIds[i];\\n            baseItems[i].contractAddress = items[i].contractAddress;\\n            baseItems[i].id = items[i].id;\\n        }\\n\\n        bytes memory encodedItems;\\n        for (uint i = 0; i < baseSlotsIds.length; i++) {\\n            encodedItems = abi.encodePacked(encodedItems, baseSlotsIds[i], baseItems[i].contractAddress, baseItems[i].id);\\n        }\\n\\n        return !inventorySL.baseItemsHashesSet.contains(keccak256(encodedItems));\\n    }\\n\\n    function _hashBaseItemsUnchecked(\\n        uint arcadianId\\n    ) internal returns (bool isUnique) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        bytes memory encodedItems;\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n        uint baseSlotsLength = baseSlots.length();\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotId];\\n            encodedItems = abi.encodePacked(encodedItems, slotId, equippedItem.contractAddress, equippedItem.id);\\n        }\\n        bytes32 baseItemsHash = keccak256(encodedItems);\\n        isUnique = !inventorySL.baseItemsHashesSet.contains(baseItemsHash);\\n        inventorySL.baseItemsHashesSet.remove(inventorySL.arcadiansBaseItemsHashes[arcadianId]);\\n        inventorySL.baseItemsHashesSet.add(baseItemsHash);\\n        inventorySL.arcadiansBaseItemsHashes[arcadianId] = baseItemsHash;\\n    }\\n\\n    function _createSlot(\\n        bool unequippable,\\n        InventoryStorage.SlotCategory category,\\n        InventoryStorage.Item[] calldata allowedItems\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        // slots are 1-index\\n        inventorySL.numSlots += 1;\\n        uint newSlot = inventorySL.numSlots;\\n        inventorySL.slots[newSlot].unequippable = unequippable;\\n        inventorySL.slots[newSlot].category = category;\\n\\n        if (allowedItems.length > 0) {\\n            _allowItemsInSlot(newSlot, allowedItems);\\n        }\\n\\n        emit SlotCreated(msg.sender, newSlot, unequippable, category);\\n    }\\n\\n    function _allowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < items.length; i++) {\\n            require(items[i].contractAddress.isContract(), \\\"InventoryFacet._allowItemsInSlot: Invalid items contract address\\\");\\n            require(inventorySL.itemSlot[items[i].contractAddress][items[i].id] != slotId, \\\"InventoryFacet._allowItemsInSlot: Item already allowed in the slot\\\");\\n\\n            if (inventorySL.itemSlot[items[i].contractAddress][items[i].id] > 0) {\\n                _disallowItemInSlotUnchecked(slotId, items[i]);\\n            }\\n            inventorySL.allowedItems[slotId].push(items[i]);\\n            inventorySL.itemSlot[items[i].contractAddress][items[i].id] = slotId;\\n        }\\n        inventorySL.categoryToSlots[inventorySL.slots[slotId].category].add(slotId);\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < items.length; i++) {\\n            require(inventorySL.itemSlot[items[i].contractAddress][items[i].id] == slotId, \\\"InventoryFacet._disallowItemsInSlot: Item already not allowed in the slot\\\");\\n            _disallowItemInSlotUnchecked(slotId, items[i]);\\n        }\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemInSlotUnchecked(\\n        uint slotId,\\n        InventoryStorage.Item calldata item\\n    ) internal virtual {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        for (uint i = 0; i < inventorySL.allowedItems[slotId].length; i++) {\\n            if (inventorySL.allowedItems[slotId][i].id == item.id) {\\n                inventorySL.allowedItems[slotId][i] = inventorySL.allowedItems[slotId][inventorySL.allowedItems[slotId].length-1];\\n                delete inventorySL.allowedItems[slotId][inventorySL.allowedItems[slotId].length-1];\\n                inventorySL.allowedItems[slotId].pop();\\n                break;\\n            }\\n        }\\n        \\n        delete inventorySL.itemSlot[item.contractAddress][item.id];\\n    }\\n\\n    function _allowedSlot(InventoryStorage.Item calldata item) internal view returns (uint) {\\n        return InventoryStorage.layout().itemSlot[item.contractAddress][item.id];\\n    }\\n\\n    function _allowedItems(uint slotId) internal view onlyValidSlot(slotId) returns (InventoryStorage.Item[] memory) {\\n        return InventoryStorage.layout().allowedItems[slotId];\\n    }\\n\\n    function _slot(uint slotId) internal view returns (InventoryStorage.Slot storage) {\\n        return InventoryStorage.layout().slots[slotId];\\n    }\\n}\",\"keccak256\":\"0x496e6792469521e73a73ed8c8388a6b0a699d21b3af672086e69841f048ae555\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\n\\n/**\\nLibInventory defines the storage structure used by the Inventory contract as a facet for an EIP-2535 Diamond\\nproxy.\\n */\\nlibrary InventoryStorage {\\n    bytes32 constant INVENTORY_STORAGE_POSITION =\\n        keccak256(\\\"inventory.storage.position\\\");\\n\\n    uint constant ERC721_ITEM_TYPE = 721;\\n    uint constant ERC1155_ITEM_TYPE = 1155;\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum SlotCategory { Base, Equippment, Cosmetic }\\n\\n    // EquippedItem: holds the information of the currently equipped item for a specific slot in an arcadian\\n    struct Item {\\n        address contractAddress;\\n        uint id;\\n    }\\n\\n    // Slot: Holds the general information for a slot\\n    struct Slot {\\n        bool unequippable;\\n        SlotCategory category;\\n    }\\n\\n    struct Layout {\\n        uint numSlots;\\n\\n        // Slot id => Slot\\n        mapping(uint => Slot) slots;\\n\\n        mapping(SlotCategory => EnumerableSet.UintSet) categoryToSlots;\\n\\n        // arcadian id => slot id => EquippedItem\\n        mapping(uint => mapping(uint => Item)) equippedItems;\\n\\n        // Slot id => item address => items allowed\\n        mapping(uint => InventoryStorage.Item[]) allowedItems;\\n        // item address => item id => allowed slot\\n        mapping(address => mapping(uint => uint)) itemSlot;\\n\\n        // base items hash => arcadian id\\n        EnumerableSet.Bytes32Set baseItemsHashesSet;\\n        mapping(uint => bytes32) arcadiansBaseItemsHashes;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage istore)\\n    {\\n        bytes32 position = INVENTORY_STORAGE_POSITION;\\n        assembly {\\n            istore.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xa3ef2362d82e4f7f58c73f0f3c0c939ae5e348a2219b1d6a9732ce77a1b37393\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/merkle/MerkleInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { MerkleProof } from \\\"@solidstate/contracts/cryptography/MerkleProof.sol\\\";\\nimport { MerkleStorage } from \\\"./MerkleStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract MerkleInternal is RolesInternal {\\n\\n    function _merkleRoot() internal view returns (bytes32) {\\n        return MerkleStorage.layout().merkleRoot;\\n    }\\n\\n    function _updateMerkleRoot(bytes32 newMerkleRoot) onlyManager internal {\\n        MerkleStorage.layout().merkleRoot = newMerkleRoot;\\n    }\\n\\n    // To create 'leaf' use abi.encode(leafProp1, leafProp2, ...)\\n    function _validateLeaf(bytes32[] memory proof, bytes memory _leaf) internal view returns (bool isValid) {\\n        bytes32 leaf = keccak256(bytes.concat(keccak256(_leaf)));\\n        isValid = MerkleProof.verify(proof, MerkleStorage.layout().merkleRoot, leaf);\\n        require(isValid, \\\"Data not included in merkle\\\");\\n    }\\n}\",\"keccak256\":\"0x593c2373853e01accb00403182690a50f2b2f19d9e86c58e937acef0f9e46a9d\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/merkle/MerkleStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary MerkleStorage {\\n\\n    bytes32 constant MERKLE_STORAGE_POSITION =\\n        keccak256(\\\"merkle.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 merkleRoot;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = MERKLE_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x5ed5d36d30cda447858ff4ad784c43281a332ef4be8644681327f8fab3c71ce8\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(_defaultAdminRole());\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        _checkRole(_managerRole());\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        _checkRole(_minterRole());\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _minterRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().minterRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.minterRole = keccak256(\\\"minter.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n        _grantRole(_minterRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0xd3fa8bcc9380c117c2e22aeb6b4489ad01c31433b3c2d412742b681c94cf407d\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 minterRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x203cfbe268a1ac5fe32593c66ace04b576dfb2e25173e02654e504cf0de44d71\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { MerkleProof } from \\\"@solidstate/contracts/cryptography/MerkleProof.sol\\\";\\nimport { WhitelistStorage } from \\\"./WhitelistStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract WhitelistInternal is RolesInternal {\\n\\n    event WhitelistBalanceChanged(address account, int amount, uint totalElegibleAmount, uint totalClaimedAmount);\\n\\n    function _whitelistClaimed(address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().claimed[account];\\n    }\\n\\n    function _whitelistBalance(address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().elegible[account];\\n    }\\n\\n    function _consumeWhitelist(address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        require(whitelistSL.elegible[account] >= amount, \\\"WhitelistInternal._consumeWhitelist: amount exceeds elegible amount\\\");\\n        whitelistSL.elegible[account] -= amount;\\n        whitelistSL.claimed[account] += amount;\\n        emit WhitelistBalanceChanged(msg.sender, int(amount), whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _addToWhitelist(address account, uint amount) onlyManager internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        whitelistSL.elegible[account] += amount;\\n        emit WhitelistBalanceChanged(msg.sender, int(amount), whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _addToWhitelistBatch(address[] calldata accounts, uint[] calldata amounts) onlyManager internal {\\n        require(accounts.length == amounts.length, \\\"WhitelistInternal._addToWhitelistBatch: Inputs length mismatch\\\");\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        for (uint i = 0; i < accounts.length; i++) {\\n            WhitelistStorage.layout().elegible[accounts[i]] += amounts[i];\\n            emit WhitelistBalanceChanged(msg.sender, int(amounts[i]), whitelistSL.elegible[accounts[i]], whitelistSL.claimed[accounts[i]]);\\n        }\\n    }\\n}\",\"keccak256\":\"0xac2ac000e58d976ce186d9c4e48c7f71e2fd3fe80cd1a3ce6ee1da86a8f80093\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary WhitelistStorage {\\n\\n    bytes32 constant WHITELIST_STORAGE_POSITION =\\n        keccak256(\\\"whitelist.storage.position\\\");\\n\\n    struct Layout {\\n        mapping(address => uint) claimed;\\n        mapping(address => uint) elegible;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = WHITELIST_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x1eae9928eb6da719f50ca96c4081e0d83e8d5cfb6dee9ca57c4f0e3a5fc9cd39\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613cff806100206000396000f3fe6080604052600436106101b75760003560e01c80636c0360eb116100ec578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd14610483578063d304c4bc146104a3578063e985e9c5146104b8578063f4a0a528146104d857600080fd5b8063a22cb46514610423578063ac9650d814610443578063b88d4fde1461047057600080fd5b806383ccaef7116100c657806383ccaef7146103ae5780638e10d554146103ce578063958944f1146103ee57806395d89b411461040e57600080fd5b80636c0360eb1461036657806370a082311461037b57806382d91c3b1461039b57600080fd5b806323b872dd116101595780634f6ccce7116101335780634f6ccce7146102f157806355f804b3146103115780636352211e146103315780636817c76c1461035157600080fd5b806323b872dd146102ab5780632f745c59146102be57806342842e0e146102de57600080fd5b8063095ea7b311610195578063095ea7b31461024b5780631249c58b1461026057806318160ddd146102685780631fa44f0e1461028b57600080fd5b806301ffc9a7146101bc57806306fdde03146101f1578063081812fc14610213575b600080fd5b3480156101c857600080fd5b506101dc6101d73660046130bb565b6104f8565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061020661053b565b6040516101e89190613128565b34801561021f57600080fd5b5061023361022e36600461313b565b61054a565b6040516001600160a01b0390911681526020016101e8565b61025e610259366004613169565b610555565b005b61025e610563565b34801561027457600080fd5b5061027d610666565b6040519081526020016101e8565b34801561029757600080fd5b5061027d6102a6366004613195565b610670565b61025e6102b93660046131b2565b61069b565b3480156102ca57600080fd5b5061027d6102d9366004613169565b6106ab565b61025e6102ec3660046131b2565b6106be565b3480156102fd57600080fd5b5061027d61030c36600461313b565b6106c9565b34801561031d57600080fd5b5061025e61032c366004613292565b6106d4565b34801561033d57600080fd5b5061023361034c36600461313b565b610710565b34801561035d57600080fd5b5061027d61071b565b34801561037257600080fd5b50610206610745565b34801561038757600080fd5b5061027d610396366004613195565b61074f565b61025e6103a9366004613320565b61075a565b3480156103ba57600080fd5b5061025e6103c936600461313b565b61086c565b3480156103da57600080fd5b5061025e6103e936600461313b565b6108a0565b3480156103fa57600080fd5b5061025e6104093660046133ba565b610922565b34801561041a57600080fd5b50610206610a9b565b34801561042f57600080fd5b5061025e61043e36600461346c565b610aa5565b34801561044f57600080fd5b5061046361045e3660046134aa565b610aaf565b6040516101e891906134ec565b61025e61047e36600461354e565b610bca565b34801561048f57600080fd5b5061020661049e36600461313b565b610bdc565b3480156104af57600080fd5b5061027d610be7565b3480156104c457600080fd5b506101dc6104d33660046135ce565b610c11565b3480156104e457600080fd5b5061025e6104f336600461313b565b610c1d565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b6060610545610c51565b905090565b600061053582610cf0565b61055f8282610d53565b5050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036105a657604051635db5c7cd60e11b815260040160405180910390fd5b600281557f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746554600080516020613c8a8339815191529034146106035760405162461bcd60e51b81526004016105fa906135fc565b60405180910390fd5b33600081815260208390526040812054909161061e90610e56565b610628919061365d565b90508160010154811061064d5760405162461bcd60e51b81526004016105fa90613670565b61065e33610659610ebf565b610ed8565b505060019055565b6000610545610ebf565b6001600160a01b0381166000908152600080516020613c8a8339815191526020526040812054610535565b6106a6838383610ef2565b505050565b60006106b78383610f30565b9392505050565b6106a6838383610f71565b600061053582610f8c565b6107046106ff7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b610fa6565b61070d81610fb0565b50565b60006105358261102a565b60006105457f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74655490565b606061054561106e565b600061053582610e56565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361079d57604051635db5c7cd60e11b815260040160405180910390fd5b600281557f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746554600080516020613c8a8339815191529034146107f15760405162461bcd60e51b81526004016105fa906135fc565b33600081815260208390526040812054909161080c90610e56565b610816919061365d565b90508160010154811061083b5760405162461bcd60e51b81526004016105fa90613670565b6000610845610ebf565b90506108513382610ed8565b61085e818989898961108d565b505060019091555050505050565b6108976106ff7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61070d8161187f565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036108e357604051635db5c7cd60e11b815260040160405180910390fd5b600281556108f133836118f2565b60005b8281101561091a5761090833610659610ebf565b80610912816136cd565b9150506108f4565b506001905550565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361096557604051635db5c7cd60e11b815260040160405180910390fd5b60028155336000908152600080516020613c8a833981519152602081905260409091205484116109cc5760405162461bcd60e51b8152602060048201526012602482015271105b1b081d1bdad95b9cc818db185a5b595960721b60448201526064016105fa565b6040805133602082015280820186905281518082038301815260609091019091526109f78482611a9b565b5033600090815260208390526040812054610a12908761365d565b905060005b81811015610a3d57610a2b33610659610ebf565b80610a35816136cd565b915050610a17565b503360009081526020849052604081208054839290610a5d9084906136e6565b9091555050604051819033907fc169c3974ad5176ea41e766768be74079ba8c86a136ed66c5ac85e602782db7d90600090a350506001909155505050565b6060610545611b51565b61055f8282611b70565b60608167ffffffffffffffff811115610aca57610aca6131f3565b604051908082528060200260200182016040528015610afd57816020015b6060815260200190600190039081610ae85790505b50905060005b82811015610bc35760008030868685818110610b2157610b216136f9565b9050602002810190610b33919061370f565b604051610b41929190613756565b600060405180830381855af49150503d8060008114610b7c576040519150601f19603f3d011682016040523d82523d6000602084013e610b81565b606091505b50915091508115610baf5780848481518110610b9f57610b9f6136f9565b6020026020010181905250610bb9565b3d6000803e3d6000fd5b5050600101610b03565b5092915050565b610bd684848484611c24565b50505050565b606061053582611c63565b60006105457f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645490565b60006106b78383611e44565b610c486106ff7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61070d81611e91565b6060600080516020613caa8339815191528054610c6d90613766565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9990613766565b8015610ce65780601f10610cbb57610100808354040283529160200191610ce6565b820191906000526020600020905b815481529060010190602001808311610cc957829003601f168201915b5050505050905090565b6000610cfb82611f04565b610d185760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b610d5e828234611f1e565b6000610d698261102a565b9050806001600160a01b0316836001600160a01b031603610d9d5760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b03821614801590610dbd5750610dbb8133611e44565b155b15610ddb57604051632f5de44f60e01b815260040160405180910390fd5b60008281527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a9602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006001600160a01b038216610e7f57604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902061053590611f48565b6000610545600080516020613c6a833981519152611f48565b61055f828260405180602001604052806000815250611f52565b610efe83838334611f86565b610f083382611fb1565b610f2557604051632f5de44f60e01b815260040160405180910390fd5b6106a6838383612037565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604081206106b790836121c6565b6106a683838360405180602001604052806000815250611c24565b6000610bc3600080516020613c6a833981519152836121d2565b61070d81336121f0565b604051600080516020613caa8339815191529033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea90611014907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b39086906137a0565b60405180910390a2600281016106a6838261388d565b600080611045600080516020613c6a83398151915284612252565b90506001600160a01b03811661053557604051637e1a7d8b60e01b815260040160405180910390fd5b6060600080516020613caa8339815191526002018054610c6d90613766565b6040516331a9108f60e11b815260048101869052859030908190636352211e90602401602060405180830381865afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f1919061394d565b6001600160a01b0316336001600160a01b0316146111775760405162461bcd60e51b815260206004820152603b60248201527f496e76656e746f727946616365743a204d6573736167652073656e646572206960448201527f73206e6f74206f776e6572206f662074686520617263616469616e000000000060648201526084016105fa565b846111ea5760405162461bcd60e51b815260206004820152603960248201527f496e76656e746f727946616365742e5f756e65717569703a2053686f756c642060448201527f73706563696679206174206c65617374206f6e6520736c6f740000000000000060648201526084016105fa565b84831461125f5760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a20496e707560448201527f742064617461206c656e677468206d69736d617463680000000000000000000060648201526084016105fa565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436805460005b878110156117bc5760008989838181106112a1576112a16136f9565b9050602002013590506000811180156112ba5750828111155b6113175760405162461bcd60e51b815260206004820152602860248201527f496e76656e746f727946616365742e5f657175697042617463683a20496e76616044820152671b1a59081cdb1bdd60c21b60648201526084016105fa565b808460050160008a8a86818110611330576113306136f9565b6113469260206040909202019081019150613195565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a8681811061137a5761137a6136f9565b90506040020160200135815260200190815260200160002054146114065760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a204974656d60448201527f206e6f7420656c656769626c6520666f7220736c6f740000000000000000000060648201526084016105fa565b600088888481811061141a5761141a6136f9565b6114309260206040909202019081019150613195565b90506000816001600160a01b031662fdd58e338c8c88818110611455576114556136f9565b905060400201602001356040518363ffffffff1660e01b81526004016114909291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156114ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d1919061396a565b116115445760405162461bcd60e51b815260206004820152603a60248201527f496e76656e746f727946616365742e65717569703a2053656e6465722068617360448201527f20696e73756666696369656e74206974656d2062616c616e636500000000000060648201526084016105fa565b60008c815260038601602090815260408083208584528252808320600189019092529091205460ff161580611581575080546001600160a01b0316155b6115f35760405162461bcd60e51b815260206004820152603c60248201527f496e76656e746f727946616365742e65717569703a20556e657175697070616260448201527f6c6520736c6f747320616c72656164792068617320616e206974656d0000000060648201526084016105fa565b898985818110611605576116056136f9565b61161b9260206040909202019081019150613195565b81546001600160a01b0390811691161480156116555750898985818110611644576116446136f9565b905060400201602001358160010154145b15611662575050506117aa565b80546001600160a01b0316156116da57600180820154604051637921219560e11b81526001600160a01b0385169263f242432a926116a7923092339291600401613983565b600060405180830381600087803b1580156116c157600080fd5b505af11580156116d5573d6000803e3d6000fd5b505050505b8989858181106116ec576116ec6136f9565b9050604002018660030160008f81526020019081526020016000206000858152602001908152602001600020818161172491906139bb565b50506001600160a01b03821663f242432a33308d8d89818110611749576117496136f9565b9050604002016020013560016040518563ffffffff1660e01b81526004016117749493929190613983565b600060405180830381600087803b15801561178e57600080fd5b505af11580156117a2573d6000803e3d6000fd5b505050505050505b806117b4816136cd565b915050611285565b5088336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f188618a8a6040516117f99291906139f5565b60405180910390a361180a8961225e565b6118745760405162461bcd60e51b815260206004820152603560248201527f496e76656e746f727946616365742e5f657175697042617463683a2042617365604482015274206974656d7320617265206e6f7420756e6971756560581b60648201526084016105fa565b505050505050505050565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645460408051918252602082018390528051600080516020613c8a8339815191529233927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92918290030190a260010155565b6001600160a01b03821660009081527ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb358960205260409020547ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb3588908211156119cd5760405162461bcd60e51b815260206004820152604360248201527f57686974656c697374496e7465726e616c2e5f636f6e73756d6557686974656c60448201527f6973743a20616d6f756e74206578636565647320656c656769626c6520616d6f6064820152621d5b9d60ea1b608482015260a4016105fa565b6001600160a01b0383166000908152600182016020526040812080548492906119f790849061365d565b90915550506001600160a01b03831660009081526020829052604081208054849290611a249084906136e6565b90915550506001600160a01b0383166000908152600182016020908152604080832054848352928190205481513381529283018690529082019290925260608101919091527fdb4f4d78cc1c961ddedd2f43596d41d07e607b7517c7106d83f6421215e1f6a79060800160405180910390a1505050565b6000808280519060200120604051602001611ab891815260200190565b604051602081830303815290604052805190602001209050611b0284611afb7f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c0890565b54836123b7565b915081610bc35760405162461bcd60e51b815260206004820152601b60248201527f44617461206e6f7420696e636c7564656420696e206d65726b6c65000000000060448201526064016105fa565b6060600080516020613caa8339815191526001018054610c6d90613766565b336001600160a01b03831603611b995760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611c3084848434611f86565b611c3a3383611fb1565b611c5757604051632f5de44f60e01b815260040160405180910390fd5b610bd68484848461245c565b6060611c6e82611f04565b611c8a57604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604081208054600080516020613caa833981519152929190611cd490613766565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0090613766565b8015611d4d5780601f10611d2257610100808354040283529160200191611d4d565b820191906000526020600020905b815481529060010190602001808311611d3057829003601f168201915b505050505090506000826002018054611d6590613766565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9190613766565b8015611dde5780601f10611db357610100808354040283529160200191611dde565b820191906000526020600020905b815481529060010190602001808311611dc157829003601f168201915b505050505090508051600003611df657509392505050565b815115611e29578082604051602001611e10929190613a2e565b6040516020818303038152906040529350505050919050565b80611e3386612490565b604051602001611e10929190613a2e565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74655460408051918252602082018390528051600080516020613c8a8339815191529233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260020155565b6000610535600080516020613c6a83398151915283612591565b8015611f3d5760405163b56d7c1b60e01b815260040160405180910390fd5b6106a68383836125a9565b6000610535825490565b611f5c83836125c8565b611f6960008484846126bd565b6106a657604051639ff10cdd60e01b815260040160405180910390fd5b8015611fa5576040516322b1813960e01b815260040160405180910390fd5b610bd68484848461278e565b6000611fbc82611f04565b611fd95760405163c1b843ef60e01b815260040160405180910390fd5b6000611fe48361102a565b9050806001600160a01b0316846001600160a01b0316148061201f5750836001600160a01b031661201484610cf0565b6001600160a01b0316145b8061202f575061202f8185611e44565b949350505050565b60006120428261102a565b9050836001600160a01b0316816001600160a01b03161461207657604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b03831661209d576040516340311a0960e01b815260040160405180910390fd5b6120a88484846127b2565b6001600160a01b03841660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020613c6a833981519152906120f990846127c6565b506001600160a01b0384166000908152600282016020526040902061211e90846127d2565b5061212a8184866127de565b50600083815260038201602052604080822080546001600160a01b0319169055518491906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a482846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60006106b783836127f4565b60008080806121e18686612840565b909450925050505b9250929050565b6121fa82826128a3565b61055f57612210816001600160a01b03166128da565b61221b8360206128ec565b60405160200161222c929190613a5d565b60408051601f198184030181529082905262461bcd60e51b82526105fa91600401613128565b60006106b78383612a3f565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43660607f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9836122d582611f48565b905060005b818110156123565760006122ee84836121c6565b600089815260038801602090815260408083208484528252918290208054600182015493519495509093612330938a9387936001600160a01b03169201613ad2565b60405160208183030381529060405295505050808061234e906136cd565b9150506122da565b508251602084012061236b6006860182612591565b60008881526008870160205260409020549015965061238e9060068701906127c6565b5061239c60068601826127d2565b50600096875260089094016020525050604090932055919050565b600081815b85518110156124515760008682815181106123d9576123d96136f9565b6020026020010151905080831161241b576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250612448565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b506001016123bc565b509092149392505050565b612467848484612037565b612473848484846126bd565b610bd657604051639ff10cdd60e01b815260040160405180910390fd5b6060816000036124b75750506040805180820190915260018152600360fc1b602082015290565b8160005b81156124e157806124cb816136cd565b91506124da9050600a83613b29565b91506124bb565b60008167ffffffffffffffff8111156124fc576124fc6131f3565b6040519080825280601f01601f191660200182016040528015612526576020820181803683370190505b5090505b841561202f5761253b60018361365d565b9150612548600a86613b3d565b6125539060306136e6565b60f81b818381518110612568576125686136f9565b60200101906001600160f81b031916908160001a90535061258a600a86613b29565b945061252a565b600081815260018301602052604081205415156106b7565b80156106a65760405163b56d7c1b60e01b815260040160405180910390fd5b6001600160a01b0382166125ef576040516311f2988d60e11b815260040160405180910390fd5b6125f881611f04565b1561261657604051630d86bb7b60e31b815260040160405180910390fd5b612622600083836127b2565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020613c6a8339815191529061267390836127d2565b5061267f8183856127de565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b60006001600160a01b0384163b6126d65750600161202f565b600061275763150b7a0260e01b338887876040516024016126fa9493929190613b51565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613c38603291396001600160a01b0388169190612aa3565b905060008180602001905181019061276f9190613b8d565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b80156127ad576040516322b1813960e01b815260040160405180910390fd5b610bd6565b6127bb81612ab2565b6106a6838383612c84565b60006106b78383612c8f565b60006106b78383612d49565b600061202f84846001600160a01b038516612d8c565b815460009082106128185760405163e637bf3b60e01b815260040160405180910390fd5b82600001828154811061282d5761282d6136f9565b9060005260206000200154905092915050565b8154600090819083106128665760405163022fd82760e31b815260040160405180910390fd5b600084600001848154811061287d5761287d6136f9565b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206106b79083612e2b565b60606105356001600160a01b03831660145b606060006128fb836002613baa565b6129069060026136e6565b67ffffffffffffffff81111561291e5761291e6131f3565b6040519080825280601f01601f191660200182016040528015612948576020820181803683370190505b509050600360fc1b81600081518110612963576129636136f9565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612992576129926136f9565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115612a1f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106129e2576129e26136f9565b1a60f81b8282815181106129f8576129f86136f9565b60200101906001600160f81b031916908160001a90535060049490941c93600019016129b1565b5083156106b75760405163c913478560e01b815260040160405180910390fd5b6000818152600183016020526040812054808203612a7057604051633d547ec560e21b815260040160405180910390fd5b836000016001820381548110612a8857612a886136f9565b90600052602060002090600202016001015491505092915050565b606061202f8484600085612e4d565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4368054600060015b828111612b4a57600081815260018501602052604090205460ff16158015612b255750600085815260038501602090815260408083208484529091529020546001600160a01b031615155b15612b385781612b34816136cd565b9250505b80612b42816136cd565b915050612ada565b5060008167ffffffffffffffff811115612b6657612b666131f3565b604051908082528060200260200182016040528015612b8f578160200160208202803683370190505b509050600060015b848111612c2f57600081815260018701602052604090205460ff16158015612be25750600087815260038701602090815260408083208484529091529020546001600160a01b031615155b15612c1d57612bf18782612f0a565b80838381518110612c0457612c046136f9565b602090810291909101015281612c19816136cd565b9250505b80612c27816136cd565b915050612b97565b5085336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab6384604051612c6a9190613bc1565b60405180910390a3612c7b8661225e565b50505050505050565b6106a6838383613012565b60008181526001830160205260408120548015610bc357835460009085906000198101908110612cc157612cc16136f9565b9060005260206000200154905080856000016001840381548110612ce757612ce76136f9565b6000918252602080832090910192909255918252600186019052604090208190558354849080612d1957612d19613c05565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b6000818152600183016020526040812054610535575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6000828152600184016020526040812054808203612df35750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556106b7565b82856000016001830381548110612e0c57612e0c6136f9565b90600052602060002090600202016001018190555060009150506106b7565b6001600160a01b038116600090815260018301602052604081205415156106b7565b6060843b612e6e57604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b03168587604051612e8a9190613c1b565b60006040518083038185875af1925050503d8060008114612ec7576040519150601f19603f3d011682016040523d82523d6000602084013e612ecc565b606091505b50915091508115612ee057915061202f9050565b805115612ef05780518082602001fd5b8360405162461bcd60e51b81526004016105fa9190613128565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43960209081526040808320848452909152902080547ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43691906001600160a01b0316801561300b57600180830154604051637921219560e11b81526001600160a01b0384169263f242432a92612fab923092339291600401613983565b600060405180830381600087803b158015612fc557600080fd5b505af1158015612fd9573d6000803e3d6000fd5b50505060008681526003850160209081526040808320888452909152812080546001600160a01b031916815560010155505b5050505050565b6106a68383836001600160a01b0382166106a65760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040902080546106a6919061306390613766565b6000825580601f10613073575050565b601f01602090049060005260206000209081019061070d91905b808211156130a1576000815560010161308d565b5090565b6001600160e01b03198116811461070d57600080fd5b6000602082840312156130cd57600080fd5b81356106b7816130a5565b60005b838110156130f35781810151838201526020016130db565b50506000910152565b600081518084526131148160208601602086016130d8565b601f01601f19169290920160200192915050565b6020815260006106b760208301846130fc565b60006020828403121561314d57600080fd5b5035919050565b6001600160a01b038116811461070d57600080fd5b6000806040838503121561317c57600080fd5b823561318781613154565b946020939093013593505050565b6000602082840312156131a757600080fd5b81356106b781613154565b6000806000606084860312156131c757600080fd5b83356131d281613154565b925060208401356131e281613154565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613232576132326131f3565b604052919050565b600067ffffffffffffffff831115613254576132546131f3565b613267601f8401601f1916602001613209565b905082815283838301111561327b57600080fd5b828260208301376000602084830101529392505050565b6000602082840312156132a457600080fd5b813567ffffffffffffffff8111156132bb57600080fd5b8201601f810184136132cc57600080fd5b61202f8482356020840161323a565b60008083601f8401126132ed57600080fd5b50813567ffffffffffffffff81111561330557600080fd5b6020830191508360208260051b85010111156121e957600080fd5b6000806000806040858703121561333657600080fd5b843567ffffffffffffffff8082111561334e57600080fd5b61335a888389016132db565b9096509450602087013591508082111561337357600080fd5b818701915087601f83011261338757600080fd5b81358181111561339657600080fd5b8860208260061b85010111156133ab57600080fd5b95989497505060200194505050565b600080604083850312156133cd57600080fd5b8235915060208084013567ffffffffffffffff808211156133ed57600080fd5b818601915086601f83011261340157600080fd5b813581811115613413576134136131f3565b8060051b9150613424848301613209565b818152918301840191848101908984111561343e57600080fd5b938501935b8385101561345c57843582529385019390850190613443565b8096505050505050509250929050565b6000806040838503121561347f57600080fd5b823561348a81613154565b91506020830135801515811461349f57600080fd5b809150509250929050565b600080602083850312156134bd57600080fd5b823567ffffffffffffffff8111156134d457600080fd5b6134e0858286016132db565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561354157603f1988860301845261352f8583516130fc565b94509285019290850190600101613513565b5092979650505050505050565b6000806000806080858703121561356457600080fd5b843561356f81613154565b9350602085013561357f81613154565b925060408501359150606085013567ffffffffffffffff8111156135a257600080fd5b8501601f810187136135b357600080fd5b6135c28782356020840161323a565b91505092959194509250565b600080604083850312156135e157600080fd5b82356135ec81613154565b9150602083013561349f81613154565b6020808252602b908201527f417263616469616e73496e7465726e616c2e5f6d696e743a20496e76616c696460408201526a081c185e48185b5bdd5b9d60aa1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561053557610535613647565b6020808252603b908201527f417263616469616e73496e7465726e616c2e5f6d696e743a2055736572206d6160408201527f78696d756d206d696e74656420746f6b656e7320726561636865640000000000606082015260800190565b6000600182016136df576136df613647565b5060010190565b8082018082111561053557610535613647565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261372657600080fd5b83018035915067ffffffffffffffff82111561374157600080fd5b6020019150368190038213156121e957600080fd5b8183823760009101908152919050565b600181811c9082168061377a57607f821691505b60208210810361379a57634e487b7160e01b600052602260045260246000fd5b50919050565b6040815260008084546137b281613766565b80604086015260606001808416600081146137d457600181146137ee5761381f565b60ff1985168884015283151560051b88018301955061381f565b8960005260208060002060005b868110156138165781548b82018701529084019082016137fb565b8a018501975050505b5050505050828103602084015261383681856130fc565b95945050505050565b601f8211156106a657600081815260208120601f850160051c810160208610156138665750805b601f850160051c820191505b8181101561388557828155600101613872565b505050505050565b815167ffffffffffffffff8111156138a7576138a76131f3565b6138bb816138b58454613766565b8461383f565b602080601f8311600181146138f057600084156138d85750858301515b600019600386901b1c1916600185901b178555613885565b600085815260208120601f198616915b8281101561391f57888601518255948401946001909101908401613900565b508582101561393d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561395f57600080fd5b81516106b781613154565b60006020828403121561397c57600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b81356139c681613154565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b6020808252810182905260006001600160fb1b03831115613a1557600080fd5b8260051b80856040850137919091016040019392505050565b60008351613a408184602088016130d8565b835190830190613a548183602088016130d8565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613a958160178501602088016130d8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613ac68160288401602088016130d8565b01602801949350505050565b60008551613ae4818460208a016130d8565b919091019384525060609190911b6bffffffffffffffffffffffff191660208301526034820152605401919050565b634e487b7160e01b600052601260045260246000fd5b600082613b3857613b38613b13565b500490565b600082613b4c57613b4c613b13565b500690565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613b8360808301846130fc565b9695505050505050565b600060208284031215613b9f57600080fd5b81516106b7816130a5565b808202811582820484141761053557610535613647565b6020808252825182820181905260009190848201906040850190845b81811015613bf957835183529284019291840191600101613bdd565b50909695505050505050565b634e487b7160e01b600052603160045260246000fd5b60008251613c2d8184602087016130d8565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a687a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746399574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1a2646970667358221220e552bc316a79cd23276f2f1fc561f4296555ccc6ff9e3b1fdebb6f9d34d8f8fa64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80636c0360eb116100ec578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd14610483578063d304c4bc146104a3578063e985e9c5146104b8578063f4a0a528146104d857600080fd5b8063a22cb46514610423578063ac9650d814610443578063b88d4fde1461047057600080fd5b806383ccaef7116100c657806383ccaef7146103ae5780638e10d554146103ce578063958944f1146103ee57806395d89b411461040e57600080fd5b80636c0360eb1461036657806370a082311461037b57806382d91c3b1461039b57600080fd5b806323b872dd116101595780634f6ccce7116101335780634f6ccce7146102f157806355f804b3146103115780636352211e146103315780636817c76c1461035157600080fd5b806323b872dd146102ab5780632f745c59146102be57806342842e0e146102de57600080fd5b8063095ea7b311610195578063095ea7b31461024b5780631249c58b1461026057806318160ddd146102685780631fa44f0e1461028b57600080fd5b806301ffc9a7146101bc57806306fdde03146101f1578063081812fc14610213575b600080fd5b3480156101c857600080fd5b506101dc6101d73660046130bb565b6104f8565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061020661053b565b6040516101e89190613128565b34801561021f57600080fd5b5061023361022e36600461313b565b61054a565b6040516001600160a01b0390911681526020016101e8565b61025e610259366004613169565b610555565b005b61025e610563565b34801561027457600080fd5b5061027d610666565b6040519081526020016101e8565b34801561029757600080fd5b5061027d6102a6366004613195565b610670565b61025e6102b93660046131b2565b61069b565b3480156102ca57600080fd5b5061027d6102d9366004613169565b6106ab565b61025e6102ec3660046131b2565b6106be565b3480156102fd57600080fd5b5061027d61030c36600461313b565b6106c9565b34801561031d57600080fd5b5061025e61032c366004613292565b6106d4565b34801561033d57600080fd5b5061023361034c36600461313b565b610710565b34801561035d57600080fd5b5061027d61071b565b34801561037257600080fd5b50610206610745565b34801561038757600080fd5b5061027d610396366004613195565b61074f565b61025e6103a9366004613320565b61075a565b3480156103ba57600080fd5b5061025e6103c936600461313b565b61086c565b3480156103da57600080fd5b5061025e6103e936600461313b565b6108a0565b3480156103fa57600080fd5b5061025e6104093660046133ba565b610922565b34801561041a57600080fd5b50610206610a9b565b34801561042f57600080fd5b5061025e61043e36600461346c565b610aa5565b34801561044f57600080fd5b5061046361045e3660046134aa565b610aaf565b6040516101e891906134ec565b61025e61047e36600461354e565b610bca565b34801561048f57600080fd5b5061020661049e36600461313b565b610bdc565b3480156104af57600080fd5b5061027d610be7565b3480156104c457600080fd5b506101dc6104d33660046135ce565b610c11565b3480156104e457600080fd5b5061025e6104f336600461313b565b610c1d565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b6060610545610c51565b905090565b600061053582610cf0565b61055f8282610d53565b5050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036105a657604051635db5c7cd60e11b815260040160405180910390fd5b600281557f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746554600080516020613c8a8339815191529034146106035760405162461bcd60e51b81526004016105fa906135fc565b60405180910390fd5b33600081815260208390526040812054909161061e90610e56565b610628919061365d565b90508160010154811061064d5760405162461bcd60e51b81526004016105fa90613670565b61065e33610659610ebf565b610ed8565b505060019055565b6000610545610ebf565b6001600160a01b0381166000908152600080516020613c8a8339815191526020526040812054610535565b6106a6838383610ef2565b505050565b60006106b78383610f30565b9392505050565b6106a6838383610f71565b600061053582610f8c565b6107046106ff7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b610fa6565b61070d81610fb0565b50565b60006105358261102a565b60006105457f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74655490565b606061054561106e565b600061053582610e56565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361079d57604051635db5c7cd60e11b815260040160405180910390fd5b600281557f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746554600080516020613c8a8339815191529034146107f15760405162461bcd60e51b81526004016105fa906135fc565b33600081815260208390526040812054909161080c90610e56565b610816919061365d565b90508160010154811061083b5760405162461bcd60e51b81526004016105fa90613670565b6000610845610ebf565b90506108513382610ed8565b61085e818989898961108d565b505060019091555050505050565b6108976106ff7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61070d8161187f565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036108e357604051635db5c7cd60e11b815260040160405180910390fd5b600281556108f133836118f2565b60005b8281101561091a5761090833610659610ebf565b80610912816136cd565b9150506108f4565b506001905550565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361096557604051635db5c7cd60e11b815260040160405180910390fd5b60028155336000908152600080516020613c8a833981519152602081905260409091205484116109cc5760405162461bcd60e51b8152602060048201526012602482015271105b1b081d1bdad95b9cc818db185a5b595960721b60448201526064016105fa565b6040805133602082015280820186905281518082038301815260609091019091526109f78482611a9b565b5033600090815260208390526040812054610a12908761365d565b905060005b81811015610a3d57610a2b33610659610ebf565b80610a35816136cd565b915050610a17565b503360009081526020849052604081208054839290610a5d9084906136e6565b9091555050604051819033907fc169c3974ad5176ea41e766768be74079ba8c86a136ed66c5ac85e602782db7d90600090a350506001909155505050565b6060610545611b51565b61055f8282611b70565b60608167ffffffffffffffff811115610aca57610aca6131f3565b604051908082528060200260200182016040528015610afd57816020015b6060815260200190600190039081610ae85790505b50905060005b82811015610bc35760008030868685818110610b2157610b216136f9565b9050602002810190610b33919061370f565b604051610b41929190613756565b600060405180830381855af49150503d8060008114610b7c576040519150601f19603f3d011682016040523d82523d6000602084013e610b81565b606091505b50915091508115610baf5780848481518110610b9f57610b9f6136f9565b6020026020010181905250610bb9565b3d6000803e3d6000fd5b5050600101610b03565b5092915050565b610bd684848484611c24565b50505050565b606061053582611c63565b60006105457f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645490565b60006106b78383611e44565b610c486106ff7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61070d81611e91565b6060600080516020613caa8339815191528054610c6d90613766565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9990613766565b8015610ce65780601f10610cbb57610100808354040283529160200191610ce6565b820191906000526020600020905b815481529060010190602001808311610cc957829003601f168201915b5050505050905090565b6000610cfb82611f04565b610d185760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b610d5e828234611f1e565b6000610d698261102a565b9050806001600160a01b0316836001600160a01b031603610d9d5760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b03821614801590610dbd5750610dbb8133611e44565b155b15610ddb57604051632f5de44f60e01b815260040160405180910390fd5b60008281527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a9602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006001600160a01b038216610e7f57604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902061053590611f48565b6000610545600080516020613c6a833981519152611f48565b61055f828260405180602001604052806000815250611f52565b610efe83838334611f86565b610f083382611fb1565b610f2557604051632f5de44f60e01b815260040160405180910390fd5b6106a6838383612037565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604081206106b790836121c6565b6106a683838360405180602001604052806000815250611c24565b6000610bc3600080516020613c6a833981519152836121d2565b61070d81336121f0565b604051600080516020613caa8339815191529033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea90611014907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b39086906137a0565b60405180910390a2600281016106a6838261388d565b600080611045600080516020613c6a83398151915284612252565b90506001600160a01b03811661053557604051637e1a7d8b60e01b815260040160405180910390fd5b6060600080516020613caa8339815191526002018054610c6d90613766565b6040516331a9108f60e11b815260048101869052859030908190636352211e90602401602060405180830381865afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f1919061394d565b6001600160a01b0316336001600160a01b0316146111775760405162461bcd60e51b815260206004820152603b60248201527f496e76656e746f727946616365743a204d6573736167652073656e646572206960448201527f73206e6f74206f776e6572206f662074686520617263616469616e000000000060648201526084016105fa565b846111ea5760405162461bcd60e51b815260206004820152603960248201527f496e76656e746f727946616365742e5f756e65717569703a2053686f756c642060448201527f73706563696679206174206c65617374206f6e6520736c6f740000000000000060648201526084016105fa565b84831461125f5760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a20496e707560448201527f742064617461206c656e677468206d69736d617463680000000000000000000060648201526084016105fa565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436805460005b878110156117bc5760008989838181106112a1576112a16136f9565b9050602002013590506000811180156112ba5750828111155b6113175760405162461bcd60e51b815260206004820152602860248201527f496e76656e746f727946616365742e5f657175697042617463683a20496e76616044820152671b1a59081cdb1bdd60c21b60648201526084016105fa565b808460050160008a8a86818110611330576113306136f9565b6113469260206040909202019081019150613195565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a8681811061137a5761137a6136f9565b90506040020160200135815260200190815260200160002054146114065760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a204974656d60448201527f206e6f7420656c656769626c6520666f7220736c6f740000000000000000000060648201526084016105fa565b600088888481811061141a5761141a6136f9565b6114309260206040909202019081019150613195565b90506000816001600160a01b031662fdd58e338c8c88818110611455576114556136f9565b905060400201602001356040518363ffffffff1660e01b81526004016114909291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156114ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d1919061396a565b116115445760405162461bcd60e51b815260206004820152603a60248201527f496e76656e746f727946616365742e65717569703a2053656e6465722068617360448201527f20696e73756666696369656e74206974656d2062616c616e636500000000000060648201526084016105fa565b60008c815260038601602090815260408083208584528252808320600189019092529091205460ff161580611581575080546001600160a01b0316155b6115f35760405162461bcd60e51b815260206004820152603c60248201527f496e76656e746f727946616365742e65717569703a20556e657175697070616260448201527f6c6520736c6f747320616c72656164792068617320616e206974656d0000000060648201526084016105fa565b898985818110611605576116056136f9565b61161b9260206040909202019081019150613195565b81546001600160a01b0390811691161480156116555750898985818110611644576116446136f9565b905060400201602001358160010154145b15611662575050506117aa565b80546001600160a01b0316156116da57600180820154604051637921219560e11b81526001600160a01b0385169263f242432a926116a7923092339291600401613983565b600060405180830381600087803b1580156116c157600080fd5b505af11580156116d5573d6000803e3d6000fd5b505050505b8989858181106116ec576116ec6136f9565b9050604002018660030160008f81526020019081526020016000206000858152602001908152602001600020818161172491906139bb565b50506001600160a01b03821663f242432a33308d8d89818110611749576117496136f9565b9050604002016020013560016040518563ffffffff1660e01b81526004016117749493929190613983565b600060405180830381600087803b15801561178e57600080fd5b505af11580156117a2573d6000803e3d6000fd5b505050505050505b806117b4816136cd565b915050611285565b5088336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f188618a8a6040516117f99291906139f5565b60405180910390a361180a8961225e565b6118745760405162461bcd60e51b815260206004820152603560248201527f496e76656e746f727946616365742e5f657175697042617463683a2042617365604482015274206974656d7320617265206e6f7420756e6971756560581b60648201526084016105fa565b505050505050505050565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645460408051918252602082018390528051600080516020613c8a8339815191529233927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92918290030190a260010155565b6001600160a01b03821660009081527ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb358960205260409020547ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb3588908211156119cd5760405162461bcd60e51b815260206004820152604360248201527f57686974656c697374496e7465726e616c2e5f636f6e73756d6557686974656c60448201527f6973743a20616d6f756e74206578636565647320656c656769626c6520616d6f6064820152621d5b9d60ea1b608482015260a4016105fa565b6001600160a01b0383166000908152600182016020526040812080548492906119f790849061365d565b90915550506001600160a01b03831660009081526020829052604081208054849290611a249084906136e6565b90915550506001600160a01b0383166000908152600182016020908152604080832054848352928190205481513381529283018690529082019290925260608101919091527fdb4f4d78cc1c961ddedd2f43596d41d07e607b7517c7106d83f6421215e1f6a79060800160405180910390a1505050565b6000808280519060200120604051602001611ab891815260200190565b604051602081830303815290604052805190602001209050611b0284611afb7f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c0890565b54836123b7565b915081610bc35760405162461bcd60e51b815260206004820152601b60248201527f44617461206e6f7420696e636c7564656420696e206d65726b6c65000000000060448201526064016105fa565b6060600080516020613caa8339815191526001018054610c6d90613766565b336001600160a01b03831603611b995760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611c3084848434611f86565b611c3a3383611fb1565b611c5757604051632f5de44f60e01b815260040160405180910390fd5b610bd68484848461245c565b6060611c6e82611f04565b611c8a57604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604081208054600080516020613caa833981519152929190611cd490613766565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0090613766565b8015611d4d5780601f10611d2257610100808354040283529160200191611d4d565b820191906000526020600020905b815481529060010190602001808311611d3057829003601f168201915b505050505090506000826002018054611d6590613766565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9190613766565b8015611dde5780601f10611db357610100808354040283529160200191611dde565b820191906000526020600020905b815481529060010190602001808311611dc157829003601f168201915b505050505090508051600003611df657509392505050565b815115611e29578082604051602001611e10929190613a2e565b6040516020818303038152906040529350505050919050565b80611e3386612490565b604051602001611e10929190613a2e565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74655460408051918252602082018390528051600080516020613c8a8339815191529233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260020155565b6000610535600080516020613c6a83398151915283612591565b8015611f3d5760405163b56d7c1b60e01b815260040160405180910390fd5b6106a68383836125a9565b6000610535825490565b611f5c83836125c8565b611f6960008484846126bd565b6106a657604051639ff10cdd60e01b815260040160405180910390fd5b8015611fa5576040516322b1813960e01b815260040160405180910390fd5b610bd68484848461278e565b6000611fbc82611f04565b611fd95760405163c1b843ef60e01b815260040160405180910390fd5b6000611fe48361102a565b9050806001600160a01b0316846001600160a01b0316148061201f5750836001600160a01b031661201484610cf0565b6001600160a01b0316145b8061202f575061202f8185611e44565b949350505050565b60006120428261102a565b9050836001600160a01b0316816001600160a01b03161461207657604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b03831661209d576040516340311a0960e01b815260040160405180910390fd5b6120a88484846127b2565b6001600160a01b03841660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020613c6a833981519152906120f990846127c6565b506001600160a01b0384166000908152600282016020526040902061211e90846127d2565b5061212a8184866127de565b50600083815260038201602052604080822080546001600160a01b0319169055518491906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a482846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60006106b783836127f4565b60008080806121e18686612840565b909450925050505b9250929050565b6121fa82826128a3565b61055f57612210816001600160a01b03166128da565b61221b8360206128ec565b60405160200161222c929190613a5d565b60408051601f198184030181529082905262461bcd60e51b82526105fa91600401613128565b60006106b78383612a3f565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43660607f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9836122d582611f48565b905060005b818110156123565760006122ee84836121c6565b600089815260038801602090815260408083208484528252918290208054600182015493519495509093612330938a9387936001600160a01b03169201613ad2565b60405160208183030381529060405295505050808061234e906136cd565b9150506122da565b508251602084012061236b6006860182612591565b60008881526008870160205260409020549015965061238e9060068701906127c6565b5061239c60068601826127d2565b50600096875260089094016020525050604090932055919050565b600081815b85518110156124515760008682815181106123d9576123d96136f9565b6020026020010151905080831161241b576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250612448565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b506001016123bc565b509092149392505050565b612467848484612037565b612473848484846126bd565b610bd657604051639ff10cdd60e01b815260040160405180910390fd5b6060816000036124b75750506040805180820190915260018152600360fc1b602082015290565b8160005b81156124e157806124cb816136cd565b91506124da9050600a83613b29565b91506124bb565b60008167ffffffffffffffff8111156124fc576124fc6131f3565b6040519080825280601f01601f191660200182016040528015612526576020820181803683370190505b5090505b841561202f5761253b60018361365d565b9150612548600a86613b3d565b6125539060306136e6565b60f81b818381518110612568576125686136f9565b60200101906001600160f81b031916908160001a90535061258a600a86613b29565b945061252a565b600081815260018301602052604081205415156106b7565b80156106a65760405163b56d7c1b60e01b815260040160405180910390fd5b6001600160a01b0382166125ef576040516311f2988d60e11b815260040160405180910390fd5b6125f881611f04565b1561261657604051630d86bb7b60e31b815260040160405180910390fd5b612622600083836127b2565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020613c6a8339815191529061267390836127d2565b5061267f8183856127de565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b60006001600160a01b0384163b6126d65750600161202f565b600061275763150b7a0260e01b338887876040516024016126fa9493929190613b51565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613c38603291396001600160a01b0388169190612aa3565b905060008180602001905181019061276f9190613b8d565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b80156127ad576040516322b1813960e01b815260040160405180910390fd5b610bd6565b6127bb81612ab2565b6106a6838383612c84565b60006106b78383612c8f565b60006106b78383612d49565b600061202f84846001600160a01b038516612d8c565b815460009082106128185760405163e637bf3b60e01b815260040160405180910390fd5b82600001828154811061282d5761282d6136f9565b9060005260206000200154905092915050565b8154600090819083106128665760405163022fd82760e31b815260040160405180910390fd5b600084600001848154811061287d5761287d6136f9565b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206106b79083612e2b565b60606105356001600160a01b03831660145b606060006128fb836002613baa565b6129069060026136e6565b67ffffffffffffffff81111561291e5761291e6131f3565b6040519080825280601f01601f191660200182016040528015612948576020820181803683370190505b509050600360fc1b81600081518110612963576129636136f9565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612992576129926136f9565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115612a1f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106129e2576129e26136f9565b1a60f81b8282815181106129f8576129f86136f9565b60200101906001600160f81b031916908160001a90535060049490941c93600019016129b1565b5083156106b75760405163c913478560e01b815260040160405180910390fd5b6000818152600183016020526040812054808203612a7057604051633d547ec560e21b815260040160405180910390fd5b836000016001820381548110612a8857612a886136f9565b90600052602060002090600202016001015491505092915050565b606061202f8484600085612e4d565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4368054600060015b828111612b4a57600081815260018501602052604090205460ff16158015612b255750600085815260038501602090815260408083208484529091529020546001600160a01b031615155b15612b385781612b34816136cd565b9250505b80612b42816136cd565b915050612ada565b5060008167ffffffffffffffff811115612b6657612b666131f3565b604051908082528060200260200182016040528015612b8f578160200160208202803683370190505b509050600060015b848111612c2f57600081815260018701602052604090205460ff16158015612be25750600087815260038701602090815260408083208484529091529020546001600160a01b031615155b15612c1d57612bf18782612f0a565b80838381518110612c0457612c046136f9565b602090810291909101015281612c19816136cd565b9250505b80612c27816136cd565b915050612b97565b5085336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab6384604051612c6a9190613bc1565b60405180910390a3612c7b8661225e565b50505050505050565b6106a6838383613012565b60008181526001830160205260408120548015610bc357835460009085906000198101908110612cc157612cc16136f9565b9060005260206000200154905080856000016001840381548110612ce757612ce76136f9565b6000918252602080832090910192909255918252600186019052604090208190558354849080612d1957612d19613c05565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b6000818152600183016020526040812054610535575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6000828152600184016020526040812054808203612df35750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556106b7565b82856000016001830381548110612e0c57612e0c6136f9565b90600052602060002090600202016001018190555060009150506106b7565b6001600160a01b038116600090815260018301602052604081205415156106b7565b6060843b612e6e57604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b03168587604051612e8a9190613c1b565b60006040518083038185875af1925050503d8060008114612ec7576040519150601f19603f3d011682016040523d82523d6000602084013e612ecc565b606091505b50915091508115612ee057915061202f9050565b805115612ef05780518082602001fd5b8360405162461bcd60e51b81526004016105fa9190613128565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43960209081526040808320848452909152902080547ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43691906001600160a01b0316801561300b57600180830154604051637921219560e11b81526001600160a01b0384169263f242432a92612fab923092339291600401613983565b600060405180830381600087803b158015612fc557600080fd5b505af1158015612fd9573d6000803e3d6000fd5b50505060008681526003850160209081526040808320888452909152812080546001600160a01b031916815560010155505b5050505050565b6106a68383836001600160a01b0382166106a65760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040902080546106a6919061306390613766565b6000825580601f10613073575050565b601f01602090049060005260206000209081019061070d91905b808211156130a1576000815560010161308d565b5090565b6001600160e01b03198116811461070d57600080fd5b6000602082840312156130cd57600080fd5b81356106b7816130a5565b60005b838110156130f35781810151838201526020016130db565b50506000910152565b600081518084526131148160208601602086016130d8565b601f01601f19169290920160200192915050565b6020815260006106b760208301846130fc565b60006020828403121561314d57600080fd5b5035919050565b6001600160a01b038116811461070d57600080fd5b6000806040838503121561317c57600080fd5b823561318781613154565b946020939093013593505050565b6000602082840312156131a757600080fd5b81356106b781613154565b6000806000606084860312156131c757600080fd5b83356131d281613154565b925060208401356131e281613154565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613232576132326131f3565b604052919050565b600067ffffffffffffffff831115613254576132546131f3565b613267601f8401601f1916602001613209565b905082815283838301111561327b57600080fd5b828260208301376000602084830101529392505050565b6000602082840312156132a457600080fd5b813567ffffffffffffffff8111156132bb57600080fd5b8201601f810184136132cc57600080fd5b61202f8482356020840161323a565b60008083601f8401126132ed57600080fd5b50813567ffffffffffffffff81111561330557600080fd5b6020830191508360208260051b85010111156121e957600080fd5b6000806000806040858703121561333657600080fd5b843567ffffffffffffffff8082111561334e57600080fd5b61335a888389016132db565b9096509450602087013591508082111561337357600080fd5b818701915087601f83011261338757600080fd5b81358181111561339657600080fd5b8860208260061b85010111156133ab57600080fd5b95989497505060200194505050565b600080604083850312156133cd57600080fd5b8235915060208084013567ffffffffffffffff808211156133ed57600080fd5b818601915086601f83011261340157600080fd5b813581811115613413576134136131f3565b8060051b9150613424848301613209565b818152918301840191848101908984111561343e57600080fd5b938501935b8385101561345c57843582529385019390850190613443565b8096505050505050509250929050565b6000806040838503121561347f57600080fd5b823561348a81613154565b91506020830135801515811461349f57600080fd5b809150509250929050565b600080602083850312156134bd57600080fd5b823567ffffffffffffffff8111156134d457600080fd5b6134e0858286016132db565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561354157603f1988860301845261352f8583516130fc565b94509285019290850190600101613513565b5092979650505050505050565b6000806000806080858703121561356457600080fd5b843561356f81613154565b9350602085013561357f81613154565b925060408501359150606085013567ffffffffffffffff8111156135a257600080fd5b8501601f810187136135b357600080fd5b6135c28782356020840161323a565b91505092959194509250565b600080604083850312156135e157600080fd5b82356135ec81613154565b9150602083013561349f81613154565b6020808252602b908201527f417263616469616e73496e7465726e616c2e5f6d696e743a20496e76616c696460408201526a081c185e48185b5bdd5b9d60aa1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561053557610535613647565b6020808252603b908201527f417263616469616e73496e7465726e616c2e5f6d696e743a2055736572206d6160408201527f78696d756d206d696e74656420746f6b656e7320726561636865640000000000606082015260800190565b6000600182016136df576136df613647565b5060010190565b8082018082111561053557610535613647565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261372657600080fd5b83018035915067ffffffffffffffff82111561374157600080fd5b6020019150368190038213156121e957600080fd5b8183823760009101908152919050565b600181811c9082168061377a57607f821691505b60208210810361379a57634e487b7160e01b600052602260045260246000fd5b50919050565b6040815260008084546137b281613766565b80604086015260606001808416600081146137d457600181146137ee5761381f565b60ff1985168884015283151560051b88018301955061381f565b8960005260208060002060005b868110156138165781548b82018701529084019082016137fb565b8a018501975050505b5050505050828103602084015261383681856130fc565b95945050505050565b601f8211156106a657600081815260208120601f850160051c810160208610156138665750805b601f850160051c820191505b8181101561388557828155600101613872565b505050505050565b815167ffffffffffffffff8111156138a7576138a76131f3565b6138bb816138b58454613766565b8461383f565b602080601f8311600181146138f057600084156138d85750858301515b600019600386901b1c1916600185901b178555613885565b600085815260208120601f198616915b8281101561391f57888601518255948401946001909101908401613900565b508582101561393d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561395f57600080fd5b81516106b781613154565b60006020828403121561397c57600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b81356139c681613154565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b6020808252810182905260006001600160fb1b03831115613a1557600080fd5b8260051b80856040850137919091016040019392505050565b60008351613a408184602088016130d8565b835190830190613a548183602088016130d8565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613a958160178501602088016130d8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613ac68160288401602088016130d8565b01602801949350505050565b60008551613ae4818460208a016130d8565b919091019384525060609190911b6bffffffffffffffffffffffff191660208301526034820152605401919050565b634e487b7160e01b600052601260045260246000fd5b600082613b3857613b38613b13565b500490565b600082613b4c57613b4c613b13565b500690565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613b8360808301846130fc565b9695505050505050565b600060208284031215613b9f57600080fd5b81516106b7816130a5565b808202811582820484141761053557610535613647565b6020808252825182820181905260009190848201906040850190845b81811015613bf957835183529284019291840191600101613bdd565b50909695505050505050565b634e487b7160e01b600052603160045260246000fd5b60008251613c2d8184602087016130d8565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a687a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746399574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1a2646970667358221220e552bc316a79cd23276f2f1fc561f4296555ccc6ff9e3b1fdebb6f9d34d8f8fa64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "address to be approved",
          "tokenId": "token to approve"
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "quantity of tokens held"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "address approved to spend token"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "array of function call data payloads"
        },
        "returns": {
          "results": "array of function call results"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token owner"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "data payload",
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address to be approved",
          "status": "approval status"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "position in global token list to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "position in owner's token list to query",
          "owner": "token holder to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total supply"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "grant approval to given account to spend token"
      },
      "balanceOf(address)": {
        "notice": "query the balance of given address"
      },
      "getApproved(uint256)": {
        "notice": "get approval status for given token"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "multicall(bytes[])": {
        "notice": "batch function calls to the contract and return the results of each"
      },
      "name()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "ownerOf(uint256)": {
        "notice": "query the owner of given token"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given account to spend all tokens held by sender"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "symbol()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "tokenByIndex(uint256)": {
        "notice": "get token at given internal storage index"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "get token of given owner at given internal storage index"
      },
      "totalSupply()": {
        "notice": "get total token supply"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, without checking for ERC721Receiver implementation if applicable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}