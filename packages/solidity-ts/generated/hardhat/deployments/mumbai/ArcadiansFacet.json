{
  "address": "0xB1055A3dcA8C5531725Ec51c9e5C6DD27412e5F9",
  "abi": [
    {
      "inputs": [],
      "name": "AddressUtils__NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__ERC721ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Metadata__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__NonExistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolidStateERC721__PayableApproveNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolidStateERC721__PayableTransferNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ArcadianClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldBaseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "BaseURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldInventoryAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newInventoryAddress",
          "type": "address"
        }
      ],
      "name": "InventoryAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxMintPerUser",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "MaxMintPerUserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMintPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "MintPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalElegibleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimedAmount",
          "type": "uint256"
        }
      ],
      "name": "WhitelistBalanceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getClaimedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInventoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxMintPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newInventoryAddress",
          "type": "address"
        }
      ],
      "name": "setInventoryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintPerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbfd378086d5900acb6209667baaa7393f2e58c701892e308247f797d90fbc427",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0xB1055A3dcA8C5531725Ec51c9e5C6DD27412e5F9",
    "transactionIndex": 1,
    "gasUsed": "2582940",
    "logsBloom": "0x00000000800000000000000000000000000000000000000000000010000000000000000000000020000000000000000000008000000000000000000000000000000000000000000000000000000000800000000200000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000001000000000000000000000000000000000000001000000000000000000000000100000",
    "blockHash": "0x069e3e1b159855e5dae8d7c6e64a34234b6d7b4848ba5c97bc0547a91d33a406",
    "transactionHash": "0xbfd378086d5900acb6209667baaa7393f2e58c701892e308247f797d90fbc427",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 33471063,
        "transactionHash": "0xbfd378086d5900acb6209667baaa7393f2e58c701892e308247f797d90fbc427",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000016f0ecf4bd0163400000000000000000000000000000000000000000000000017bda3ea7f6fcd11000000000000000000000000000000000000000000000c2f61ce5550a55809fe000000000000000000000000000000000000000000000000164e951b339fb6dd000000000000000000000000000000000000000000000c2f633d641ff1282032",
        "logIndex": 2,
        "blockHash": "0x069e3e1b159855e5dae8d7c6e64a34234b6d7b4848ba5c97bc0547a91d33a406"
      }
    ],
    "blockNumber": 33471063,
    "cumulativeGasUsed": "2738886",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "c21516edc60155c906660e263915c827",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__ERC721ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Metadata__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__NonExistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolidStateERC721__PayableApproveNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolidStateERC721__PayableTransferNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ArcadianClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldBaseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldInventoryAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newInventoryAddress\",\"type\":\"address\"}],\"name\":\"InventoryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxMintPerUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"MaxMintPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"MintPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalElegibleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"}],\"name\":\"WhitelistBalanceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInventoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxMintPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInventoryAddress\",\"type\":\"address\"}],\"name\":\"setInventoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"setMaxMintPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"address to be approved\",\"tokenId\":\"token to approve\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"quantity of tokens held\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"address approved to spend token\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token owner\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"data payload\",\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address to be approved\",\"status\":\"approval status\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"position in global token list to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"position in owner's token list to query\",\"owner\":\"token holder to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total supply\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"grant approval to given account to spend token\"},\"balanceOf(address)\":{\"notice\":\"query the balance of given address\"},\"getApproved(uint256)\":{\"notice\":\"get approval status for given token\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"name()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"ownerOf(uint256)\":{\"notice\":\"query the owner of given token\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given account to spend all tokens held by sender\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"symbol()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"tokenByIndex(uint256)\":{\"notice\":\"get token at given internal storage index\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"get token of given owner at given internal storage index\"},\"totalSupply()\":{\"notice\":\"get total token supply\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/arcadians/ArcadiansFacet.sol\":\"ArcadiansFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Merkle tree verification utility\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @notice verify whether given leaf is contained within Merkle tree defined by given root\\n     * @param proof proof that Merkle tree contains given leaf\\n     * @param root Merkle tree root\\n     * @param leaf element whose presence in Merkle tree to prove\\n     * @return whether leaf is proven to be contained within Merkle tree defined by root\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            bytes32 computedHash = leaf;\\n\\n            for (uint256 i = 0; i < proof.length; i++) {\\n                bytes32 proofElement = proof[i];\\n\\n                if (computedHash <= proofElement) {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(computedHash, proofElement)\\n                    );\\n                } else {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(proofElement, computedHash)\\n                    );\\n                }\\n            }\\n\\n            return computedHash == root;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3a6592d4e2c90f92ccae441401241b4a8837e95a15f3c3887abc544e85e362c\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Map implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableMap {\\n    error EnumerableMap__IndexOutOfBounds();\\n    error EnumerableMap__NonExistentKey();\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        MapEntry[] _entries;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct AddressToAddressMap {\\n        Map _inner;\\n    }\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    function at(\\n        AddressToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (address, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n\\n        return (\\n            address(uint160(uint256(key))),\\n            address(uint160(uint256(value)))\\n        );\\n    }\\n\\n    function at(\\n        UintToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    function contains(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function contains(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    function length(\\n        AddressToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function length(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function get(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (address) {\\n        return\\n            address(\\n                uint160(\\n                    uint256(_get(map._inner, bytes32(uint256(uint160(key)))))\\n                )\\n            );\\n    }\\n\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    function set(\\n        AddressToAddressMap storage map,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return\\n            _set(\\n                map._inner,\\n                bytes32(uint256(uint160(key))),\\n                bytes32(uint256(uint160(value)))\\n            );\\n    }\\n\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function remove(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    function toArray(\\n        AddressToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (address[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function toArray(\\n        UintToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (uint256[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n            }\\n        }\\n    }\\n\\n    function values(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function values(\\n        UintToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function _at(\\n        Map storage map,\\n        uint256 index\\n    ) private view returns (bytes32, bytes32) {\\n        if (index >= map._entries.length)\\n            revert EnumerableMap__IndexOutOfBounds();\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    function _contains(\\n        Map storage map,\\n        bytes32 key\\n    ) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) revert EnumerableMap__NonExistentKey();\\n        unchecked {\\n            return map._entries[keyIndex - 1]._value;\\n        }\\n    }\\n\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            unchecked {\\n                map._entries[keyIndex - 1]._value = value;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            unchecked {\\n                MapEntry storage last = map._entries[map._entries.length - 1];\\n\\n                // move last entry to now-vacant index\\n                map._entries[keyIndex - 1] = last;\\n                map._indexes[last._key] = keyIndex;\\n            }\\n\\n            // clear last index\\n            map._entries.pop();\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1140a8669a93db82ea70d7f53e112049d42a813fe7188f50aa2f7ec5e529d38a\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x38ca94617ab4a4cdc08d9fed753f1b17d91a9823b36f7f485cd1ed5e5324aa8f\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/ISolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Base } from './base/IERC721Base.sol';\\nimport { IERC721Enumerable } from './enumerable/IERC721Enumerable.sol';\\nimport { IERC721Metadata } from './metadata/IERC721Metadata.sol';\\n\\ninterface ISolidStateERC721 is IERC721Base, IERC721Enumerable, IERC721Metadata {\\n    error SolidStateERC721__PayableApproveNotSupported();\\n    error SolidStateERC721__PayableTransferNotSupported();\\n}\\n\",\"keccak256\":\"0x4fc3b4d30c0f7124751439c3289e060cd0a566fad2beca51e9f05737bd8cf825\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC165Base } from '../../introspection/ERC165/base/ERC165Base.sol';\\nimport { ERC721Base, ERC721BaseInternal } from './base/ERC721Base.sol';\\nimport { ERC721Enumerable } from './enumerable/ERC721Enumerable.sol';\\nimport { ERC721Metadata } from './metadata/ERC721Metadata.sol';\\nimport { ISolidStateERC721 } from './ISolidStateERC721.sol';\\n\\n/**\\n * @title SolidState ERC721 implementation, including recommended extensions\\n */\\nabstract contract SolidStateERC721 is\\n    ISolidStateERC721,\\n    ERC721Base,\\n    ERC721Enumerable,\\n    ERC721Metadata,\\n    ERC165Base\\n{\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external approve function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableApproveNotSupported();\\n        super._handleApproveMessageValue(operator, tokenId, value);\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external transfer function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableTransferNotSupported();\\n        super._handleTransferMessageValue(from, to, tokenId, value);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721BaseInternal, ERC721Metadata) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x397706dffa317a4d7da18896ae98562ac14a50361a06bedc7e2d4c68f83abf3f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721Base } from './IERC721Base.sol';\\nimport { ERC721BaseInternal } from './ERC721BaseInternal.sol';\\n\\n/**\\n * @title Base ERC721 implementation, excluding optional extensions\\n */\\nabstract contract ERC721Base is IERC721Base, ERC721BaseInternal {\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address) {\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address) {\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool) {\\n        return _isApprovedForAll(account, operator);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable {\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable {\\n        _safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable {\\n        _safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function approve(address operator, uint256 tokenId) external payable {\\n        _approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function setApprovalForAll(address operator, bool status) external {\\n        _setApprovalForAll(operator, status);\\n    }\\n}\\n\",\"keccak256\":\"0x388e07a6595f57c70508f6cc1f25b00f3c44f343bf6ab44898cd262186304630\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\n\\n/**\\n * @title Base ERC721 internal functions\\n */\\nabstract contract ERC721BaseInternal is IERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function _balanceOf(\\n        address account\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0)) revert ERC721Base__BalanceQueryZeroAddress();\\n        return ERC721BaseStorage.layout().holderTokens[account].length();\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        address owner = ERC721BaseStorage.layout().tokenOwners.get(tokenId);\\n        if (owner == address(0)) revert ERC721Base__InvalidOwner();\\n        return owner;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().tokenOwners.contains(tokenId);\\n    }\\n\\n    function _getApproved(\\n        uint256 tokenId\\n    ) internal view virtual returns (address) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        return ERC721BaseStorage.layout().tokenApprovals[tokenId];\\n    }\\n\\n    function _isApprovedForAll(\\n        address account,\\n        address operator\\n    ) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        return (spender == owner ||\\n            _getApproved(tokenId) == spender ||\\n            _isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        if (to == address(0)) revert ERC721Base__MintToZeroAddress();\\n        if (_exists(tokenId)) revert ERC721Base__TokenAlreadyMinted();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[owner].remove(tokenId);\\n        l.tokenOwners.remove(tokenId);\\n\\n        l.tokenApprovals[tokenId] = address(0);\\n\\n        emit Approval(owner, address(0), tokenId);\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        if (owner != from) revert ERC721Base__NotTokenOwner();\\n        if (to == address(0)) revert ERC721Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[from].remove(tokenId);\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n        l.tokenApprovals[tokenId] = address(0);\\n\\n        emit Approval(owner, address(0), tokenId);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    function _approve(address operator, uint256 tokenId) internal virtual {\\n        _handleApproveMessageValue(operator, tokenId, msg.value);\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        if (operator == owner) revert ERC721Base__SelfApproval();\\n        if (msg.sender != owner && !_isApprovedForAll(owner, msg.sender))\\n            revert ERC721Base__NotOwnerOrApproved();\\n\\n        ERC721BaseStorage.layout().tokenApprovals[tokenId] = operator;\\n        emit Approval(owner, operator, tokenId);\\n    }\\n\\n    function _setApprovalForAll(\\n        address operator,\\n        bool status\\n    ) internal virtual {\\n        if (operator == msg.sender) revert ERC721Base__SelfApproval();\\n        ERC721BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes memory returnData = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n\\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\\n        return returnValue == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called approvals for processing of included message value\\n     * @param operator beneficiary of approval\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called transfers for processing of included message value\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xcc7bc3523871dc4f4e67c88f9c12931fd92d261de914144e749a1b71a3787dae\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC721BaseStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Base');\\n\\n    struct Layout {\\n        EnumerableMap.UintToAddressMap tokenOwners;\\n        mapping(address => EnumerableSet.UintSet) holderTokens;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9570596eca4d18e1c872177aa12125fcaba1dd7db940e5affa44e6ce2231b0a1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721Base is IERC721BaseInternal, IERC721 {\\n\\n}\\n\",\"keccak256\":\"0x5b99ebbddcc97f5a825cb21fb377b04c9ad184c4e4b69b92685334b6d42b7636\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../../../interfaces/IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721BaseInternal is IERC721Internal {\\n    error ERC721Base__NotOwnerOrApproved();\\n    error ERC721Base__SelfApproval();\\n    error ERC721Base__BalanceQueryZeroAddress();\\n    error ERC721Base__ERC721ReceiverNotImplemented();\\n    error ERC721Base__InvalidOwner();\\n    error ERC721Base__MintToZeroAddress();\\n    error ERC721Base__NonExistentToken();\\n    error ERC721Base__NotTokenOwner();\\n    error ERC721Base__TokenAlreadyMinted();\\n    error ERC721Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0x3118e4b75bc32c0c5b1f7aca49d30bf618966260179d848171b2ce3e3e0b5373\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { IERC721Enumerable } from './IERC721Enumerable.sol';\\nimport { ERC721EnumerableInternal } from './ERC721EnumerableInternal.sol';\\n\\nabstract contract ERC721Enumerable is\\n    IERC721Enumerable,\\n    ERC721EnumerableInternal\\n{\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view returns (uint256) {\\n        return _tokenOfOwnerByIndex(owner, index);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        return _tokenByIndex(index);\\n    }\\n}\\n\",\"keccak256\":\"0x762db931dbe79f32fa48ba2f66b23b096e9c43e89c09310a98c10ab18b6e73b6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\n\\nabstract contract ERC721EnumerableInternal {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _totalSupply() internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().tokenOwners.length();\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenByIndex(\\n        uint256 index\\n    ) internal view returns (uint256 tokenId) {\\n        (tokenId, ) = ERC721BaseStorage.layout().tokenOwners.at(index);\\n    }\\n}\\n\",\"keccak256\":\"0xcb195fe5d264a1756a67b0c9bf8ac5493c12d25f947290196f15a67d7f3e81ad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Enumerable {\\n    /**\\n     * @notice get total token supply\\n     * @return total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice get token of given owner at given internal storage index\\n     * @param owner token holder to query\\n     * @param index position in owner's token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @notice get token at given internal storage index\\n     * @param index position in global token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x4dcc1d41df336f28a2ea6fa2e7ec17e3d1745938146db5385400238a7e7a1bad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\nimport { IERC721Metadata } from './IERC721Metadata.sol';\\n\\n/**\\n * @title ERC721 metadata extensions\\n */\\nabstract contract ERC721Metadata is IERC721Metadata, ERC721MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view virtual returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721MetadataInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc626c723aa50119564d77caa3749a728526ca8a93b385000e3d52208b6bc40c5\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from '../base/ERC721Base.sol';\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\nimport { ERC721MetadataStorage } from './ERC721MetadataStorage.sol';\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal functions\\n */\\nabstract contract ERC721MetadataInternal is\\n    IERC721MetadataInternal,\\n    ERC721BaseInternal\\n{\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function _name() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function _symbol() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function _tokenURI(\\n        uint256 tokenId\\n    ) internal view virtual returns (string memory) {\\n        if (!_exists(tokenId)) revert ERC721Metadata__NonExistentToken();\\n\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: clear per-token URI data on burn\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (to == address(0)) {\\n            delete ERC721MetadataStorage.layout().tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x087a3302cd70010787bcdb1eb2e225eff23ac2e5ab5f77d6dc26289cb8863a19\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721MetadataInternal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x281dd4dbf81c3acf12bf43bc6e0f77ae68cb2764450cce8121a53c061bf87960\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721BaseInternal } from '../base/IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal interface\\n */\\ninterface IERC721MetadataInternal is IERC721BaseInternal {\\n    error ERC721Metadata__NonExistentToken();\\n}\\n\",\"keccak256\":\"0xd420b4227db773f26b0e40cb6ea4819d340d0ee5ea59d6321c27e79ae7ecca86\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { SolidStateERC721 } from \\\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\\\";\\nimport { ERC721BaseInternal } from \\\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\\\";\\nimport { ERC721Metadata } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\\\";\\nimport { IERC721Metadata } from \\\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\\\";\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { MerkleInternal } from \\\"../merkle/MerkleInternal.sol\\\";\\nimport { ArcadiansInternal } from \\\"./ArcadiansInternal.sol\\\";\\n\\ncontract ArcadiansFacet is SolidStateERC721, ArcadiansInternal, MerkleInternal, ReentrancyGuard {\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view override (ERC721Metadata, IERC721Metadata) returns (string memory) {\\n        return _getTokenURI(tokenId);\\n    }\\n\\n    function setInventoryAddress(address newInventoryAddress) external onlyManager {\\n        _setInventoryAddress(newInventoryAddress);\\n    }\\n\\n    function getInventoryAddress() external view returns (address) {\\n        return _getInventoryAddress();\\n    }\\n\\n    function claim(uint totalAmount, bytes32[] memory proof)\\n        public nonReentrant\\n    {\\n        ArcadiansStorage.Layout storage es = ArcadiansStorage.layout();\\n\\n        // Revert if the token was already claimed before\\n        require(es.amountClaimed[msg.sender] < totalAmount, \\\"All tokens claimed\\\");\\n\\n        // Verify if is elegible\\n        bytes memory leaf = abi.encode(msg.sender, totalAmount);\\n        _validateLeaf(proof, leaf);\\n\\n        // Mint token to address\\n        uint amountLeftToClaim = totalAmount - es.amountClaimed[msg.sender];\\n        for (uint256 i = 0; i < amountLeftToClaim; i++) {\\n            uint tokenId = es.counterId;\\n            _mint(msg.sender, tokenId);\\n            es.counterId++;\\n        }\\n        es.amountClaimed[msg.sender] += amountLeftToClaim;\\n        emit ArcadianClaimed(msg.sender, amountLeftToClaim);\\n    }\\n\\n    function getClaimedAmount(address account) external view returns (uint) {\\n        return _getClaimedAmount(account);\\n    }\\n\\n    function mint()\\n        public payable nonReentrant\\n    {\\n        _mint(msg.sender);\\n    }\\n\\n    function setMintPrice(uint newMintPrice) external onlyManager {\\n        _setMintPrice(newMintPrice);\\n    }\\n    function getMintPrice() external view returns (uint) {\\n        return _getMintPrice();\\n    }\\n\\n    function setMaxMintPerUser(uint newMaxMintPerUser) external onlyManager {\\n        _setMaxMintPerUser(newMaxMintPerUser);\\n    }\\n    function getMaxMintPerUser() external view returns (uint) {\\n        return _getMaxMintPerUser();\\n    }\\n\\n    function setBaseURI(string memory baseURI) external onlyManager {\\n        _setBaseURI(baseURI);\\n    }\\n    function getBaseURI() external view returns (string memory) {\\n        return _getBaseURI();\\n    }\\n\\n\\n    // required overrides\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override (ERC721BaseInternal, SolidStateERC721) {\\n        if (value > 0) revert SolidStateERC721__PayableApproveNotSupported();\\n        SolidStateERC721._handleApproveMessageValue(operator, tokenId, value);\\n    }\\n\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override (ERC721BaseInternal, SolidStateERC721) {\\n        if (value > 0) revert SolidStateERC721__PayableTransferNotSupported();\\n        SolidStateERC721._handleTransferMessageValue(from, to, tokenId, value);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override (ArcadiansInternal, SolidStateERC721) {\\n        ArcadiansInternal._beforeTokenTransfer(from, to, tokenId);\\n        SolidStateERC721._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\",\"keccak256\":\"0x6cfe8ec0174831b0eed1fb6ef29274f81229451acaa43115d1d66800052220fd\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ERC721BaseInternal } from \\\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\\\";\\nimport { ERC721MetadataStorage } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\\\";\\nimport { ERC721MetadataInternal } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataInternal.sol\\\";\\nimport { UintUtils } from '@solidstate/contracts/utils/UintUtils.sol';\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { IInventoryFacet } from \\\"../inventory/IInventoryFacet.sol\\\";\\nimport { WhitelistInternal } from \\\"../whitelist/WhitelistInternal.sol\\\";\\n\\ncontract ArcadiansInternal is ERC721BaseInternal, RolesInternal, ERC721MetadataInternal, WhitelistInternal {\\n\\n    event MaxMintPerUserChanged(address indexed by, uint oldMaxMintPerUser, uint newMaxMintPerUser);\\n    event MintPriceChanged(address indexed by, uint oldMintPrice, uint newMintPrice);\\n    event BaseURIChanged(address indexed by, string oldBaseURI, string newBaseURI);\\n    event InventoryAddressChanged(address indexed by, address indexed oldInventoryAddress, address indexed newInventoryAddress);\\n    event ArcadianClaimed(address indexed to, uint256 indexed amount);\\n\\n    using UintUtils for uint256;\\n\\n    function _getTokenURI(\\n        uint256 tokenId\\n    ) internal view returns (string memory) {\\n        IInventoryFacet inventory = IInventoryFacet(_getInventoryAddress());\\n        string memory tokenUri = ERC721MetadataInternal._tokenURI(tokenId);\\n        IInventoryFacet.EquippedItem[] memory equippedItem = inventory.equippedAll(tokenId);\\n        tokenUri = string.concat(tokenUri, \\\"/?tokenIds=\\\");\\n        for (uint i = 0; i < equippedItem.length; i++) {\\n            string memory itemId = equippedItem[i].id.toString();\\n            if (i == 0) {\\n                tokenUri = string.concat(tokenUri, itemId);\\n            } else {\\n                tokenUri = string.concat(tokenUri, \\\",\\\", itemId);\\n            }\\n        }\\n        return tokenUri;\\n    }\\n    \\n    function _setInventoryAddress(address newInventoryAddress) internal onlyManager {\\n        require(newInventoryAddress != address(0), \\\"ArcadiansInternal._setInventoryAddress: Invalid address\\\");\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        if (newInventoryAddress != arcadiansSL.inventoryAddress) {\\n            emit InventoryAddressChanged(msg.sender, arcadiansSL.inventoryAddress, newInventoryAddress);\\n            arcadiansSL.inventoryAddress = newInventoryAddress;\\n        }\\n    }\\n\\n    function _getInventoryAddress() internal view returns (address) {\\n        return ArcadiansStorage.layout().inventoryAddress;\\n    }\\n\\n    function _setBaseURI(string memory newBaseURI) internal {\\n        ERC721MetadataStorage.Layout storage ERC721SL = ERC721MetadataStorage.layout();\\n        emit BaseURIChanged(msg.sender, ERC721SL.baseURI, newBaseURI);\\n        ERC721SL.baseURI = newBaseURI;\\n    }\\n\\n    function _getBaseURI() internal view returns (string memory) {\\n        return ERC721MetadataStorage.layout().baseURI;\\n    }\\n\\n    function _getClaimedAmount(address account) internal view returns (uint) {\\n        return ArcadiansStorage.layout().amountClaimed[account];\\n    }\\n\\n    function _setMaxMintPerUser(uint newMaxMintPerUser) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MaxMintPerUserChanged(msg.sender, arcadiansSL.maxMintPerUser, newMaxMintPerUser);\\n        arcadiansSL.maxMintPerUser = newMaxMintPerUser;\\n    }\\n\\n    function _getMintPrice() internal view returns (uint) {\\n        return ArcadiansStorage.layout().mintPrice;\\n    }\\n\\n    function _setMintPrice(uint newMintPrice) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MintPriceChanged(msg.sender, arcadiansSL.mintPrice, newMintPrice);\\n        arcadiansSL.mintPrice = newMintPrice;\\n    }\\n\\n    function _getMaxMintPerUser() internal view returns (uint) {\\n        return ArcadiansStorage.layout().maxMintPerUser;\\n    }\\n\\n    function _mint(address to) internal\\n    {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        require(msg.value == arcadiansSL.mintPrice, \\\"ArcadiansInternal._mint: Invalid pay amount\\\");\\n        uint mintedTokens = _balanceOf(to) - arcadiansSL.amountClaimed[to];\\n        require(mintedTokens < arcadiansSL.maxMintPerUser, \\\"ArcadiansInternal._mint: User maximum minted tokens reached\\\");\\n        _mint(to, arcadiansSL.counterId);\\n        arcadiansSL.counterId++;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override (ERC721BaseInternal, ERC721MetadataInternal) {\\n        IInventoryFacet inventory = IInventoryFacet(_getInventoryAddress());\\n        try inventory.unequipAllItems(tokenId) {} catch {}\\n\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\",\"keccak256\":\"0x8c4143f978f2a13ac9de556c2d9f041b35c83c64bfa1ab3c43ce621433bdd0dc\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary ArcadiansStorage {\\n\\n    bytes32 constant ARCADIANS_STORAGE_POSITION =\\n        keccak256(\\\"equippable.storage.position\\\");\\n\\n    struct Layout {\\n        address inventoryAddress;\\n        // wallet => amount claimed \\n        mapping(address => uint) amountClaimed;\\n        uint counterId;\\n        uint maxMintPerUser;\\n        uint mintPrice;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ARCADIANS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xfa2625b52ecfdb6258fe35e3a57fe6b6ba44c7dbe4d722240271006dedaa42fb\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/IInventoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Crated based in the following work:\\n * Authors: Moonstream DAO (engineering@moonstream.to)\\n * GitHub: https://github.com/G7DAO/contracts\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport { IERC721Receiver } from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport { IERC1155Receiver } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ninterface IInventoryFacet is\\n    IERC721Receiver,\\n    IERC1155Receiver\\n{\\n\\n    struct Slot {\\n        uint capacity;\\n        bool isUnequippable;\\n        uint[] allowedItemsIds;\\n    }\\n\\n    struct EquippedItem {\\n        address itemAddress;\\n        uint256 id;\\n        uint256 amount;\\n    }\\n\\n    function setArcadiansAddress(address newArcadiansAddress) external;\\n\\n    function getArcadiansAddress() external view returns (address);\\n\\n    function numSlots() external view returns (uint);\\n\\n    function getSlot(uint slot) external view returns (Slot memory);\\n\\n    function createSlot(\\n        address itemAddress,\\n        uint[] calldata allowedItemIds,\\n        uint capacity,\\n        bool unequippable\\n    ) external;\\n\\n    function allowItemInSlot(\\n        address itemAddress,\\n        uint itemId,\\n        uint slot\\n    ) external;\\n\\n    function allowSlotToUnequip(\\n        uint slot\\n    ) external;\\n\\n    function equip(\\n        uint arcadianId,\\n        address itemAddress,\\n        uint itemId,\\n        uint amount,\\n        uint slot\\n    ) external;\\n\\n    function equipBatch(\\n        uint arcadianId,\\n        address itemAddress,\\n        uint[] calldata itemIds,\\n        uint[] calldata amounts,\\n        uint[] calldata slots\\n    ) external;\\n\\n    function unequip(\\n        uint arcadianId,\\n        uint slot,\\n        bool unequipAll,\\n        uint amount\\n    ) external;\\n\\n    function unequipAllItems(\\n        uint arcadianId\\n    ) external;\\n\\n    function equipped(\\n        uint arcadianId,\\n        uint slot\\n    ) external view returns (EquippedItem memory item);\\n\\n    function equippedAll(\\n        uint arcadianId\\n    ) external view returns (EquippedItem[] memory item);\\n}\",\"keccak256\":\"0x4c11b22adab9661b5151206adc46847a422c0378663b7dfe8c25b3e52deb9e9f\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/merkle/MerkleInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { MerkleProof } from \\\"@solidstate/contracts/cryptography/MerkleProof.sol\\\";\\nimport { MerkleStorage } from \\\"./MerkleStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract MerkleInternal is RolesInternal {\\n\\n    function _getMerkleRoot() internal view returns (bytes32) {\\n        return MerkleStorage.layout().merkleRoot;\\n    }\\n\\n    function _updateMerkleRoot(bytes32 merkleRoot) onlyManager internal {\\n        MerkleStorage.layout().merkleRoot = merkleRoot;\\n    }\\n\\n    // To create 'leaf' use abi.encode(leafProp1, leafProp2, ...)\\n    function _validateLeaf(bytes32[] memory proof, bytes memory _leaf) internal view returns (bool isValid) {\\n        bytes32 leaf = keccak256(bytes.concat(keccak256(_leaf)));\\n        isValid = MerkleProof.verify(proof, MerkleStorage.layout().merkleRoot, leaf);\\n        require(isValid, \\\"Data not included in merkle\\\");\\n    }\\n}\",\"keccak256\":\"0x02be8835f8ceca270eba33286d3f83fc68972278d229bdfe2b9589231c240cf7\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/merkle/MerkleStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary MerkleStorage {\\n\\n    bytes32 constant MERKLE_STORAGE_POSITION =\\n        keccak256(\\\"merkle.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 merkleRoot;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = MERKLE_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x5ed5d36d30cda447858ff4ad784c43281a332ef4be8644681327f8fab3c71ce8\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(_getDefaultAdminRole());\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        _checkRole(_getManagerRole());\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        _checkRole(_getMinterRole());\\n        _;\\n    }\\n\\n    function _getDefaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _getManagerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _getMinterRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().minterRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.minterRole = keccak256(\\\"minter.role\\\");\\n\\n        _grantRole(_getDefaultAdminRole(), msg.sender);\\n        _grantRole(_getManagerRole(), msg.sender);\\n        _grantRole(_getMinterRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0x43a83b4e0383d0fb5c977b6c1119e4c7671e575964f0c8f7b4bb66242af716e4\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 minterRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x203cfbe268a1ac5fe32593c66ace04b576dfb2e25173e02654e504cf0de44d71\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { MerkleProof } from \\\"@solidstate/contracts/cryptography/MerkleProof.sol\\\";\\nimport { WhitelistStorage } from \\\"./WhitelistStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract WhitelistInternal is RolesInternal {\\n\\n    event WhitelistBalanceChanged(address account, int amount, uint totalElegibleAmount, uint totalClaimedAmount);\\n\\n    function _getWhitelistClaimed(address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().claimed[account];\\n    }\\n\\n    function _getWhitelistBalance(address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().elegible[account];\\n    }\\n\\n    function _consumeWhitelist(address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        require(whitelistSL.elegible[account] >= amount, \\\"WhitelistInternal: amount exceeds elegible amount\\\");\\n        whitelistSL.elegible[account] -= amount;\\n        emit WhitelistBalanceChanged(msg.sender, int(amount), whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _addToWhitelist(address account, uint amount) onlyManager internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        whitelistSL.elegible[account] += amount;\\n        emit WhitelistBalanceChanged(msg.sender, int(amount), whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _addToWhitelistBatch(address[] calldata accounts, uint[] calldata amounts) onlyManager internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        for (uint i = 0; i < accounts.length; i++) {\\n            WhitelistStorage.layout().elegible[accounts[i]] += amounts[i];\\n            emit WhitelistBalanceChanged(msg.sender, int(amounts[i]), whitelistSL.elegible[accounts[i]], whitelistSL.claimed[accounts[i]]);\\n        }\\n    }\\n}\",\"keccak256\":\"0xc07f22b8f094a17be7a8d2aae9634fb193c7b073f732ee016a7b5ed5a0347bbd\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary WhitelistStorage {\\n\\n    bytes32 constant WHITELIST_STORAGE_POSITION =\\n        keccak256(\\\"whitelist.storage.position\\\");\\n\\n    struct Layout {\\n        mapping(address => uint) claimed;\\n        mapping(address => uint) elegible;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = WHITELIST_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x1eae9928eb6da719f50ca96c4081e0d83e8d5cfb6dee9ca57c4f0e3a5fc9cd39\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612dc4806100206000396000f3fe60806040526004361061019c5760003560e01c806370a08231116100ec578063b88d4fde1161008a578063c87b56dd11610064578063c87b56dd1461043d578063db718c941461045d578063e985e9c514610472578063f4a0a5281461049257600080fd5b8063b88d4fde146103f5578063ba58bb1714610408578063c22cbb5d1461041d57600080fd5b80638df40be8116100c65780638df40be81461038b57806395d89b41146103ab578063a22cb465146103c0578063a7f93ebd146103e057600080fd5b806370a0823114610336578063714c53981461035657806383ccaef71461036b57600080fd5b806323b872dd1161015957806342842e0e1161013357806342842e0e146102c35780634f6ccce7146102d657806355f804b3146102f65780636352211e1461031657600080fd5b806323b872dd146102705780632f52ebb7146102835780632f745c59146102a357600080fd5b806301ffc9a7146101a157806306fdde03146101d6578063081812fc146101f8578063095ea7b3146102305780631249c58b1461024557806318160ddd1461024d575b600080fd5b3480156101ad57600080fd5b506101c16101bc3660046123d9565b6104b2565b60405190151581526020015b60405180910390f35b3480156101e257600080fd5b506101eb6104f5565b6040516101cd9190612446565b34801561020457600080fd5b50610218610213366004612459565b610504565b6040516001600160a01b0390911681526020016101cd565b61024361023e366004612487565b61050f565b005b61024361051d565b34801561025957600080fd5b50610262610573565b6040519081526020016101cd565b61024361027e3660046124b3565b61057d565b34801561028f57600080fd5b5061024361029e366004612588565b61058d565b3480156102af57600080fd5b506102626102be366004612487565b61074a565b6102436102d13660046124b3565b61075d565b3480156102e257600080fd5b506102626102f1366004612459565b610768565b34801561030257600080fd5b50610243610311366004612682565b610773565b34801561032257600080fd5b50610218610331366004612459565b61079d565b34801561034257600080fd5b506102626103513660046126cb565b6107a8565b34801561036257600080fd5b506101eb6107b3565b34801561037757600080fd5b50610243610386366004612459565b6107bd565b34801561039757600080fd5b506102626103a63660046126cb565b6107df565b3480156103b757600080fd5b506101eb61081c565b3480156103cc57600080fd5b506102436103db3660046126e8565b610826565b3480156103ec57600080fd5b50610262610830565b610243610403366004612726565b61085a565b34801561041457600080fd5b5061021861086c565b34801561042957600080fd5b506102436104383660046126cb565b61088d565b34801561044957600080fd5b506101eb610458366004612459565b6108af565b34801561046957600080fd5b506102626108ba565b34801561047e57600080fd5b506101c161048d3660046127a6565b6108e4565b34801561049e57600080fd5b506102436104ad366004612459565b6108f0565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b60606104ff610912565b905090565b60006104ef826109b1565b6105198282610a14565b5050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361056057604051635db5c7cd60e11b815260040160405180910390fd5b6002815561056d33610b17565b60019055565b60006104ff610c7e565b610588838383610c97565b505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036105d057604051635db5c7cd60e11b815260040160405180910390fd5b600281553360009081527f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74646020526040902054600080516020612d4f83398151915290841161065b5760405162461bcd60e51b8152602060048201526012602482015271105b1b081d1bdad95b9cc818db185a5b595960721b60448201526064015b60405180910390fd5b6040805133602082015280820186905281518082038301815260609091019091526106868482610cd5565b503360009081526001830160205260408120546106a390876127ea565b905060005b818110156106ea5760028401546106bf3382610d92565b6002850180549060006106d1836127fd565b91905055505080806106e2906127fd565b9150506106a8565b503360009081526001840160205260408120805483929061070c908490612816565b9091555050604051819033907fd12dbe98ee2acccf8e61fdca25dfcfdc19c578ac57d0302d6b2a177ac4a47e8690600090a350506001909155505050565b60006107568383610e87565b9392505050565b610588838383610ec8565b60006104ef82610ee3565b61079161078c600080516020612cdd8339815191525490565b610efd565b61079a81610f07565b50565b60006104ef82610f81565b60006104ef82610fc5565b60606104ff61102e565b6107d661078c600080516020612cdd8339815191525490565b61079a8161104d565b6001600160a01b03811660009081527f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746460205260408120546104ef565b60606104ff6110c0565b61051982826110df565b60006104ff7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74675490565b61086684848484611193565b50505050565b60006104ff600080516020612d4f833981519152546001600160a01b031690565b6108a661078c600080516020612cdd8339815191525490565b61079a816111d2565b60606104ef826112e4565b60006104ff7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74665490565b60006107568383611454565b61090961078c600080516020612cdd8339815191525490565b61079a816114a1565b6060600080516020612d6f833981519152805461092e90612829565b80601f016020809104026020016040519081016040528092919081815260200182805461095a90612829565b80156109a75780601f1061097c576101008083540402835291602001916109a7565b820191906000526020600020905b81548152906001019060200180831161098a57829003601f168201915b5050505050905090565b60006109bc82611514565b6109d95760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b610a1f82823461152e565b6000610a2a82610f81565b9050806001600160a01b0316836001600160a01b031603610a5e5760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b03821614801590610a7e5750610a7c8133611454565b155b15610a9c57604051632f5de44f60e01b815260040160405180910390fd5b60008281527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a9602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746754600080516020612d4f833981519152903414610bab5760405162461bcd60e51b815260206004820152602b60248201527f417263616469616e73496e7465726e616c2e5f6d696e743a20496e76616c696460448201526a081c185e48185b5bdd5b9d60aa1b6064820152608401610652565b6001600160a01b0382166000908152600182016020526040812054610bcf84610fc5565b610bd991906127ea565b905081600301548110610c545760405162461bcd60e51b815260206004820152603b60248201527f417263616469616e73496e7465726e616c2e5f6d696e743a2055736572206d6160448201527f78696d756d206d696e74656420746f6b656e73207265616368656400000000006064820152608401610652565b610c62838360020154610d92565b600282018054906000610c74836127fd565b9190505550505050565b60006104ff600080516020612d2f833981519152611558565b610ca383838334611562565b610cad338261158d565b610cca57604051632f5de44f60e01b815260040160405180910390fd5b610588838383611613565b6000808280519060200120604051602001610cf291815260200190565b604051602081830303815290604052805190602001209050610d3c84610d357f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c0890565b54836117a2565b915081610d8b5760405162461bcd60e51b815260206004820152601b60248201527f44617461206e6f7420696e636c7564656420696e206d65726b6c6500000000006044820152606401610652565b5092915050565b6001600160a01b038216610db9576040516311f2988d60e11b815260040160405180910390fd5b610dc281611514565b15610de057604051630d86bb7b60e31b815260040160405180910390fd5b610dec60008383611847565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020612d2f83398151915290610e3d908361185d565b50610e49818385611869565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260408120610756908361187f565b61058883838360405180602001604052806000815250611193565b6000610d8b600080516020612d2f8339815191528361188b565b61079a81336118a7565b604051600080516020612d6f8339815191529033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea90610f6b907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b3908690612863565b60405180910390a2600281016105888382612950565b600080610f9c600080516020612d2f83398151915284611909565b90506001600160a01b0381166104ef57604051637e1a7d8b60e01b815260040160405180910390fd5b60006001600160a01b038216610fee57604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604090206104ef90611558565b6060600080516020612d6f833981519152600201805461092e90612829565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74665460408051918252602082018390528051600080516020612d4f8339815191529233927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92918290030190a260030155565b6060600080516020612d6f833981519152600101805461092e90612829565b336001600160a01b038316036111085760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61119f84848434611562565b6111a9338361158d565b6111c657604051632f5de44f60e01b815260040160405180910390fd5b61086684848484611915565b6111eb61078c600080516020612cdd8339815191525490565b6001600160a01b0381166112675760405162461bcd60e51b815260206004820152603760248201527f417263616469616e73496e7465726e616c2e5f736574496e76656e746f72794160448201527f6464726573733a20496e76616c696420616464726573730000000000000000006064820152608401610652565b600080516020612d4f83398151915280546001600160a01b038381169116146105195780546040516001600160a01b0380851692169033907faca128ed2b41b1471dae948d022df19c0d331f9329070f1935e8db313046d84c90600090a480546001600160a01b0383166001600160a01b03199091161781555050565b60606000611307600080516020612d4f833981519152546001600160a01b031690565b9050600061131484611949565b604051634f1e659560e11b8152600481018690529091506000906001600160a01b03841690639e3ccb2a90602401600060405180830381865afa15801561135f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113879190810190612a10565b90508160405160200161139a9190612ad7565b604051602081830303815290604052915060005b815181101561144a5760006113df8383815181106113ce576113ce612b06565b602002602001015160200151611b2a565b9050816000036114125783816040516020016113fc929190612b1c565b6040516020818303038152906040529350611437565b8381604051602001611425929190612b4b565b60405160208183030381529060405293505b5080611442816127fd565b9150506113ae565b5090949350505050565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74675460408051918252602082018390528051600080516020612d4f8339815191529233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260040155565b60006104ef600080516020612d2f83398151915283611c2b565b801561154d5760405163b56d7c1b60e01b815260040160405180910390fd5b610588838383611c43565b60006104ef825490565b8015611581576040516322b1813960e01b815260040160405180910390fd5b61086684848484611c62565b600061159882611514565b6115b55760405163c1b843ef60e01b815260040160405180910390fd5b60006115c083610f81565b9050806001600160a01b0316846001600160a01b031614806115fb5750836001600160a01b03166115f0846109b1565b6001600160a01b0316145b8061160b575061160b8185611454565b949350505050565b600061161e82610f81565b9050836001600160a01b0316816001600160a01b03161461165257604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b038316611679576040516340311a0960e01b815260040160405180910390fd5b611684848484611847565b6001600160a01b03841660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020612d2f833981519152906116d59084611c86565b506001600160a01b038416600090815260028201602052604090206116fa908461185d565b50611706818486611869565b50600083815260038201602052604080822080546001600160a01b0319169055518491906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a482846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b600081815b855181101561183c5760008682815181106117c4576117c4612b06565b60200260200101519050808311611806576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611833565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b506001016117a7565b509092149392505050565b611852838383611c92565b610588838383611d11565b60006107568383611d1c565b600061160b84846001600160a01b038516611d5f565b60006107568383611dfe565b600080808061189a8686611e4a565b9097909650945050505050565b6118b18282611ead565b610519576118c7816001600160a01b0316611ee4565b6118d2836020611ef6565b6040516020016118e3929190612b87565b60408051601f198184030181529082905262461bcd60e51b825261065291600401612446565b60006107568383612049565b611920848484611613565b61192c848484846120ad565b61086657604051639ff10cdd60e01b815260040160405180910390fd5b606061195482611514565b61197057604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604081208054600080516020612d6f8339815191529291906119ba90612829565b80601f01602080910402602001604051908101604052809291908181526020018280546119e690612829565b8015611a335780601f10611a0857610100808354040283529160200191611a33565b820191906000526020600020905b815481529060010190602001808311611a1657829003601f168201915b505050505090506000826002018054611a4b90612829565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7790612829565b8015611ac45780601f10611a9957610100808354040283529160200191611ac4565b820191906000526020600020905b815481529060010190602001808311611aa757829003601f168201915b505050505090508051600003611adc57509392505050565b815115611b0f578082604051602001611af6929190612b1c565b6040516020818303038152906040529350505050919050565b80611b1986611b2a565b604051602001611af6929190612b1c565b606081600003611b515750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611b7b5780611b65816127fd565b9150611b749050600a83612c12565b9150611b55565b60008167ffffffffffffffff811115611b9657611b966124f4565b6040519080825280601f01601f191660200182016040528015611bc0576020820181803683370190505b5090505b841561160b57611bd56001836127ea565b9150611be2600a86612c26565b611bed906030612816565b60f81b818381518110611c0257611c02612b06565b60200101906001600160f81b031916908160001a905350611c24600a86612c12565b9450611bc4565b60008181526001830160205260408120541515610756565b80156105885760405163b56d7c1b60e01b815260040160405180910390fd5b8015611c81576040516322b1813960e01b815260040160405180910390fd5b610866565b6000610756838361217e565b6000611cb3600080516020612d4f833981519152546001600160a01b031690565b60405163622d55fb60e11b8152600481018490529091506001600160a01b0382169063c45aabf690602401600060405180830381600087803b158015611cf857600080fd5b505af1925050508015611d09575060015b506108668484845b610588838383612238565b60008181526001830160205260408120546104ef575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6000828152600184016020526040812054808203611dc6575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610756565b82856000016001830381548110611ddf57611ddf612b06565b9060005260206000209060020201600101819055506000915050610756565b81546000908210611e225760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110611e3757611e37612b06565b9060005260206000200154905092915050565b815460009081908310611e705760405163022fd82760e31b815260040160405180910390fd5b6000846000018481548110611e8757611e87612b06565b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206107569083612243565b60606104ef6001600160a01b03831660145b60606000611f05836002612c3a565b611f10906002612816565b67ffffffffffffffff811115611f2857611f286124f4565b6040519080825280601f01601f191660200182016040528015611f52576020820181803683370190505b509050600360fc1b81600081518110611f6d57611f6d612b06565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f9c57611f9c612b06565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115612029576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fec57611fec612b06565b1a60f81b82828151811061200257612002612b06565b60200101906001600160f81b031916908160001a90535060049490941c9360001901611fbb565b5083156107565760405163c913478560e01b815260040160405180910390fd5b600081815260018301602052604081205480820361207a57604051633d547ec560e21b815260040160405180910390fd5b83600001600182038154811061209257612092612b06565b90600052602060002090600202016001015491505092915050565b60006001600160a01b0384163b6120c65750600161160b565b600061214763150b7a0260e01b338887876040516024016120ea9493929190612c51565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001612cfd603291396001600160a01b0388169190612265565b905060008180602001905181019061215f9190612c8d565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b60008181526001830160205260408120548015610d8b578354600090859060001981019081106121b0576121b0612b06565b90600052602060002001549050808560000160018403815481106121d6576121d6612b06565b600091825260208083209091019290925591825260018601905260409020819055835484908061220857612208612caa565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b610588838383612274565b6001600160a01b03811660009081526001830160205260408120541515610756565b606061160b84846000856122b8565b6001600160a01b0382166105885760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812061058891612375565b6060843b6122d957604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b031685876040516122f59190612cc0565b60006040518083038185875af1925050503d8060008114612332576040519150601f19603f3d011682016040523d82523d6000602084013e612337565b606091505b5091509150811561234b57915061160b9050565b80511561235b5780518082602001fd5b8360405162461bcd60e51b81526004016106529190612446565b50805461238190612829565b6000825580601f10612391575050565b601f01602090049060005260206000209081019061079a91905b808211156123bf57600081556001016123ab565b5090565b6001600160e01b03198116811461079a57600080fd5b6000602082840312156123eb57600080fd5b8135610756816123c3565b60005b838110156124115781810151838201526020016123f9565b50506000910152565b600081518084526124328160208601602086016123f6565b601f01601f19169290920160200192915050565b602081526000610756602083018461241a565b60006020828403121561246b57600080fd5b5035919050565b6001600160a01b038116811461079a57600080fd5b6000806040838503121561249a57600080fd5b82356124a581612472565b946020939093013593505050565b6000806000606084860312156124c857600080fd5b83356124d381612472565b925060208401356124e381612472565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561252d5761252d6124f4565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561255c5761255c6124f4565b604052919050565b600067ffffffffffffffff82111561257e5761257e6124f4565b5060051b60200190565b6000806040838503121561259b57600080fd5b8235915060208084013567ffffffffffffffff8111156125ba57600080fd5b8401601f810186136125cb57600080fd5b80356125de6125d982612564565b612533565b81815260059190911b820183019083810190888311156125fd57600080fd5b928401925b8284101561261b57833582529284019290840190612602565b80955050505050509250929050565b600067ffffffffffffffff831115612644576126446124f4565b612657601f8401601f1916602001612533565b905082815283838301111561266b57600080fd5b828260208301376000602084830101529392505050565b60006020828403121561269457600080fd5b813567ffffffffffffffff8111156126ab57600080fd5b8201601f810184136126bc57600080fd5b61160b8482356020840161262a565b6000602082840312156126dd57600080fd5b813561075681612472565b600080604083850312156126fb57600080fd5b823561270681612472565b91506020830135801515811461271b57600080fd5b809150509250929050565b6000806000806080858703121561273c57600080fd5b843561274781612472565b9350602085013561275781612472565b925060408501359150606085013567ffffffffffffffff81111561277a57600080fd5b8501601f8101871361278b57600080fd5b61279a8782356020840161262a565b91505092959194509250565b600080604083850312156127b957600080fd5b82356127c481612472565b9150602083013561271b81612472565b634e487b7160e01b600052601160045260246000fd5b818103818111156104ef576104ef6127d4565b60006001820161280f5761280f6127d4565b5060010190565b808201808211156104ef576104ef6127d4565b600181811c9082168061283d57607f821691505b60208210810361285d57634e487b7160e01b600052602260045260246000fd5b50919050565b60408152600080845461287581612829565b806040860152606060018084166000811461289757600181146128b1576128e2565b60ff1985168884015283151560051b8801830195506128e2565b8960005260208060002060005b868110156128d95781548b82018701529084019082016128be565b8a018501975050505b505050505082810360208401526128f9818561241a565b95945050505050565b601f82111561058857600081815260208120601f850160051c810160208610156129295750805b601f850160051c820191505b8181101561294857828155600101612935565b505050505050565b815167ffffffffffffffff81111561296a5761296a6124f4565b61297e816129788454612829565b84612902565b602080601f8311600181146129b3576000841561299b5750858301515b600019600386901b1c1916600185901b178555612948565b600085815260208120601f198616915b828110156129e2578886015182559484019460019091019084016129c3565b5085821015612a005787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808385031215612a2357600080fd5b825167ffffffffffffffff811115612a3a57600080fd5b8301601f81018513612a4b57600080fd5b8051612a596125d982612564565b81815260609182028301840191848201919088841115612a7857600080fd5b938501935b83851015612acb5780858a031215612a955760008081fd5b612a9d61250a565b8551612aa881612472565b815285870151878201526040808701519082015283529384019391850191612a7d565b50979650505050505050565b60008251612ae98184602087016123f6565b6a2f3f746f6b656e4964733d60a81b920191825250600b01919050565b634e487b7160e01b600052603260045260246000fd5b60008351612b2e8184602088016123f6565b835190830190612b428183602088016123f6565b01949350505050565b60008351612b5d8184602088016123f6565b600b60fa1b9083019081528351612b7b8160018401602088016123f6565b01600101949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612bbf8160178501602088016123f6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612bf08160288401602088016123f6565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b600082612c2157612c21612bfc565b500490565b600082612c3557612c35612bfc565b500690565b80820281158282048414176104ef576104ef6127d4565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612c83608083018461241a565b9695505050505050565b600060208284031215612c9f57600080fd5b8151610756816123c3565b634e487b7160e01b600052603160045260246000fd5b60008251612cd28184602087016123f6565b919091019291505056fef6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa724552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a687a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746399574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1a26469706673582212204ce98f01d382609818c824f523e5fdd0e764b930850aba262eb8641e46cc7b3964736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c806370a08231116100ec578063b88d4fde1161008a578063c87b56dd11610064578063c87b56dd1461043d578063db718c941461045d578063e985e9c514610472578063f4a0a5281461049257600080fd5b8063b88d4fde146103f5578063ba58bb1714610408578063c22cbb5d1461041d57600080fd5b80638df40be8116100c65780638df40be81461038b57806395d89b41146103ab578063a22cb465146103c0578063a7f93ebd146103e057600080fd5b806370a0823114610336578063714c53981461035657806383ccaef71461036b57600080fd5b806323b872dd1161015957806342842e0e1161013357806342842e0e146102c35780634f6ccce7146102d657806355f804b3146102f65780636352211e1461031657600080fd5b806323b872dd146102705780632f52ebb7146102835780632f745c59146102a357600080fd5b806301ffc9a7146101a157806306fdde03146101d6578063081812fc146101f8578063095ea7b3146102305780631249c58b1461024557806318160ddd1461024d575b600080fd5b3480156101ad57600080fd5b506101c16101bc3660046123d9565b6104b2565b60405190151581526020015b60405180910390f35b3480156101e257600080fd5b506101eb6104f5565b6040516101cd9190612446565b34801561020457600080fd5b50610218610213366004612459565b610504565b6040516001600160a01b0390911681526020016101cd565b61024361023e366004612487565b61050f565b005b61024361051d565b34801561025957600080fd5b50610262610573565b6040519081526020016101cd565b61024361027e3660046124b3565b61057d565b34801561028f57600080fd5b5061024361029e366004612588565b61058d565b3480156102af57600080fd5b506102626102be366004612487565b61074a565b6102436102d13660046124b3565b61075d565b3480156102e257600080fd5b506102626102f1366004612459565b610768565b34801561030257600080fd5b50610243610311366004612682565b610773565b34801561032257600080fd5b50610218610331366004612459565b61079d565b34801561034257600080fd5b506102626103513660046126cb565b6107a8565b34801561036257600080fd5b506101eb6107b3565b34801561037757600080fd5b50610243610386366004612459565b6107bd565b34801561039757600080fd5b506102626103a63660046126cb565b6107df565b3480156103b757600080fd5b506101eb61081c565b3480156103cc57600080fd5b506102436103db3660046126e8565b610826565b3480156103ec57600080fd5b50610262610830565b610243610403366004612726565b61085a565b34801561041457600080fd5b5061021861086c565b34801561042957600080fd5b506102436104383660046126cb565b61088d565b34801561044957600080fd5b506101eb610458366004612459565b6108af565b34801561046957600080fd5b506102626108ba565b34801561047e57600080fd5b506101c161048d3660046127a6565b6108e4565b34801561049e57600080fd5b506102436104ad366004612459565b6108f0565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b60606104ff610912565b905090565b60006104ef826109b1565b6105198282610a14565b5050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361056057604051635db5c7cd60e11b815260040160405180910390fd5b6002815561056d33610b17565b60019055565b60006104ff610c7e565b610588838383610c97565b505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036105d057604051635db5c7cd60e11b815260040160405180910390fd5b600281553360009081527f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74646020526040902054600080516020612d4f83398151915290841161065b5760405162461bcd60e51b8152602060048201526012602482015271105b1b081d1bdad95b9cc818db185a5b595960721b60448201526064015b60405180910390fd5b6040805133602082015280820186905281518082038301815260609091019091526106868482610cd5565b503360009081526001830160205260408120546106a390876127ea565b905060005b818110156106ea5760028401546106bf3382610d92565b6002850180549060006106d1836127fd565b91905055505080806106e2906127fd565b9150506106a8565b503360009081526001840160205260408120805483929061070c908490612816565b9091555050604051819033907fd12dbe98ee2acccf8e61fdca25dfcfdc19c578ac57d0302d6b2a177ac4a47e8690600090a350506001909155505050565b60006107568383610e87565b9392505050565b610588838383610ec8565b60006104ef82610ee3565b61079161078c600080516020612cdd8339815191525490565b610efd565b61079a81610f07565b50565b60006104ef82610f81565b60006104ef82610fc5565b60606104ff61102e565b6107d661078c600080516020612cdd8339815191525490565b61079a8161104d565b6001600160a01b03811660009081527f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746460205260408120546104ef565b60606104ff6110c0565b61051982826110df565b60006104ff7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74675490565b61086684848484611193565b50505050565b60006104ff600080516020612d4f833981519152546001600160a01b031690565b6108a661078c600080516020612cdd8339815191525490565b61079a816111d2565b60606104ef826112e4565b60006104ff7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74665490565b60006107568383611454565b61090961078c600080516020612cdd8339815191525490565b61079a816114a1565b6060600080516020612d6f833981519152805461092e90612829565b80601f016020809104026020016040519081016040528092919081815260200182805461095a90612829565b80156109a75780601f1061097c576101008083540402835291602001916109a7565b820191906000526020600020905b81548152906001019060200180831161098a57829003601f168201915b5050505050905090565b60006109bc82611514565b6109d95760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b610a1f82823461152e565b6000610a2a82610f81565b9050806001600160a01b0316836001600160a01b031603610a5e5760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b03821614801590610a7e5750610a7c8133611454565b155b15610a9c57604051632f5de44f60e01b815260040160405180910390fd5b60008281527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a9602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746754600080516020612d4f833981519152903414610bab5760405162461bcd60e51b815260206004820152602b60248201527f417263616469616e73496e7465726e616c2e5f6d696e743a20496e76616c696460448201526a081c185e48185b5bdd5b9d60aa1b6064820152608401610652565b6001600160a01b0382166000908152600182016020526040812054610bcf84610fc5565b610bd991906127ea565b905081600301548110610c545760405162461bcd60e51b815260206004820152603b60248201527f417263616469616e73496e7465726e616c2e5f6d696e743a2055736572206d6160448201527f78696d756d206d696e74656420746f6b656e73207265616368656400000000006064820152608401610652565b610c62838360020154610d92565b600282018054906000610c74836127fd565b9190505550505050565b60006104ff600080516020612d2f833981519152611558565b610ca383838334611562565b610cad338261158d565b610cca57604051632f5de44f60e01b815260040160405180910390fd5b610588838383611613565b6000808280519060200120604051602001610cf291815260200190565b604051602081830303815290604052805190602001209050610d3c84610d357f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c0890565b54836117a2565b915081610d8b5760405162461bcd60e51b815260206004820152601b60248201527f44617461206e6f7420696e636c7564656420696e206d65726b6c6500000000006044820152606401610652565b5092915050565b6001600160a01b038216610db9576040516311f2988d60e11b815260040160405180910390fd5b610dc281611514565b15610de057604051630d86bb7b60e31b815260040160405180910390fd5b610dec60008383611847565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020612d2f83398151915290610e3d908361185d565b50610e49818385611869565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260408120610756908361187f565b61058883838360405180602001604052806000815250611193565b6000610d8b600080516020612d2f8339815191528361188b565b61079a81336118a7565b604051600080516020612d6f8339815191529033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea90610f6b907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b3908690612863565b60405180910390a2600281016105888382612950565b600080610f9c600080516020612d2f83398151915284611909565b90506001600160a01b0381166104ef57604051637e1a7d8b60e01b815260040160405180910390fd5b60006001600160a01b038216610fee57604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604090206104ef90611558565b6060600080516020612d6f833981519152600201805461092e90612829565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74665460408051918252602082018390528051600080516020612d4f8339815191529233927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92918290030190a260030155565b6060600080516020612d6f833981519152600101805461092e90612829565b336001600160a01b038316036111085760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61119f84848434611562565b6111a9338361158d565b6111c657604051632f5de44f60e01b815260040160405180910390fd5b61086684848484611915565b6111eb61078c600080516020612cdd8339815191525490565b6001600160a01b0381166112675760405162461bcd60e51b815260206004820152603760248201527f417263616469616e73496e7465726e616c2e5f736574496e76656e746f72794160448201527f6464726573733a20496e76616c696420616464726573730000000000000000006064820152608401610652565b600080516020612d4f83398151915280546001600160a01b038381169116146105195780546040516001600160a01b0380851692169033907faca128ed2b41b1471dae948d022df19c0d331f9329070f1935e8db313046d84c90600090a480546001600160a01b0383166001600160a01b03199091161781555050565b60606000611307600080516020612d4f833981519152546001600160a01b031690565b9050600061131484611949565b604051634f1e659560e11b8152600481018690529091506000906001600160a01b03841690639e3ccb2a90602401600060405180830381865afa15801561135f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113879190810190612a10565b90508160405160200161139a9190612ad7565b604051602081830303815290604052915060005b815181101561144a5760006113df8383815181106113ce576113ce612b06565b602002602001015160200151611b2a565b9050816000036114125783816040516020016113fc929190612b1c565b6040516020818303038152906040529350611437565b8381604051602001611425929190612b4b565b60405160208183030381529060405293505b5080611442816127fd565b9150506113ae565b5090949350505050565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74675460408051918252602082018390528051600080516020612d4f8339815191529233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260040155565b60006104ef600080516020612d2f83398151915283611c2b565b801561154d5760405163b56d7c1b60e01b815260040160405180910390fd5b610588838383611c43565b60006104ef825490565b8015611581576040516322b1813960e01b815260040160405180910390fd5b61086684848484611c62565b600061159882611514565b6115b55760405163c1b843ef60e01b815260040160405180910390fd5b60006115c083610f81565b9050806001600160a01b0316846001600160a01b031614806115fb5750836001600160a01b03166115f0846109b1565b6001600160a01b0316145b8061160b575061160b8185611454565b949350505050565b600061161e82610f81565b9050836001600160a01b0316816001600160a01b03161461165257604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b038316611679576040516340311a0960e01b815260040160405180910390fd5b611684848484611847565b6001600160a01b03841660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020612d2f833981519152906116d59084611c86565b506001600160a01b038416600090815260028201602052604090206116fa908461185d565b50611706818486611869565b50600083815260038201602052604080822080546001600160a01b0319169055518491906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a482846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b600081815b855181101561183c5760008682815181106117c4576117c4612b06565b60200260200101519050808311611806576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611833565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b506001016117a7565b509092149392505050565b611852838383611c92565b610588838383611d11565b60006107568383611d1c565b600061160b84846001600160a01b038516611d5f565b60006107568383611dfe565b600080808061189a8686611e4a565b9097909650945050505050565b6118b18282611ead565b610519576118c7816001600160a01b0316611ee4565b6118d2836020611ef6565b6040516020016118e3929190612b87565b60408051601f198184030181529082905262461bcd60e51b825261065291600401612446565b60006107568383612049565b611920848484611613565b61192c848484846120ad565b61086657604051639ff10cdd60e01b815260040160405180910390fd5b606061195482611514565b61197057604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604081208054600080516020612d6f8339815191529291906119ba90612829565b80601f01602080910402602001604051908101604052809291908181526020018280546119e690612829565b8015611a335780601f10611a0857610100808354040283529160200191611a33565b820191906000526020600020905b815481529060010190602001808311611a1657829003601f168201915b505050505090506000826002018054611a4b90612829565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7790612829565b8015611ac45780601f10611a9957610100808354040283529160200191611ac4565b820191906000526020600020905b815481529060010190602001808311611aa757829003601f168201915b505050505090508051600003611adc57509392505050565b815115611b0f578082604051602001611af6929190612b1c565b6040516020818303038152906040529350505050919050565b80611b1986611b2a565b604051602001611af6929190612b1c565b606081600003611b515750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611b7b5780611b65816127fd565b9150611b749050600a83612c12565b9150611b55565b60008167ffffffffffffffff811115611b9657611b966124f4565b6040519080825280601f01601f191660200182016040528015611bc0576020820181803683370190505b5090505b841561160b57611bd56001836127ea565b9150611be2600a86612c26565b611bed906030612816565b60f81b818381518110611c0257611c02612b06565b60200101906001600160f81b031916908160001a905350611c24600a86612c12565b9450611bc4565b60008181526001830160205260408120541515610756565b80156105885760405163b56d7c1b60e01b815260040160405180910390fd5b8015611c81576040516322b1813960e01b815260040160405180910390fd5b610866565b6000610756838361217e565b6000611cb3600080516020612d4f833981519152546001600160a01b031690565b60405163622d55fb60e11b8152600481018490529091506001600160a01b0382169063c45aabf690602401600060405180830381600087803b158015611cf857600080fd5b505af1925050508015611d09575060015b506108668484845b610588838383612238565b60008181526001830160205260408120546104ef575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6000828152600184016020526040812054808203611dc6575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610756565b82856000016001830381548110611ddf57611ddf612b06565b9060005260206000209060020201600101819055506000915050610756565b81546000908210611e225760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110611e3757611e37612b06565b9060005260206000200154905092915050565b815460009081908310611e705760405163022fd82760e31b815260040160405180910390fd5b6000846000018481548110611e8757611e87612b06565b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206107569083612243565b60606104ef6001600160a01b03831660145b60606000611f05836002612c3a565b611f10906002612816565b67ffffffffffffffff811115611f2857611f286124f4565b6040519080825280601f01601f191660200182016040528015611f52576020820181803683370190505b509050600360fc1b81600081518110611f6d57611f6d612b06565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f9c57611f9c612b06565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115612029576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fec57611fec612b06565b1a60f81b82828151811061200257612002612b06565b60200101906001600160f81b031916908160001a90535060049490941c9360001901611fbb565b5083156107565760405163c913478560e01b815260040160405180910390fd5b600081815260018301602052604081205480820361207a57604051633d547ec560e21b815260040160405180910390fd5b83600001600182038154811061209257612092612b06565b90600052602060002090600202016001015491505092915050565b60006001600160a01b0384163b6120c65750600161160b565b600061214763150b7a0260e01b338887876040516024016120ea9493929190612c51565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001612cfd603291396001600160a01b0388169190612265565b905060008180602001905181019061215f9190612c8d565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b60008181526001830160205260408120548015610d8b578354600090859060001981019081106121b0576121b0612b06565b90600052602060002001549050808560000160018403815481106121d6576121d6612b06565b600091825260208083209091019290925591825260018601905260409020819055835484908061220857612208612caa565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b610588838383612274565b6001600160a01b03811660009081526001830160205260408120541515610756565b606061160b84846000856122b8565b6001600160a01b0382166105885760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812061058891612375565b6060843b6122d957604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b031685876040516122f59190612cc0565b60006040518083038185875af1925050503d8060008114612332576040519150601f19603f3d011682016040523d82523d6000602084013e612337565b606091505b5091509150811561234b57915061160b9050565b80511561235b5780518082602001fd5b8360405162461bcd60e51b81526004016106529190612446565b50805461238190612829565b6000825580601f10612391575050565b601f01602090049060005260206000209081019061079a91905b808211156123bf57600081556001016123ab565b5090565b6001600160e01b03198116811461079a57600080fd5b6000602082840312156123eb57600080fd5b8135610756816123c3565b60005b838110156124115781810151838201526020016123f9565b50506000910152565b600081518084526124328160208601602086016123f6565b601f01601f19169290920160200192915050565b602081526000610756602083018461241a565b60006020828403121561246b57600080fd5b5035919050565b6001600160a01b038116811461079a57600080fd5b6000806040838503121561249a57600080fd5b82356124a581612472565b946020939093013593505050565b6000806000606084860312156124c857600080fd5b83356124d381612472565b925060208401356124e381612472565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561252d5761252d6124f4565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561255c5761255c6124f4565b604052919050565b600067ffffffffffffffff82111561257e5761257e6124f4565b5060051b60200190565b6000806040838503121561259b57600080fd5b8235915060208084013567ffffffffffffffff8111156125ba57600080fd5b8401601f810186136125cb57600080fd5b80356125de6125d982612564565b612533565b81815260059190911b820183019083810190888311156125fd57600080fd5b928401925b8284101561261b57833582529284019290840190612602565b80955050505050509250929050565b600067ffffffffffffffff831115612644576126446124f4565b612657601f8401601f1916602001612533565b905082815283838301111561266b57600080fd5b828260208301376000602084830101529392505050565b60006020828403121561269457600080fd5b813567ffffffffffffffff8111156126ab57600080fd5b8201601f810184136126bc57600080fd5b61160b8482356020840161262a565b6000602082840312156126dd57600080fd5b813561075681612472565b600080604083850312156126fb57600080fd5b823561270681612472565b91506020830135801515811461271b57600080fd5b809150509250929050565b6000806000806080858703121561273c57600080fd5b843561274781612472565b9350602085013561275781612472565b925060408501359150606085013567ffffffffffffffff81111561277a57600080fd5b8501601f8101871361278b57600080fd5b61279a8782356020840161262a565b91505092959194509250565b600080604083850312156127b957600080fd5b82356127c481612472565b9150602083013561271b81612472565b634e487b7160e01b600052601160045260246000fd5b818103818111156104ef576104ef6127d4565b60006001820161280f5761280f6127d4565b5060010190565b808201808211156104ef576104ef6127d4565b600181811c9082168061283d57607f821691505b60208210810361285d57634e487b7160e01b600052602260045260246000fd5b50919050565b60408152600080845461287581612829565b806040860152606060018084166000811461289757600181146128b1576128e2565b60ff1985168884015283151560051b8801830195506128e2565b8960005260208060002060005b868110156128d95781548b82018701529084019082016128be565b8a018501975050505b505050505082810360208401526128f9818561241a565b95945050505050565b601f82111561058857600081815260208120601f850160051c810160208610156129295750805b601f850160051c820191505b8181101561294857828155600101612935565b505050505050565b815167ffffffffffffffff81111561296a5761296a6124f4565b61297e816129788454612829565b84612902565b602080601f8311600181146129b3576000841561299b5750858301515b600019600386901b1c1916600185901b178555612948565b600085815260208120601f198616915b828110156129e2578886015182559484019460019091019084016129c3565b5085821015612a005787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808385031215612a2357600080fd5b825167ffffffffffffffff811115612a3a57600080fd5b8301601f81018513612a4b57600080fd5b8051612a596125d982612564565b81815260609182028301840191848201919088841115612a7857600080fd5b938501935b83851015612acb5780858a031215612a955760008081fd5b612a9d61250a565b8551612aa881612472565b815285870151878201526040808701519082015283529384019391850191612a7d565b50979650505050505050565b60008251612ae98184602087016123f6565b6a2f3f746f6b656e4964733d60a81b920191825250600b01919050565b634e487b7160e01b600052603260045260246000fd5b60008351612b2e8184602088016123f6565b835190830190612b428183602088016123f6565b01949350505050565b60008351612b5d8184602088016123f6565b600b60fa1b9083019081528351612b7b8160018401602088016123f6565b01600101949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612bbf8160178501602088016123f6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612bf08160288401602088016123f6565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b600082612c2157612c21612bfc565b500490565b600082612c3557612c35612bfc565b500690565b80820281158282048414176104ef576104ef6127d4565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612c83608083018461241a565b9695505050505050565b600060208284031215612c9f57600080fd5b8151610756816123c3565b634e487b7160e01b600052603160045260246000fd5b60008251612cd28184602087016123f6565b919091019291505056fef6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa724552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a687a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746399574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1a26469706673582212204ce98f01d382609818c824f523e5fdd0e764b930850aba262eb8641e46cc7b3964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "address to be approved",
          "tokenId": "token to approve"
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "quantity of tokens held"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "address approved to spend token"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token owner"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "data payload",
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address to be approved",
          "status": "approval status"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "position in global token list to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "position in owner's token list to query",
          "owner": "token holder to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total supply"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "grant approval to given account to spend token"
      },
      "balanceOf(address)": {
        "notice": "query the balance of given address"
      },
      "getApproved(uint256)": {
        "notice": "get approval status for given token"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "name()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "ownerOf(uint256)": {
        "notice": "query the owner of given token"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given account to spend all tokens held by sender"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "symbol()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "tokenByIndex(uint256)": {
        "notice": "get token at given internal storage index"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "get token of given owner at given internal storage index"
      },
      "totalSupply()": {
        "notice": "get total token supply"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, without checking for ERC721Receiver implementation if applicable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}