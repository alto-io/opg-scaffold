{
  "address": "0x2F1aBC8aEbB2D95B38667B5c19E26e00bE790E8C",
  "abi": [
    {
      "inputs": [],
      "name": "AddressUtils__NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Arcadians_InvalidPayAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Arcadians_InvalidSupplies",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Arcadians_MaximumArcadiansSupplyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Arcadians_NotElegibleToMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__ERC721ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Metadata__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__NonExistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ArcadianNotUnique",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_CouponNeededToModifyBaseSlots",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InputDataMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InsufficientItemBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InvalidERC1155Contract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InvalidSlotId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyEquippedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemDoesNotHaveSlotAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NonBaseSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NotAllBaseSlotsEquipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NotArcadianOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_SlotNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingBaseSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingEmptySlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingPermanentSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingAdminRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingAutomationRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingManagerRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolidStateERC721__PayableApproveNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolidStateERC721__PayableTransferNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ClaimInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ClaimStateAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ExceedsElegibleAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ExceedsPoolSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_InputDataMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "slotsIds",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "BaseModifierCouponAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "slotsIds",
          "type": "uint8[]"
        }
      ],
      "name": "BaseModifierCouponConsumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldBaseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "BaseURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "ItemsAllowedInSlotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "slots",
          "type": "uint8[]"
        }
      ],
      "name": "ItemsEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "slotsIds",
          "type": "uint8[]"
        }
      ],
      "name": "ItemsUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxMintPerUser",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "MaxMintPerUserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MintPassConsumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMintPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "MintPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "slotId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "permanent",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBase",
          "type": "bool"
        }
      ],
      "name": "SlotCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum WhitelistStorage.PoolId",
          "name": "poolId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalElegibleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimedAmount",
          "type": "uint256"
        }
      ],
      "name": "WhitelistBalanceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "availableMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "itemsToEquip",
          "type": "tuple[]"
        }
      ],
      "name": "mintAndEquip",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintPerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxArcadiansSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMintPassSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxGuaranteedWLSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRestrictedWLSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPublicMintSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "name": "setPublicMintOpen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc4e735d25a77117aaf81c9655681494b7afa0875ee0e62060328df868a8232bb",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0x2F1aBC8aEbB2D95B38667B5c19E26e00bE790E8C",
    "transactionIndex": 2,
    "gasUsed": "3434971",
    "logsBloom": "0x
    "blockHash": "0x24490f3040935c9a62ee4b29f6a06e650973c877e9be226448f3f9987c4685eb",
    "transactionHash": "0xc4e735d25a77117aaf81c9655681494b7afa0875ee0e62060328df868a8232bb",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 36023139,
        "transactionHash": "0xc4e735d25a77117aaf81c9655681494b7afa0875ee0e62060328df868a8232bb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001e82384577992500000000000000000000000000000000000000000000000000bf5105cda33868200000000000000000000000000000000000000000000099d813ef6cf44b849a70000000000000000000000000000000000000000000000000a0cecd882b9f43200000000000000000000000000000000000000000000099d83271a539c31dbf7",
        "logIndex": 6,
        "blockHash": "0x24490f3040935c9a62ee4b29f6a06e650973c877e9be226448f3f9987c4685eb"
      }
    ],
    "blockNumber": 36023139,
    "cumulativeGasUsed": "3582253",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 14,
  "solcInputHash": "4bc01ee6977b9266bffa0dc0bc4f535d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Arcadians_InvalidPayAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Arcadians_InvalidSupplies\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Arcadians_MaximumArcadiansSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Arcadians_NotElegibleToMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__ERC721ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Metadata__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__NonExistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ArcadianNotUnique\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_CouponNeededToModifyBaseSlots\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InputDataMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InsufficientItemBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InvalidERC1155Contract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InvalidSlotId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyEquippedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemDoesNotHaveSlotAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NonBaseSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NotAllBaseSlotsEquipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NotArcadianOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_SlotNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingBaseSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingEmptySlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingPermanentSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingAdminRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingAutomationRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingManagerRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolidStateERC721__PayableApproveNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolidStateERC721__PayableTransferNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ClaimInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ClaimStateAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ExceedsElegibleAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ExceedsPoolSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_InputDataMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"slotsIds\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BaseModifierCouponAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"slotsIds\",\"type\":\"uint8[]\"}],\"name\":\"BaseModifierCouponConsumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldBaseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"ItemsAllowedInSlotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"slots\",\"type\":\"uint8[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"slotsIds\",\"type\":\"uint8[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxMintPerUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"MaxMintPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MintPassConsumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"MintPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBase\",\"type\":\"bool\"}],\"name\":\"SlotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum WhitelistStorage.PoolId\",\"name\":\"poolId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalElegibleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"}],\"name\":\"WhitelistBalanceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"itemsToEquip\",\"type\":\"tuple[]\"}],\"name\":\"mintAndEquip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"setMaxMintPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxArcadiansSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPassSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGuaranteedWLSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRestrictedWLSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPublicMintSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"setPublicMintOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ReentrancyGuard and Multicall contracts are used for security and gas efficiency.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"address to be approved\",\"tokenId\":\"token to approve\"}},\"availableMints(address)\":{\"params\":{\"account\":\"account to query\"},\"returns\":{\"balance\":\"amount of arcadians that can be minted\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"quantity of tokens held\"}},\"baseURI()\":{\"details\":\"This function returns the base URI\",\"returns\":{\"_0\":\"The base URI\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"address approved to spend token\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"maxMintPerUser()\":{\"details\":\"This function gets the current maximum number of arcadians that a user can mint\",\"returns\":{\"_0\":\"The current maximum number of arcadians that a user can mint\"}},\"maxSupply()\":{\"details\":\"This function returns the maximum supply of arcadians\",\"returns\":{\"_0\":\"The current maximum supply of arcadians\"}},\"mintAndEquip((address,uint256)[])\":{\"params\":{\"itemsToEquip\":\"array of items to equip in the correspondent slot\"}},\"mintPrice()\":{\"returns\":{\"_0\":\"The current mint price\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"array of function call data payloads\"},\"returns\":{\"results\":\"array of function call results\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token owner\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"data payload\",\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address to be approved\",\"status\":\"approval status\"}},\"setBaseURI(string)\":{\"params\":{\"newBaseURI\":\"The new base URI for all token metadata\"}},\"setMaxMintPerUser(uint256)\":{\"params\":{\"newMaxMintPerUser\":\"The new maximum number of arcadians that a user can mint\"}},\"setMaxSupplies(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"maxArcadiansSupply\":\"The max supply of arcadians that can be minted\",\"maxGuaranteedWLSupply\":\"The max supply of arcadians that can be minted though the whitelist guaranteed pool\",\"maxMintPassSupply\":\"The max supply of arcadians that can be minted though mint passes\",\"maxPublicMintSupply\":\"The max supply of arcadians that can be minted though open mint\",\"maxRestrictedWLSupply\":\"The max supply of arcadians that can be minted though the whitelist restricted pool\"}},\"setMintPrice(uint256)\":{\"params\":{\"newMintPrice\":\"The new mint price to be set\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"position in global token list to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"position in owner's token list to query\",\"owner\":\"token holder to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"ID of the token to query\"},\"returns\":{\"_0\":\"The URI for the given token ID\"}},\"totalMinted()\":{\"returns\":{\"_0\":\"uint total amount of arcadians minted\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total supply\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}}},\"title\":\"ArcadiansFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"grant approval to given account to spend token\"},\"availableMints(address)\":{\"notice\":\"Returns the amount of arcadians that can be minted by an account\"},\"balanceOf(address)\":{\"notice\":\"query the balance of given address\"},\"getApproved(uint256)\":{\"notice\":\"get approval status for given token\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"mintAndEquip((address,uint256)[])\":{\"notice\":\"Mint a token and equip it with the given items\"},\"mintPrice()\":{\"notice\":\"This function gets the current price to mint an arcadian\"},\"multicall(bytes[])\":{\"notice\":\"batch function calls to the contract and return the results of each\"},\"name()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"ownerOf(uint256)\":{\"notice\":\"query the owner of given token\"},\"publicMintOpen()\":{\"notice\":\"Returns true if the public mint is open, false otherwise\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given account to spend all tokens held by sender\"},\"setBaseURI(string)\":{\"notice\":\"Set the base URI for all Arcadians metadataOnly the manager role can call this function\"},\"setMaxMintPerUser(uint256)\":{\"notice\":\"This function sets the new maximum number of arcadians that a user can mint\"},\"setMaxSupplies(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"This function sets the max arcadians supply and all the sub-pools supplies\"},\"setMintPrice(uint256)\":{\"notice\":\"This function updates the price to mint an arcadian\"},\"setPublicMintOpen(bool)\":{\"notice\":\"This function sets the public mint as open/closed\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"symbol()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"tokenByIndex(uint256)\":{\"notice\":\"get token at given internal storage index\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"get token of given owner at given internal storage index\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the URI for a given arcadian\"},\"totalMinted()\":{\"notice\":\"Returns the total amount of arcadians minted\"},\"totalSupply()\":{\"notice\":\"get total token supply\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\"}},\"notice\":\"This contract is an ERC721 responsible for minting and claiming Arcadian tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/arcadians/ArcadiansFacet.sol\":\"ArcadiansFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Map implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableMap {\\n    error EnumerableMap__IndexOutOfBounds();\\n    error EnumerableMap__NonExistentKey();\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        MapEntry[] _entries;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct AddressToAddressMap {\\n        Map _inner;\\n    }\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    function at(\\n        AddressToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (address, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n\\n        return (\\n            address(uint160(uint256(key))),\\n            address(uint160(uint256(value)))\\n        );\\n    }\\n\\n    function at(\\n        UintToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    function contains(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function contains(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    function length(\\n        AddressToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function length(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function get(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (address) {\\n        return\\n            address(\\n                uint160(\\n                    uint256(_get(map._inner, bytes32(uint256(uint160(key)))))\\n                )\\n            );\\n    }\\n\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    function set(\\n        AddressToAddressMap storage map,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return\\n            _set(\\n                map._inner,\\n                bytes32(uint256(uint160(key))),\\n                bytes32(uint256(uint160(value)))\\n            );\\n    }\\n\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function remove(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    function toArray(\\n        AddressToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (address[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function toArray(\\n        UintToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (uint256[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n            }\\n        }\\n    }\\n\\n    function values(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function values(\\n        UintToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function _at(\\n        Map storage map,\\n        uint256 index\\n    ) private view returns (bytes32, bytes32) {\\n        if (index >= map._entries.length)\\n            revert EnumerableMap__IndexOutOfBounds();\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    function _contains(\\n        Map storage map,\\n        bytes32 key\\n    ) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) revert EnumerableMap__NonExistentKey();\\n        unchecked {\\n            return map._entries[keyIndex - 1]._value;\\n        }\\n    }\\n\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            unchecked {\\n                map._entries[keyIndex - 1]._value = value;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            unchecked {\\n                MapEntry storage last = map._entries[map._entries.length - 1];\\n\\n                // move last entry to now-vacant index\\n                map._entries[keyIndex - 1] = last;\\n                map._indexes[last._key] = keyIndex;\\n            }\\n\\n            // clear last index\\n            map._entries.pop();\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1140a8669a93db82ea70d7f53e112049d42a813fe7188f50aa2f7ec5e529d38a\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x38ca94617ab4a4cdc08d9fed753f1b17d91a9823b36f7f485cd1ed5e5324aa8f\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/ISolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Base } from './base/IERC721Base.sol';\\nimport { IERC721Enumerable } from './enumerable/IERC721Enumerable.sol';\\nimport { IERC721Metadata } from './metadata/IERC721Metadata.sol';\\n\\ninterface ISolidStateERC721 is IERC721Base, IERC721Enumerable, IERC721Metadata {\\n    error SolidStateERC721__PayableApproveNotSupported();\\n    error SolidStateERC721__PayableTransferNotSupported();\\n}\\n\",\"keccak256\":\"0x4fc3b4d30c0f7124751439c3289e060cd0a566fad2beca51e9f05737bd8cf825\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC165Base } from '../../introspection/ERC165/base/ERC165Base.sol';\\nimport { ERC721Base, ERC721BaseInternal } from './base/ERC721Base.sol';\\nimport { ERC721Enumerable } from './enumerable/ERC721Enumerable.sol';\\nimport { ERC721Metadata } from './metadata/ERC721Metadata.sol';\\nimport { ISolidStateERC721 } from './ISolidStateERC721.sol';\\n\\n/**\\n * @title SolidState ERC721 implementation, including recommended extensions\\n */\\nabstract contract SolidStateERC721 is\\n    ISolidStateERC721,\\n    ERC721Base,\\n    ERC721Enumerable,\\n    ERC721Metadata,\\n    ERC165Base\\n{\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external approve function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableApproveNotSupported();\\n        super._handleApproveMessageValue(operator, tokenId, value);\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external transfer function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableTransferNotSupported();\\n        super._handleTransferMessageValue(from, to, tokenId, value);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721BaseInternal, ERC721Metadata) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x397706dffa317a4d7da18896ae98562ac14a50361a06bedc7e2d4c68f83abf3f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721Base } from './IERC721Base.sol';\\nimport { ERC721BaseInternal } from './ERC721BaseInternal.sol';\\n\\n/**\\n * @title Base ERC721 implementation, excluding optional extensions\\n */\\nabstract contract ERC721Base is IERC721Base, ERC721BaseInternal {\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address) {\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address) {\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool) {\\n        return _isApprovedForAll(account, operator);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable {\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable {\\n        _safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable {\\n        _safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function approve(address operator, uint256 tokenId) external payable {\\n        _approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function setApprovalForAll(address operator, bool status) external {\\n        _setApprovalForAll(operator, status);\\n    }\\n}\\n\",\"keccak256\":\"0x388e07a6595f57c70508f6cc1f25b00f3c44f343bf6ab44898cd262186304630\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\n\\n/**\\n * @title Base ERC721 internal functions\\n */\\nabstract contract ERC721BaseInternal is IERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function _balanceOf(\\n        address account\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0)) revert ERC721Base__BalanceQueryZeroAddress();\\n        return ERC721BaseStorage.layout().holderTokens[account].length();\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        address owner = ERC721BaseStorage.layout().tokenOwners.get(tokenId);\\n        if (owner == address(0)) revert ERC721Base__InvalidOwner();\\n        return owner;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().tokenOwners.contains(tokenId);\\n    }\\n\\n    function _getApproved(\\n        uint256 tokenId\\n    ) internal view virtual returns (address) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        return ERC721BaseStorage.layout().tokenApprovals[tokenId];\\n    }\\n\\n    function _isApprovedForAll(\\n        address account,\\n        address operator\\n    ) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        return (spender == owner ||\\n            _getApproved(tokenId) == spender ||\\n            _isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        if (to == address(0)) revert ERC721Base__MintToZeroAddress();\\n        if (_exists(tokenId)) revert ERC721Base__TokenAlreadyMinted();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[owner].remove(tokenId);\\n        l.tokenOwners.remove(tokenId);\\n\\n        l.tokenApprovals[tokenId] = address(0);\\n\\n        emit Approval(owner, address(0), tokenId);\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        if (owner != from) revert ERC721Base__NotTokenOwner();\\n        if (to == address(0)) revert ERC721Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[from].remove(tokenId);\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n        l.tokenApprovals[tokenId] = address(0);\\n\\n        emit Approval(owner, address(0), tokenId);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    function _approve(address operator, uint256 tokenId) internal virtual {\\n        _handleApproveMessageValue(operator, tokenId, msg.value);\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        if (operator == owner) revert ERC721Base__SelfApproval();\\n        if (msg.sender != owner && !_isApprovedForAll(owner, msg.sender))\\n            revert ERC721Base__NotOwnerOrApproved();\\n\\n        ERC721BaseStorage.layout().tokenApprovals[tokenId] = operator;\\n        emit Approval(owner, operator, tokenId);\\n    }\\n\\n    function _setApprovalForAll(\\n        address operator,\\n        bool status\\n    ) internal virtual {\\n        if (operator == msg.sender) revert ERC721Base__SelfApproval();\\n        ERC721BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes memory returnData = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n\\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\\n        return returnValue == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called approvals for processing of included message value\\n     * @param operator beneficiary of approval\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called transfers for processing of included message value\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xcc7bc3523871dc4f4e67c88f9c12931fd92d261de914144e749a1b71a3787dae\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC721BaseStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Base');\\n\\n    struct Layout {\\n        EnumerableMap.UintToAddressMap tokenOwners;\\n        mapping(address => EnumerableSet.UintSet) holderTokens;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9570596eca4d18e1c872177aa12125fcaba1dd7db940e5affa44e6ce2231b0a1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721Base is IERC721BaseInternal, IERC721 {\\n\\n}\\n\",\"keccak256\":\"0x5b99ebbddcc97f5a825cb21fb377b04c9ad184c4e4b69b92685334b6d42b7636\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../../../interfaces/IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721BaseInternal is IERC721Internal {\\n    error ERC721Base__NotOwnerOrApproved();\\n    error ERC721Base__SelfApproval();\\n    error ERC721Base__BalanceQueryZeroAddress();\\n    error ERC721Base__ERC721ReceiverNotImplemented();\\n    error ERC721Base__InvalidOwner();\\n    error ERC721Base__MintToZeroAddress();\\n    error ERC721Base__NonExistentToken();\\n    error ERC721Base__NotTokenOwner();\\n    error ERC721Base__TokenAlreadyMinted();\\n    error ERC721Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0x3118e4b75bc32c0c5b1f7aca49d30bf618966260179d848171b2ce3e3e0b5373\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { IERC721Enumerable } from './IERC721Enumerable.sol';\\nimport { ERC721EnumerableInternal } from './ERC721EnumerableInternal.sol';\\n\\nabstract contract ERC721Enumerable is\\n    IERC721Enumerable,\\n    ERC721EnumerableInternal\\n{\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view returns (uint256) {\\n        return _tokenOfOwnerByIndex(owner, index);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        return _tokenByIndex(index);\\n    }\\n}\\n\",\"keccak256\":\"0x762db931dbe79f32fa48ba2f66b23b096e9c43e89c09310a98c10ab18b6e73b6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\n\\nabstract contract ERC721EnumerableInternal {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _totalSupply() internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().tokenOwners.length();\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenByIndex(\\n        uint256 index\\n    ) internal view returns (uint256 tokenId) {\\n        (tokenId, ) = ERC721BaseStorage.layout().tokenOwners.at(index);\\n    }\\n}\\n\",\"keccak256\":\"0xcb195fe5d264a1756a67b0c9bf8ac5493c12d25f947290196f15a67d7f3e81ad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Enumerable {\\n    /**\\n     * @notice get total token supply\\n     * @return total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice get token of given owner at given internal storage index\\n     * @param owner token holder to query\\n     * @param index position in owner's token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @notice get token at given internal storage index\\n     * @param index position in global token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x4dcc1d41df336f28a2ea6fa2e7ec17e3d1745938146db5385400238a7e7a1bad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\nimport { IERC721Metadata } from './IERC721Metadata.sol';\\n\\n/**\\n * @title ERC721 metadata extensions\\n */\\nabstract contract ERC721Metadata is IERC721Metadata, ERC721MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view virtual returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721MetadataInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc626c723aa50119564d77caa3749a728526ca8a93b385000e3d52208b6bc40c5\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from '../base/ERC721Base.sol';\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\nimport { ERC721MetadataStorage } from './ERC721MetadataStorage.sol';\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal functions\\n */\\nabstract contract ERC721MetadataInternal is\\n    IERC721MetadataInternal,\\n    ERC721BaseInternal\\n{\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function _name() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function _symbol() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function _tokenURI(\\n        uint256 tokenId\\n    ) internal view virtual returns (string memory) {\\n        if (!_exists(tokenId)) revert ERC721Metadata__NonExistentToken();\\n\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: clear per-token URI data on burn\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (to == address(0)) {\\n            delete ERC721MetadataStorage.layout().tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x087a3302cd70010787bcdb1eb2e225eff23ac2e5ab5f77d6dc26289cb8863a19\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721MetadataInternal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x281dd4dbf81c3acf12bf43bc6e0f77ae68cb2764450cce8121a53c061bf87960\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721BaseInternal } from '../base/IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal interface\\n */\\ninterface IERC721MetadataInternal is IERC721BaseInternal {\\n    error ERC721Metadata__NonExistentToken();\\n}\\n\",\"keccak256\":\"0xd420b4227db773f26b0e40cb6ea4819d340d0ee5ea59d6321c27e79ae7ecca86\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 minValue = bytes32(type(uint256).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(address[] memory array) internal pure returns (address) {\\n        address minValue = address(type(uint160).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 minValue = type(uint256).max;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 maxValue = bytes32(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(address[] memory array) internal pure returns (address) {\\n        address maxValue = address(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 maxValue = 0;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86a2953855b8df5a5ded23a79016f1584b6321ef2c04f44466ebfbb6d23e728c\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Interface for the Multicall utility contract\\n */\\ninterface IMulticall {\\n    /**\\n     * @notice batch function calls to the contract and return the results of each\\n     * @param data array of function call data payloads\\n     * @return results array of function call results\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x39e630bc189607ae119c1208a632009fe418cc4eb2687b28e7fdbe78af7b79b0\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IMulticall } from './IMulticall.sol';\\n\\n/**\\n * @title Utility contract for supporting processing of multiple function calls in a single transaction\\n */\\nabstract contract Multicall is IMulticall {\\n    /**\\n     * @inheritdoc IMulticall\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        unchecked {\\n            for (uint256 i; i < data.length; i++) {\\n                (bool success, bytes memory returndata) = address(this)\\n                    .delegatecall(data[i]);\\n\\n                if (success) {\\n                    results[i] = returndata;\\n                } else {\\n                    assembly {\\n                        returndatacopy(0, 0, returndatasize())\\n                        revert(0, returndatasize())\\n                    }\\n                }\\n            }\\n        }\\n\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x762f15ac4c28be19d0d7fb303ade8dea6ba52ff558fb6fba36df84a839e216b3\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { ERC721BaseInternal } from \\\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\\\";\\nimport { ERC721Metadata } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\\\";\\nimport { ISolidStateERC721 } from \\\"@solidstate/contracts/token/ERC721/ISolidStateERC721.sol\\\";\\nimport { SolidStateERC721 } from \\\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\\\";\\nimport { ERC721Base } from \\\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\\\";\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IERC721Metadata } from \\\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\\\";\\nimport { ArcadiansInternal } from \\\"./ArcadiansInternal.sol\\\";\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { EnumerableMap } from '@solidstate/contracts/data/EnumerableMap.sol';\\nimport { Multicall } from \\\"@solidstate/contracts/utils/Multicall.sol\\\";\\nimport { InventoryStorage } from \\\"../inventory/InventoryStorage.sol\\\";\\nimport { WhitelistStorage } from \\\"../whitelist/WhitelistStorage.sol\\\";\\n/**\\n * @title ArcadiansFacet\\n * @notice This contract is an ERC721 responsible for minting and claiming Arcadian tokens.\\n * @dev ReentrancyGuard and Multicall contracts are used for security and gas efficiency.\\n */\\ncontract ArcadiansFacet is SolidStateERC721, ArcadiansInternal, Multicall {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    WhitelistStorage.PoolId constant GuaranteedPool = WhitelistStorage.PoolId.Guaranteed;\\n    WhitelistStorage.PoolId constant RestrictedPool = WhitelistStorage.PoolId.Restricted;\\n\\n    /**\\n     * @notice Returns the URI for a given arcadian\\n     * @param tokenId ID of the token to query\\n     * @return The URI for the given token ID\\n     */\\n    function tokenURI(\\n        uint tokenId\\n    ) external view override (ERC721Metadata, IERC721Metadata) returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    function _mint() internal returns (uint tokenId) {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n\\n        tokenId = nextArcadianId();\\n\\n        if (tokenId > arcadiansSL.arcadiansMaxSupply)\\n            revert Arcadians_MaximumArcadiansSupplyReached();\\n        \\n\\n        uint nonGuaranteedMintedAmount = _claimedWhitelist(RestrictedPool, msg.sender) + _claimedMintPass(msg.sender) + arcadiansSL.userPublicMints[msg.sender];\\n        bool nonGuaranteedMintAllowed = nonGuaranteedMintedAmount < arcadiansSL.maxMintPerUser;\\n\\n        if (nonGuaranteedMintAllowed && _isMintPassClaimActive() && _elegibleMintPass(msg.sender) > 0) {\\n            // Magic Eden mint flow\\n            _consumeMintPass(msg.sender);\\n        } else if (_isWhitelistClaimActive(GuaranteedPool) && _elegibleWhitelist(GuaranteedPool, msg.sender) > 0) {\\n            // OG mint flow\\n            _consumeWhitelist(GuaranteedPool, msg.sender, 1);\\n        } else if (nonGuaranteedMintAllowed && _isWhitelistClaimActive(RestrictedPool) && _elegibleWhitelist(RestrictedPool, msg.sender) > 0) { \\n            // Whitelist mint flow\\n            _consumeWhitelist(RestrictedPool, msg.sender, 1);\\n\\n        } else if (nonGuaranteedMintAllowed && arcadiansSL.isPublicMintOpen) {\\n            if (msg.value != arcadiansSL.mintPrice)\\n                revert Arcadians_InvalidPayAmount();\\n            arcadiansSL.userPublicMints[msg.sender]++;\\n        } else {\\n            revert Arcadians_NotElegibleToMint();\\n        }\\n\\n        _safeMint(msg.sender, tokenId);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of arcadians that can be minted by an account\\n     * @param account account to query\\n     * @return balance amount of arcadians that can be minted\\n     */\\n    function availableMints(address account) external view returns (uint balance) {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        uint nonGuaranteedMintedAmount = _claimedWhitelist(RestrictedPool, account) + _claimedMintPass(account) + arcadiansSL.userPublicMints[account];\\n        return _elegibleWhitelist(GuaranteedPool, account) + (arcadiansSL.maxMintPerUser - nonGuaranteedMintedAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the total amount of arcadians minted\\n     * @return uint total amount of arcadians minted\\n     */\\n    function totalMinted() external view returns (uint) {\\n        return _totalSupply();\\n    }\\n\\n   /**\\n     * @notice Mint a token and equip it with the given items\\n     * @param itemsToEquip array of items to equip in the correspondent slot\\n     */\\n    function mintAndEquip(\\n        InventoryStorage.Item[] calldata itemsToEquip\\n    )\\n        external payable nonReentrant\\n    {\\n        uint tokenId = _mint();\\n        _equip(tokenId, itemsToEquip, true);\\n    }\\n\\n    /**\\n     * @notice This function sets the public mint as open/closed\\n     */\\n    function setPublicMintOpen(bool isOpen) external onlyManager {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        arcadiansSL.isPublicMintOpen = isOpen;\\n    }\\n    /**\\n     * @notice Returns true if the public mint is open, false otherwise\\n     */\\n    function publicMintOpen() external view returns (bool) {\\n        return ArcadiansStorage.layout().isPublicMintOpen;\\n    }\\n\\n    /**\\n     * @notice This function updates the price to mint an arcadian\\n     * @param newMintPrice The new mint price to be set\\n     */\\n    function setMintPrice(uint newMintPrice) external onlyManager {\\n        _setMintPrice(newMintPrice);\\n    }\\n\\n    /**\\n     * @notice This function gets the current price to mint an arcadian\\n     * @return The current mint price\\n     */\\n    function mintPrice() external view returns (uint) {\\n        return _mintPrice();\\n    }\\n\\n    /**\\n     * @notice This function sets the new maximum number of arcadians that a user can mint\\n     * @param newMaxMintPerUser The new maximum number of arcadians that a user can mint\\n     */\\n    function setMaxMintPerUser(uint newMaxMintPerUser) external onlyManager {\\n        _setMaxMintPerUser(newMaxMintPerUser);\\n    }\\n\\n    /**\\n     * @dev This function gets the current maximum number of arcadians that a user can mint\\n     * @return The current maximum number of arcadians that a user can mint\\n     */\\n    function maxMintPerUser() external view returns (uint) {\\n        return _maxMintPerUser();\\n    }\\n\\n    /**\\n     * @dev This function returns the maximum supply of arcadians\\n     * @return The current maximum supply of arcadians\\n     */\\n    function maxSupply() external view returns (uint) {\\n        return ArcadiansStorage.layout().arcadiansMaxSupply;\\n    }\\n\\n    /**\\n     * @notice This function sets the max arcadians supply and all the sub-pools supplies\\n     * @param maxArcadiansSupply The max supply of arcadians that can be minted\\n     * @param maxMintPassSupply The max supply of arcadians that can be minted though mint passes\\n     * @param maxGuaranteedWLSupply The max supply of arcadians that can be minted though the whitelist guaranteed pool\\n     * @param maxRestrictedWLSupply The max supply of arcadians that can be minted though the whitelist restricted pool\\n     * @param maxPublicMintSupply The max supply of arcadians that can be minted though open mint\\n     */\\n    function setMaxSupplies(uint maxArcadiansSupply, uint maxMintPassSupply, uint maxGuaranteedWLSupply, uint maxRestrictedWLSupply, uint maxPublicMintSupply) external onlyManager {\\n        _setMaxSupplies(maxArcadiansSupply, maxMintPassSupply, maxGuaranteedWLSupply, maxRestrictedWLSupply, maxPublicMintSupply);\\n    }\\n\\n    /**\\n     * @notice Set the base URI for all Arcadians metadata\\n     * @notice Only the manager role can call this function\\n     * @param newBaseURI The new base URI for all token metadata\\n     */\\n    function setBaseURI(string memory newBaseURI) external onlyManager {\\n        _setBaseURI(newBaseURI);\\n    }\\n\\n    /**\\n     * @dev This function returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    function nextArcadianId() internal view returns (uint arcadianId) {\\n        arcadianId = _totalSupply() + 1;\\n    }\\n}\",\"keccak256\":\"0xb9e1e44f10adedef4eabf0f58db5315d8d147a43edd82084468662f82538d794\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { ERC721MetadataStorage } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\\\";\\nimport { UintUtils } from '@solidstate/contracts/utils/UintUtils.sol';\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { WhitelistInternal } from \\\"../whitelist/WhitelistInternal.sol\\\";\\nimport { WhitelistStorage } from \\\"../whitelist/WhitelistStorage.sol\\\";\\nimport { InventoryInternal } from \\\"../inventory/InventoryInternal.sol\\\";\\nimport { MintPassInternal } from \\\"../mintPass/MintPassInternal.sol\\\";\\n\\ncontract ArcadiansInternal is RolesInternal, WhitelistInternal, InventoryInternal, MintPassInternal {\\n\\n    error Arcadians_InvalidPayAmount();\\n    error Arcadians_MaximumArcadiansSupplyReached();\\n    error Arcadians_NotElegibleToMint();\\n    error Arcadians_InvalidSupplies();\\n\\n    event MaxMintPerUserChanged(address indexed by, uint oldMaxMintPerUser, uint newMaxMintPerUser);\\n    event MintPriceChanged(address indexed by, uint oldMintPrice, uint newMintPrice);\\n    event BaseURIChanged(address indexed by, string oldBaseURI, string newBaseURI);\\n\\n    using UintUtils for uint;\\n\\n    function _setBaseURI(string memory newBaseURI) internal {\\n        ERC721MetadataStorage.Layout storage ERC721SL = ERC721MetadataStorage.layout();\\n        emit BaseURIChanged(msg.sender, ERC721SL.baseURI, newBaseURI);\\n        ERC721SL.baseURI = newBaseURI;\\n    }\\n\\n    function _baseURI() internal view returns (string memory) {\\n        return ERC721MetadataStorage.layout().baseURI;\\n    }\\n\\n    function _mintPrice() internal view returns (uint) {\\n        return ArcadiansStorage.layout().mintPrice;\\n    }\\n\\n    function _setMintPrice(uint newMintPrice) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MintPriceChanged(msg.sender, arcadiansSL.mintPrice, newMintPrice);\\n        arcadiansSL.mintPrice = newMintPrice;\\n    }\\n\\n    function _setMaxMintPerUser(uint newMaxMintPerUser) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MaxMintPerUserChanged(msg.sender, arcadiansSL.maxMintPerUser, newMaxMintPerUser);\\n        arcadiansSL.maxMintPerUser = newMaxMintPerUser;\\n    }\\n\\n    function _maxMintPerUser() internal view returns (uint) {\\n        return ArcadiansStorage.layout().maxMintPerUser;\\n    }\\n\\n    function _setMaxSupplies(uint arcadiansMaxSupply, uint maxMintPassSupply, uint maxGuaranteedWLSupply, uint maxRestrictedWLSupply, uint publicMintMaxSupply) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n\\n        if (maxMintPassSupply + maxGuaranteedWLSupply + maxRestrictedWLSupply + publicMintMaxSupply != arcadiansMaxSupply)\\n            revert Arcadians_InvalidSupplies();\\n\\n        arcadiansSL.arcadiansMaxSupply = arcadiansMaxSupply;\\n        arcadiansSL.publicMintMaxSupply = publicMintMaxSupply;\\n        _setMaxSupplyMintPass(maxMintPassSupply);\\n        _setMaxSupplyWhitelist(WhitelistStorage.PoolId.Guaranteed, maxGuaranteedWLSupply);\\n        _setMaxSupplyWhitelist(WhitelistStorage.PoolId.Restricted, maxRestrictedWLSupply);\\n    }\\n}\",\"keccak256\":\"0x60ead90af65943a8669b69cea28bc08d2fcc6380dee871be3a2ae8bed6d5e915\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary ArcadiansStorage {\\n\\n    bytes32 constant ARCADIANS_STORAGE_POSITION =\\n        keccak256(\\\"equippable.storage.position\\\");\\n\\n    struct Layout {\\n        uint maxMintPerUser;\\n        uint mintPrice;\\n        bool isPublicMintOpen;\\n        // account => amount minted with public mint\\n        mapping(address => uint) userPublicMints;\\n        uint publicMintMaxSupply;\\n        uint arcadiansMaxSupply;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ARCADIANS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x2b96171fc8567554756b14ffa5a2325ec1cd459c69f0ac891fc0a022396382fc\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/inventory/InventoryInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { AddressUtils } from \\\"@solidstate/contracts/utils/AddressUtils.sol\\\";\\nimport { ArrayUtils } from \\\"@solidstate/contracts/utils/ArrayUtils.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { IERC1155 } from \\\"@solidstate/contracts/interfaces/IERC1155.sol\\\";\\n\\ncontract InventoryInternal is\\n    ReentrancyGuard,\\n    RolesInternal\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using AddressUtils for address;\\n\\n    error Inventory_InvalidERC1155Contract();\\n    error Inventory_UnequippingPermanentSlot();\\n    error Inventory_InvalidSlotId();\\n    error Inventory_ItemDoesNotHaveSlotAssigned();\\n    error Inventory_InsufficientItemBalance();\\n    error Inventory_UnequippingEmptySlot();\\n    error Inventory_UnequippingBaseSlot();\\n    error Inventory_SlotNotSpecified();\\n    error Inventory_ItemNotSpecified();\\n    error Inventory_NotArcadianOwner();\\n    error Inventory_ArcadianNotUnique();\\n    error Inventory_NotAllBaseSlotsEquipped();\\n    error Inventory_InputDataMismatch();\\n    error Inventory_ItemAlreadyEquippedInSlot();\\n    error Inventory_CouponNeededToModifyBaseSlots();\\n    error Inventory_NonBaseSlot();\\n\\n    event ItemsAllowedInSlotUpdated(\\n        address indexed by,\\n        InventoryStorage.Item[] items\\n    );\\n\\n    event ItemsEquipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint8[] slots\\n    );\\n\\n    event ItemsUnequipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint8[] slotsIds\\n    );\\n\\n    event SlotCreated(\\n        address indexed by,\\n        uint8 indexed slotId,\\n        bool permanent,\\n        bool isBase\\n    );\\n\\n    event BaseModifierCouponAdded(\\n        address indexed by,\\n        address indexed to,\\n        uint8[] slotsIds,\\n        uint[] amounts\\n    );\\n\\n    event BaseModifierCouponConsumed(\\n        address indexed account,\\n        uint indexed arcadianId,\\n        uint8[] slotsIds\\n    );\\n\\n    // Helper structs only used in view functions to ease data reading from web3\\n    struct ItemInSlot {\\n        uint8 slotId;\\n        address erc1155Contract;\\n        uint itemId;\\n    }\\n    struct BaseModifierCoupon {\\n        uint8 slotId;\\n        uint amount;\\n    }\\n\\n    modifier onlyValidSlot(uint8 slotId) {\\n        if (slotId == 0 || slotId > InventoryStorage.layout().numSlots) revert Inventory_InvalidSlotId();\\n        _;\\n    }\\n\\n    modifier onlyArcadianOwner(uint arcadianId) {\\n        IERC721 arcadiansContract = IERC721(address(this));\\n        if (msg.sender != arcadiansContract.ownerOf(arcadianId)) revert Inventory_NotArcadianOwner();\\n        _;\\n    }\\n\\n    function _numSlots() internal view returns (uint) {\\n        return InventoryStorage.layout().numSlots;\\n    }\\n\\n    function _equip(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items,\\n        bool freeBaseModifier\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        if (items.length == 0) \\n            revert Inventory_ItemNotSpecified();\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint8 numBaseSlotsModified;\\n        uint8[] memory slotsIds = new uint8[](items.length);\\n        for (uint i = 0; i < items.length; i++) {\\n            uint8 slotId = _equipSingleSlot(arcadianId, items[i], freeBaseModifier);\\n            if (inventorySL.slots[slotId].isBase) {\\n                numBaseSlotsModified++;\\n            }\\n            slotsIds[i] = slotId;\\n        }\\n\\n        if (!_baseAndPermanentSlotsEquipped(arcadianId)) \\n            revert Inventory_NotAllBaseSlotsEquipped();\\n\\n        if (numBaseSlotsModified > 0) {\\n            if (!_hashBaseItemsUnchecked(arcadianId))\\n                revert Inventory_ArcadianNotUnique();\\n            \\n            if (!freeBaseModifier) {\\n                uint8[] memory baseSlotsModified = new uint8[](numBaseSlotsModified);\\n                uint counter;\\n                for (uint i = 0; i < items.length; i++) {\\n                    uint8 slotId = inventorySL.itemSlot[items[i].erc1155Contract][items[i].id];\\n                    if (inventorySL.slots[slotId].isBase) {\\n                        baseSlotsModified[counter] = slotId;\\n                        counter++;\\n                    }\\n                }\\n                emit BaseModifierCouponConsumed(msg.sender, arcadianId, baseSlotsModified);\\n            }\\n        }\\n\\n        emit ItemsEquipped(msg.sender, arcadianId, slotsIds);\\n    }\\n\\n    function _equipSingleSlot(\\n        uint arcadianId,\\n        InventoryStorage.Item calldata item,\\n        bool freeBaseModifier\\n    ) internal returns (uint8 slotId) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        slotId = inventorySL.itemSlot[item.erc1155Contract][item.id];\\n        \\n        if (slotId == 0 || slotId > InventoryStorage.layout().numSlots) \\n            revert Inventory_ItemDoesNotHaveSlotAssigned();\\n        \\n        if (!freeBaseModifier && inventorySL.slots[slotId].isBase) {\\n            if (inventorySL.baseModifierCoupon[msg.sender][slotId] == 0)\\n                revert Inventory_CouponNeededToModifyBaseSlots();\\n\\n            inventorySL.baseModifierCoupon[msg.sender][slotId]--;\\n        }\\n\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n        if (inventorySL.slots[slotId].permanent && existingItem.erc1155Contract != address(0)) \\n            revert Inventory_UnequippingPermanentSlot();\\n        if (existingItem.erc1155Contract == item.erc1155Contract && existingItem.id == item.id)\\n            revert Inventory_ItemAlreadyEquippedInSlot();\\n\\n        if (inventorySL.equippedItems[arcadianId][slotId].erc1155Contract != address(0))\\n            _unequipUnchecked(arcadianId, slotId);\\n\\n        bool requiresTransfer = inventorySL.requiresTransfer[item.erc1155Contract][item.id];\\n        if (requiresTransfer) {\\n            IERC1155 erc1155Contract = IERC1155(item.erc1155Contract);\\n            if (erc1155Contract.balanceOf(msg.sender, item.id) < 1)\\n                revert Inventory_InsufficientItemBalance();\\n\\n            erc1155Contract.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                item.id,\\n                1,\\n                ''\\n            );\\n        }\\n\\n        inventorySL.equippedItems[arcadianId][slotId] = item;\\n    }\\n\\n    function _baseAndPermanentSlotsEquipped(uint arcadianId) internal view returns (bool) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint8 numSlots = inventorySL.numSlots;\\n        for (uint8 i = 0; i < numSlots; i++) {\\n            uint8 slotId = i + 1;\\n            InventoryStorage.Slot storage slot = inventorySL.slots[slotId];\\n            if (!slot.isBase && !slot.permanent)\\n                continue;\\n            if (inventorySL.equippedItems[arcadianId][slotId].erc1155Contract == address(0)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _unequipUnchecked(\\n        uint arcadianId,\\n        uint8 slotId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n\\n        bool requiresTransfer = inventorySL.requiresTransfer[existingItem.erc1155Contract][existingItem.id];\\n        if (requiresTransfer) {\\n            IERC1155 erc1155Contract = IERC1155(existingItem.erc1155Contract);\\n            erc1155Contract.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                existingItem.id,\\n                1,\\n                ''\\n            );\\n        }\\n        delete inventorySL.equippedItems[arcadianId][slotId];\\n    }\\n\\n    function _unequip(\\n        uint arcadianId,\\n        uint8[] calldata slotsIds\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        if (slotsIds.length == 0) \\n            revert Inventory_SlotNotSpecified();\\n\\n        for (uint i = 0; i < slotsIds.length; i++) {\\n            if (inventorySL.slots[slotsIds[i]].permanent) \\n                revert Inventory_UnequippingPermanentSlot();\\n\\n            if (inventorySL.equippedItems[arcadianId][slotsIds[i]].erc1155Contract == address(0)) \\n                revert Inventory_UnequippingEmptySlot();\\n            \\n            if (inventorySL.slots[slotsIds[i]].isBase)\\n                revert Inventory_UnequippingBaseSlot();\\n\\n            _unequipUnchecked(arcadianId, slotsIds[i]);\\n        }\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slotsIds\\n        );\\n    }\\n\\n    function _equipped(\\n        uint arcadianId,\\n        uint8 slotId\\n    ) internal view returns (ItemInSlot memory) {\\n        InventoryStorage.Item storage item = InventoryStorage.layout().equippedItems[arcadianId][slotId];\\n        return ItemInSlot(slotId, item.erc1155Contract, item.id);\\n    }\\n\\n    function _equippedBatch(\\n        uint arcadianId,\\n        uint8[] calldata slotsIds\\n    ) internal view returns (ItemInSlot[] memory equippedSlots) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        equippedSlots = new ItemInSlot[](slotsIds.length);\\n        for (uint i = 0; i < slotsIds.length; i++) {\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotsIds[i]];\\n            equippedSlots[i] = ItemInSlot(slotsIds[i], equippedItem.erc1155Contract, equippedItem.id);\\n        }\\n    }\\n\\n    function _equippedAll(\\n        uint arcadianId\\n    ) internal view returns (ItemInSlot[] memory equippedSlots) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint8 numSlots = inventorySL.numSlots;\\n        equippedSlots = new ItemInSlot[](numSlots);\\n        for (uint8 i = 0; i < numSlots; i++) {\\n            uint8 slotId = i + 1;\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotId];\\n            equippedSlots[i] = ItemInSlot(slotId, equippedItem.erc1155Contract, equippedItem.id);\\n        }\\n    }\\n\\n    function _isArcadianUnique(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal view returns (bool) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        bytes memory encodedItems;\\n        uint numBaseSlots = inventorySL.baseSlotsIds.length;\\n\\n        for (uint8 i = 0; i < numBaseSlots; i++) {\\n            uint8 slotId = inventorySL.baseSlotsIds[i];\\n\\n            InventoryStorage.Item memory item;\\n            for (uint j = 0; j < items.length; j++) {\\n                if (_allowedSlot(items[j]) == slotId) {\\n                    item = items[j];\\n                    break;\\n                }\\n            }\\n            if (item.erc1155Contract == address(0)) {\\n                if (inventorySL.equippedItems[arcadianId][slotId].erc1155Contract != address(0)) {\\n                    item = inventorySL.equippedItems[arcadianId][slotId];\\n                } else {\\n                    revert Inventory_NotAllBaseSlotsEquipped();\\n                }\\n            }\\n            \\n            encodedItems = abi.encodePacked(encodedItems, slotId, item.erc1155Contract, item.id);\\n        }\\n\\n        return !inventorySL.baseItemsHashes.contains(keccak256(encodedItems));\\n    }\\n\\n    function _hashBaseItemsUnchecked(\\n        uint arcadianId\\n    ) internal returns (bool isUnique) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        bytes memory encodedItems;\\n        uint numBaseSlots = inventorySL.baseSlotsIds.length;\\n\\n        for (uint8 i = 0; i < numBaseSlots; i++) {\\n            uint8 slotId = inventorySL.baseSlotsIds[i];\\n            \\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotId];\\n            encodedItems = abi.encodePacked(encodedItems, slotId, equippedItem.erc1155Contract, equippedItem.id);\\n        }\\n\\n        bytes32 baseItemsHash = keccak256(encodedItems);\\n        isUnique = !inventorySL.baseItemsHashes.contains(baseItemsHash);\\n        inventorySL.baseItemsHashes.remove(inventorySL.arcadianToBaseItemHash[arcadianId]);\\n        inventorySL.baseItemsHashes.add(baseItemsHash);\\n        inventorySL.arcadianToBaseItemHash[arcadianId] = baseItemsHash;\\n    }\\n\\n    function _createSlot(\\n        bool permanent,\\n        bool isBase,\\n        InventoryStorage.Item[] calldata allowedItems\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        // slots are 1-index\\n        inventorySL.numSlots += 1;\\n        uint8 newSlotId = inventorySL.numSlots;\\n        inventorySL.slots[newSlotId].permanent = permanent;\\n        inventorySL.slots[newSlotId].isBase = isBase;\\n        inventorySL.slots[newSlotId].id = newSlotId;\\n\\n        _setSlotBase(newSlotId, isBase);\\n\\n        if (allowedItems.length > 0) {\\n            _allowItemsInSlot(newSlotId, allowedItems);\\n        }\\n\\n        emit SlotCreated(msg.sender, newSlotId, permanent, isBase);\\n    }\\n\\n    function _setSlotBase(\\n        uint8 slotId,\\n        bool isBase\\n    ) internal onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        uint8[] storage baseSlotsIds = inventorySL.baseSlotsIds;\\n        uint numBaseSlots = baseSlotsIds.length;\\n\\n        if (isBase) {\\n            bool alreadyInBaseList;\\n            for (uint i = 0; i < numBaseSlots; i++) {\\n                if (baseSlotsIds[i] == slotId) {\\n                    alreadyInBaseList = true;\\n                    break;\\n                }\\n            }\\n            if (!alreadyInBaseList) {\\n                baseSlotsIds.push(slotId);\\n            }\\n        } else {\\n            for (uint i = 0; i < numBaseSlots; i++) {\\n                if (baseSlotsIds[i] == slotId) {\\n                    baseSlotsIds[i] = baseSlotsIds[numBaseSlots - 1];\\n                    baseSlotsIds.pop();\\n                    break;\\n                }\\n            }\\n        }\\n\\n        inventorySL.slots[slotId].isBase = isBase;\\n    }\\n\\n    function _setSlotPermanent(\\n        uint8 slotId,\\n        bool permanent\\n    ) internal onlyValidSlot(slotId) {\\n        InventoryStorage.layout().slots[slotId].permanent = permanent;\\n    }\\n\\n    function _addBaseModifierCoupons(\\n        address account,\\n        uint8[] calldata slotsIds,\\n        uint[] calldata amounts\\n    ) internal {\\n        if (slotsIds.length != amounts.length)\\n            revert Inventory_InputDataMismatch();\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint8 numSlots = inventorySL.numSlots;\\n\\n        for (uint i = 0; i < slotsIds.length; i++) {\\n            if (slotsIds[i] == 0 && slotsIds[i] > numSlots) \\n                revert Inventory_InvalidSlotId();\\n            if (!inventorySL.slots[slotsIds[i]].isBase) {\\n                revert Inventory_NonBaseSlot();\\n            }\\n            InventoryStorage.layout().baseModifierCoupon[account][slotsIds[i]] += amounts[i];\\n        }\\n\\n        emit BaseModifierCouponAdded(msg.sender, account, slotsIds, amounts);\\n    }\\n\\n    function _getbaseModifierCoupon(address account, uint8 slotId) internal view onlyValidSlot(slotId) returns (uint) {\\n        if (!InventoryStorage.layout().slots[slotId].isBase) {\\n            revert Inventory_NonBaseSlot();\\n        }\\n        return InventoryStorage.layout().baseModifierCoupon[account][slotId];\\n    }\\n\\n    function _getBaseModifierCouponAll(address account) internal view returns (BaseModifierCoupon[] memory) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        uint numBaseSlots = inventorySL.baseSlotsIds.length;\\n\\n        BaseModifierCoupon[] memory coupons = new BaseModifierCoupon[](numBaseSlots);\\n        uint counter;\\n        for (uint8 i = 0; i < numBaseSlots; i++) {\\n            uint8 slotId = uint8(inventorySL.baseSlotsIds[i]);\\n\\n            coupons[counter].slotId = slotId;\\n            coupons[counter].amount = inventorySL.baseModifierCoupon[account][slotId];\\n            counter++;\\n        }\\n        return coupons;\\n    }\\n\\n    function _getBaseSlotsIds() internal view returns (uint8[] memory) {\\n        return InventoryStorage.layout().baseSlotsIds;\\n    }\\n\\n    function _setItemsTransferRequired(\\n        InventoryStorage.Item[] calldata items,\\n        bool[] calldata requiresTransfer\\n    ) internal {\\n        if (items.length != requiresTransfer.length)\\n            revert Inventory_InputDataMismatch();\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < items.length; i++) {\\n            inventorySL.requiresTransfer[items[i].erc1155Contract][items[i].id] = requiresTransfer[i];\\n        }\\n    }\\n    \\n    function _allowItemsInSlot(\\n        uint8 slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < items.length; i++) {\\n            if (!items[i].erc1155Contract.isContract()) \\n                revert Inventory_InvalidERC1155Contract();\\n\\n            inventorySL.itemSlot[items[i].erc1155Contract][items[i].id] = slotId;\\n        }\\n\\n        emit ItemsAllowedInSlotUpdated(msg.sender, items);\\n    }\\n\\n    function _disallowItems(\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < items.length; i++) {\\n            delete inventorySL.itemSlot[items[i].erc1155Contract][items[i].id];\\n        }\\n\\n        emit ItemsAllowedInSlotUpdated(msg.sender, items);\\n    }\\n\\n    function _allowedSlot(InventoryStorage.Item calldata item) internal view returns (uint) {\\n        return InventoryStorage.layout().itemSlot[item.erc1155Contract][item.id];\\n    }\\n\\n    function _slot(uint8 slotId) internal view returns (InventoryStorage.Slot storage slot) {\\n        return InventoryStorage.layout().slots[slotId];\\n    }\\n\\n    function _slotsAll() internal view returns (InventoryStorage.Slot[] memory slotsAll) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        uint8 numSlots = inventorySL.numSlots;\\n        slotsAll = new InventoryStorage.Slot[](numSlots);\\n\\n        for (uint8 i = 0; i < numSlots; i++) {\\n            uint8 slotId = i + 1;\\n            slotsAll[i] = inventorySL.slots[slotId];\\n        }\\n    }\\n}\",\"keccak256\":\"0x703b8aeb70f9ae0f4ed6c619945a9426c387f9e20857f60a289903014add3b15\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/inventory/InventoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\n\\n/**\\nLibInventory defines the storage structure used by the Inventory contract as a facet for an EIP-2535 Diamond\\nproxy.\\n */\\nlibrary InventoryStorage {\\n    bytes32 constant INVENTORY_STORAGE_POSITION =\\n        keccak256(\\\"inventory.storage.position\\\");\\n\\n    // Holds the information needed to identify an ERC1155 item\\n    struct Item {\\n        address erc1155Contract;\\n        uint id;\\n    }\\n\\n    // Holds the general information about a slot\\n    struct Slot {\\n        uint8 id;\\n        bool permanent;\\n        bool isBase;\\n    }\\n\\n    struct Layout {\\n        uint8 numSlots;\\n\\n        // Slot id => Slot\\n        mapping(uint8 => Slot) slots;\\n\\n        // arcadian id => slot id => Items equipped\\n        mapping(uint => mapping(uint8 => Item)) equippedItems;\\n\\n        // item address => item id => allowed slot id\\n        mapping(address => mapping(uint => uint8)) itemSlot;\\n        \\n        // item address => item id => equip items requires transfer\\n        mapping(address => mapping(uint => bool)) requiresTransfer;\\n\\n        // List of all the existent hashes\\n        EnumerableSet.Bytes32Set baseItemsHashes;\\n        // arcadian id => base items hash\\n        mapping(uint => bytes32) arcadianToBaseItemHash;\\n\\n        // account => slotId => number of coupons to modify the base traits\\n        mapping(address => mapping(uint => uint)) baseModifierCoupon;\\n\\n        // List of all the base slots ids\\n        uint8[] baseSlotsIds;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage istore)\\n    {\\n        bytes32 position = INVENTORY_STORAGE_POSITION;\\n        assembly {\\n            istore.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x2662787bb95595cd004bb2915835b1b3419e4ab7285ccd526d0cbdf486c61e34\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/mintPass/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721A {\\n    struct TokenOwnership {\\n        address addr;\\n        uint64 startTimestamp;\\n        bool burned;\\n        uint24 extraData;\\n    }\\n\\n    struct MintStageInfo {\\n        uint80 price;\\n        uint32 walletLimit;\\n        bytes32 merkleRoot;\\n        uint24 maxStageSupply;\\n        uint64 startTimeUnixSeconds;\\n        uint64 endTimeUnixSeconds;\\n    }\\n\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event ConsecutiveTransfer(uint256 fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event PermanentBaseURI(string baseURI);\\n    event SetActiveStage(uint256 activeStage);\\n    event SetBaseURI(string baseURI);\\n    event SetCosigner(address cosigner);\\n    event SetCrossmintAddress(address crossmintAddress);\\n    event SetGlobalWalletLimit(uint256 globalWalletLimit);\\n    event SetMaxMintableSupply(uint256 maxMintableSupply);\\n    event SetMintable(bool mintable);\\n    event SetTimestampExpirySeconds(uint64 expiry);\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event UpdateStage(\\n        uint256 stage,\\n        uint80 price,\\n        uint32 walletLimit,\\n        bytes32 merkleRoot,\\n        uint24 maxStageSupply,\\n        uint64 startTimeUnixSeconds,\\n        uint64 endTimeUnixSeconds\\n    );\\n    event Withdraw(uint256 value);\\n\\n    function approve(address to, uint256 tokenId) external payable;\\n    function assertValidCosign(address minter, uint32 qty, uint64 timestamp, bytes calldata signature) external view;\\n    function balanceOf(address owner) external view returns (uint256);\\n    function crossmint(uint32 qty, address to, bytes32[] calldata proof, uint64 timestamp, bytes calldata signature) external payable;\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds) external view returns (TokenOwnership[] memory);\\n    function getActiveStageFromTimestamp(uint64 timestamp) external view returns (uint256);\\n    function getApproved(uint256 tokenId) external view returns (address);\\n    function getCosignDigest(address minter, uint32 qty, uint64 timestamp) external view returns (bytes32);\\n    function getCosignNonce(address minter) external view returns (uint256);\\n    function getCosigner() external view returns (address);\\n    function getCrossmintAddress() external view returns (address);\\n    function getGlobalWalletLimit() external view returns (uint256);\\n    function getMaxMintableSupply() external view returns (uint256);\\n    function getMintable() external view returns (bool);\\n    function getNumberStages() external view returns (uint256);\\n    function getStageInfo(uint256 index)\\n        external\\n        view\\n        returns (\\n            MintStageInfo memory,\\n            uint32,\\n            uint256\\n        );\\n    function getTimestampExpirySeconds() external view returns (uint64);\\n    function getTokenURISuffix() external view returns (string memory);\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n    function mint(address minter, uint32 qty, uint64 timestamp) external payable;\\n    function name() external view returns (string memory);\\n    function owner() external view returns (address);\\n    function ownerMint(uint32 qty, address to) external;\\n        function ownerOf(uint256 tokenId) external view returns (address);\\n    function permanentBaseURI() external view returns (string memory);\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function setActiveStage(uint256 stage) external;\\n    function setBaseURI(string calldata baseURI) external;\\n    function setCosigner(address cosigner) external;\\n    function setCrossmintAddress(address crossmintAddress) external;\\n    function setGlobalWalletLimit(uint256 globalWalletLimit) external;\\n    function setMaxMintableSupply(uint256 maxMintableSupply) external;\\n    function setMintable(bool mintable) external;\\n    function setTimestampExpirySeconds(uint64 expiry) external;\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n    function symbol() external view returns (string memory);\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n    function totalSupply() external view returns (uint256);\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n    function updateStage(\\n        uint256 stage,\\n        uint80 price,\\n        uint32 walletLimit,\\n        bytes32 merkleRoot,\\n        uint24 maxStageSupply,\\n        uint64 startTimeUnixSeconds,\\n        uint64 endTimeUnixSeconds\\n    ) external;\\n    function withdraw(uint256 value) external;\\n}\\n\",\"keccak256\":\"0xce448a2c44d595fcc18a638a0f535f000a16213b5578fcf7d2afa50c711b58f7\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/mintPass/MintPassInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { MintPassStorage } from \\\"./MintPassStorage.sol\\\";\\nimport { IERC721A } from \\\"./IERC721A.sol\\\";\\n\\ncontract MintPassInternal {\\n\\n    event MintPassConsumed(address indexed account, uint tokenId);\\n\\n    function _totalClaimedMintPass() internal view returns (uint) {\\n        return MintPassStorage.layout().totalClaimed;\\n    }\\n\\n    function _setMaxSupplyMintPass(uint supply) internal {\\n        MintPassStorage.layout().maxSupply = supply;\\n    }\\n\\n    function _maxSupplyMintPass() internal view returns (uint) {\\n        return MintPassStorage.layout().maxSupply;\\n    }\\n\\n    function _claimedMintPass(address account) internal view returns (uint) {\\n        return MintPassStorage.layout().claimedAmount[account];\\n    }\\n\\n    function _elegibleMintPass(address account) internal view returns (uint elegibleAmount) {\\n        MintPassStorage.Layout storage mintPassSL = MintPassStorage.layout();\\n\\n        IERC721A passContract = IERC721A(mintPassSL.passContractAddress);\\n        uint balance = passContract.balanceOf(account);\\n\\n        if (mintPassSL.totalClaimed + 1 > mintPassSL.maxSupply) {\\n            return 0;\\n        }\\n\\n        for (uint i = 0; i < balance; i++) {\\n            uint tokenId = passContract.tokenOfOwnerByIndex(account, i);\\n            if (!mintPassSL.isTokenClaimed[tokenId]) {\\n                elegibleAmount++;\\n            }\\n        }\\n    }\\n\\n    function _consumeMintPass(address account) internal returns (bool consumed) {\\n        MintPassStorage.Layout storage mintPassSL = MintPassStorage.layout();\\n\\n        IERC721A passContract = IERC721A(mintPassSL.passContractAddress);\\n        uint balance = passContract.balanceOf(account);\\n\\n        if (mintPassSL.totalClaimed + 1 > mintPassSL.maxSupply) {\\n            return false;\\n        }\\n\\n        for (uint i = 0; i < balance; i++) {\\n            uint tokenId = passContract.tokenOfOwnerByIndex(account, i);\\n            if (!mintPassSL.isTokenClaimed[tokenId]) {\\n                mintPassSL.claimedAmount[account]++;\\n                mintPassSL.totalClaimed++;\\n                mintPassSL.isTokenClaimed[tokenId] = true;\\n                consumed = true;\\n\\n                emit MintPassConsumed(account, 1);\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _isMintPassClaimActive() view internal returns (bool) {\\n        return MintPassStorage.layout().claimActive;\\n    }\\n\\n    function _setClaimActiveMintPass(bool active) internal {\\n        MintPassStorage.layout().claimActive = active;\\n    }\\n\\n    function _setMintPassContractAddress(address passContractAddress) internal {\\n        MintPassStorage.layout().passContractAddress = passContractAddress;\\n    }\\n\\n    function _mintPassContractAddress() internal view returns (address) {\\n        return MintPassStorage.layout().passContractAddress;\\n    }\\n\\n    function _isTokenClaimed(uint tokenId) internal view returns (bool) {\\n        return MintPassStorage.layout().isTokenClaimed[tokenId];\\n    }\\n}\",\"keccak256\":\"0x04e6ea7643f5e5515cdd920ad0bd34b76e026753fe947df5aaf804e190371d53\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/mintPass/MintPassStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary MintPassStorage {\\n\\n    bytes32 constant MINT_PASS_STORAGE_POSITION =\\n        keccak256(\\\"mintPass.storage.position\\\");\\n    \\n    struct Layout {\\n        mapping(uint => bool) isTokenClaimed;\\n        mapping(address => uint) claimedAmount;\\n        uint totalClaimed;\\n        uint maxSupply;\\n        bool claimActive;\\n        address passContractAddress;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = MINT_PASS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x5e2193e63b2e2570d29f026a2e12bf5999bb438eb28dbef44a103015bfb165bc\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    error Roles_MissingAdminRole();\\n    error Roles_MissingManagerRole();\\n    error Roles_MissingAutomationRole();\\n\\n    modifier onlyDefaultAdmin() {\\n        if (!_hasRole(_defaultAdminRole(), msg.sender))\\n            revert Roles_MissingAdminRole();\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        if (!_hasRole(_managerRole(), msg.sender))\\n            revert Roles_MissingManagerRole();\\n        _;\\n    }\\n\\n    modifier onlyAutomation() {\\n        if (!_hasRole(_managerRole(), msg.sender) && !_hasRole(_automationRole(), msg.sender))\\n            revert Roles_MissingAutomationRole();\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _automationRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().automationRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.automationRole = keccak256(\\\"automation.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0x3bbcaec7bceb8497e1e96785c524e1cf67b54ba34713086686887d13502b5264\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 automationRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x6eb213b99e10477f695528196487fafafaeceb2b11c6f9f43f3ddb9e83f9e8d3\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { WhitelistStorage } from \\\"./WhitelistStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\ncontract WhitelistInternal is RolesInternal {\\n\\n    error Whitelist_ExceedsElegibleAmount();\\n    error Whitelist_ExceedsPoolSupply();\\n    error Whitelist_InputDataMismatch();\\n    error Whitelist_ClaimStateAlreadyUpdated();\\n    error Whitelist_ClaimInactive();\\n\\n    event WhitelistBalanceChanged(address indexed account, WhitelistStorage.PoolId poolId, uint totalElegibleAmount, uint totalClaimedAmount);\\n\\n    function _totalClaimedWhitelist(WhitelistStorage.PoolId poolId) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].totalClaimed;\\n    }\\n\\n    function _totalElegibleWhitelist(WhitelistStorage.PoolId poolId) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].totalElegible;\\n    }\\n\\n    function _claimedWhitelist(WhitelistStorage.PoolId poolId, address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].claimed[account];\\n    }\\n\\n    function _elegibleWhitelist(WhitelistStorage.PoolId poolId, address account) internal view returns (uint) {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        uint elegibleAmount = pool.elegible[account];\\n\\n        if (pool.totalClaimed + elegibleAmount > pool.maxSupply){\\n            return pool.maxSupply - pool.totalClaimed;\\n        }else {\\n            return elegibleAmount;\\n        }\\n    }\\n\\n    function _consumeWhitelist(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        if (!pool.claimActive)\\n            revert Whitelist_ClaimInactive();\\n\\n        if (pool.elegible[account] < amount) \\n            revert Whitelist_ExceedsElegibleAmount();\\n\\n        if (pool.totalClaimed + 1 > pool.maxSupply)\\n            revert Whitelist_ExceedsPoolSupply();\\n\\n        pool.elegible[account] -= amount;\\n        pool.claimed[account] += amount;\\n        pool.totalClaimed += amount;\\n        pool.totalElegible -= amount;\\n\\n        emit WhitelistBalanceChanged(account, poolId, pool.elegible[account], pool.claimed[account]);\\n    }\\n\\n    function _increaseWhitelistElegible(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n        pool.elegible[account] += amount;\\n        pool.totalElegible += amount;\\n        \\n        emit WhitelistBalanceChanged(account, poolId, pool.elegible[account], pool.claimed[account]);\\n    }\\n\\n    function _increaseWhitelistElegibleBatch(WhitelistStorage.PoolId poolId, address[] calldata accounts, uint[] calldata amounts) internal {\\n        if (accounts.length != amounts.length) revert Whitelist_InputDataMismatch();\\n\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        for (uint i = 0; i < accounts.length; i++) {\\n            pool.elegible[accounts[i]] += amounts[i];\\n            pool.totalElegible += amounts[i];\\n            emit WhitelistBalanceChanged(accounts[i], poolId, pool.elegible[accounts[i]], pool.claimed[accounts[i]]);\\n        }\\n    }\\n\\n    function _setWhitelistElegible(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        pool.totalElegible += amount - pool.elegible[account];\\n        pool.elegible[account] += amount;\\n        emit WhitelistBalanceChanged(account, poolId, pool.elegible[account], pool.claimed[account]);\\n    }\\n\\n    function _setWhitelistElegibleBatch(WhitelistStorage.PoolId poolId, address[] calldata accounts, uint[] calldata amounts) internal {\\n        if (accounts.length != amounts.length) revert Whitelist_InputDataMismatch();\\n\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        for (uint i = 0; i < accounts.length; i++) {\\n            pool.totalElegible += amounts[i] - pool.elegible[accounts[i]];\\n            pool.elegible[accounts[i]] = amounts[i];\\n            emit WhitelistBalanceChanged(accounts[i], poolId, pool.elegible[accounts[i]], pool.claimed[accounts[i]]);\\n        }\\n    }\\n\\n    function _isWhitelistClaimActive(WhitelistStorage.PoolId poolId) view internal returns (bool) {\\n        return WhitelistStorage.layout().pools[poolId].claimActive;\\n    }\\n\\n    function _setWhitelistClaimActive(WhitelistStorage.PoolId poolId, bool active) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n        \\n        pool.claimActive = active;\\n    }\\n\\n    function _maxSupplyWhitelist(WhitelistStorage.PoolId poolId) view internal returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].maxSupply;\\n    }\\n\\n    function _setMaxSupplyWhitelist(WhitelistStorage.PoolId poolId, uint supply) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        pool.maxSupply = supply;\\n    }\\n}\",\"keccak256\":\"0x6c22b76ff0bf1121cf0868f1b373bbb19ecddb7d87df7e8aeeeb6985e7300073\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary WhitelistStorage {\\n\\n    bytes32 constant WHITELIST_STORAGE_POSITION =\\n        keccak256(\\\"whitelist.storage.position\\\");\\n\\n    enum PoolId { Guaranteed, Restricted }\\n    \\n    struct Pool {\\n        mapping(address => uint) claimed;\\n        mapping(address => uint) elegible;\\n        uint totalClaimed;\\n        uint totalElegible;\\n        uint maxSupply;\\n        bool claimActive;\\n    }\\n\\n    struct Layout {\\n        // pool id => tokens pool\\n        mapping(PoolId => Pool) pools;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = WHITELIST_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xac7e83c1a6f5feeac4907f5e70ea309adb2701ccdabec55adc329c271d71a816\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613d2e806100206000396000f3fe6080604052600436106101cd5760003560e01c80636c0360eb116100f7578063b88d4fde11610095578063d5abeb0111610064578063d5abeb01146104dd578063d66b3eda14610511578063e985e9c514610531578063f4a0a5281461055157600080fd5b8063b88d4fde1461045e578063bcc9ca5b14610471578063c87b56dd146104a8578063d304c4bc146104c857600080fd5b806395d89b41116100d157806395d89b41146103fc578063a22cb46514610411578063a2309ff814610289578063ac9650d81461043157600080fd5b80636c0360eb146103a757806370a08231146103bc57806383ccaef7146103dc57600080fd5b806323b872dd1161016f57806355f804b31161013e57806355f804b3146103325780636352211e146103525780636387f804146103725780636817c76c1461039257600080fd5b806323b872dd146102cc5780632f745c59146102df57806342842e0e146102ff5780634f6ccce71461031257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630a0678991461027657806318160ddd146102895780631fa54bca146102ac57600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed36600461324a565b610571565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c6105b4565b6040516101fe91906132b7565b34801561023557600080fd5b506102496102443660046132ca565b6105c3565b6040516001600160a01b0390911681526020016101fe565b61027461026f3660046132f8565b6105ce565b005b610274610284366004613324565b6105dc565b34801561029557600080fd5b5061029e610645565b6040519081526020016101fe565b3480156102b857600080fd5b506102746102c7366004613399565b61064f565b6102746102da3660046133d4565b610691565b3480156102eb57600080fd5b5061029e6102fa3660046132f8565b6106a1565b61027461030d3660046133d4565b6106b4565b34801561031e57600080fd5b5061029e61032d3660046132ca565b6106bf565b34801561033e57600080fd5b5061027461034d3660046134a1565b6106ca565b34801561035e57600080fd5b5061024961036d3660046132ca565b6106fe565b34801561037e57600080fd5b5061027461038d3660046134ff565b610709565b34801561039e57600080fd5b5061029e610763565b3480156103b357600080fd5b5061021c61078d565b3480156103c857600080fd5b5061029e6103d736600461351a565b610797565b3480156103e857600080fd5b506102746103f73660046132ca565b6107a2565b34801561040857600080fd5b5061021c6107d3565b34801561041d57600080fd5b5061027461042c366004613537565b6107dd565b34801561043d57600080fd5b5061045161044c36600461356c565b6107e7565b6040516101fe91906135cf565b61027461046c366004613631565b610902565b34801561047d57600080fd5b507f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74655460ff166101f2565b3480156104b457600080fd5b5061021c6104c33660046132ca565b610914565b3480156104d457600080fd5b5061029e61091f565b3480156104e957600080fd5b507f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74685461029e565b34801561051d57600080fd5b5061029e61052c36600461351a565b610929565b34801561053d57600080fd5b506101f261054c3660046136b1565b6109e9565b34801561055d57600080fd5b5061027461056c3660046132ca565b6109f5565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b60606105be610a26565b905090565b60006105ae82610ac5565b6105d88282610b28565b5050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361061f57604051635db5c7cd60e11b815260040160405180910390fd5b60028155600061062d610c2b565b905061063c8185856001610e1e565b50600190555050565b60006105be6111f7565b61066061065a611210565b3361123a565b61067d5760405163d0befa1d60e01b815260040160405180910390fd5b61068a8585858585611271565b5050505050565b61069c838383611313565b505050565b60006106ad8383611351565b9392505050565b61069c838383611392565b60006105ae826113ad565b6106d561065a611210565b6106f25760405163d0befa1d60e01b815260040160405180910390fd5b6106fb816113c7565b50565b60006105ae82611441565b61071461065a611210565b6107315760405163d0befa1d60e01b815260040160405180910390fd5b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7465805460ff1916911515919091179055565b60006105be7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645490565b60606105be611485565b60006105ae826114a4565b6107ad61065a611210565b6107ca5760405163d0befa1d60e01b815260040160405180910390fd5b6106fb8161150d565b60606105be61155c565b6105d8828261157b565b60608167ffffffffffffffff81111561080257610802613415565b60405190808252806020026020018201604052801561083557816020015b60608152602001906001900390816108205790505b50905060005b828110156108fb5760008030868685818110610859576108596136ea565b905060200281019061086b9190613700565b604051610879929190613747565b600060405180830381855af49150503d80600081146108b4576040519150601f19603f3d011682016040523d82523d6000602084013e6108b9565b606091505b509150915081156108e757808484815181106108d7576108d76136ea565b60200260200101819052506108f1565b3d6000803e3d6000fd5b505060010161083b565b5092915050565b61090e8484848461162f565b50505050565b60606105ae8261166e565b60006105be61184f565b6001600160a01b03811660009081527f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746660209081526040808320547fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a2168909252822054600080516020613c998339815191529183916109a8600187611865565b6109b2919061376d565b6109bc919061376d565b82549091506109cc908290613780565b6109d76000866118ca565b6109e1919061376d565b949350505050565b60006106ad8383611973565b610a0061065a611210565b610a1d5760405163d0befa1d60e01b815260040160405180910390fd5b6106fb816119c0565b6060600080516020613cb98339815191528054610a4290613793565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6e90613793565b8015610abb5780601f10610a9057610100808354040283529160200191610abb565b820191906000526020600020905b815481529060010190602001808311610a9e57829003601f168201915b5050505050905090565b6000610ad082611a33565b610aed5760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b610b33828234611a4d565b6000610b3e82611441565b9050806001600160a01b0316836001600160a01b031603610b725760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b03821614801590610b925750610b908133611973565b155b15610bb057604051632f5de44f60e01b815260040160405180910390fd5b60008281527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a9602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000600080516020613c99833981519152610c44611a6c565b91508060050154821115610c6b576040516320df598b60e21b815260040160405180910390fd5b3360009081526003820160209081526040808320547fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a2168909252822054610cb2600133611865565b610cbc919061376d565b610cc6919061376d565b82549091508110808015610cfb57507fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a216b5460ff165b8015610d0f57506000610d0d33611a81565b115b15610d2357610d1d33611c0f565b50610e0e565b610d2d6000611e2a565b8015610d4357506000610d416000336118ca565b115b15610d5a57610d556000336001611e7d565b610e0e565b808015610d6c5750610d6c6001611e2a565b8015610d8257506000610d806001336118ca565b115b15610d9457610d556001336001611e7d565b808015610da55750600283015460ff165b15610df55782600101543414610dce5760405163104bb3ad60e11b815260040160405180910390fd5b3360009081526003840160205260408120805491610deb836137cd565b9190505550610e0e565b604051630e64914f60e31b815260040160405180910390fd5b610e183385612054565b50505090565b6040516331a9108f60e11b815260048101859052849030908190636352211e90602401602060405180830381865afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8291906137e6565b6001600160a01b0316336001600160a01b031614610eb35760405163aee05b5d60e01b815260040160405180910390fd5b6000849003610ed55760405163627652c960e11b815260040160405180910390fd5b600080516020613cd98339815191526000808667ffffffffffffffff811115610f0057610f00613415565b604051908082528060200260200182016040528015610f29578160200160208202803683370190505b50905060005b87811015610fc7576000610f5b8b8b8b85818110610f4f57610f4f6136ea565b9050604002018a61206e565b60ff8082166000908152600188016020526040902054919250620100009091041615610f8f5783610f8b81613803565b9450505b80838381518110610fa257610fa26136ea565b60ff909216602092830291909101909101525080610fbf816137cd565b915050610f2f565b50610fd189612448565b610fee5760405163a9614f1560e01b815260040160405180910390fd5b60ff8216156111aa5761100089612518565b61101c5760405162ecf30560e51b815260040160405180910390fd5b856111aa5760008260ff1667ffffffffffffffff81111561103f5761103f613415565b604051908082528060200260200182016040528015611068578160200160208202803683370190505b5090506000805b898110156111645760008660030160008d8d85818110611091576110916136ea565b6110a7926020604090920201908101915061351a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008d8d858181106110db576110db6136ea565b60206040918202939093018301358452838301949094525090820160009081205460ff90811680835260018c019093529290205490925062010000900416156111515780848481518110611131576111316136ea565b60ff909216602092830291909101909101528261114d816137cd565b9350505b508061115c816137cd565b91505061106f565b508a336001600160a01b03167f26f48489610b9379e1312f6d4ab3e8ae7daaeb6e9c3fc4fd435e31efe4b5b9058460405161119f9190613822565b60405180910390a350505b88336001600160a01b03167f9327c3082659d71242f39580f98c14533249a2555a5e35f7c1dd6114c014acbd836040516111e49190613822565b60405180910390a3505050505050505050565b60006105be600080516020613c7983398151915261265c565b60007ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725b54919050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206106ad9083612666565b600080516020613c9983398151915285828461128d878961376d565b611297919061376d565b6112a1919061376d565b146112bf5760405163d0b95c6160e01b815260040160405180910390fd5b60058101869055600481018290556112f5857fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a216a55565b611300600085612688565b61130b600184612688565b505050505050565b61131f838383346126da565b61132933826126fe565b61134657604051632f5de44f60e01b815260040160405180910390fd5b61069c83838361277c565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604081206106ad908361290b565b61069c8383836040518060200160405280600081525061162f565b60006108fb600080516020613c7983398151915283612917565b604051600080516020613cb98339815191529033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea9061142b907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b3908690613869565b60405180910390a26002810161069c838261394e565b60008061145c600080516020613c7983398151915284612935565b90506001600160a01b0381166105ae57604051637e1a7d8b60e01b815260040160405180910390fd5b6060600080516020613cb98339815191526002018054610a4290613793565b60006001600160a01b0382166114cd57604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604090206105ae9061265c565b600080516020613c9983398151915280546040805191825260208201849052805133927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92908290030190a255565b6060600080516020613cb98339815191526001018054610a4290613793565b336001600160a01b038316036115a45760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61163b848484346126da565b61164533836126fe565b61166257604051632f5de44f60e01b815260040160405180910390fd5b61090e84848484612941565b606061167982611a33565b61169557604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604081208054600080516020613cb98339815191529291906116df90613793565b80601f016020809104026020016040519081016040528092919081815260200182805461170b90613793565b80156117585780601f1061172d57610100808354040283529160200191611758565b820191906000526020600020905b81548152906001019060200180831161173b57829003601f168201915b50505050509050600082600201805461177090613793565b80601f016020809104026020016040519081016040528092919081815260200182805461179c90613793565b80156117e95780601f106117be576101008083540402835291602001916117e9565b820191906000526020600020905b8154815290600101906020018083116117cc57829003601f168201915b50505050509050805160000361180157509392505050565b81511561183457808260405160200161181b929190613a0e565b6040516020818303038152906040529350505050919050565b8061183e86612975565b60405160200161181b929190613a0e565b6000600080516020613c99833981519152611234565b6000600080516020613c59833981519152600084600181111561188a5761188a613a3d565b600181111561189b5761189b613a3d565b8152602080820192909252604090810160009081206001600160a01b0386168252909252902054905092915050565b6000600080516020613c598339815191528181818660018111156118f0576118f0613a3d565b600181111561190157611901613a3d565b8152602080820192909252604090810160009081206001600160a01b038816825260018101909352205460048201546002830154929350909161194590839061376d565b1115611969578160020154826004015461195f9190613780565b93505050506105ae565b92506105ae915050565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645460408051918252602082018390528051600080516020613c998339815191529233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260010155565b60006105ae600080516020613c7983398151915283612a76565b801561069c5760405163b56d7c1b60e01b815260040160405180910390fd5b6000611a766111f7565b6105be90600161376d565b6000807fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a21676004818101546040516370a0823160e01b81526001600160a01b03878116938201939093529293506101009004169060009082906370a0823190602401602060405180830381865afa158015611aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b239190613a53565b9050826003015483600201546001611b3b919061376d565b1115611b4c57506000949350505050565b60005b81811015611c0657604051632f745c5960e01b81526001600160a01b0387811660048301526024820183905260009190851690632f745c5990604401602060405180830381865afa158015611ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcc9190613a53565b60008181526020879052604090205490915060ff16611bf35785611bef816137cd565b9650505b5080611bfe816137cd565b915050611b4f565b50505050919050565b6000807fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a21676004818101546040516370a0823160e01b81526001600160a01b03878116938201939093529293506101009004169060009082906370a0823190602401602060405180830381865afa158015611c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb19190613a53565b9050826003015483600201546001611cc9919061376d565b1115611cda57506000949350505050565b60005b81811015611c0657604051632f745c5960e01b81526001600160a01b0387811660048301526024820183905260009190851690632f745c5990604401602060405180830381865afa158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5a9190613a53565b60008181526020879052604090205490915060ff16611e17576001600160a01b03871660009081526001860160205260408120805491611d99836137cd565b9091555050600285018054906000611db0836137cd565b909155505060008181526020868152604091829020805460ff1916600190811790915591518281529197506001600160a01b038916917f635ab7979864b411fa5ddec44b7c3680bacf7584d39d4e9bd33b709b14001eb3910160405180910390a250611c06565b5080611e22816137cd565b915050611cdd565b6000600080516020613c598339815191526000836001811115611e4f57611e4f613a3d565b6001811115611e6057611e60613a3d565b815260208101919091526040016000206005015460ff1692915050565b600080516020613c5983398151915260008181866001811115611ea257611ea2613a3d565b6001811115611eb357611eb3613a3d565b81526020810191909152604001600020600581015490915060ff16611eeb57604051633137c0e960e11b815260040160405180910390fd5b6001600160a01b0384166000908152600182016020526040902054831115611f2657604051630f8a2c5f60e31b815260040160405180910390fd5b60048101546002820154611f3b90600161376d565b1115611f5a57604051633a65df5360e11b815260040160405180910390fd5b6001600160a01b038416600090815260018201602052604081208054859290611f84908490613780565b90915550506001600160a01b03841660009081526020829052604081208054859290611fb190849061376d565b9250508190555082816002016000828254611fcc919061376d565b9250508190555082816003016000828254611fe79190613780565b90915550506001600160a01b038416600081815260018301602090815260408083205491859052918290205491517f6526db8cb857c3bc972db45a7984e99efaed17f7a4e51afb85c64450133cb55c92612045928a92909190613a6c565b60405180910390a25050505050565b6105d8828260405180602001604052806000815250612a8e565b6000600080516020613cd98339815191527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d439826120ae602087018761351a565b6001600160a01b031681526020808201929092526040908101600090812087840135825290925290205460ff1691508115806120ff5750600080516020613cd98339815191525460ff908116908316115b1561211d576040516363efa0e360e01b815260040160405180910390fd5b82158015612144575060ff8083166000908152600183016020526040902054620100009004165b156121b957336000908152600882016020908152604080832060ff8616845290915281205490036121885760405163bbd28dfd60e01b815260040160405180910390fd5b336000908152600882016020908152604080832060ff8616845290915281208054916121b383613aa2565b91905055505b6000858152600282016020908152604080832060ff8087168552908352818420600186019093529220549091610100909104168015612201575080546001600160a01b031615155b1561221f5760405163bd8a5e1560e01b815260040160405180910390fd5b61222c602086018661351a565b81546001600160a01b03908116911614801561224f575084602001358160010154145b1561226d5760405163c80df0cb60e01b815260040160405180910390fd5b6000868152600283016020908152604080832060ff871684529091529020546001600160a01b0316156122a4576122a48684612ac2565b600060048301816122b8602089018961351a565b6001600160a01b031681526020808201929092526040908101600090812089840135825290925290205460ff16905080156124115760006122fc602088018861351a565b604051627eeac760e11b8152336004820152602089013560248201529091506001906001600160a01b0383169062fdd58e90604401602060405180830381865afa15801561234e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123729190613a53565b1015612391576040516335ba250d60e11b815260040160405180910390fd5b604051637921219560e11b8152336004820152306024820152602088013560448201526001606482015260a06084820152600060a48201526001600160a01b0382169063f242432a9060c401600060405180830381600087803b1580156123f757600080fd5b505af115801561240b573d6000803e3d6000fd5b50505050505b6000878152600284016020908152604080832060ff881684529091529020869061243b8282613ab9565b9050505050509392505050565b600080516020613cd983398151915280546000919060ff16825b8160ff168160ff16101561250d57600061247d826001613af3565b60ff80821660009081526001870160205260409020805492935091620100009004161580156124b357508054610100900460ff16155b156124bf5750506124fb565b6000878152600286016020908152604080832060ff861684529091529020546001600160a01b03166124f8575060009695505050505050565b50505b8061250581613803565b915050612462565b506001949350505050565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f54600090600080516020613cd983398151915290606090835b818160ff1610156125fa576000846009018260ff1681548110612577576125776136ea565b6000918252602080832081830401548a84526002890182526040808520601f9094166101000a90910460ff168085529282529283902080546001820154945193955090936125d493899387936001600160a01b0316929101613b0c565b6040516020818303038152906040529450505080806125f290613803565b915050612552565b508151602083012061260f6005850182612a76565b600087815260078601602052604090205490159550612632906005860190612c14565b506126406005850182612c20565b5060009586526007909301602052505060409092209190915590565b60006105ae825490565b6001600160a01b038116600090815260018301602052604081205415156106ad565b600080516020613c59833981519152600081818560018111156126ad576126ad613a3d565b60018111156126be576126be613a3d565b8152602081019190915260400160002060040192909255505050565b80156126f9576040516322b1813960e01b815260040160405180910390fd5b61090e565b600061270982611a33565b6127265760405163c1b843ef60e01b815260040160405180910390fd5b600061273183611441565b9050806001600160a01b0316846001600160a01b0316148061276c5750836001600160a01b031661276184610ac5565b6001600160a01b0316145b806109e157506109e18185611973565b600061278782611441565b9050836001600160a01b0316816001600160a01b0316146127bb57604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b0383166127e2576040516340311a0960e01b815260040160405180910390fd5b6127ed848484612c2c565b6001600160a01b03841660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020613c798339815191529061283e9084612c14565b506001600160a01b038416600090815260028201602052604090206128639084612c20565b5061286f818486612c37565b50600083815260038201602052604080822080546001600160a01b0319169055518491906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a482846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60006106ad8383612c4d565b60008080806129268686612c99565b909450925050505b9250929050565b60006106ad8383612cfc565b61294c84848461277c565b61295884848484612d60565b61090e57604051639ff10cdd60e01b815260040160405180910390fd5b60608160000361299c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156129c657806129b0816137cd565b91506129bf9050600a83613b73565b91506129a0565b60008167ffffffffffffffff8111156129e1576129e1613415565b6040519080825280601f01601f191660200182016040528015612a0b576020820181803683370190505b5090505b84156109e157612a20600183613780565b9150612a2d600a86613b87565b612a3890603061376d565b60f81b818381518110612a4d57612a4d6136ea565b60200101906001600160f81b031916908160001a905350612a6f600a86613b73565b9450612a0f565b600081815260018301602052604081205415156106ad565b612a988383612e31565b612aa56000848484612d60565b61069c57604051639ff10cdd60e01b815260040160405180910390fd5b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020908152604080832060ff858116855290835281842080546001600160a01b031685527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a845282852060018201548652909352922054600080516020613cd983398151915292168015612be0578154600180840154604051637921219560e11b81523060048201523360248201526044810191909152606481019190915260a06084820152600060a48201526001600160a01b0390911690819063f242432a9060c401600060405180830381600087803b158015612bc657600080fd5b505af1158015612bda573d6000803e3d6000fd5b50505050505b505060009283526002016020908152604080842060ff9093168452919052812080546001600160a01b031916815560010155565b60006106ad8383612f26565b60006106ad8383612fe0565b61069c838383613023565b60006109e184846001600160a01b03851661302e565b81546000908210612c715760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110612c8657612c866136ea565b9060005260206000200154905092915050565b815460009081908310612cbf5760405163022fd82760e31b815260040160405180910390fd5b6000846000018481548110612cd657612cd66136ea565b906000526020600020906002020190508060000154816001015492509250509250929050565b6000818152600183016020526040812054808203612d2d57604051633d547ec560e21b815260040160405180910390fd5b836000016001820381548110612d4557612d456136ea565b90600052602060002090600202016001015491505092915050565b60006001600160a01b0384163b612d79575060016109e1565b6000612dfa63150b7a0260e01b33888787604051602401612d9d9493929190613b9b565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613c27603291396001600160a01b03881691906130cd565b9050600081806020019051810190612e129190613bd7565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b6001600160a01b038216612e58576040516311f2988d60e11b815260040160405180910390fd5b612e6181611a33565b15612e7f57604051630d86bb7b60e31b815260040160405180910390fd5b612e8b60008383612c2c565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020613c7983398151915290612edc9083612c20565b50612ee8818385612c37565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b600081815260018301602052604081205480156108fb57835460009085906000198101908110612f5857612f586136ea565b9060005260206000200154905080856000016001840381548110612f7e57612f7e6136ea565b6000918252602080832090910192909255918252600186019052604090208190558354849080612fb057612fb0613bf4565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b60008181526001830160205260408120546105ae575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b61069c8383836130dc565b60008281526001840160205260408120548082036130955750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556106ad565b828560000160018303815481106130ae576130ae6136ea565b90600052602060002090600202016001018190555060009150506106ad565b60606109e18484600085613120565b6001600160a01b03821661069c5760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812061069c916131e6565b6060843b61314157604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b0316858760405161315d9190613c0a565b60006040518083038185875af1925050503d806000811461319a576040519150601f19603f3d011682016040523d82523d6000602084013e61319f565b606091505b509150915081156131b35791506109e19050565b8051156131c35780518082602001fd5b8360405162461bcd60e51b81526004016131dd91906132b7565b60405180910390fd5b5080546131f290613793565b6000825580601f10613202575050565b601f0160209004906000526020600020908101906106fb91905b80821115613230576000815560010161321c565b5090565b6001600160e01b0319811681146106fb57600080fd5b60006020828403121561325c57600080fd5b81356106ad81613234565b60005b8381101561328257818101518382015260200161326a565b50506000910152565b600081518084526132a3816020860160208601613267565b601f01601f19169290920160200192915050565b6020815260006106ad602083018461328b565b6000602082840312156132dc57600080fd5b5035919050565b6001600160a01b03811681146106fb57600080fd5b6000806040838503121561330b57600080fd5b8235613316816132e3565b946020939093013593505050565b6000806020838503121561333757600080fd5b823567ffffffffffffffff8082111561334f57600080fd5b818501915085601f83011261336357600080fd5b81358181111561337257600080fd5b8660208260061b850101111561338757600080fd5b60209290920196919550909350505050565b600080600080600060a086880312156133b157600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000806000606084860312156133e957600080fd5b83356133f4816132e3565b92506020840135613404816132e3565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561344657613446613415565b604051601f8501601f19908116603f0116810190828211818310171561346e5761346e613415565b8160405280935085815286868601111561348757600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156134b357600080fd5b813567ffffffffffffffff8111156134ca57600080fd5b8201601f810184136134db57600080fd5b6109e18482356020840161342b565b803580151581146134fa57600080fd5b919050565b60006020828403121561351157600080fd5b6106ad826134ea565b60006020828403121561352c57600080fd5b81356106ad816132e3565b6000806040838503121561354a57600080fd5b8235613555816132e3565b9150613563602084016134ea565b90509250929050565b6000806020838503121561357f57600080fd5b823567ffffffffffffffff8082111561359757600080fd5b818501915085601f8301126135ab57600080fd5b8135818111156135ba57600080fd5b8660208260051b850101111561338757600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561362457603f1988860301845261361285835161328b565b945092850192908501906001016135f6565b5092979650505050505050565b6000806000806080858703121561364757600080fd5b8435613652816132e3565b93506020850135613662816132e3565b925060408501359150606085013567ffffffffffffffff81111561368557600080fd5b8501601f8101871361369657600080fd5b6136a58782356020840161342b565b91505092959194509250565b600080604083850312156136c457600080fd5b82356136cf816132e3565b915060208301356136df816132e3565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261371757600080fd5b83018035915067ffffffffffffffff82111561373257600080fd5b60200191503681900382131561292e57600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105ae576105ae613757565b818103818111156105ae576105ae613757565b600181811c908216806137a757607f821691505b6020821081036137c757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600182016137df576137df613757565b5060010190565b6000602082840312156137f857600080fd5b81516106ad816132e3565b600060ff821660ff810361381957613819613757565b60010192915050565b6020808252825182820181905260009190848201906040850190845b8181101561385d57835160ff168352928401929184019160010161383e565b50909695505050505050565b60408152600080845461387b81613793565b806040860152606060018084166000811461389d57600181146138b7576138e8565b60ff1985168884015283151560051b8801830195506138e8565b8960005260208060002060005b868110156138df5781548b82018701529084019082016138c4565b8a018501975050505b505050505082810360208401526138ff818561328b565b95945050505050565b601f82111561069c57600081815260208120601f850160051c8101602086101561392f5750805b601f850160051c820191505b8181101561130b5782815560010161393b565b815167ffffffffffffffff81111561396857613968613415565b61397c816139768454613793565b84613908565b602080601f8311600181146139b157600084156139995750858301515b600019600386901b1c1916600185901b17855561130b565b600085815260208120601f198616915b828110156139e0578886015182559484019460019091019084016139c1565b50858210156139fe5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008351613a20818460208801613267565b835190830190613a34818360208801613267565b01949350505050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215613a6557600080fd5b5051919050565b6060810160028510613a8e57634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b600081613ab157613ab1613757565b506000190190565b8135613ac4816132e3565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b60ff81811683821601908111156105ae576105ae613757565b60008551613b1e818460208a01613267565b60f89590951b6001600160f81b0319169190940190815260609290921b6bffffffffffffffffffffffff19166001830152601582015260350192915050565b634e487b7160e01b600052601260045260246000fd5b600082613b8257613b82613b5d565b500490565b600082613b9657613b96613b5d565b500690565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613bcd608083018461328b565b9695505050505050565b600060208284031215613be957600080fd5b81516106ad81613234565b634e487b7160e01b600052603160045260246000fd5b60008251613c1c818460208701613267565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572f38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35883c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a687a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746399574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1f672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220412e895a92c67faba1f028e319a6f602dfe458197856b93560feb77792175a5864736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80636c0360eb116100f7578063b88d4fde11610095578063d5abeb0111610064578063d5abeb01146104dd578063d66b3eda14610511578063e985e9c514610531578063f4a0a5281461055157600080fd5b8063b88d4fde1461045e578063bcc9ca5b14610471578063c87b56dd146104a8578063d304c4bc146104c857600080fd5b806395d89b41116100d157806395d89b41146103fc578063a22cb46514610411578063a2309ff814610289578063ac9650d81461043157600080fd5b80636c0360eb146103a757806370a08231146103bc57806383ccaef7146103dc57600080fd5b806323b872dd1161016f57806355f804b31161013e57806355f804b3146103325780636352211e146103525780636387f804146103725780636817c76c1461039257600080fd5b806323b872dd146102cc5780632f745c59146102df57806342842e0e146102ff5780634f6ccce71461031257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630a0678991461027657806318160ddd146102895780631fa54bca146102ac57600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed36600461324a565b610571565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c6105b4565b6040516101fe91906132b7565b34801561023557600080fd5b506102496102443660046132ca565b6105c3565b6040516001600160a01b0390911681526020016101fe565b61027461026f3660046132f8565b6105ce565b005b610274610284366004613324565b6105dc565b34801561029557600080fd5b5061029e610645565b6040519081526020016101fe565b3480156102b857600080fd5b506102746102c7366004613399565b61064f565b6102746102da3660046133d4565b610691565b3480156102eb57600080fd5b5061029e6102fa3660046132f8565b6106a1565b61027461030d3660046133d4565b6106b4565b34801561031e57600080fd5b5061029e61032d3660046132ca565b6106bf565b34801561033e57600080fd5b5061027461034d3660046134a1565b6106ca565b34801561035e57600080fd5b5061024961036d3660046132ca565b6106fe565b34801561037e57600080fd5b5061027461038d3660046134ff565b610709565b34801561039e57600080fd5b5061029e610763565b3480156103b357600080fd5b5061021c61078d565b3480156103c857600080fd5b5061029e6103d736600461351a565b610797565b3480156103e857600080fd5b506102746103f73660046132ca565b6107a2565b34801561040857600080fd5b5061021c6107d3565b34801561041d57600080fd5b5061027461042c366004613537565b6107dd565b34801561043d57600080fd5b5061045161044c36600461356c565b6107e7565b6040516101fe91906135cf565b61027461046c366004613631565b610902565b34801561047d57600080fd5b507f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74655460ff166101f2565b3480156104b457600080fd5b5061021c6104c33660046132ca565b610914565b3480156104d457600080fd5b5061029e61091f565b3480156104e957600080fd5b507f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74685461029e565b34801561051d57600080fd5b5061029e61052c36600461351a565b610929565b34801561053d57600080fd5b506101f261054c3660046136b1565b6109e9565b34801561055d57600080fd5b5061027461056c3660046132ca565b6109f5565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b60606105be610a26565b905090565b60006105ae82610ac5565b6105d88282610b28565b5050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361061f57604051635db5c7cd60e11b815260040160405180910390fd5b60028155600061062d610c2b565b905061063c8185856001610e1e565b50600190555050565b60006105be6111f7565b61066061065a611210565b3361123a565b61067d5760405163d0befa1d60e01b815260040160405180910390fd5b61068a8585858585611271565b5050505050565b61069c838383611313565b505050565b60006106ad8383611351565b9392505050565b61069c838383611392565b60006105ae826113ad565b6106d561065a611210565b6106f25760405163d0befa1d60e01b815260040160405180910390fd5b6106fb816113c7565b50565b60006105ae82611441565b61071461065a611210565b6107315760405163d0befa1d60e01b815260040160405180910390fd5b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7465805460ff1916911515919091179055565b60006105be7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645490565b60606105be611485565b60006105ae826114a4565b6107ad61065a611210565b6107ca5760405163d0befa1d60e01b815260040160405180910390fd5b6106fb8161150d565b60606105be61155c565b6105d8828261157b565b60608167ffffffffffffffff81111561080257610802613415565b60405190808252806020026020018201604052801561083557816020015b60608152602001906001900390816108205790505b50905060005b828110156108fb5760008030868685818110610859576108596136ea565b905060200281019061086b9190613700565b604051610879929190613747565b600060405180830381855af49150503d80600081146108b4576040519150601f19603f3d011682016040523d82523d6000602084013e6108b9565b606091505b509150915081156108e757808484815181106108d7576108d76136ea565b60200260200101819052506108f1565b3d6000803e3d6000fd5b505060010161083b565b5092915050565b61090e8484848461162f565b50505050565b60606105ae8261166e565b60006105be61184f565b6001600160a01b03811660009081527f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746660209081526040808320547fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a2168909252822054600080516020613c998339815191529183916109a8600187611865565b6109b2919061376d565b6109bc919061376d565b82549091506109cc908290613780565b6109d76000866118ca565b6109e1919061376d565b949350505050565b60006106ad8383611973565b610a0061065a611210565b610a1d5760405163d0befa1d60e01b815260040160405180910390fd5b6106fb816119c0565b6060600080516020613cb98339815191528054610a4290613793565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6e90613793565b8015610abb5780601f10610a9057610100808354040283529160200191610abb565b820191906000526020600020905b815481529060010190602001808311610a9e57829003601f168201915b5050505050905090565b6000610ad082611a33565b610aed5760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b610b33828234611a4d565b6000610b3e82611441565b9050806001600160a01b0316836001600160a01b031603610b725760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b03821614801590610b925750610b908133611973565b155b15610bb057604051632f5de44f60e01b815260040160405180910390fd5b60008281527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a9602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000600080516020613c99833981519152610c44611a6c565b91508060050154821115610c6b576040516320df598b60e21b815260040160405180910390fd5b3360009081526003820160209081526040808320547fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a2168909252822054610cb2600133611865565b610cbc919061376d565b610cc6919061376d565b82549091508110808015610cfb57507fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a216b5460ff165b8015610d0f57506000610d0d33611a81565b115b15610d2357610d1d33611c0f565b50610e0e565b610d2d6000611e2a565b8015610d4357506000610d416000336118ca565b115b15610d5a57610d556000336001611e7d565b610e0e565b808015610d6c5750610d6c6001611e2a565b8015610d8257506000610d806001336118ca565b115b15610d9457610d556001336001611e7d565b808015610da55750600283015460ff165b15610df55782600101543414610dce5760405163104bb3ad60e11b815260040160405180910390fd5b3360009081526003840160205260408120805491610deb836137cd565b9190505550610e0e565b604051630e64914f60e31b815260040160405180910390fd5b610e183385612054565b50505090565b6040516331a9108f60e11b815260048101859052849030908190636352211e90602401602060405180830381865afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8291906137e6565b6001600160a01b0316336001600160a01b031614610eb35760405163aee05b5d60e01b815260040160405180910390fd5b6000849003610ed55760405163627652c960e11b815260040160405180910390fd5b600080516020613cd98339815191526000808667ffffffffffffffff811115610f0057610f00613415565b604051908082528060200260200182016040528015610f29578160200160208202803683370190505b50905060005b87811015610fc7576000610f5b8b8b8b85818110610f4f57610f4f6136ea565b9050604002018a61206e565b60ff8082166000908152600188016020526040902054919250620100009091041615610f8f5783610f8b81613803565b9450505b80838381518110610fa257610fa26136ea565b60ff909216602092830291909101909101525080610fbf816137cd565b915050610f2f565b50610fd189612448565b610fee5760405163a9614f1560e01b815260040160405180910390fd5b60ff8216156111aa5761100089612518565b61101c5760405162ecf30560e51b815260040160405180910390fd5b856111aa5760008260ff1667ffffffffffffffff81111561103f5761103f613415565b604051908082528060200260200182016040528015611068578160200160208202803683370190505b5090506000805b898110156111645760008660030160008d8d85818110611091576110916136ea565b6110a7926020604090920201908101915061351a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008d8d858181106110db576110db6136ea565b60206040918202939093018301358452838301949094525090820160009081205460ff90811680835260018c019093529290205490925062010000900416156111515780848481518110611131576111316136ea565b60ff909216602092830291909101909101528261114d816137cd565b9350505b508061115c816137cd565b91505061106f565b508a336001600160a01b03167f26f48489610b9379e1312f6d4ab3e8ae7daaeb6e9c3fc4fd435e31efe4b5b9058460405161119f9190613822565b60405180910390a350505b88336001600160a01b03167f9327c3082659d71242f39580f98c14533249a2555a5e35f7c1dd6114c014acbd836040516111e49190613822565b60405180910390a3505050505050505050565b60006105be600080516020613c7983398151915261265c565b60007ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725b54919050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206106ad9083612666565b600080516020613c9983398151915285828461128d878961376d565b611297919061376d565b6112a1919061376d565b146112bf5760405163d0b95c6160e01b815260040160405180910390fd5b60058101869055600481018290556112f5857fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a216a55565b611300600085612688565b61130b600184612688565b505050505050565b61131f838383346126da565b61132933826126fe565b61134657604051632f5de44f60e01b815260040160405180910390fd5b61069c83838361277c565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604081206106ad908361290b565b61069c8383836040518060200160405280600081525061162f565b60006108fb600080516020613c7983398151915283612917565b604051600080516020613cb98339815191529033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea9061142b907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b3908690613869565b60405180910390a26002810161069c838261394e565b60008061145c600080516020613c7983398151915284612935565b90506001600160a01b0381166105ae57604051637e1a7d8b60e01b815260040160405180910390fd5b6060600080516020613cb98339815191526002018054610a4290613793565b60006001600160a01b0382166114cd57604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604090206105ae9061265c565b600080516020613c9983398151915280546040805191825260208201849052805133927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92908290030190a255565b6060600080516020613cb98339815191526001018054610a4290613793565b336001600160a01b038316036115a45760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61163b848484346126da565b61164533836126fe565b61166257604051632f5de44f60e01b815260040160405180910390fd5b61090e84848484612941565b606061167982611a33565b61169557604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604081208054600080516020613cb98339815191529291906116df90613793565b80601f016020809104026020016040519081016040528092919081815260200182805461170b90613793565b80156117585780601f1061172d57610100808354040283529160200191611758565b820191906000526020600020905b81548152906001019060200180831161173b57829003601f168201915b50505050509050600082600201805461177090613793565b80601f016020809104026020016040519081016040528092919081815260200182805461179c90613793565b80156117e95780601f106117be576101008083540402835291602001916117e9565b820191906000526020600020905b8154815290600101906020018083116117cc57829003601f168201915b50505050509050805160000361180157509392505050565b81511561183457808260405160200161181b929190613a0e565b6040516020818303038152906040529350505050919050565b8061183e86612975565b60405160200161181b929190613a0e565b6000600080516020613c99833981519152611234565b6000600080516020613c59833981519152600084600181111561188a5761188a613a3d565b600181111561189b5761189b613a3d565b8152602080820192909252604090810160009081206001600160a01b0386168252909252902054905092915050565b6000600080516020613c598339815191528181818660018111156118f0576118f0613a3d565b600181111561190157611901613a3d565b8152602080820192909252604090810160009081206001600160a01b038816825260018101909352205460048201546002830154929350909161194590839061376d565b1115611969578160020154826004015461195f9190613780565b93505050506105ae565b92506105ae915050565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645460408051918252602082018390528051600080516020613c998339815191529233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260010155565b60006105ae600080516020613c7983398151915283612a76565b801561069c5760405163b56d7c1b60e01b815260040160405180910390fd5b6000611a766111f7565b6105be90600161376d565b6000807fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a21676004818101546040516370a0823160e01b81526001600160a01b03878116938201939093529293506101009004169060009082906370a0823190602401602060405180830381865afa158015611aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b239190613a53565b9050826003015483600201546001611b3b919061376d565b1115611b4c57506000949350505050565b60005b81811015611c0657604051632f745c5960e01b81526001600160a01b0387811660048301526024820183905260009190851690632f745c5990604401602060405180830381865afa158015611ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcc9190613a53565b60008181526020879052604090205490915060ff16611bf35785611bef816137cd565b9650505b5080611bfe816137cd565b915050611b4f565b50505050919050565b6000807fa3ab50e899f598cf35254e9a97be2f97034673b13bdb3ad1ddfaf5a13d0a21676004818101546040516370a0823160e01b81526001600160a01b03878116938201939093529293506101009004169060009082906370a0823190602401602060405180830381865afa158015611c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb19190613a53565b9050826003015483600201546001611cc9919061376d565b1115611cda57506000949350505050565b60005b81811015611c0657604051632f745c5960e01b81526001600160a01b0387811660048301526024820183905260009190851690632f745c5990604401602060405180830381865afa158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5a9190613a53565b60008181526020879052604090205490915060ff16611e17576001600160a01b03871660009081526001860160205260408120805491611d99836137cd565b9091555050600285018054906000611db0836137cd565b909155505060008181526020868152604091829020805460ff1916600190811790915591518281529197506001600160a01b038916917f635ab7979864b411fa5ddec44b7c3680bacf7584d39d4e9bd33b709b14001eb3910160405180910390a250611c06565b5080611e22816137cd565b915050611cdd565b6000600080516020613c598339815191526000836001811115611e4f57611e4f613a3d565b6001811115611e6057611e60613a3d565b815260208101919091526040016000206005015460ff1692915050565b600080516020613c5983398151915260008181866001811115611ea257611ea2613a3d565b6001811115611eb357611eb3613a3d565b81526020810191909152604001600020600581015490915060ff16611eeb57604051633137c0e960e11b815260040160405180910390fd5b6001600160a01b0384166000908152600182016020526040902054831115611f2657604051630f8a2c5f60e31b815260040160405180910390fd5b60048101546002820154611f3b90600161376d565b1115611f5a57604051633a65df5360e11b815260040160405180910390fd5b6001600160a01b038416600090815260018201602052604081208054859290611f84908490613780565b90915550506001600160a01b03841660009081526020829052604081208054859290611fb190849061376d565b9250508190555082816002016000828254611fcc919061376d565b9250508190555082816003016000828254611fe79190613780565b90915550506001600160a01b038416600081815260018301602090815260408083205491859052918290205491517f6526db8cb857c3bc972db45a7984e99efaed17f7a4e51afb85c64450133cb55c92612045928a92909190613a6c565b60405180910390a25050505050565b6105d8828260405180602001604052806000815250612a8e565b6000600080516020613cd98339815191527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d439826120ae602087018761351a565b6001600160a01b031681526020808201929092526040908101600090812087840135825290925290205460ff1691508115806120ff5750600080516020613cd98339815191525460ff908116908316115b1561211d576040516363efa0e360e01b815260040160405180910390fd5b82158015612144575060ff8083166000908152600183016020526040902054620100009004165b156121b957336000908152600882016020908152604080832060ff8616845290915281205490036121885760405163bbd28dfd60e01b815260040160405180910390fd5b336000908152600882016020908152604080832060ff8616845290915281208054916121b383613aa2565b91905055505b6000858152600282016020908152604080832060ff8087168552908352818420600186019093529220549091610100909104168015612201575080546001600160a01b031615155b1561221f5760405163bd8a5e1560e01b815260040160405180910390fd5b61222c602086018661351a565b81546001600160a01b03908116911614801561224f575084602001358160010154145b1561226d5760405163c80df0cb60e01b815260040160405180910390fd5b6000868152600283016020908152604080832060ff871684529091529020546001600160a01b0316156122a4576122a48684612ac2565b600060048301816122b8602089018961351a565b6001600160a01b031681526020808201929092526040908101600090812089840135825290925290205460ff16905080156124115760006122fc602088018861351a565b604051627eeac760e11b8152336004820152602089013560248201529091506001906001600160a01b0383169062fdd58e90604401602060405180830381865afa15801561234e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123729190613a53565b1015612391576040516335ba250d60e11b815260040160405180910390fd5b604051637921219560e11b8152336004820152306024820152602088013560448201526001606482015260a06084820152600060a48201526001600160a01b0382169063f242432a9060c401600060405180830381600087803b1580156123f757600080fd5b505af115801561240b573d6000803e3d6000fd5b50505050505b6000878152600284016020908152604080832060ff881684529091529020869061243b8282613ab9565b9050505050509392505050565b600080516020613cd983398151915280546000919060ff16825b8160ff168160ff16101561250d57600061247d826001613af3565b60ff80821660009081526001870160205260409020805492935091620100009004161580156124b357508054610100900460ff16155b156124bf5750506124fb565b6000878152600286016020908152604080832060ff861684529091529020546001600160a01b03166124f8575060009695505050505050565b50505b8061250581613803565b915050612462565b506001949350505050565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f54600090600080516020613cd983398151915290606090835b818160ff1610156125fa576000846009018260ff1681548110612577576125776136ea565b6000918252602080832081830401548a84526002890182526040808520601f9094166101000a90910460ff168085529282529283902080546001820154945193955090936125d493899387936001600160a01b0316929101613b0c565b6040516020818303038152906040529450505080806125f290613803565b915050612552565b508151602083012061260f6005850182612a76565b600087815260078601602052604090205490159550612632906005860190612c14565b506126406005850182612c20565b5060009586526007909301602052505060409092209190915590565b60006105ae825490565b6001600160a01b038116600090815260018301602052604081205415156106ad565b600080516020613c59833981519152600081818560018111156126ad576126ad613a3d565b60018111156126be576126be613a3d565b8152602081019190915260400160002060040192909255505050565b80156126f9576040516322b1813960e01b815260040160405180910390fd5b61090e565b600061270982611a33565b6127265760405163c1b843ef60e01b815260040160405180910390fd5b600061273183611441565b9050806001600160a01b0316846001600160a01b0316148061276c5750836001600160a01b031661276184610ac5565b6001600160a01b0316145b806109e157506109e18185611973565b600061278782611441565b9050836001600160a01b0316816001600160a01b0316146127bb57604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b0383166127e2576040516340311a0960e01b815260040160405180910390fd5b6127ed848484612c2c565b6001600160a01b03841660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020613c798339815191529061283e9084612c14565b506001600160a01b038416600090815260028201602052604090206128639084612c20565b5061286f818486612c37565b50600083815260038201602052604080822080546001600160a01b0319169055518491906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a482846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60006106ad8383612c4d565b60008080806129268686612c99565b909450925050505b9250929050565b60006106ad8383612cfc565b61294c84848461277c565b61295884848484612d60565b61090e57604051639ff10cdd60e01b815260040160405180910390fd5b60608160000361299c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156129c657806129b0816137cd565b91506129bf9050600a83613b73565b91506129a0565b60008167ffffffffffffffff8111156129e1576129e1613415565b6040519080825280601f01601f191660200182016040528015612a0b576020820181803683370190505b5090505b84156109e157612a20600183613780565b9150612a2d600a86613b87565b612a3890603061376d565b60f81b818381518110612a4d57612a4d6136ea565b60200101906001600160f81b031916908160001a905350612a6f600a86613b73565b9450612a0f565b600081815260018301602052604081205415156106ad565b612a988383612e31565b612aa56000848484612d60565b61069c57604051639ff10cdd60e01b815260040160405180910390fd5b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020908152604080832060ff858116855290835281842080546001600160a01b031685527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a845282852060018201548652909352922054600080516020613cd983398151915292168015612be0578154600180840154604051637921219560e11b81523060048201523360248201526044810191909152606481019190915260a06084820152600060a48201526001600160a01b0390911690819063f242432a9060c401600060405180830381600087803b158015612bc657600080fd5b505af1158015612bda573d6000803e3d6000fd5b50505050505b505060009283526002016020908152604080842060ff9093168452919052812080546001600160a01b031916815560010155565b60006106ad8383612f26565b60006106ad8383612fe0565b61069c838383613023565b60006109e184846001600160a01b03851661302e565b81546000908210612c715760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110612c8657612c866136ea565b9060005260206000200154905092915050565b815460009081908310612cbf5760405163022fd82760e31b815260040160405180910390fd5b6000846000018481548110612cd657612cd66136ea565b906000526020600020906002020190508060000154816001015492509250509250929050565b6000818152600183016020526040812054808203612d2d57604051633d547ec560e21b815260040160405180910390fd5b836000016001820381548110612d4557612d456136ea565b90600052602060002090600202016001015491505092915050565b60006001600160a01b0384163b612d79575060016109e1565b6000612dfa63150b7a0260e01b33888787604051602401612d9d9493929190613b9b565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613c27603291396001600160a01b03881691906130cd565b9050600081806020019051810190612e129190613bd7565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b6001600160a01b038216612e58576040516311f2988d60e11b815260040160405180910390fd5b612e6181611a33565b15612e7f57604051630d86bb7b60e31b815260040160405180910390fd5b612e8b60008383612c2c565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020600080516020613c7983398151915290612edc9083612c20565b50612ee8818385612c37565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b600081815260018301602052604081205480156108fb57835460009085906000198101908110612f5857612f586136ea565b9060005260206000200154905080856000016001840381548110612f7e57612f7e6136ea565b6000918252602080832090910192909255918252600186019052604090208190558354849080612fb057612fb0613bf4565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b60008181526001830160205260408120546105ae575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b61069c8383836130dc565b60008281526001840160205260408120548082036130955750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556106ad565b828560000160018303815481106130ae576130ae6136ea565b90600052602060002090600202016001018190555060009150506106ad565b60606109e18484600085613120565b6001600160a01b03821661069c5760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812061069c916131e6565b6060843b61314157604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b0316858760405161315d9190613c0a565b60006040518083038185875af1925050503d806000811461319a576040519150601f19603f3d011682016040523d82523d6000602084013e61319f565b606091505b509150915081156131b35791506109e19050565b8051156131c35780518082602001fd5b8360405162461bcd60e51b81526004016131dd91906132b7565b60405180910390fd5b5080546131f290613793565b6000825580601f10613202575050565b601f0160209004906000526020600020908101906106fb91905b80821115613230576000815560010161321c565b5090565b6001600160e01b0319811681146106fb57600080fd5b60006020828403121561325c57600080fd5b81356106ad81613234565b60005b8381101561328257818101518382015260200161326a565b50506000910152565b600081518084526132a3816020860160208601613267565b601f01601f19169290920160200192915050565b6020815260006106ad602083018461328b565b6000602082840312156132dc57600080fd5b5035919050565b6001600160a01b03811681146106fb57600080fd5b6000806040838503121561330b57600080fd5b8235613316816132e3565b946020939093013593505050565b6000806020838503121561333757600080fd5b823567ffffffffffffffff8082111561334f57600080fd5b818501915085601f83011261336357600080fd5b81358181111561337257600080fd5b8660208260061b850101111561338757600080fd5b60209290920196919550909350505050565b600080600080600060a086880312156133b157600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000806000606084860312156133e957600080fd5b83356133f4816132e3565b92506020840135613404816132e3565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561344657613446613415565b604051601f8501601f19908116603f0116810190828211818310171561346e5761346e613415565b8160405280935085815286868601111561348757600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156134b357600080fd5b813567ffffffffffffffff8111156134ca57600080fd5b8201601f810184136134db57600080fd5b6109e18482356020840161342b565b803580151581146134fa57600080fd5b919050565b60006020828403121561351157600080fd5b6106ad826134ea565b60006020828403121561352c57600080fd5b81356106ad816132e3565b6000806040838503121561354a57600080fd5b8235613555816132e3565b9150613563602084016134ea565b90509250929050565b6000806020838503121561357f57600080fd5b823567ffffffffffffffff8082111561359757600080fd5b818501915085601f8301126135ab57600080fd5b8135818111156135ba57600080fd5b8660208260051b850101111561338757600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561362457603f1988860301845261361285835161328b565b945092850192908501906001016135f6565b5092979650505050505050565b6000806000806080858703121561364757600080fd5b8435613652816132e3565b93506020850135613662816132e3565b925060408501359150606085013567ffffffffffffffff81111561368557600080fd5b8501601f8101871361369657600080fd5b6136a58782356020840161342b565b91505092959194509250565b600080604083850312156136c457600080fd5b82356136cf816132e3565b915060208301356136df816132e3565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261371757600080fd5b83018035915067ffffffffffffffff82111561373257600080fd5b60200191503681900382131561292e57600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105ae576105ae613757565b818103818111156105ae576105ae613757565b600181811c908216806137a757607f821691505b6020821081036137c757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600182016137df576137df613757565b5060010190565b6000602082840312156137f857600080fd5b81516106ad816132e3565b600060ff821660ff810361381957613819613757565b60010192915050565b6020808252825182820181905260009190848201906040850190845b8181101561385d57835160ff168352928401929184019160010161383e565b50909695505050505050565b60408152600080845461387b81613793565b806040860152606060018084166000811461389d57600181146138b7576138e8565b60ff1985168884015283151560051b8801830195506138e8565b8960005260208060002060005b868110156138df5781548b82018701529084019082016138c4565b8a018501975050505b505050505082810360208401526138ff818561328b565b95945050505050565b601f82111561069c57600081815260208120601f850160051c8101602086101561392f5750805b601f850160051c820191505b8181101561130b5782815560010161393b565b815167ffffffffffffffff81111561396857613968613415565b61397c816139768454613793565b84613908565b602080601f8311600181146139b157600084156139995750858301515b600019600386901b1c1916600185901b17855561130b565b600085815260208120601f198616915b828110156139e0578886015182559484019460019091019084016139c1565b50858210156139fe5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008351613a20818460208801613267565b835190830190613a34818360208801613267565b01949350505050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215613a6557600080fd5b5051919050565b6060810160028510613a8e57634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b600081613ab157613ab1613757565b506000190190565b8135613ac4816132e3565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b60ff81811683821601908111156105ae576105ae613757565b60008551613b1e818460208a01613267565b60f89590951b6001600160f81b0319169190940190815260609290921b6bffffffffffffffffffffffff19166001830152601582015260350192915050565b634e487b7160e01b600052601260045260246000fd5b600082613b8257613b82613b5d565b500490565b600082613b9657613b96613b5d565b500690565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613bcd608083018461328b565b9695505050505050565b600060208284031215613be957600080fd5b81516106ad81613234565b634e487b7160e01b600052603160045260246000fd5b60008251613c1c818460208701613267565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572f38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35883c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a687a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746399574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1f672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220412e895a92c67faba1f028e319a6f602dfe458197856b93560feb77792175a5864736f6c63430008130033",
  "devdoc": {
    "details": "ReentrancyGuard and Multicall contracts are used for security and gas efficiency.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "address to be approved",
          "tokenId": "token to approve"
        }
      },
      "availableMints(address)": {
        "params": {
          "account": "account to query"
        },
        "returns": {
          "balance": "amount of arcadians that can be minted"
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "quantity of tokens held"
        }
      },
      "baseURI()": {
        "details": "This function returns the base URI",
        "returns": {
          "_0": "The base URI"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "address approved to spend token"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "maxMintPerUser()": {
        "details": "This function gets the current maximum number of arcadians that a user can mint",
        "returns": {
          "_0": "The current maximum number of arcadians that a user can mint"
        }
      },
      "maxSupply()": {
        "details": "This function returns the maximum supply of arcadians",
        "returns": {
          "_0": "The current maximum supply of arcadians"
        }
      },
      "mintAndEquip((address,uint256)[])": {
        "params": {
          "itemsToEquip": "array of items to equip in the correspondent slot"
        }
      },
      "mintPrice()": {
        "returns": {
          "_0": "The current mint price"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "array of function call data payloads"
        },
        "returns": {
          "results": "array of function call results"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token owner"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "data payload",
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address to be approved",
          "status": "approval status"
        }
      },
      "setBaseURI(string)": {
        "params": {
          "newBaseURI": "The new base URI for all token metadata"
        }
      },
      "setMaxMintPerUser(uint256)": {
        "params": {
          "newMaxMintPerUser": "The new maximum number of arcadians that a user can mint"
        }
      },
      "setMaxSupplies(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "maxArcadiansSupply": "The max supply of arcadians that can be minted",
          "maxGuaranteedWLSupply": "The max supply of arcadians that can be minted though the whitelist guaranteed pool",
          "maxMintPassSupply": "The max supply of arcadians that can be minted though mint passes",
          "maxPublicMintSupply": "The max supply of arcadians that can be minted though open mint",
          "maxRestrictedWLSupply": "The max supply of arcadians that can be minted though the whitelist restricted pool"
        }
      },
      "setMintPrice(uint256)": {
        "params": {
          "newMintPrice": "The new mint price to be set"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "position in global token list to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "position in owner's token list to query",
          "owner": "token holder to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "ID of the token to query"
        },
        "returns": {
          "_0": "The URI for the given token ID"
        }
      },
      "totalMinted()": {
        "returns": {
          "_0": "uint total amount of arcadians minted"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total supply"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      }
    },
    "title": "ArcadiansFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "grant approval to given account to spend token"
      },
      "availableMints(address)": {
        "notice": "Returns the amount of arcadians that can be minted by an account"
      },
      "balanceOf(address)": {
        "notice": "query the balance of given address"
      },
      "getApproved(uint256)": {
        "notice": "get approval status for given token"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "mintAndEquip((address,uint256)[])": {
        "notice": "Mint a token and equip it with the given items"
      },
      "mintPrice()": {
        "notice": "This function gets the current price to mint an arcadian"
      },
      "multicall(bytes[])": {
        "notice": "batch function calls to the contract and return the results of each"
      },
      "name()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "ownerOf(uint256)": {
        "notice": "query the owner of given token"
      },
      "publicMintOpen()": {
        "notice": "Returns true if the public mint is open, false otherwise"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given account to spend all tokens held by sender"
      },
      "setBaseURI(string)": {
        "notice": "Set the base URI for all Arcadians metadataOnly the manager role can call this function"
      },
      "setMaxMintPerUser(uint256)": {
        "notice": "This function sets the new maximum number of arcadians that a user can mint"
      },
      "setMaxSupplies(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "This function sets the max arcadians supply and all the sub-pools supplies"
      },
      "setMintPrice(uint256)": {
        "notice": "This function updates the price to mint an arcadian"
      },
      "setPublicMintOpen(bool)": {
        "notice": "This function sets the public mint as open/closed"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "symbol()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "tokenByIndex(uint256)": {
        "notice": "get token at given internal storage index"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "get token of given owner at given internal storage index"
      },
      "tokenURI(uint256)": {
        "notice": "Returns the URI for a given arcadian"
      },
      "totalMinted()": {
        "notice": "Returns the total amount of arcadians minted"
      },
      "totalSupply()": {
        "notice": "get total token supply"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, without checking for ERC721Receiver implementation if applicable"
      }
    },
    "notice": "This contract is an ERC721 responsible for minting and claiming Arcadian tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}