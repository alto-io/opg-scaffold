{
  "address": "0x938567dB56a96f923FaDa69207f5b0cAa1791eF8",
  "abi": [
    {
      "inputs": [],
      "name": "AddressUtils__NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Arcadians_InvalidPayAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Arcadians_MaximumArcadiansSupplyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Arcadians_MaximumMintedArcadiansPerUserReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Arcadians_NotElegibleToMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__ERC721ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Metadata__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__NonExistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ArcadianNotUnique",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InputDataMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InsufficientItemBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InvalidERC1155Contract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InvalidSlotId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyAllowedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyDisallowedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyEquippedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemDoesNotHaveSlotAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NonBaseSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NotAllBaseSlotsEquipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NotArcadianOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_SlotNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_TicketNeededToModifyBaseSlots",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingBaseSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingEmptySlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingPermanentSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolidStateERC721__PayableApproveNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolidStateERC721__PayableTransferNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ClaimInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ClaimStateAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ExceedsElegibleAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_InputDataMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldBaseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "BaseURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "ItemsAllowedInSlotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxMintPerUser",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "MaxMintPerUserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMintPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "MintPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "permanent",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum InventoryStorage.SlotCategory",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "SlotCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum WhitelistStorage.PoolId",
          "name": "poolId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalElegibleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimedAmount",
          "type": "uint256"
        }
      ],
      "name": "WhitelistBalanceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closePublicMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "itemsToEquip",
          "type": "tuple[]"
        }
      ],
      "name": "mintAndEquip",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openPublicMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintPerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xefc7f5b74e1fcc9089595cfddc13f4c8cf2ec94636650f15f062b87aca8d5975",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0x938567dB56a96f923FaDa69207f5b0cAa1791eF8",
    "transactionIndex": 0,
    "gasUsed": "3155254",
    "logsBloom": "0x
    "blockHash": "0x8538c79de0ad8e14b02c1a235bb9147d51b1f93db48ca7badf6e04fdbb8eb8e3",
    "transactionHash": "0xefc7f5b74e1fcc9089595cfddc13f4c8cf2ec94636650f15f062b87aca8d5975",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 34910638,
        "transactionHash": "0xefc7f5b74e1fcc9089595cfddc13f4c8cf2ec94636650f15f062b87aca8d5975",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001c06378c5b52d5c000000000000000000000000000000000000000000000000284686e4d1f20ae8000000000000000000000000000000000000000000001e6239c0afe3ebe361f20000000000000000000000000000000000000000000000002686236c0c3cdd8c000000000000000000000000000000000000000000001e623b81135cb1988f4e",
        "logIndex": 0,
        "blockHash": "0x8538c79de0ad8e14b02c1a235bb9147d51b1f93db48ca7badf6e04fdbb8eb8e3"
      }
    ],
    "blockNumber": 34910638,
    "cumulativeGasUsed": "3155254",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "3ade1aa40c2e331fece1c2f98aafc02c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Arcadians_InvalidPayAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Arcadians_MaximumArcadiansSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Arcadians_MaximumMintedArcadiansPerUserReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Arcadians_NotElegibleToMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__ERC721ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Metadata__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__NonExistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ArcadianNotUnique\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InputDataMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InsufficientItemBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InvalidERC1155Contract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InvalidSlotId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyAllowedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyDisallowedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyEquippedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemDoesNotHaveSlotAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NonBaseSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NotAllBaseSlotsEquipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NotArcadianOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_SlotNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_TicketNeededToModifyBaseSlots\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingBaseSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingEmptySlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingPermanentSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolidStateERC721__PayableApproveNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolidStateERC721__PayableTransferNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ClaimInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ClaimStateAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ExceedsElegibleAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_InputDataMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldBaseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"ItemsAllowedInSlotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxMintPerUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"MaxMintPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"MintPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"SlotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum WhitelistStorage.PoolId\",\"name\":\"poolId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalElegibleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"}],\"name\":\"WhitelistBalanceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"itemsToEquip\",\"type\":\"tuple[]\"}],\"name\":\"mintAndEquip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"setMaxMintPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ReentrancyGuard and Multicall contracts are used for security and gas efficiency.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"address to be approved\",\"tokenId\":\"token to approve\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"quantity of tokens held\"}},\"baseURI()\":{\"details\":\"This function returns the base URI\",\"returns\":{\"_0\":\"The base URI\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"address approved to spend token\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"maxMintPerUser()\":{\"details\":\"This function gets the current maximum number of arcadians that a user can mint\",\"returns\":{\"_0\":\"The current maximum number of arcadians that a user can mint\"}},\"maxSupply()\":{\"details\":\"This function returns the maximum supply of arcadians\",\"returns\":{\"_0\":\"The current maximum supply of arcadians\"}},\"mintAndEquip((address,uint256)[])\":{\"params\":{\"itemsToEquip\":\"array of items to equip in the correspondent slot\"}},\"mintPrice()\":{\"returns\":{\"_0\":\"The current mint price\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"array of function call data payloads\"},\"returns\":{\"results\":\"array of function call results\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token owner\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"data payload\",\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address to be approved\",\"status\":\"approval status\"}},\"setBaseURI(string)\":{\"params\":{\"newBaseURI\":\"The new base URI for all token metadata\"}},\"setMaxMintPerUser(uint256)\":{\"params\":{\"newMaxMintPerUser\":\"The new maximum number of arcadians that a user can mint\"}},\"setMintPrice(uint256)\":{\"params\":{\"newMintPrice\":\"The new mint price to be set\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"position in global token list to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"position in owner's token list to query\",\"owner\":\"token holder to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"ID of the token to query\"},\"returns\":{\"_0\":\"The URI for the given token ID\"}},\"totalMinted()\":{\"returns\":{\"_0\":\"uint total amount of arcadians minted\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total supply\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}}},\"title\":\"ArcadiansFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"grant approval to given account to spend token\"},\"balanceOf(address)\":{\"notice\":\"query the balance of given address\"},\"closePublicMint()\":{\"notice\":\"This function closes the public mint\"},\"getApproved(uint256)\":{\"notice\":\"get approval status for given token\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"mintAndEquip((address,uint256)[])\":{\"notice\":\"Mint a token and equip it with the given items\"},\"mintPrice()\":{\"notice\":\"This function gets the current price to mint an arcadian\"},\"multicall(bytes[])\":{\"notice\":\"batch function calls to the contract and return the results of each\"},\"name()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"openPublicMint()\":{\"notice\":\"This function opens the public mint\"},\"ownerOf(uint256)\":{\"notice\":\"query the owner of given token\"},\"publicMintOpen()\":{\"notice\":\"Returns true if the public mint is open, false otherwise\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given account to spend all tokens held by sender\"},\"setBaseURI(string)\":{\"notice\":\"Set the base URI for all Arcadians metadataOnly the manager role can call this function\"},\"setMaxMintPerUser(uint256)\":{\"notice\":\"This function sets the new maximum number of arcadians that a user can mint\"},\"setMintPrice(uint256)\":{\"notice\":\"This function updates the price to mint an arcadian\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"symbol()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"tokenByIndex(uint256)\":{\"notice\":\"get token at given internal storage index\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"get token of given owner at given internal storage index\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the URI for a given arcadian\"},\"totalMinted()\":{\"notice\":\"Returns the total amount of arcadians minted\"},\"totalSupply()\":{\"notice\":\"get total token supply\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\"}},\"notice\":\"This contract is an ERC721 responsible for minting and claiming Arcadian tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/arcadians/ArcadiansFacet.sol\":\"ArcadiansFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Map implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableMap {\\n    error EnumerableMap__IndexOutOfBounds();\\n    error EnumerableMap__NonExistentKey();\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        MapEntry[] _entries;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct AddressToAddressMap {\\n        Map _inner;\\n    }\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    function at(\\n        AddressToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (address, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n\\n        return (\\n            address(uint160(uint256(key))),\\n            address(uint160(uint256(value)))\\n        );\\n    }\\n\\n    function at(\\n        UintToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    function contains(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function contains(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    function length(\\n        AddressToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function length(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function get(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (address) {\\n        return\\n            address(\\n                uint160(\\n                    uint256(_get(map._inner, bytes32(uint256(uint160(key)))))\\n                )\\n            );\\n    }\\n\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    function set(\\n        AddressToAddressMap storage map,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return\\n            _set(\\n                map._inner,\\n                bytes32(uint256(uint160(key))),\\n                bytes32(uint256(uint160(value)))\\n            );\\n    }\\n\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function remove(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    function toArray(\\n        AddressToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (address[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function toArray(\\n        UintToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (uint256[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n            }\\n        }\\n    }\\n\\n    function values(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function values(\\n        UintToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function _at(\\n        Map storage map,\\n        uint256 index\\n    ) private view returns (bytes32, bytes32) {\\n        if (index >= map._entries.length)\\n            revert EnumerableMap__IndexOutOfBounds();\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    function _contains(\\n        Map storage map,\\n        bytes32 key\\n    ) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) revert EnumerableMap__NonExistentKey();\\n        unchecked {\\n            return map._entries[keyIndex - 1]._value;\\n        }\\n    }\\n\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            unchecked {\\n                map._entries[keyIndex - 1]._value = value;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            unchecked {\\n                MapEntry storage last = map._entries[map._entries.length - 1];\\n\\n                // move last entry to now-vacant index\\n                map._entries[keyIndex - 1] = last;\\n                map._indexes[last._key] = keyIndex;\\n            }\\n\\n            // clear last index\\n            map._entries.pop();\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1140a8669a93db82ea70d7f53e112049d42a813fe7188f50aa2f7ec5e529d38a\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x38ca94617ab4a4cdc08d9fed753f1b17d91a9823b36f7f485cd1ed5e5324aa8f\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/ISolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Base } from './base/IERC721Base.sol';\\nimport { IERC721Enumerable } from './enumerable/IERC721Enumerable.sol';\\nimport { IERC721Metadata } from './metadata/IERC721Metadata.sol';\\n\\ninterface ISolidStateERC721 is IERC721Base, IERC721Enumerable, IERC721Metadata {\\n    error SolidStateERC721__PayableApproveNotSupported();\\n    error SolidStateERC721__PayableTransferNotSupported();\\n}\\n\",\"keccak256\":\"0x4fc3b4d30c0f7124751439c3289e060cd0a566fad2beca51e9f05737bd8cf825\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC165Base } from '../../introspection/ERC165/base/ERC165Base.sol';\\nimport { ERC721Base, ERC721BaseInternal } from './base/ERC721Base.sol';\\nimport { ERC721Enumerable } from './enumerable/ERC721Enumerable.sol';\\nimport { ERC721Metadata } from './metadata/ERC721Metadata.sol';\\nimport { ISolidStateERC721 } from './ISolidStateERC721.sol';\\n\\n/**\\n * @title SolidState ERC721 implementation, including recommended extensions\\n */\\nabstract contract SolidStateERC721 is\\n    ISolidStateERC721,\\n    ERC721Base,\\n    ERC721Enumerable,\\n    ERC721Metadata,\\n    ERC165Base\\n{\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external approve function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableApproveNotSupported();\\n        super._handleApproveMessageValue(operator, tokenId, value);\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external transfer function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableTransferNotSupported();\\n        super._handleTransferMessageValue(from, to, tokenId, value);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721BaseInternal, ERC721Metadata) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x397706dffa317a4d7da18896ae98562ac14a50361a06bedc7e2d4c68f83abf3f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721Base } from './IERC721Base.sol';\\nimport { ERC721BaseInternal } from './ERC721BaseInternal.sol';\\n\\n/**\\n * @title Base ERC721 implementation, excluding optional extensions\\n */\\nabstract contract ERC721Base is IERC721Base, ERC721BaseInternal {\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address) {\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address) {\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool) {\\n        return _isApprovedForAll(account, operator);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable {\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable {\\n        _safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable {\\n        _safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function approve(address operator, uint256 tokenId) external payable {\\n        _approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function setApprovalForAll(address operator, bool status) external {\\n        _setApprovalForAll(operator, status);\\n    }\\n}\\n\",\"keccak256\":\"0x388e07a6595f57c70508f6cc1f25b00f3c44f343bf6ab44898cd262186304630\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\n\\n/**\\n * @title Base ERC721 internal functions\\n */\\nabstract contract ERC721BaseInternal is IERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function _balanceOf(\\n        address account\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0)) revert ERC721Base__BalanceQueryZeroAddress();\\n        return ERC721BaseStorage.layout().holderTokens[account].length();\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        address owner = ERC721BaseStorage.layout().tokenOwners.get(tokenId);\\n        if (owner == address(0)) revert ERC721Base__InvalidOwner();\\n        return owner;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().tokenOwners.contains(tokenId);\\n    }\\n\\n    function _getApproved(\\n        uint256 tokenId\\n    ) internal view virtual returns (address) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        return ERC721BaseStorage.layout().tokenApprovals[tokenId];\\n    }\\n\\n    function _isApprovedForAll(\\n        address account,\\n        address operator\\n    ) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        return (spender == owner ||\\n            _getApproved(tokenId) == spender ||\\n            _isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        if (to == address(0)) revert ERC721Base__MintToZeroAddress();\\n        if (_exists(tokenId)) revert ERC721Base__TokenAlreadyMinted();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[owner].remove(tokenId);\\n        l.tokenOwners.remove(tokenId);\\n\\n        l.tokenApprovals[tokenId] = address(0);\\n\\n        emit Approval(owner, address(0), tokenId);\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        if (owner != from) revert ERC721Base__NotTokenOwner();\\n        if (to == address(0)) revert ERC721Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[from].remove(tokenId);\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n        l.tokenApprovals[tokenId] = address(0);\\n\\n        emit Approval(owner, address(0), tokenId);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    function _approve(address operator, uint256 tokenId) internal virtual {\\n        _handleApproveMessageValue(operator, tokenId, msg.value);\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        if (operator == owner) revert ERC721Base__SelfApproval();\\n        if (msg.sender != owner && !_isApprovedForAll(owner, msg.sender))\\n            revert ERC721Base__NotOwnerOrApproved();\\n\\n        ERC721BaseStorage.layout().tokenApprovals[tokenId] = operator;\\n        emit Approval(owner, operator, tokenId);\\n    }\\n\\n    function _setApprovalForAll(\\n        address operator,\\n        bool status\\n    ) internal virtual {\\n        if (operator == msg.sender) revert ERC721Base__SelfApproval();\\n        ERC721BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes memory returnData = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n\\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\\n        return returnValue == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called approvals for processing of included message value\\n     * @param operator beneficiary of approval\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called transfers for processing of included message value\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xcc7bc3523871dc4f4e67c88f9c12931fd92d261de914144e749a1b71a3787dae\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC721BaseStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Base');\\n\\n    struct Layout {\\n        EnumerableMap.UintToAddressMap tokenOwners;\\n        mapping(address => EnumerableSet.UintSet) holderTokens;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9570596eca4d18e1c872177aa12125fcaba1dd7db940e5affa44e6ce2231b0a1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721Base is IERC721BaseInternal, IERC721 {\\n\\n}\\n\",\"keccak256\":\"0x5b99ebbddcc97f5a825cb21fb377b04c9ad184c4e4b69b92685334b6d42b7636\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../../../interfaces/IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721BaseInternal is IERC721Internal {\\n    error ERC721Base__NotOwnerOrApproved();\\n    error ERC721Base__SelfApproval();\\n    error ERC721Base__BalanceQueryZeroAddress();\\n    error ERC721Base__ERC721ReceiverNotImplemented();\\n    error ERC721Base__InvalidOwner();\\n    error ERC721Base__MintToZeroAddress();\\n    error ERC721Base__NonExistentToken();\\n    error ERC721Base__NotTokenOwner();\\n    error ERC721Base__TokenAlreadyMinted();\\n    error ERC721Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0x3118e4b75bc32c0c5b1f7aca49d30bf618966260179d848171b2ce3e3e0b5373\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { IERC721Enumerable } from './IERC721Enumerable.sol';\\nimport { ERC721EnumerableInternal } from './ERC721EnumerableInternal.sol';\\n\\nabstract contract ERC721Enumerable is\\n    IERC721Enumerable,\\n    ERC721EnumerableInternal\\n{\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view returns (uint256) {\\n        return _tokenOfOwnerByIndex(owner, index);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        return _tokenByIndex(index);\\n    }\\n}\\n\",\"keccak256\":\"0x762db931dbe79f32fa48ba2f66b23b096e9c43e89c09310a98c10ab18b6e73b6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\n\\nabstract contract ERC721EnumerableInternal {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _totalSupply() internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().tokenOwners.length();\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenByIndex(\\n        uint256 index\\n    ) internal view returns (uint256 tokenId) {\\n        (tokenId, ) = ERC721BaseStorage.layout().tokenOwners.at(index);\\n    }\\n}\\n\",\"keccak256\":\"0xcb195fe5d264a1756a67b0c9bf8ac5493c12d25f947290196f15a67d7f3e81ad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Enumerable {\\n    /**\\n     * @notice get total token supply\\n     * @return total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice get token of given owner at given internal storage index\\n     * @param owner token holder to query\\n     * @param index position in owner's token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @notice get token at given internal storage index\\n     * @param index position in global token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x4dcc1d41df336f28a2ea6fa2e7ec17e3d1745938146db5385400238a7e7a1bad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\nimport { IERC721Metadata } from './IERC721Metadata.sol';\\n\\n/**\\n * @title ERC721 metadata extensions\\n */\\nabstract contract ERC721Metadata is IERC721Metadata, ERC721MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view virtual returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721MetadataInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc626c723aa50119564d77caa3749a728526ca8a93b385000e3d52208b6bc40c5\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from '../base/ERC721Base.sol';\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\nimport { ERC721MetadataStorage } from './ERC721MetadataStorage.sol';\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal functions\\n */\\nabstract contract ERC721MetadataInternal is\\n    IERC721MetadataInternal,\\n    ERC721BaseInternal\\n{\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function _name() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function _symbol() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function _tokenURI(\\n        uint256 tokenId\\n    ) internal view virtual returns (string memory) {\\n        if (!_exists(tokenId)) revert ERC721Metadata__NonExistentToken();\\n\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: clear per-token URI data on burn\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (to == address(0)) {\\n            delete ERC721MetadataStorage.layout().tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x087a3302cd70010787bcdb1eb2e225eff23ac2e5ab5f77d6dc26289cb8863a19\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721MetadataInternal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x281dd4dbf81c3acf12bf43bc6e0f77ae68cb2764450cce8121a53c061bf87960\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721BaseInternal } from '../base/IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal interface\\n */\\ninterface IERC721MetadataInternal is IERC721BaseInternal {\\n    error ERC721Metadata__NonExistentToken();\\n}\\n\",\"keccak256\":\"0xd420b4227db773f26b0e40cb6ea4819d340d0ee5ea59d6321c27e79ae7ecca86\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 minValue = bytes32(type(uint256).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(address[] memory array) internal pure returns (address) {\\n        address minValue = address(type(uint160).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 minValue = type(uint256).max;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 maxValue = bytes32(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(address[] memory array) internal pure returns (address) {\\n        address maxValue = address(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 maxValue = 0;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86a2953855b8df5a5ded23a79016f1584b6321ef2c04f44466ebfbb6d23e728c\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Interface for the Multicall utility contract\\n */\\ninterface IMulticall {\\n    /**\\n     * @notice batch function calls to the contract and return the results of each\\n     * @param data array of function call data payloads\\n     * @return results array of function call results\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x39e630bc189607ae119c1208a632009fe418cc4eb2687b28e7fdbe78af7b79b0\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IMulticall } from './IMulticall.sol';\\n\\n/**\\n * @title Utility contract for supporting processing of multiple function calls in a single transaction\\n */\\nabstract contract Multicall is IMulticall {\\n    /**\\n     * @inheritdoc IMulticall\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        unchecked {\\n            for (uint256 i; i < data.length; i++) {\\n                (bool success, bytes memory returndata) = address(this)\\n                    .delegatecall(data[i]);\\n\\n                if (success) {\\n                    results[i] = returndata;\\n                } else {\\n                    assembly {\\n                        returndatacopy(0, 0, returndatasize())\\n                        revert(0, returndatasize())\\n                    }\\n                }\\n            }\\n        }\\n\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x762f15ac4c28be19d0d7fb303ade8dea6ba52ff558fb6fba36df84a839e216b3\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ERC721BaseInternal } from \\\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\\\";\\nimport { ERC721Metadata } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\\\";\\nimport { ISolidStateERC721 } from \\\"@solidstate/contracts/token/ERC721/ISolidStateERC721.sol\\\";\\nimport { SolidStateERC721 } from \\\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\\\";\\nimport { ERC721Base } from \\\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\\\";\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IERC721Metadata } from \\\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\\\";\\nimport { ArcadiansInternal } from \\\"./ArcadiansInternal.sol\\\";\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { EnumerableMap } from '@solidstate/contracts/data/EnumerableMap.sol';\\nimport { Multicall } from \\\"@solidstate/contracts/utils/Multicall.sol\\\";\\nimport { InventoryStorage } from \\\"../inventory/InventoryStorage.sol\\\";\\nimport { WhitelistStorage } from \\\"../whitelist/WhitelistStorage.sol\\\";\\n\\n/**\\n * @title ArcadiansFacet\\n * @notice This contract is an ERC721 responsible for minting and claiming Arcadian tokens.\\n * @dev ReentrancyGuard and Multicall contracts are used for security and gas efficiency.\\n */\\ncontract ArcadiansFacet is SolidStateERC721, ArcadiansInternal, Multicall {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    /**\\n     * @notice Returns the URI for a given arcadian\\n     * @param tokenId ID of the token to query\\n     * @return The URI for the given token ID\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view override (ERC721Metadata, IERC721Metadata) returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    function _mint() internal returns (uint tokenId) {\\n        tokenId = nextArcadianId();\\n\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        if (_isWhitelistClaimActive(WhitelistStorage.PoolId.Guaranteed) && _elegibleWhitelist(WhitelistStorage.PoolId.Guaranteed, msg.sender) > 0) {\\n            // OG mint flow\\n            _consumeWhitelist(WhitelistStorage.PoolId.Guaranteed, msg.sender, 1);\\n        } else if (_isWhitelistClaimActive(WhitelistStorage.PoolId.Restricted) && _elegibleWhitelist(WhitelistStorage.PoolId.Restricted, msg.sender) > 0) { \\n            // Whitelist mint flow\\n            _consumeWhitelist(WhitelistStorage.PoolId.Restricted, msg.sender, 1);\\n            if (tokenId > MAX_SUPPLY)\\n                revert Arcadians_MaximumArcadiansSupplyReached();\\n\\n            uint nonGuaranteedMintedAmount = _balanceOf(msg.sender) - _claimedWhitelist(WhitelistStorage.PoolId.Guaranteed, msg.sender);\\n            if (nonGuaranteedMintedAmount >= arcadiansSL.maxMintPerUser) \\n                revert Arcadians_MaximumMintedArcadiansPerUserReached();\\n\\n        } else if (arcadiansSL.isPublicMintOpen) {\\n            if (tokenId > MAX_SUPPLY)\\n                revert Arcadians_MaximumArcadiansSupplyReached();\\n\\n            uint nonGuaranteedMintedAmount = _balanceOf(msg.sender) - _claimedWhitelist(WhitelistStorage.PoolId.Guaranteed, msg.sender);\\n            if (nonGuaranteedMintedAmount >= arcadiansSL.maxMintPerUser) \\n                revert Arcadians_MaximumMintedArcadiansPerUserReached();\\n            \\n            if (msg.value != arcadiansSL.mintPrice)\\n                revert Arcadians_InvalidPayAmount();\\n        } else {\\n            revert Arcadians_NotElegibleToMint();\\n        }\\n\\n        _safeMint(msg.sender, tokenId);\\n    }\\n\\n    /**\\n     * @notice Returns the total amount of arcadians minted\\n     * @return uint total amount of arcadians minted\\n     */\\n    function totalMinted() external view returns (uint) {\\n        return _totalSupply();\\n    }\\n\\n   /**\\n     * @notice Mint a token and equip it with the given items\\n     * @param itemsToEquip array of items to equip in the correspondent slot\\n     */\\n    function mintAndEquip(\\n        InventoryStorage.Item[] calldata itemsToEquip\\n    )\\n        external payable nonReentrant\\n    {\\n        uint tokenId = _mint();\\n        _equip(tokenId, itemsToEquip, true);\\n    }\\n\\n    /**\\n     * @notice This function opens the public mint\\n     */\\n    function openPublicMint() external onlyManager {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        arcadiansSL.isPublicMintOpen = true;\\n    }\\n\\n    /**\\n     * @notice This function closes the public mint\\n     */\\n    function closePublicMint() external onlyManager {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        arcadiansSL.isPublicMintOpen = false;\\n    }\\n\\n    /**\\n     * @notice Returns true if the public mint is open, false otherwise\\n     */\\n    function publicMintOpen() external view returns (bool) {\\n        return ArcadiansStorage.layout().isPublicMintOpen;\\n    }\\n\\n    /**\\n     * @notice This function updates the price to mint an arcadian\\n     * @param newMintPrice The new mint price to be set\\n     */\\n    function setMintPrice(uint newMintPrice) external onlyManager {\\n        _setMintPrice(newMintPrice);\\n    }\\n\\n    /**\\n     * @notice This function gets the current price to mint an arcadian\\n     * @return The current mint price\\n     */\\n    function mintPrice() external view returns (uint) {\\n        return _mintPrice();\\n    }\\n\\n    /**\\n     * @notice This function sets the new maximum number of arcadians that a user can mint\\n     * @param newMaxMintPerUser The new maximum number of arcadians that a user can mint\\n     */\\n    function setMaxMintPerUser(uint newMaxMintPerUser) external onlyManager {\\n        _setMaxMintPerUser(newMaxMintPerUser);\\n    }\\n\\n    /**\\n     * @dev This function gets the current maximum number of arcadians that a user can mint\\n     * @return The current maximum number of arcadians that a user can mint\\n     */\\n    function maxMintPerUser() external view returns (uint) {\\n        return _maxMintPerUser();\\n    }\\n\\n    /**\\n     * @dev This function returns the maximum supply of arcadians\\n     * @return The current maximum supply of arcadians\\n     */\\n    function maxSupply() external pure returns (uint) {\\n        return MAX_SUPPLY;\\n    }\\n\\n    /**\\n     * @notice Set the base URI for all Arcadians metadata\\n     * @notice Only the manager role can call this function\\n     * @param newBaseURI The new base URI for all token metadata\\n     */\\n    function setBaseURI(string memory newBaseURI) external onlyManager {\\n        _setBaseURI(newBaseURI);\\n    }\\n\\n    /**\\n     * @dev This function returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    function nextArcadianId() internal view returns (uint arcadianId) {\\n        arcadianId = _totalSupply() + 1;\\n    }\\n\\n    // required overrides\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableApproveNotSupported();\\n        super._handleApproveMessageValue(operator, tokenId, value);\\n    }\\n\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableTransferNotSupported();\\n        super._handleTransferMessageValue(from, to, tokenId, value);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\",\"keccak256\":\"0xf85bcc63b01bf25ec55ab712c1ad70aa3c009f48b95af5289aa303a8dae6ed97\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ERC721MetadataStorage } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\\\";\\nimport { UintUtils } from '@solidstate/contracts/utils/UintUtils.sol';\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { WhitelistInternal } from \\\"../whitelist/WhitelistInternal.sol\\\";\\nimport { InventoryInternal } from \\\"../inventory/InventoryInternal.sol\\\";\\n\\ncontract ArcadiansInternal is RolesInternal, WhitelistInternal, InventoryInternal {\\n\\n    error Arcadians_InvalidPayAmount();\\n    error Arcadians_MaximumMintedArcadiansPerUserReached();\\n    error Arcadians_MaximumArcadiansSupplyReached();\\n    error Arcadians_NotElegibleToMint();\\n\\n    event MaxMintPerUserChanged(address indexed by, uint oldMaxMintPerUser, uint newMaxMintPerUser);\\n    event MintPriceChanged(address indexed by, uint oldMintPrice, uint newMintPrice);\\n    event BaseURIChanged(address indexed by, string oldBaseURI, string newBaseURI);\\n\\n    using UintUtils for uint256;\\n\\n    uint constant MAX_SUPPLY = 6666;\\n\\n    function _setBaseURI(string memory newBaseURI) internal {\\n        ERC721MetadataStorage.Layout storage ERC721SL = ERC721MetadataStorage.layout();\\n        emit BaseURIChanged(msg.sender, ERC721SL.baseURI, newBaseURI);\\n        ERC721SL.baseURI = newBaseURI;\\n    }\\n\\n    function _baseURI() internal view returns (string memory) {\\n        return ERC721MetadataStorage.layout().baseURI;\\n    }\\n\\n    function _mintPrice() internal view returns (uint) {\\n        return ArcadiansStorage.layout().mintPrice;\\n    }\\n\\n    function _setMintPrice(uint newMintPrice) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MintPriceChanged(msg.sender, arcadiansSL.mintPrice, newMintPrice);\\n        arcadiansSL.mintPrice = newMintPrice;\\n    }\\n\\n    function _setMaxMintPerUser(uint newMaxMintPerUser) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MaxMintPerUserChanged(msg.sender, arcadiansSL.maxMintPerUser, newMaxMintPerUser);\\n        arcadiansSL.maxMintPerUser = newMaxMintPerUser;\\n    }\\n\\n    function _maxMintPerUser() internal view returns (uint) {\\n        return ArcadiansStorage.layout().maxMintPerUser;\\n    }\\n}\",\"keccak256\":\"0x4abefd147dfa4ddb10273888fe3ef5d3395ccd218e9cfc952dac4ba3525cda7f\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary ArcadiansStorage {\\n\\n    bytes32 constant ARCADIANS_STORAGE_POSITION =\\n        keccak256(\\\"equippable.storage.position\\\");\\n\\n    struct Layout {\\n        uint maxMintPerUser;\\n        uint mintPrice;\\n        bool isPublicMintOpen;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ARCADIANS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xb7c85720d411eedd8ebb2ddeb9378eec5dc55255a3f4da19f96c2b1ca2ed3a93\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { AddressUtils } from \\\"@solidstate/contracts/utils/AddressUtils.sol\\\";\\nimport { ArrayUtils } from \\\"@solidstate/contracts/utils/ArrayUtils.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { IERC1155 } from \\\"@solidstate/contracts/interfaces/IERC1155.sol\\\";\\n\\n\\ncontract InventoryInternal is\\n    ReentrancyGuard,\\n    RolesInternal\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using AddressUtils for address;\\n\\n    error Inventory_InvalidERC1155Contract();\\n    error Inventory_UnequippingPermanentSlot();\\n    error Inventory_InvalidSlotId();\\n    error Inventory_ItemDoesNotHaveSlotAssigned();\\n    error Inventory_InsufficientItemBalance();\\n    error Inventory_UnequippingEmptySlot();\\n    error Inventory_UnequippingBaseSlot();\\n    error Inventory_SlotNotSpecified();\\n    error Inventory_ItemNotSpecified();\\n    error Inventory_NotArcadianOwner();\\n    error Inventory_ArcadianNotUnique();\\n    error Inventory_NotAllBaseSlotsEquipped();\\n    error Inventory_InputDataMismatch();\\n    error Inventory_ItemAlreadyEquippedInSlot();\\n    error Inventory_ItemAlreadyAllowedInSlot();\\n    error Inventory_ItemAlreadyDisallowedInSlot();\\n    error Inventory_TicketNeededToModifyBaseSlots();\\n    error Inventory_NonBaseSlot();\\n\\n    event ItemsAllowedInSlotUpdated(\\n        address indexed by,\\n        uint slotId\\n    );\\n\\n    event ItemsEquipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event ItemsUnequipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event SlotCreated(\\n        address indexed by,\\n        uint slotId,\\n        bool permanent,\\n        InventoryStorage.SlotCategory category\\n    );\\n\\n    // Helper struct only used in view functions\\n    struct ItemInSlot {\\n        uint slotId;\\n        address erc721Contract;\\n        uint itemId;\\n    }\\n\\n    modifier onlyValidSlot(uint slotId) {\\n        if (slotId == 0 || slotId > InventoryStorage.layout().numSlots) revert Inventory_InvalidSlotId();\\n        _;\\n    }\\n\\n    modifier onlyArcadianOwner(uint arcadianId) {\\n        IERC721 arcadiansContract = IERC721(address(this));\\n        if (msg.sender != arcadiansContract.ownerOf(arcadianId)) revert Inventory_NotArcadianOwner();\\n        _;\\n    }\\n\\n    function _numSlots() internal view returns (uint) {\\n        return InventoryStorage.layout().numSlots;\\n    }\\n\\n    function _equip(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items,\\n        bool freeBaseModifier\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        if (items.length == 0) \\n            revert Inventory_ItemNotSpecified();\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        bool containsBaseSlots;\\n        uint[] memory slotsIds = new uint[](items.length);\\n        for (uint i = 0; i < items.length; i++) {\\n            uint slotId = _equipSingleSlot(arcadianId, items[i], freeBaseModifier);\\n            containsBaseSlots = containsBaseSlots || inventorySL.slots[slotId].category == InventoryStorage.SlotCategory.Base;\\n            slotsIds[i] = slotId;\\n        }\\n\\n        if (!_baseSlotsEquipped(arcadianId)) \\n            revert Inventory_NotAllBaseSlotsEquipped();\\n\\n        if (containsBaseSlots && !_hashBaseItemsUnchecked(arcadianId)) \\n            revert Inventory_ArcadianNotUnique();\\n\\n        emit ItemsEquipped(msg.sender, arcadianId, slotsIds);\\n    }\\n\\n    function _equipSingleSlot(\\n        uint arcadianId,\\n        InventoryStorage.Item calldata item,\\n        bool freeBaseModifier\\n    ) internal returns (uint slotId) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        slotId = inventorySL.itemSlot[item.erc721Contract][item.id];\\n        \\n        if (slotId == 0 || slotId > InventoryStorage.layout().numSlots) \\n            revert Inventory_ItemDoesNotHaveSlotAssigned();\\n        \\n        if (!freeBaseModifier && inventorySL.slots[slotId].category == InventoryStorage.SlotCategory.Base) {\\n            if (inventorySL.baseModifierTicket[msg.sender][slotId] < 1)\\n                revert Inventory_TicketNeededToModifyBaseSlots();\\n\\n            inventorySL.baseModifierTicket[msg.sender][slotId]--;\\n        }\\n\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n        if (inventorySL.slots[slotId].permanent && existingItem.erc721Contract != address(0)) \\n            revert Inventory_UnequippingPermanentSlot();\\n        if (existingItem.erc721Contract == item.erc721Contract && existingItem.id == item.id)\\n            revert Inventory_ItemAlreadyEquippedInSlot();\\n\\n        if (inventorySL.equippedItems[arcadianId][slotId].erc721Contract != address(0))\\n            _unequipUnchecked(arcadianId, slotId);\\n\\n        IERC1155 erc1155Contract = IERC1155(item.erc721Contract);\\n        if (erc1155Contract.balanceOf(msg.sender, item.id) < 1)\\n            revert Inventory_InsufficientItemBalance();\\n\\n        erc1155Contract.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            item.id,\\n            1,\\n            ''\\n        );\\n\\n        inventorySL.equippedItems[arcadianId][slotId] = item;\\n    }\\n\\n    function _baseSlotsEquipped(uint arcadianId) internal view returns (bool) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n        for (uint i = 0; i < baseSlots.length(); i++) {\\n            if (inventorySL.equippedItems[arcadianId][baseSlots.at(i)].erc721Contract == address(0)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _unequipUnchecked(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n\\n        IERC1155 erc1155Contract = IERC1155(existingItem.erc721Contract);\\n        erc1155Contract.safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            existingItem.id,\\n            1,\\n            ''\\n        );\\n        delete inventorySL.equippedItems[arcadianId][slotId];\\n    }\\n\\n    function _unequipSingleSlot(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        if (inventorySL.slots[slotId].permanent) \\n            revert Inventory_UnequippingPermanentSlot();\\n\\n        if (inventorySL.equippedItems[arcadianId][slotId].erc721Contract == address(0)) \\n            revert Inventory_UnequippingEmptySlot();\\n        \\n        if (inventorySL.slots[slotId].category == InventoryStorage.SlotCategory.Base)\\n            revert Inventory_UnequippingBaseSlot();\\n\\n        _unequipUnchecked(arcadianId, slotId);\\n    }\\n\\n    function _unequip(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        if (slotIds.length == 0) \\n            revert Inventory_SlotNotSpecified();\\n\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            _unequipSingleSlot(arcadianId, slotIds[i]);\\n        }\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slotIds\\n        );\\n    }\\n\\n    function _equipped(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal view returns (ItemInSlot memory) {\\n        InventoryStorage.Item storage item = InventoryStorage.layout().equippedItems[arcadianId][slotId];\\n        return ItemInSlot(slotId, item.erc721Contract, item.id);\\n    }\\n\\n    function _equippedBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) internal view returns (ItemInSlot[] memory equippedSlots) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        equippedSlots = new ItemInSlot[](slotIds.length);\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotIds[i]];\\n            equippedSlots[i] = ItemInSlot(slotIds[i], equippedItem.erc721Contract, equippedItem.id);\\n        }\\n    }\\n\\n    function _equippedAll(\\n        uint arcadianId\\n    ) internal view returns (ItemInSlot[] memory equippedSlots) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        equippedSlots = new ItemInSlot[](numSlots);\\n        for (uint i = 0; i < numSlots; i++) {\\n            uint slot = i + 1;\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slot];\\n            equippedSlots[i] = ItemInSlot(slot, equippedItem.erc721Contract, equippedItem.id);\\n        }\\n    }\\n\\n    function _isArcadianUnique(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal view returns (bool) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n\\n        uint baseSlotsLength = baseSlots.length();\\n        bytes memory encodedItems;\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            InventoryStorage.Item memory item;\\n            for (uint j = 0; j < items.length; j++) {\\n                if (_allowedSlot(items[j]) == slotId) {\\n                    item = items[j];\\n                    break;\\n                }\\n            }\\n            if (item.erc721Contract == address(0)) {\\n                if (inventorySL.equippedItems[arcadianId][slotId].erc721Contract != address(0)) {\\n                    item = inventorySL.equippedItems[arcadianId][slotId];\\n                } else {\\n                    revert Inventory_NotAllBaseSlotsEquipped();\\n                }\\n            }\\n            \\n            encodedItems = abi.encodePacked(encodedItems, slotId, item.erc721Contract, item.id);\\n        }\\n\\n        return !inventorySL.baseItemsHashes.contains(keccak256(encodedItems));\\n    }\\n\\n    function _hashBaseItemsUnchecked(\\n        uint arcadianId\\n    ) internal returns (bool isUnique) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n        bytes memory encodedItems;\\n        uint baseSlotsLength = baseSlots.length();\\n\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotId];\\n            encodedItems = abi.encodePacked(encodedItems, slotId, equippedItem.erc721Contract, equippedItem.id);\\n        }\\n\\n        bytes32 baseItemsHash = keccak256(encodedItems);\\n        isUnique = !inventorySL.baseItemsHashes.contains(baseItemsHash) || baseSlotsLength == 0;\\n        inventorySL.baseItemsHashes.remove(inventorySL.arcadianToBaseItemHash[arcadianId]);\\n        inventorySL.baseItemsHashes.add(baseItemsHash);\\n        inventorySL.arcadianToBaseItemHash[arcadianId] = baseItemsHash;\\n    }\\n\\n    function _createSlot(\\n        bool permanent,\\n        InventoryStorage.SlotCategory category,\\n        InventoryStorage.Item[] calldata allowedItems\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        // slots are 1-index\\n        inventorySL.numSlots += 1;\\n        uint newSlot = inventorySL.numSlots;\\n        inventorySL.slots[newSlot].permanent = permanent;\\n        inventorySL.slots[newSlot].category = category;\\n        inventorySL.slots[newSlot].id = newSlot;\\n\\n        if (allowedItems.length > 0) {\\n            _allowItemsInSlot(newSlot, allowedItems);\\n        }\\n\\n        emit SlotCreated(msg.sender, newSlot, permanent, category);\\n    }\\n\\n    function _addBaseModifierTickets(\\n        address account,\\n        uint[] calldata slotIds,\\n        uint[] calldata amounts\\n    ) internal {\\n        if (slotIds.length != amounts.length)\\n            revert Inventory_InputDataMismatch();\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            if (slotIds[i] == 0 && slotIds[i] > numSlots) \\n                revert Inventory_InvalidSlotId();\\n            if (inventorySL.slots[slotIds[i]].category != InventoryStorage.SlotCategory.Base) {\\n                revert Inventory_NonBaseSlot();\\n            }\\n            InventoryStorage.layout().baseModifierTicket[account][slotIds[i]] += amounts[i];\\n        }\\n    }\\n\\n    function _getBaseModifierTickets(address account, uint slotId) internal view onlyValidSlot(slotId) returns (uint) {\\n        if (InventoryStorage.layout().slots[slotId].category != InventoryStorage.SlotCategory.Base) {\\n            revert Inventory_NonBaseSlot();\\n        }\\n        return InventoryStorage.layout().baseModifierTicket[account][slotId];\\n    }\\n\\n    function _allowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < items.length; i++) {\\n            if (!items[i].erc721Contract.isContract()) \\n                revert Inventory_InvalidERC1155Contract();\\n\\n            if (inventorySL.itemSlot[items[i].erc721Contract][items[i].id] > 0) {\\n\\n                if (inventorySL.itemSlot[items[i].erc721Contract][items[i].id] == slotId) \\n                    revert Inventory_ItemAlreadyAllowedInSlot();\\n\\n                _disallowItemInSlotUnchecked(slotId, items[i]);\\n            }\\n            inventorySL.allowedItems[slotId].push(items[i]);\\n            inventorySL.itemSlot[items[i].erc721Contract][items[i].id] = slotId;\\n        }\\n\\n        inventorySL.categoryToSlots[inventorySL.slots[slotId].category].add(slotId);\\n\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < items.length; i++) {\\n            \\n            if (inventorySL.itemSlot[items[i].erc721Contract][items[i].id] != slotId) \\n                revert Inventory_ItemAlreadyDisallowedInSlot();\\n                \\n            _disallowItemInSlotUnchecked(slotId, items[i]);\\n        }\\n\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemInSlotUnchecked(\\n        uint slotId,\\n        InventoryStorage.Item calldata item\\n    ) internal virtual {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        uint numAllowedSlots = inventorySL.allowedItems[slotId].length;\\n        for (uint i = 0; i < numAllowedSlots; i++) {\\n            if (inventorySL.allowedItems[slotId][i].id == item.id) {\\n                inventorySL.allowedItems[slotId][i] = inventorySL.allowedItems[slotId][numAllowedSlots-1];\\n                inventorySL.allowedItems[slotId].pop();\\n                break;\\n            }\\n        }\\n        \\n        delete inventorySL.itemSlot[item.erc721Contract][item.id];\\n    }\\n\\n    function _allowedSlot(InventoryStorage.Item calldata item) internal view returns (uint) {\\n        return InventoryStorage.layout().itemSlot[item.erc721Contract][item.id];\\n    }\\n\\n    function _allowedItem(uint slotId, uint index) internal view onlyValidSlot(slotId) returns (InventoryStorage.Item memory) {\\n        return InventoryStorage.layout().allowedItems[slotId][index];\\n    }\\n\\n    function _numAllowedItems(uint slotId) internal view onlyValidSlot(slotId) returns (uint) {\\n        return InventoryStorage.layout().allowedItems[slotId].length;\\n    }\\n\\n    function _slot(uint slotId) internal view returns (InventoryStorage.Slot storage slot) {\\n        return InventoryStorage.layout().slots[slotId];\\n    }\\n\\n    function _slotsAll() internal view returns (InventoryStorage.Slot[] memory slotsAll) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        uint numSlots = inventorySL.numSlots;\\n        slotsAll = new InventoryStorage.Slot[](numSlots);\\n\\n        for (uint i = 0; i < numSlots; i++) {\\n            uint slotId = i + 1;\\n            slotsAll[i] = inventorySL.slots[slotId];\\n        }\\n    }\\n}\",\"keccak256\":\"0x72e3251021ce1fd0bfe70f08873bb90e4382c9ce7c9275af912166a1737e9ef4\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\n\\n/**\\nLibInventory defines the storage structure used by the Inventory contract as a facet for an EIP-2535 Diamond\\nproxy.\\n */\\nlibrary InventoryStorage {\\n    bytes32 constant INVENTORY_STORAGE_POSITION =\\n        keccak256(\\\"inventory.storage.position\\\");\\n\\n    uint constant ERC721_ITEM_TYPE = 721;\\n    uint constant ERC1155_ITEM_TYPE = 1155;\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum SlotCategory { Base, Equippment, Cosmetic }\\n\\n    // Holds the information needed to identify an ERC1155 item\\n    struct Item {\\n        address erc721Contract;\\n        uint id;\\n    }\\n\\n    // Holds the general information about a slot\\n    struct Slot {\\n        uint id;\\n        bool permanent;\\n        SlotCategory category;\\n    }\\n\\n    struct Layout {\\n        uint numSlots;\\n\\n        // Slot id => Slot\\n        mapping(uint => Slot) slots;\\n        // Slot category => List of slots\\n        mapping(SlotCategory => EnumerableSet.UintSet) categoryToSlots;\\n\\n        // arcadian id => slot id => Items equipped\\n        mapping(uint => mapping(uint => Item)) equippedItems;\\n\\n        // item address => item id => allowed slot id\\n        mapping(address => mapping(uint => uint)) itemSlot;\\n        // slot id => items\\n        mapping(uint => InventoryStorage.Item[]) allowedItems;\\n\\n        // List of all the existent hashes\\n        EnumerableSet.Bytes32Set baseItemsHashes;\\n        // arcadian id => base items hash\\n        mapping(uint => bytes32) arcadianToBaseItemHash;\\n\\n        // account => slotId => number of tickets to modify the base traits\\n        mapping(address => mapping(uint => uint)) baseModifierTicket;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage istore)\\n    {\\n        bytes32 position = INVENTORY_STORAGE_POSITION;\\n        assembly {\\n            istore.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x725d9b30eec741758f702ca1a166f6037f793b7e8b3f551719907c058ad40c9b\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(_defaultAdminRole());\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        _checkRole(_managerRole());\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        _checkRole(_minterRole());\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _minterRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().minterRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.minterRole = keccak256(\\\"minter.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n        _grantRole(_minterRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0xd3fa8bcc9380c117c2e22aeb6b4489ad01c31433b3c2d412742b681c94cf407d\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 minterRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x203cfbe268a1ac5fe32593c66ace04b576dfb2e25173e02654e504cf0de44d71\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { WhitelistStorage } from \\\"./WhitelistStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract WhitelistInternal is RolesInternal {\\n\\n    error Whitelist_ExceedsElegibleAmount();\\n    error Whitelist_InputDataMismatch();\\n    error Whitelist_ClaimStateAlreadyUpdated();\\n    error Whitelist_ClaimInactive();\\n\\n    event WhitelistBalanceChanged(address account, WhitelistStorage.PoolId poolId, uint totalElegibleAmount, uint totalClaimedAmount);\\n\\n    function _totalClaimedWhitelist(WhitelistStorage.PoolId poolId) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].totalClaimed;\\n    }\\n\\n    function _totalElegibleWhitelist(WhitelistStorage.PoolId poolId) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].totalElegible;\\n    }\\n\\n    function _claimedWhitelist(WhitelistStorage.PoolId poolId, address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].claimed[account];\\n    }\\n\\n    function _elegibleWhitelist(WhitelistStorage.PoolId poolId, address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].elegible[account];\\n    }\\n\\n    function _consumeWhitelist(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n\\n        if (!whitelistSL.pools[poolId].claimActive)\\n            revert Whitelist_ClaimInactive();\\n\\n        if (whitelistSL.pools[poolId].elegible[account] < amount) \\n            revert Whitelist_ExceedsElegibleAmount();\\n\\n        whitelistSL.pools[poolId].elegible[account] -= amount;\\n        whitelistSL.pools[poolId].claimed[account] += amount;\\n        whitelistSL.pools[poolId].totalClaimed += amount;\\n        whitelistSL.pools[poolId].totalElegible -= amount;\\n\\n        emit WhitelistBalanceChanged(account, poolId, whitelistSL.pools[poolId].elegible[account], whitelistSL.pools[poolId].claimed[account]);\\n    }\\n\\n    function _increaseWhitelistElegible(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        whitelistSL.pools[poolId].elegible[account] += amount;\\n        whitelistSL.pools[poolId].totalElegible += amount;\\n        \\n        emit WhitelistBalanceChanged(account, poolId, whitelistSL.pools[poolId].elegible[account], whitelistSL.pools[poolId].claimed[account]);\\n    }\\n\\n    function _increaseWhitelistElegibleBatch(WhitelistStorage.PoolId poolId, address[] calldata accounts, uint[] calldata amounts) internal {\\n        if (accounts.length != amounts.length) revert Whitelist_InputDataMismatch();\\n\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n\\n        for (uint i = 0; i < accounts.length; i++) {\\n            whitelistSL.pools[poolId].elegible[accounts[i]] += amounts[i];\\n            whitelistSL.pools[poolId].totalElegible += amounts[i];\\n            emit WhitelistBalanceChanged(accounts[i], poolId, whitelistSL.pools[poolId].elegible[accounts[i]], whitelistSL.pools[poolId].claimed[accounts[i]]);\\n        }\\n    }\\n\\n    function _setWhitelistElegible(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        whitelistSL.pools[poolId].totalElegible += amount - whitelistSL.pools[poolId].elegible[account];\\n        whitelistSL.pools[poolId].elegible[account] += amount;\\n        emit WhitelistBalanceChanged(account, poolId, whitelistSL.pools[poolId].elegible[account], whitelistSL.pools[poolId].claimed[account]);\\n    }\\n\\n    function _setWhitelistElegibleBatch(WhitelistStorage.PoolId poolId, address[] calldata accounts, uint[] calldata amounts) internal {\\n        if (accounts.length != amounts.length) revert Whitelist_InputDataMismatch();\\n\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n\\n        for (uint i = 0; i < accounts.length; i++) {\\n            whitelistSL.pools[poolId].totalElegible += amounts[i] - whitelistSL.pools[poolId].elegible[accounts[i]];\\n            whitelistSL.pools[poolId].elegible[accounts[i]] = amounts[i];\\n            emit WhitelistBalanceChanged(accounts[i], poolId, whitelistSL.pools[poolId].elegible[accounts[i]], whitelistSL.pools[poolId].claimed[accounts[i]]);\\n        }\\n    }\\n\\n    function _isWhitelistClaimActive(WhitelistStorage.PoolId poolId) view internal returns (bool) {\\n        return WhitelistStorage.layout().pools[poolId].claimActive;\\n    }\\n\\n    function _setWhitelistClaimActive(WhitelistStorage.PoolId poolId, bool active) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n\\n        if (active == whitelistSL.pools[poolId].claimActive) \\n            revert Whitelist_ClaimStateAlreadyUpdated();\\n        \\n        whitelistSL.pools[poolId].claimActive = active;\\n    }\\n}\",\"keccak256\":\"0xb56478a4ec527e0a4889e607e4cbc164e07f3af880460d06dd18ee99faf7b3b0\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary WhitelistStorage {\\n\\n    bytes32 constant WHITELIST_STORAGE_POSITION =\\n        keccak256(\\\"whitelist.storage.position\\\");\\n\\n    enum PoolId { Guaranteed, Restricted }\\n    \\n    struct Pool {\\n        mapping(address => uint) claimed;\\n        mapping(address => uint) elegible;\\n        uint totalClaimed;\\n        uint totalElegible;\\n        bool claimActive;\\n    }\\n\\n    struct Layout {\\n        // pool id => tokens pool\\n        mapping(PoolId => Pool) pools;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = WHITELIST_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x003eafc31e1cd5edd01710403650827b1aa9c49c6c8be2948e74f754b7bbcfeb\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061381f806100206000396000f3fe6080604052600436106101c25760003560e01c80636817c76c116100f7578063ac9650d811610095578063d304c4bc11610064578063d304c4bc146104a7578063d5abeb01146104bc578063e985e9c5146104d1578063f4a0a528146104f157600080fd5b8063ac9650d814610410578063b88d4fde1461043d578063bcc9ca5b14610450578063c87b56dd1461048757600080fd5b806383ccaef7116100d157806383ccaef7146103bb57806395d89b41146103db578063a22cb465146103f0578063a2309ff81461027e57600080fd5b80636817c76c146103715780636c0360eb1461038657806370a082311461039b57600080fd5b80632f745c59116101645780634f6ccce71161013e5780634f6ccce7146102fc578063557d694c1461031c57806355f804b3146103315780636352211e1461035157600080fd5b80632f745c59146102b457806342842e0e146102d457806345f7e06e146102e757600080fd5b8063095ea7b3116101a0578063095ea7b3146102565780630a0678991461026b57806318160ddd1461027e57806323b872dd146102a157600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063081812fc1461021e575b600080fd5b3480156101d357600080fd5b506101e76101e2366004612d8c565b610511565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b50610211610554565b6040516101f39190612df9565b34801561022a57600080fd5b5061023e610239366004612e0c565b610563565b6040516001600160a01b0390911681526020016101f3565b610269610264366004612e3a565b61056e565b005b610269610279366004612e66565b61057c565b34801561028a57600080fd5b506102936105e5565b6040519081526020016101f3565b6102696102af366004612edb565b6105ef565b3480156102c057600080fd5b506102936102cf366004612e3a565b6105ff565b6102696102e2366004612edb565b610612565b3480156102f357600080fd5b5061026961061d565b34801561030857600080fd5b50610293610317366004612e0c565b61065b565b34801561032857600080fd5b50610269610666565b34801561033d57600080fd5b5061026961034c366004612fa8565b61069c565b34801561035d57600080fd5b5061023e61036c366004612e0c565b6106b3565b34801561037d57600080fd5b506102936106be565b34801561039257600080fd5b506102116106e8565b3480156103a757600080fd5b506102936103b6366004612ff1565b6106f2565b3480156103c757600080fd5b506102696103d6366004612e0c565b6106fd565b3480156103e757600080fd5b50610211610711565b3480156103fc57600080fd5b5061026961040b36600461300e565b61071b565b34801561041c57600080fd5b5061043061042b36600461304c565b610725565b6040516101f391906130af565b61026961044b366004613111565b610840565b34801561045c57600080fd5b507f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74655460ff166101e7565b34801561049357600080fd5b506102116104a2366004612e0c565b610852565b3480156104b357600080fd5b5061029361085d565b3480156104c857600080fd5b50611a0a610293565b3480156104dd57600080fd5b506101e76104ec366004613191565b610867565b3480156104fd57600080fd5b5061026961050c366004612e0c565b610873565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b606061055e610887565b905090565b600061054e82610926565b6105788282610989565b5050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036105bf57604051635db5c7cd60e11b815260040160405180910390fd5b6002815560006105cd610a8c565b90506105dc8185856001610c4e565b50600190555050565b600061055e610e99565b6105fa838383610eb2565b505050565b600061060b8383610ef0565b9392505050565b6105fa838383610f31565b61062d610628610f4c565b610f76565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7465805460ff19166001179055565b600061054e82610f80565b610671610628610f4c565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7465805460ff19169055565b6106a7610628610f4c565b6106b081610f9a565b50565b600061054e82611014565b600061055e7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645490565b606061055e611058565b600061054e82611077565b610708610628610f4c565b6106b0816110e0565b606061055e611141565b6105788282611160565b60608167ffffffffffffffff81111561074057610740612f1c565b60405190808252806020026020018201604052801561077357816020015b606081526020019060019003908161075e5790505b50905060005b828110156108395760008030868685818110610797576107976131bf565b90506020028101906107a991906131d5565b6040516107b792919061321c565b600060405180830381855af49150503d80600081146107f2576040519150601f19603f3d011682016040523d82523d6000602084013e6107f7565b606091505b509150915081156108255780848481518110610815576108156131bf565b602002602001018190525061082f565b3d6000803e3d6000fd5b5050600101610779565b5092915050565b61084c84848484611214565b50505050565b606061054e82611253565b600061055e611434565b600061060b838361145c565b61087e610628610f4c565b6106b0816114a9565b60606000805160206137aa83398151915280546108a39061322c565b80601f01602080910402602001604051908101604052809291908181526020018280546108cf9061322c565b801561091c5780601f106108f15761010080835404028352916020019161091c565b820191906000526020600020905b8154815290600101906020018083116108ff57829003601f168201915b5050505050905090565b60006109318261152e565b61094e5760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b610994828234611548565b600061099f82611014565b9050806001600160a01b0316836001600160a01b0316036109d35760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b038216148015906109f357506109f1813361145c565b155b15610a1157604051632f5de44f60e01b815260040160405180910390fd5b60008281527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a9602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000610a96611572565b90507f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7463610ac36000611587565b8015610ad957506000610ad76000336115ec565b115b15610af057610aeb6000336001611671565b610c40565b610afa6001611587565b8015610b1057506000610b0e6001336115ec565b115b15610b8f57610b226001336001611671565b611a0a821115610b45576040516320df598b60e21b815260040160405180910390fd5b6000610b526000336119db565b610b5b33611077565b610b65919061327c565b82549091508110610b895760405163768674b960e01b815260040160405180910390fd5b50610c40565b600281015460ff1615610c2757611a0a821115610bbf576040516320df598b60e21b815260040160405180910390fd5b6000610bcc6000336119db565b610bd533611077565b610bdf919061327c565b82549091508110610c035760405163768674b960e01b815260040160405180910390fd5b81600101543414610b895760405163104bb3ad60e11b815260040160405180910390fd5b604051630e64914f60e31b815260040160405180910390fd5b610c4a3383611a52565b5090565b6040516331a9108f60e11b815260048101859052849030908190636352211e90602401602060405180830381865afa158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb2919061328f565b6001600160a01b0316336001600160a01b031614610ce35760405163aee05b5d60e01b815260040160405180910390fd5b6000849003610d055760405163627652c960e11b815260040160405180910390fd5b6000805160206137ca8339815191526000808667ffffffffffffffff811115610d3057610d30612f1c565b604051908082528060200260200182016040528015610d59578160200160208202803683370190505b50905060005b87811015610df5576000610d8b8b8b8b85818110610d7f57610d7f6131bf565b9050604002018a611a6c565b90508380610dc2575060008181526001868101602052604082200154610100900460ff166002811115610dc057610dc06132ac565b145b935080838381518110610dd757610dd76131bf565b60209081029190910101525080610ded816132c2565b915050610d5f565b50610dff89611dee565b610e1c5760405163a9614f1560e01b815260040160405180910390fd5b818015610e2f5750610e2d89611ebb565b155b15610e4c5760405162ecf30560e51b815260040160405180910390fd5b88336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f1886183604051610e8691906132db565b60405180910390a3505050505050505050565b600061055e60008051602061378a83398151915261200b565b610ebe83838334612015565b610ec83382612040565b610ee557604051632f5de44f60e01b815260040160405180910390fd5b6105fa8383836120c6565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040812061060b9083612255565b6105fa83838360405180602001604052806000815250611214565b60007ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725b54919050565b6106b08133612261565b600061083960008051602061378a833981519152836122cc565b6040516000805160206137aa8339815191529033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea90610ffe907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b390869061331f565b60405180910390a2600281016105fa838261340c565b60008061102f60008051602061378a833981519152846122ea565b90506001600160a01b03811661054e57604051637e1a7d8b60e01b815260040160405180910390fd5b60606000805160206137aa83398151915260020180546108a39061322c565b60006001600160a01b0382166110a057604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902061054e9061200b565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746380546040805191825260208201849052805133927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92908290030190a255565b60606000805160206137aa83398151915260010180546108a39061322c565b336001600160a01b038316036111895760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61122084848434612015565b61122a3383612040565b61124757604051632f5de44f60e01b815260040160405180910390fd5b61084c848484846122f6565b606061125e8261152e565b61127a57604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812080546000805160206137aa8339815191529291906112c49061322c565b80601f01602080910402602001604051908101604052809291908181526020018280546112f09061322c565b801561133d5780601f106113125761010080835404028352916020019161133d565b820191906000526020600020905b81548152906001019060200180831161132057829003601f168201915b5050505050905060008260020180546113559061322c565b80601f01602080910402602001604051908101604052809291908181526020018280546113819061322c565b80156113ce5780601f106113a3576101008083540402835291602001916113ce565b820191906000526020600020905b8154815290600101906020018083116113b157829003601f168201915b5050505050905080516000036113e657509392505050565b8151156114195780826040516020016114009291906134cc565b6040516020818303038152906040529350505050919050565b806114238661232a565b6040516020016114009291906134cc565b60007f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7463610f70565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746454604080519182526020820183905280517f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74639233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260010155565b600061054e60008051602061378a8339815191528361242b565b80156115675760405163b56d7c1b60e01b815260040160405180910390fd5b6105fa838383612443565b600061157c610e99565b61055e9060016134fb565b60007ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb358860008360018111156115be576115be6132ac565b60018111156115cf576115cf6132ac565b815260208101919091526040016000206004015460ff1692915050565b60007ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35886000846001811115611623576116236132ac565b6001811115611634576116346132ac565b81526020019081526020016000206001016000836001600160a01b03166001600160a01b0316815260200190815260200160002054905092915050565b7ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35888060008560018111156116a7576116a76132ac565b60018111156116b8576116b86132ac565b815260208101919091526040016000206004015460ff166116ec57604051633137c0e960e11b815260040160405180910390fd5b81816000866001811115611702576117026132ac565b6001811115611713576117136132ac565b81526020019081526020016000206001016000856001600160a01b03166001600160a01b0316815260200190815260200160002054101561176757604051630f8a2c5f60e31b815260040160405180910390fd5b8181600086600181111561177d5761177d6132ac565b600181111561178e5761178e6132ac565b81526020019081526020016000206001016000856001600160a01b03166001600160a01b0316815260200190815260200160002060008282546117d1919061327c565b909155508290508160008660018111156117ed576117ed6132ac565b60018111156117fe576117fe6132ac565b81526020019081526020016000206000016000856001600160a01b03166001600160a01b03168152602001908152602001600020600082825461184191906134fb565b9091555082905081600086600181111561185d5761185d6132ac565b600181111561186e5761186e6132ac565b8152602001908152602001600020600201600082825461188e91906134fb565b909155508290508160008660018111156118aa576118aa6132ac565b60018111156118bb576118bb6132ac565b815260200190815260200160002060030160008282546118db919061327c565b909155507f6526db8cb857c3bc972db45a7984e99efaed17f7a4e51afb85c64450133cb55c90508385836000826001811115611919576119196132ac565b600181111561192a5761192a6132ac565b81526020019081526020016000206001016000876001600160a01b03166001600160a01b0316815260200190815260200160002054846000016000896001811115611977576119776132ac565b6001811115611988576119886132ac565b81526020019081526020016000206000016000886001600160a01b03166001600160a01b03168152602001908152602001600020546040516119cd949392919061350e565b60405180910390a150505050565b60007ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35886000846001811115611a1257611a126132ac565b6001811115611a2357611a236132ac565b8152602080820192909252604090810160009081206001600160a01b0386168252909252902054905092915050565b610578828260405180602001604052806000815250612462565b60006000805160206137ca8339815191527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a82611aac6020870187612ff1565b6001600160a01b03168152602080820192909252604090810160009081208784013582529092529020549150811580611af357506000805160206137ca8339815191525482115b15611b11576040516363efa0e360e01b815260040160405180910390fd5b82158015611b48575060008281526001828101602052604082200154610100900460ff166002811115611b4657611b466132ac565b145b15611bb957336000908152600982016020908152604080832085845290915290205460011115611b8b5760405163d5bdfa5960e01b815260040160405180910390fd5b33600090815260098201602090815260408083208584529091528120805491611bb383613557565b91905055505b60008581526003820160209081526040808320858452825280832060018086019093529220015460ff168015611bf8575080546001600160a01b031615155b15611c165760405163bd8a5e1560e01b815260040160405180910390fd5b611c236020860186612ff1565b81546001600160a01b039081169116148015611c46575084602001358160010154145b15611c645760405163c80df0cb60e01b815260040160405180910390fd5b600086815260038301602090815260408083208684529091529020546001600160a01b031615611c9857611c988684612496565b6000611ca76020870187612ff1565b604051627eeac760e11b8152336004820152602088013560248201529091506001906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015611cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1d919061356e565b1015611d3c576040516335ba250d60e11b815260040160405180910390fd5b604051637921219560e11b8152336004820152306024820152602087013560448201526001606482015260a06084820152600060a48201526001600160a01b0382169063f242432a9060c401600060405180830381600087803b158015611da257600080fd5b505af1158015611db6573d6000803e3d6000fd5b505050600088815260038501602090815260408083208884529091529020879150611de18282613587565b9050505050509392505050565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020526000805160206137ca8339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9825b611e528261200b565b811015611eb0576000858152600384016020526040812081611e748585612255565b81526020810191909152604001600020546001600160a01b031603611e9e57506000949350505050565b80611ea8816132c2565b915050611e49565b506001949350505050565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020526000805160206137ca8339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9606083611f208361200b565b905060005b81811015611fa1576000611f398583612255565b600089815260038801602090815260408083208484528252918290208054600182015493519495509093611f7b93899387936001600160a01b031692016135c1565b604051602081830303815290604052945050508080611f99906132c2565b915050611f25565b5081516020830120611fb6600686018261242b565b1580611fc0575081155b6000888152600887016020526040902054909650611fe290600687019061257b565b50611ff06006860182612587565b50600096875260089094016020525050604090932055919050565b600061054e825490565b8015612034576040516322b1813960e01b815260040160405180910390fd5b61084c84848484612593565b600061204b8261152e565b6120685760405163c1b843ef60e01b815260040160405180910390fd5b600061207383611014565b9050806001600160a01b0316846001600160a01b031614806120ae5750836001600160a01b03166120a384610926565b6001600160a01b0316145b806120be57506120be818561145c565b949350505050565b60006120d182611014565b9050836001600160a01b0316816001600160a01b03161461210557604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b03831661212c576040516340311a0960e01b815260040160405180910390fd5b6121378484846125b7565b6001600160a01b03841660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902060008051602061378a83398151915290612188908461257b565b506001600160a01b038416600090815260028201602052604090206121ad9084612587565b506121b98184866125c2565b50600083815260038201602052604080822080546001600160a01b0319169055518491906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a482846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b600061060b83836125d8565b61226b8282612624565b61057857612281816001600160a01b031661265b565b61228c83602061266d565b60405160200161229d929190613602565b60408051601f198184030181529082905262461bcd60e51b82526122c391600401612df9565b60405180910390fd5b60008080806122db86866127c0565b909450925050505b9250929050565b600061060b8383612823565b6123018484846120c6565b61230d84848484612887565b61084c57604051639ff10cdd60e01b815260040160405180910390fd5b6060816000036123515750506040805180820190915260018152600360fc1b602082015290565b8160005b811561237b5780612365816132c2565b91506123749050600a8361368d565b9150612355565b60008167ffffffffffffffff81111561239657612396612f1c565b6040519080825280601f01601f1916602001820160405280156123c0576020820181803683370190505b5090505b84156120be576123d560018361327c565b91506123e2600a866136a1565b6123ed9060306134fb565b60f81b818381518110612402576124026131bf565b60200101906001600160f81b031916908160001a905350612424600a8661368d565b94506123c4565b6000818152600183016020526040812054151561060b565b80156105fa5760405163b56d7c1b60e01b815260040160405180910390fd5b61246c8383612958565b6124796000848484612887565b6105fa57604051639ff10cdd60e01b815260040160405180910390fd5b60006000805160206137ca8339815191526000848152600382016020908152604080832086845290915280822080546001808301549351637921219560e11b81523060048201523360248201526044810194909452606484015260a0608484015260a48301939093529293506001600160a01b0390911690819063f242432a9060c401600060405180830381600087803b15801561253357600080fd5b505af1158015612547573d6000803e3d6000fd5b505050600095865250505060030160209081526040808420928452919052812080546001600160a01b031916815560010155565b600061060b8383612a4d565b600061060b8383612b07565b80156125b2576040516322b1813960e01b815260040160405180910390fd5b61084c565b6105fa838383612b4a565b60006120be84846001600160a01b038516612b55565b815460009082106125fc5760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110612611576126116131bf565b9060005260206000200154905092915050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061060b9083612bf4565b606061054e6001600160a01b03831660145b6060600061267c8360026136b5565b6126879060026134fb565b67ffffffffffffffff81111561269f5761269f612f1c565b6040519080825280601f01601f1916602001820160405280156126c9576020820181803683370190505b509050600360fc1b816000815181106126e4576126e46131bf565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612713576127136131bf565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156127a0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612763576127636131bf565b1a60f81b828281518110612779576127796131bf565b60200101906001600160f81b031916908160001a90535060049490941c9360001901612732565b50831561060b5760405163c913478560e01b815260040160405180910390fd5b8154600090819083106127e65760405163022fd82760e31b815260040160405180910390fd5b60008460000184815481106127fd576127fd6131bf565b906000526020600020906002020190508060000154816001015492509250509250929050565b600081815260018301602052604081205480820361285457604051633d547ec560e21b815260040160405180910390fd5b83600001600182038154811061286c5761286c6131bf565b90600052602060002090600202016001015491505092915050565b60006001600160a01b0384163b6128a0575060016120be565b600061292163150b7a0260e01b338887876040516024016128c494939291906136cc565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613758603291396001600160a01b0388169190612c16565b90506000818060200190518101906129399190613708565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b6001600160a01b03821661297f576040516311f2988d60e11b815260040160405180910390fd5b6129888161152e565b156129a657604051630d86bb7b60e31b815260040160405180910390fd5b6129b2600083836125b7565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902060008051602061378a83398151915290612a039083612587565b50612a0f8183856125c2565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6000818152600183016020526040812054801561083957835460009085906000198101908110612a7f57612a7f6131bf565b9060005260206000200154905080856000016001840381548110612aa557612aa56131bf565b6000918252602080832090910192909255918252600186019052604090208190558354849080612ad757612ad7613725565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b600081815260018301602052604081205461054e575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6105fa838383612c25565b6000828152600184016020526040812054808203612bbc57505060408051808201825283815260208082018481528654600181810189556000898152848120955160029093029095019182559151908201558654868452818801909252929091205561060b565b82856000016001830381548110612bd557612bd56131bf565b906000526020600020906002020160010181905550600091505061060b565b6001600160a01b0381166000908152600183016020526040812054151561060b565b60606120be8484600085612c30565b6105fa838383612ced565b6060843b612c5157604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b03168587604051612c6d919061373b565b60006040518083038185875af1925050503d8060008114612caa576040519150601f19603f3d011682016040523d82523d6000602084013e612caf565b606091505b50915091508115612cc35791506120be9050565b805115612cd35780518082602001fd5b8360405162461bcd60e51b81526004016122c39190612df9565b6001600160a01b0382166105fa5760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040902080546105fa9190612d389061322c565b6000825580601f10612d48575050565b601f0160209004906000526020600020908101906106b091905b80821115610c4a5760008155600101612d62565b6001600160e01b0319811681146106b057600080fd5b600060208284031215612d9e57600080fd5b813561060b81612d76565b60005b83811015612dc4578181015183820152602001612dac565b50506000910152565b60008151808452612de5816020860160208601612da9565b601f01601f19169290920160200192915050565b60208152600061060b6020830184612dcd565b600060208284031215612e1e57600080fd5b5035919050565b6001600160a01b03811681146106b057600080fd5b60008060408385031215612e4d57600080fd5b8235612e5881612e25565b946020939093013593505050565b60008060208385031215612e7957600080fd5b823567ffffffffffffffff80821115612e9157600080fd5b818501915085601f830112612ea557600080fd5b813581811115612eb457600080fd5b8660208260061b8501011115612ec957600080fd5b60209290920196919550909350505050565b600080600060608486031215612ef057600080fd5b8335612efb81612e25565b92506020840135612f0b81612e25565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612f4d57612f4d612f1c565b604051601f8501601f19908116603f01168101908282118183101715612f7557612f75612f1c565b81604052809350858152868686011115612f8e57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215612fba57600080fd5b813567ffffffffffffffff811115612fd157600080fd5b8201601f81018413612fe257600080fd5b6120be84823560208401612f32565b60006020828403121561300357600080fd5b813561060b81612e25565b6000806040838503121561302157600080fd5b823561302c81612e25565b91506020830135801515811461304157600080fd5b809150509250929050565b6000806020838503121561305f57600080fd5b823567ffffffffffffffff8082111561307757600080fd5b818501915085601f83011261308b57600080fd5b81358181111561309a57600080fd5b8660208260051b8501011115612ec957600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561310457603f198886030184526130f2858351612dcd565b945092850192908501906001016130d6565b5092979650505050505050565b6000806000806080858703121561312757600080fd5b843561313281612e25565b9350602085013561314281612e25565b925060408501359150606085013567ffffffffffffffff81111561316557600080fd5b8501601f8101871361317657600080fd5b61318587823560208401612f32565b91505092959194509250565b600080604083850312156131a457600080fd5b82356131af81612e25565b9150602083013561304181612e25565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126131ec57600080fd5b83018035915067ffffffffffffffff82111561320757600080fd5b6020019150368190038213156122e357600080fd5b8183823760009101908152919050565b600181811c9082168061324057607f821691505b60208210810361326057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561054e5761054e613266565b6000602082840312156132a157600080fd5b815161060b81612e25565b634e487b7160e01b600052602160045260246000fd5b6000600182016132d4576132d4613266565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015613313578351835292840192918401916001016132f7565b50909695505050505050565b6040815260008084546133318161322c565b8060408601526060600180841660008114613353576001811461336d5761339e565b60ff1985168884015283151560051b88018301955061339e565b8960005260208060002060005b868110156133955781548b820187015290840190820161337a565b8a018501975050505b505050505082810360208401526133b58185612dcd565b95945050505050565b601f8211156105fa57600081815260208120601f850160051c810160208610156133e55750805b601f850160051c820191505b81811015613404578281556001016133f1565b505050505050565b815167ffffffffffffffff81111561342657613426612f1c565b61343a81613434845461322c565b846133be565b602080601f83116001811461346f57600084156134575750858301515b600019600386901b1c1916600185901b178555613404565b600085815260208120601f198616915b8281101561349e5788860151825594840194600190910190840161347f565b50858210156134bc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600083516134de818460208801612da9565b8351908301906134f2818360208801612da9565b01949350505050565b8082018082111561054e5761054e613266565b6001600160a01b0385168152608081016002851061353c57634e487b7160e01b600052602160045260246000fd5b84602083015283604083015282606083015295945050505050565b60008161356657613566613266565b506000190190565b60006020828403121561358057600080fd5b5051919050565b813561359281612e25565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b600085516135d3818460208a01612da9565b919091019384525060609190911b6bffffffffffffffffffffffff191660208301526034820152605401919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161363a816017850160208801612da9565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161366b816028840160208801612da9565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261369c5761369c613677565b500490565b6000826136b0576136b0613677565b500690565b808202811582820484141761054e5761054e613266565b60006001600160a01b038087168352808616602084015250836040830152608060608301526136fe6080830184612dcd565b9695505050505050565b60006020828403121561371a57600080fd5b815161060b81612d76565b634e487b7160e01b600052603160045260246000fd5b6000825161374d818460208701612da9565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a699574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1f672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220263650a5c42cbf9ced76416f9de57153f0e748b4012f988ee1f9f07ff3404a8764736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80636817c76c116100f7578063ac9650d811610095578063d304c4bc11610064578063d304c4bc146104a7578063d5abeb01146104bc578063e985e9c5146104d1578063f4a0a528146104f157600080fd5b8063ac9650d814610410578063b88d4fde1461043d578063bcc9ca5b14610450578063c87b56dd1461048757600080fd5b806383ccaef7116100d157806383ccaef7146103bb57806395d89b41146103db578063a22cb465146103f0578063a2309ff81461027e57600080fd5b80636817c76c146103715780636c0360eb1461038657806370a082311461039b57600080fd5b80632f745c59116101645780634f6ccce71161013e5780634f6ccce7146102fc578063557d694c1461031c57806355f804b3146103315780636352211e1461035157600080fd5b80632f745c59146102b457806342842e0e146102d457806345f7e06e146102e757600080fd5b8063095ea7b3116101a0578063095ea7b3146102565780630a0678991461026b57806318160ddd1461027e57806323b872dd146102a157600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063081812fc1461021e575b600080fd5b3480156101d357600080fd5b506101e76101e2366004612d8c565b610511565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b50610211610554565b6040516101f39190612df9565b34801561022a57600080fd5b5061023e610239366004612e0c565b610563565b6040516001600160a01b0390911681526020016101f3565b610269610264366004612e3a565b61056e565b005b610269610279366004612e66565b61057c565b34801561028a57600080fd5b506102936105e5565b6040519081526020016101f3565b6102696102af366004612edb565b6105ef565b3480156102c057600080fd5b506102936102cf366004612e3a565b6105ff565b6102696102e2366004612edb565b610612565b3480156102f357600080fd5b5061026961061d565b34801561030857600080fd5b50610293610317366004612e0c565b61065b565b34801561032857600080fd5b50610269610666565b34801561033d57600080fd5b5061026961034c366004612fa8565b61069c565b34801561035d57600080fd5b5061023e61036c366004612e0c565b6106b3565b34801561037d57600080fd5b506102936106be565b34801561039257600080fd5b506102116106e8565b3480156103a757600080fd5b506102936103b6366004612ff1565b6106f2565b3480156103c757600080fd5b506102696103d6366004612e0c565b6106fd565b3480156103e757600080fd5b50610211610711565b3480156103fc57600080fd5b5061026961040b36600461300e565b61071b565b34801561041c57600080fd5b5061043061042b36600461304c565b610725565b6040516101f391906130af565b61026961044b366004613111565b610840565b34801561045c57600080fd5b507f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74655460ff166101e7565b34801561049357600080fd5b506102116104a2366004612e0c565b610852565b3480156104b357600080fd5b5061029361085d565b3480156104c857600080fd5b50611a0a610293565b3480156104dd57600080fd5b506101e76104ec366004613191565b610867565b3480156104fd57600080fd5b5061026961050c366004612e0c565b610873565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b606061055e610887565b905090565b600061054e82610926565b6105788282610989565b5050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036105bf57604051635db5c7cd60e11b815260040160405180910390fd5b6002815560006105cd610a8c565b90506105dc8185856001610c4e565b50600190555050565b600061055e610e99565b6105fa838383610eb2565b505050565b600061060b8383610ef0565b9392505050565b6105fa838383610f31565b61062d610628610f4c565b610f76565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7465805460ff19166001179055565b600061054e82610f80565b610671610628610f4c565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7465805460ff19169055565b6106a7610628610f4c565b6106b081610f9a565b50565b600061054e82611014565b600061055e7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645490565b606061055e611058565b600061054e82611077565b610708610628610f4c565b6106b0816110e0565b606061055e611141565b6105788282611160565b60608167ffffffffffffffff81111561074057610740612f1c565b60405190808252806020026020018201604052801561077357816020015b606081526020019060019003908161075e5790505b50905060005b828110156108395760008030868685818110610797576107976131bf565b90506020028101906107a991906131d5565b6040516107b792919061321c565b600060405180830381855af49150503d80600081146107f2576040519150601f19603f3d011682016040523d82523d6000602084013e6107f7565b606091505b509150915081156108255780848481518110610815576108156131bf565b602002602001018190525061082f565b3d6000803e3d6000fd5b5050600101610779565b5092915050565b61084c84848484611214565b50505050565b606061054e82611253565b600061055e611434565b600061060b838361145c565b61087e610628610f4c565b6106b0816114a9565b60606000805160206137aa83398151915280546108a39061322c565b80601f01602080910402602001604051908101604052809291908181526020018280546108cf9061322c565b801561091c5780601f106108f15761010080835404028352916020019161091c565b820191906000526020600020905b8154815290600101906020018083116108ff57829003601f168201915b5050505050905090565b60006109318261152e565b61094e5760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b610994828234611548565b600061099f82611014565b9050806001600160a01b0316836001600160a01b0316036109d35760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b038216148015906109f357506109f1813361145c565b155b15610a1157604051632f5de44f60e01b815260040160405180910390fd5b60008281527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a9602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000610a96611572565b90507f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7463610ac36000611587565b8015610ad957506000610ad76000336115ec565b115b15610af057610aeb6000336001611671565b610c40565b610afa6001611587565b8015610b1057506000610b0e6001336115ec565b115b15610b8f57610b226001336001611671565b611a0a821115610b45576040516320df598b60e21b815260040160405180910390fd5b6000610b526000336119db565b610b5b33611077565b610b65919061327c565b82549091508110610b895760405163768674b960e01b815260040160405180910390fd5b50610c40565b600281015460ff1615610c2757611a0a821115610bbf576040516320df598b60e21b815260040160405180910390fd5b6000610bcc6000336119db565b610bd533611077565b610bdf919061327c565b82549091508110610c035760405163768674b960e01b815260040160405180910390fd5b81600101543414610b895760405163104bb3ad60e11b815260040160405180910390fd5b604051630e64914f60e31b815260040160405180910390fd5b610c4a3383611a52565b5090565b6040516331a9108f60e11b815260048101859052849030908190636352211e90602401602060405180830381865afa158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb2919061328f565b6001600160a01b0316336001600160a01b031614610ce35760405163aee05b5d60e01b815260040160405180910390fd5b6000849003610d055760405163627652c960e11b815260040160405180910390fd5b6000805160206137ca8339815191526000808667ffffffffffffffff811115610d3057610d30612f1c565b604051908082528060200260200182016040528015610d59578160200160208202803683370190505b50905060005b87811015610df5576000610d8b8b8b8b85818110610d7f57610d7f6131bf565b9050604002018a611a6c565b90508380610dc2575060008181526001868101602052604082200154610100900460ff166002811115610dc057610dc06132ac565b145b935080838381518110610dd757610dd76131bf565b60209081029190910101525080610ded816132c2565b915050610d5f565b50610dff89611dee565b610e1c5760405163a9614f1560e01b815260040160405180910390fd5b818015610e2f5750610e2d89611ebb565b155b15610e4c5760405162ecf30560e51b815260040160405180910390fd5b88336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f1886183604051610e8691906132db565b60405180910390a3505050505050505050565b600061055e60008051602061378a83398151915261200b565b610ebe83838334612015565b610ec83382612040565b610ee557604051632f5de44f60e01b815260040160405180910390fd5b6105fa8383836120c6565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040812061060b9083612255565b6105fa83838360405180602001604052806000815250611214565b60007ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725b54919050565b6106b08133612261565b600061083960008051602061378a833981519152836122cc565b6040516000805160206137aa8339815191529033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea90610ffe907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b390869061331f565b60405180910390a2600281016105fa838261340c565b60008061102f60008051602061378a833981519152846122ea565b90506001600160a01b03811661054e57604051637e1a7d8b60e01b815260040160405180910390fd5b60606000805160206137aa83398151915260020180546108a39061322c565b60006001600160a01b0382166110a057604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902061054e9061200b565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746380546040805191825260208201849052805133927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92908290030190a255565b60606000805160206137aa83398151915260010180546108a39061322c565b336001600160a01b038316036111895760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61122084848434612015565b61122a3383612040565b61124757604051632f5de44f60e01b815260040160405180910390fd5b61084c848484846122f6565b606061125e8261152e565b61127a57604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812080546000805160206137aa8339815191529291906112c49061322c565b80601f01602080910402602001604051908101604052809291908181526020018280546112f09061322c565b801561133d5780601f106113125761010080835404028352916020019161133d565b820191906000526020600020905b81548152906001019060200180831161132057829003601f168201915b5050505050905060008260020180546113559061322c565b80601f01602080910402602001604051908101604052809291908181526020018280546113819061322c565b80156113ce5780601f106113a3576101008083540402835291602001916113ce565b820191906000526020600020905b8154815290600101906020018083116113b157829003601f168201915b5050505050905080516000036113e657509392505050565b8151156114195780826040516020016114009291906134cc565b6040516020818303038152906040529350505050919050565b806114238661232a565b6040516020016114009291906134cc565b60007f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7463610f70565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746454604080519182526020820183905280517f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74639233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260010155565b600061054e60008051602061378a8339815191528361242b565b80156115675760405163b56d7c1b60e01b815260040160405180910390fd5b6105fa838383612443565b600061157c610e99565b61055e9060016134fb565b60007ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb358860008360018111156115be576115be6132ac565b60018111156115cf576115cf6132ac565b815260208101919091526040016000206004015460ff1692915050565b60007ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35886000846001811115611623576116236132ac565b6001811115611634576116346132ac565b81526020019081526020016000206001016000836001600160a01b03166001600160a01b0316815260200190815260200160002054905092915050565b7ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35888060008560018111156116a7576116a76132ac565b60018111156116b8576116b86132ac565b815260208101919091526040016000206004015460ff166116ec57604051633137c0e960e11b815260040160405180910390fd5b81816000866001811115611702576117026132ac565b6001811115611713576117136132ac565b81526020019081526020016000206001016000856001600160a01b03166001600160a01b0316815260200190815260200160002054101561176757604051630f8a2c5f60e31b815260040160405180910390fd5b8181600086600181111561177d5761177d6132ac565b600181111561178e5761178e6132ac565b81526020019081526020016000206001016000856001600160a01b03166001600160a01b0316815260200190815260200160002060008282546117d1919061327c565b909155508290508160008660018111156117ed576117ed6132ac565b60018111156117fe576117fe6132ac565b81526020019081526020016000206000016000856001600160a01b03166001600160a01b03168152602001908152602001600020600082825461184191906134fb565b9091555082905081600086600181111561185d5761185d6132ac565b600181111561186e5761186e6132ac565b8152602001908152602001600020600201600082825461188e91906134fb565b909155508290508160008660018111156118aa576118aa6132ac565b60018111156118bb576118bb6132ac565b815260200190815260200160002060030160008282546118db919061327c565b909155507f6526db8cb857c3bc972db45a7984e99efaed17f7a4e51afb85c64450133cb55c90508385836000826001811115611919576119196132ac565b600181111561192a5761192a6132ac565b81526020019081526020016000206001016000876001600160a01b03166001600160a01b0316815260200190815260200160002054846000016000896001811115611977576119776132ac565b6001811115611988576119886132ac565b81526020019081526020016000206000016000886001600160a01b03166001600160a01b03168152602001908152602001600020546040516119cd949392919061350e565b60405180910390a150505050565b60007ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35886000846001811115611a1257611a126132ac565b6001811115611a2357611a236132ac565b8152602080820192909252604090810160009081206001600160a01b0386168252909252902054905092915050565b610578828260405180602001604052806000815250612462565b60006000805160206137ca8339815191527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a82611aac6020870187612ff1565b6001600160a01b03168152602080820192909252604090810160009081208784013582529092529020549150811580611af357506000805160206137ca8339815191525482115b15611b11576040516363efa0e360e01b815260040160405180910390fd5b82158015611b48575060008281526001828101602052604082200154610100900460ff166002811115611b4657611b466132ac565b145b15611bb957336000908152600982016020908152604080832085845290915290205460011115611b8b5760405163d5bdfa5960e01b815260040160405180910390fd5b33600090815260098201602090815260408083208584529091528120805491611bb383613557565b91905055505b60008581526003820160209081526040808320858452825280832060018086019093529220015460ff168015611bf8575080546001600160a01b031615155b15611c165760405163bd8a5e1560e01b815260040160405180910390fd5b611c236020860186612ff1565b81546001600160a01b039081169116148015611c46575084602001358160010154145b15611c645760405163c80df0cb60e01b815260040160405180910390fd5b600086815260038301602090815260408083208684529091529020546001600160a01b031615611c9857611c988684612496565b6000611ca76020870187612ff1565b604051627eeac760e11b8152336004820152602088013560248201529091506001906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015611cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1d919061356e565b1015611d3c576040516335ba250d60e11b815260040160405180910390fd5b604051637921219560e11b8152336004820152306024820152602087013560448201526001606482015260a06084820152600060a48201526001600160a01b0382169063f242432a9060c401600060405180830381600087803b158015611da257600080fd5b505af1158015611db6573d6000803e3d6000fd5b505050600088815260038501602090815260408083208884529091529020879150611de18282613587565b9050505050509392505050565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020526000805160206137ca8339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9825b611e528261200b565b811015611eb0576000858152600384016020526040812081611e748585612255565b81526020810191909152604001600020546001600160a01b031603611e9e57506000949350505050565b80611ea8816132c2565b915050611e49565b506001949350505050565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020526000805160206137ca8339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9606083611f208361200b565b905060005b81811015611fa1576000611f398583612255565b600089815260038801602090815260408083208484528252918290208054600182015493519495509093611f7b93899387936001600160a01b031692016135c1565b604051602081830303815290604052945050508080611f99906132c2565b915050611f25565b5081516020830120611fb6600686018261242b565b1580611fc0575081155b6000888152600887016020526040902054909650611fe290600687019061257b565b50611ff06006860182612587565b50600096875260089094016020525050604090932055919050565b600061054e825490565b8015612034576040516322b1813960e01b815260040160405180910390fd5b61084c84848484612593565b600061204b8261152e565b6120685760405163c1b843ef60e01b815260040160405180910390fd5b600061207383611014565b9050806001600160a01b0316846001600160a01b031614806120ae5750836001600160a01b03166120a384610926565b6001600160a01b0316145b806120be57506120be818561145c565b949350505050565b60006120d182611014565b9050836001600160a01b0316816001600160a01b03161461210557604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b03831661212c576040516340311a0960e01b815260040160405180910390fd5b6121378484846125b7565b6001600160a01b03841660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902060008051602061378a83398151915290612188908461257b565b506001600160a01b038416600090815260028201602052604090206121ad9084612587565b506121b98184866125c2565b50600083815260038201602052604080822080546001600160a01b0319169055518491906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a482846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b600061060b83836125d8565b61226b8282612624565b61057857612281816001600160a01b031661265b565b61228c83602061266d565b60405160200161229d929190613602565b60408051601f198184030181529082905262461bcd60e51b82526122c391600401612df9565b60405180910390fd5b60008080806122db86866127c0565b909450925050505b9250929050565b600061060b8383612823565b6123018484846120c6565b61230d84848484612887565b61084c57604051639ff10cdd60e01b815260040160405180910390fd5b6060816000036123515750506040805180820190915260018152600360fc1b602082015290565b8160005b811561237b5780612365816132c2565b91506123749050600a8361368d565b9150612355565b60008167ffffffffffffffff81111561239657612396612f1c565b6040519080825280601f01601f1916602001820160405280156123c0576020820181803683370190505b5090505b84156120be576123d560018361327c565b91506123e2600a866136a1565b6123ed9060306134fb565b60f81b818381518110612402576124026131bf565b60200101906001600160f81b031916908160001a905350612424600a8661368d565b94506123c4565b6000818152600183016020526040812054151561060b565b80156105fa5760405163b56d7c1b60e01b815260040160405180910390fd5b61246c8383612958565b6124796000848484612887565b6105fa57604051639ff10cdd60e01b815260040160405180910390fd5b60006000805160206137ca8339815191526000848152600382016020908152604080832086845290915280822080546001808301549351637921219560e11b81523060048201523360248201526044810194909452606484015260a0608484015260a48301939093529293506001600160a01b0390911690819063f242432a9060c401600060405180830381600087803b15801561253357600080fd5b505af1158015612547573d6000803e3d6000fd5b505050600095865250505060030160209081526040808420928452919052812080546001600160a01b031916815560010155565b600061060b8383612a4d565b600061060b8383612b07565b80156125b2576040516322b1813960e01b815260040160405180910390fd5b61084c565b6105fa838383612b4a565b60006120be84846001600160a01b038516612b55565b815460009082106125fc5760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110612611576126116131bf565b9060005260206000200154905092915050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061060b9083612bf4565b606061054e6001600160a01b03831660145b6060600061267c8360026136b5565b6126879060026134fb565b67ffffffffffffffff81111561269f5761269f612f1c565b6040519080825280601f01601f1916602001820160405280156126c9576020820181803683370190505b509050600360fc1b816000815181106126e4576126e46131bf565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612713576127136131bf565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156127a0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612763576127636131bf565b1a60f81b828281518110612779576127796131bf565b60200101906001600160f81b031916908160001a90535060049490941c9360001901612732565b50831561060b5760405163c913478560e01b815260040160405180910390fd5b8154600090819083106127e65760405163022fd82760e31b815260040160405180910390fd5b60008460000184815481106127fd576127fd6131bf565b906000526020600020906002020190508060000154816001015492509250509250929050565b600081815260018301602052604081205480820361285457604051633d547ec560e21b815260040160405180910390fd5b83600001600182038154811061286c5761286c6131bf565b90600052602060002090600202016001015491505092915050565b60006001600160a01b0384163b6128a0575060016120be565b600061292163150b7a0260e01b338887876040516024016128c494939291906136cc565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613758603291396001600160a01b0388169190612c16565b90506000818060200190518101906129399190613708565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b6001600160a01b03821661297f576040516311f2988d60e11b815260040160405180910390fd5b6129888161152e565b156129a657604051630d86bb7b60e31b815260040160405180910390fd5b6129b2600083836125b7565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902060008051602061378a83398151915290612a039083612587565b50612a0f8183856125c2565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6000818152600183016020526040812054801561083957835460009085906000198101908110612a7f57612a7f6131bf565b9060005260206000200154905080856000016001840381548110612aa557612aa56131bf565b6000918252602080832090910192909255918252600186019052604090208190558354849080612ad757612ad7613725565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b600081815260018301602052604081205461054e575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6105fa838383612c25565b6000828152600184016020526040812054808203612bbc57505060408051808201825283815260208082018481528654600181810189556000898152848120955160029093029095019182559151908201558654868452818801909252929091205561060b565b82856000016001830381548110612bd557612bd56131bf565b906000526020600020906002020160010181905550600091505061060b565b6001600160a01b0381166000908152600183016020526040812054151561060b565b60606120be8484600085612c30565b6105fa838383612ced565b6060843b612c5157604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b03168587604051612c6d919061373b565b60006040518083038185875af1925050503d8060008114612caa576040519150601f19603f3d011682016040523d82523d6000602084013e612caf565b606091505b50915091508115612cc35791506120be9050565b805115612cd35780518082602001fd5b8360405162461bcd60e51b81526004016122c39190612df9565b6001600160a01b0382166105fa5760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040902080546105fa9190612d389061322c565b6000825580601f10612d48575050565b601f0160209004906000526020600020908101906106b091905b80821115610c4a5760008155600101612d62565b6001600160e01b0319811681146106b057600080fd5b600060208284031215612d9e57600080fd5b813561060b81612d76565b60005b83811015612dc4578181015183820152602001612dac565b50506000910152565b60008151808452612de5816020860160208601612da9565b601f01601f19169290920160200192915050565b60208152600061060b6020830184612dcd565b600060208284031215612e1e57600080fd5b5035919050565b6001600160a01b03811681146106b057600080fd5b60008060408385031215612e4d57600080fd5b8235612e5881612e25565b946020939093013593505050565b60008060208385031215612e7957600080fd5b823567ffffffffffffffff80821115612e9157600080fd5b818501915085601f830112612ea557600080fd5b813581811115612eb457600080fd5b8660208260061b8501011115612ec957600080fd5b60209290920196919550909350505050565b600080600060608486031215612ef057600080fd5b8335612efb81612e25565b92506020840135612f0b81612e25565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612f4d57612f4d612f1c565b604051601f8501601f19908116603f01168101908282118183101715612f7557612f75612f1c565b81604052809350858152868686011115612f8e57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215612fba57600080fd5b813567ffffffffffffffff811115612fd157600080fd5b8201601f81018413612fe257600080fd5b6120be84823560208401612f32565b60006020828403121561300357600080fd5b813561060b81612e25565b6000806040838503121561302157600080fd5b823561302c81612e25565b91506020830135801515811461304157600080fd5b809150509250929050565b6000806020838503121561305f57600080fd5b823567ffffffffffffffff8082111561307757600080fd5b818501915085601f83011261308b57600080fd5b81358181111561309a57600080fd5b8660208260051b8501011115612ec957600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561310457603f198886030184526130f2858351612dcd565b945092850192908501906001016130d6565b5092979650505050505050565b6000806000806080858703121561312757600080fd5b843561313281612e25565b9350602085013561314281612e25565b925060408501359150606085013567ffffffffffffffff81111561316557600080fd5b8501601f8101871361317657600080fd5b61318587823560208401612f32565b91505092959194509250565b600080604083850312156131a457600080fd5b82356131af81612e25565b9150602083013561304181612e25565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126131ec57600080fd5b83018035915067ffffffffffffffff82111561320757600080fd5b6020019150368190038213156122e357600080fd5b8183823760009101908152919050565b600181811c9082168061324057607f821691505b60208210810361326057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561054e5761054e613266565b6000602082840312156132a157600080fd5b815161060b81612e25565b634e487b7160e01b600052602160045260246000fd5b6000600182016132d4576132d4613266565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015613313578351835292840192918401916001016132f7565b50909695505050505050565b6040815260008084546133318161322c565b8060408601526060600180841660008114613353576001811461336d5761339e565b60ff1985168884015283151560051b88018301955061339e565b8960005260208060002060005b868110156133955781548b820187015290840190820161337a565b8a018501975050505b505050505082810360208401526133b58185612dcd565b95945050505050565b601f8211156105fa57600081815260208120601f850160051c810160208610156133e55750805b601f850160051c820191505b81811015613404578281556001016133f1565b505050505050565b815167ffffffffffffffff81111561342657613426612f1c565b61343a81613434845461322c565b846133be565b602080601f83116001811461346f57600084156134575750858301515b600019600386901b1c1916600185901b178555613404565b600085815260208120601f198616915b8281101561349e5788860151825594840194600190910190840161347f565b50858210156134bc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600083516134de818460208801612da9565b8351908301906134f2818360208801612da9565b01949350505050565b8082018082111561054e5761054e613266565b6001600160a01b0385168152608081016002851061353c57634e487b7160e01b600052602160045260246000fd5b84602083015283604083015282606083015295945050505050565b60008161356657613566613266565b506000190190565b60006020828403121561358057600080fd5b5051919050565b813561359281612e25565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b600085516135d3818460208a01612da9565b919091019384525060609190911b6bffffffffffffffffffffffff191660208301526034820152605401919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161363a816017850160208801612da9565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161366b816028840160208801612da9565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261369c5761369c613677565b500490565b6000826136b0576136b0613677565b500690565b808202811582820484141761054e5761054e613266565b60006001600160a01b038087168352808616602084015250836040830152608060608301526136fe6080830184612dcd565b9695505050505050565b60006020828403121561371a57600080fd5b815161060b81612d76565b634e487b7160e01b600052603160045260246000fd5b6000825161374d818460208701612da9565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a699574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1f672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220263650a5c42cbf9ced76416f9de57153f0e748b4012f988ee1f9f07ff3404a8764736f6c63430008130033",
  "devdoc": {
    "details": "ReentrancyGuard and Multicall contracts are used for security and gas efficiency.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "address to be approved",
          "tokenId": "token to approve"
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "quantity of tokens held"
        }
      },
      "baseURI()": {
        "details": "This function returns the base URI",
        "returns": {
          "_0": "The base URI"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "address approved to spend token"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "maxMintPerUser()": {
        "details": "This function gets the current maximum number of arcadians that a user can mint",
        "returns": {
          "_0": "The current maximum number of arcadians that a user can mint"
        }
      },
      "maxSupply()": {
        "details": "This function returns the maximum supply of arcadians",
        "returns": {
          "_0": "The current maximum supply of arcadians"
        }
      },
      "mintAndEquip((address,uint256)[])": {
        "params": {
          "itemsToEquip": "array of items to equip in the correspondent slot"
        }
      },
      "mintPrice()": {
        "returns": {
          "_0": "The current mint price"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "array of function call data payloads"
        },
        "returns": {
          "results": "array of function call results"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token owner"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "data payload",
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address to be approved",
          "status": "approval status"
        }
      },
      "setBaseURI(string)": {
        "params": {
          "newBaseURI": "The new base URI for all token metadata"
        }
      },
      "setMaxMintPerUser(uint256)": {
        "params": {
          "newMaxMintPerUser": "The new maximum number of arcadians that a user can mint"
        }
      },
      "setMintPrice(uint256)": {
        "params": {
          "newMintPrice": "The new mint price to be set"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "position in global token list to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "position in owner's token list to query",
          "owner": "token holder to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "ID of the token to query"
        },
        "returns": {
          "_0": "The URI for the given token ID"
        }
      },
      "totalMinted()": {
        "returns": {
          "_0": "uint total amount of arcadians minted"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total supply"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      }
    },
    "title": "ArcadiansFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "grant approval to given account to spend token"
      },
      "balanceOf(address)": {
        "notice": "query the balance of given address"
      },
      "closePublicMint()": {
        "notice": "This function closes the public mint"
      },
      "getApproved(uint256)": {
        "notice": "get approval status for given token"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "mintAndEquip((address,uint256)[])": {
        "notice": "Mint a token and equip it with the given items"
      },
      "mintPrice()": {
        "notice": "This function gets the current price to mint an arcadian"
      },
      "multicall(bytes[])": {
        "notice": "batch function calls to the contract and return the results of each"
      },
      "name()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "openPublicMint()": {
        "notice": "This function opens the public mint"
      },
      "ownerOf(uint256)": {
        "notice": "query the owner of given token"
      },
      "publicMintOpen()": {
        "notice": "Returns true if the public mint is open, false otherwise"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given account to spend all tokens held by sender"
      },
      "setBaseURI(string)": {
        "notice": "Set the base URI for all Arcadians metadataOnly the manager role can call this function"
      },
      "setMaxMintPerUser(uint256)": {
        "notice": "This function sets the new maximum number of arcadians that a user can mint"
      },
      "setMintPrice(uint256)": {
        "notice": "This function updates the price to mint an arcadian"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "symbol()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "tokenByIndex(uint256)": {
        "notice": "get token at given internal storage index"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "get token of given owner at given internal storage index"
      },
      "tokenURI(uint256)": {
        "notice": "Returns the URI for a given arcadian"
      },
      "totalMinted()": {
        "notice": "Returns the total amount of arcadians minted"
      },
      "totalSupply()": {
        "notice": "get total token supply"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, without checking for ERC721Receiver implementation if applicable"
      }
    },
    "notice": "This contract is an ERC721 responsible for minting and claiming Arcadian tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}