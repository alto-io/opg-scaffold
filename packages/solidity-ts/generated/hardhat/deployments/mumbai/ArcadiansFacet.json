{
  "address": "0x265c18CA03FB74F134C321736e2CA870C98f6DBF",
  "abi": [
    {
      "inputs": [],
      "name": "AddressUtils__NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__ERC721ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Metadata__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__NonExistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolidStateERC721__PayableApproveNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolidStateERC721__PayableTransferNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ArcadianClaimedMerkle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldArcadiansAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newArcadiansAddress",
          "type": "address"
        }
      ],
      "name": "ArcadiansAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldBaseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "BaseURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldInventoryAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newInventoryAddress",
          "type": "address"
        }
      ],
      "name": "InventoryAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "allowedItems",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsAllowedInSlotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "itemAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct InventoryStorage.EquippedItem[]",
          "name": "equippedItems",
          "type": "tuple[]"
        }
      ],
      "name": "ItemsEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxMintPerUser",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "MaxMintPerUserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMintPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "MintPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "unequippable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "SlotCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalElegibleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimedAmount",
          "type": "uint256"
        }
      ],
      "name": "WhitelistBalanceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMerkle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getClaimedAmountMerkle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxMintPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintPerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe896c18de6dbade1487ad48bef2fbb7e0017d96706dcf63ac237956898d6fef",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0x265c18CA03FB74F134C321736e2CA870C98f6DBF",
    "transactionIndex": 0,
    "gasUsed": "2819211",
    "logsBloom": "0x
    "blockHash": "0xb254993fd50a3b51ebe7bfe0b45e3f9bba7fff50465e7aecc669d5e3b7e0bcd6",
    "transactionHash": "0xbe896c18de6dbade1487ad48bef2fbb7e0017d96706dcf63ac237956898d6fef",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33611215,
        "transactionHash": "0xbe896c18de6dbade1487ad48bef2fbb7e0017d96706dcf63ac237956898d6fef",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000190a24c7562e7500000000000000000000000000000000000000000000000001ccb20c1ed1b82b1000000000000000000000000000000000000000000001cce3502004afa758b390000000000000000000000000000000000000000000000001b3a7e7577b89b61000000000000000000000000000000000000000000001cce3692a2976fd87289",
        "logIndex": 0,
        "blockHash": "0xb254993fd50a3b51ebe7bfe0b45e3f9bba7fff50465e7aecc669d5e3b7e0bcd6"
      }
    ],
    "blockNumber": 33611215,
    "cumulativeGasUsed": "2819211",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "36c22ead28225540fc85e58fc9faf39e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__ERC721ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Metadata__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__NonExistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolidStateERC721__PayableApproveNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolidStateERC721__PayableTransferNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ArcadianClaimedMerkle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldArcadiansAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newArcadiansAddress\",\"type\":\"address\"}],\"name\":\"ArcadiansAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldBaseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldInventoryAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newInventoryAddress\",\"type\":\"address\"}],\"name\":\"InventoryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"allowedItems\",\"type\":\"uint256[]\"}],\"name\":\"ItemsAllowedInSlotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct InventoryStorage.EquippedItem[]\",\"name\":\"equippedItems\",\"type\":\"tuple[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxMintPerUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"MaxMintPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"MintPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unequippable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"SlotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalElegibleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"}],\"name\":\"WhitelistBalanceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimMerkle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimedAmountMerkle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxMintPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"setMaxMintPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"address to be approved\",\"tokenId\":\"token to approve\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"quantity of tokens held\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"address approved to spend token\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"array of function call data payloads\"},\"returns\":{\"results\":\"array of function call results\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token owner\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"data payload\",\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address to be approved\",\"status\":\"approval status\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"position in global token list to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"position in owner's token list to query\",\"owner\":\"token holder to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total supply\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"grant approval to given account to spend token\"},\"balanceOf(address)\":{\"notice\":\"query the balance of given address\"},\"getApproved(uint256)\":{\"notice\":\"get approval status for given token\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"multicall(bytes[])\":{\"notice\":\"batch function calls to the contract and return the results of each\"},\"name()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"ownerOf(uint256)\":{\"notice\":\"query the owner of given token\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given account to spend all tokens held by sender\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"symbol()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"tokenByIndex(uint256)\":{\"notice\":\"get token at given internal storage index\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"get token of given owner at given internal storage index\"},\"totalSupply()\":{\"notice\":\"get total token supply\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/arcadians/ArcadiansFacet.sol\":\"ArcadiansFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Merkle tree verification utility\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @notice verify whether given leaf is contained within Merkle tree defined by given root\\n     * @param proof proof that Merkle tree contains given leaf\\n     * @param root Merkle tree root\\n     * @param leaf element whose presence in Merkle tree to prove\\n     * @return whether leaf is proven to be contained within Merkle tree defined by root\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            bytes32 computedHash = leaf;\\n\\n            for (uint256 i = 0; i < proof.length; i++) {\\n                bytes32 proofElement = proof[i];\\n\\n                if (computedHash <= proofElement) {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(computedHash, proofElement)\\n                    );\\n                } else {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(proofElement, computedHash)\\n                    );\\n                }\\n            }\\n\\n            return computedHash == root;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3a6592d4e2c90f92ccae441401241b4a8837e95a15f3c3887abc544e85e362c\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Map implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableMap {\\n    error EnumerableMap__IndexOutOfBounds();\\n    error EnumerableMap__NonExistentKey();\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        MapEntry[] _entries;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct AddressToAddressMap {\\n        Map _inner;\\n    }\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    function at(\\n        AddressToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (address, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n\\n        return (\\n            address(uint160(uint256(key))),\\n            address(uint160(uint256(value)))\\n        );\\n    }\\n\\n    function at(\\n        UintToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    function contains(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function contains(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    function length(\\n        AddressToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function length(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function get(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (address) {\\n        return\\n            address(\\n                uint160(\\n                    uint256(_get(map._inner, bytes32(uint256(uint160(key)))))\\n                )\\n            );\\n    }\\n\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    function set(\\n        AddressToAddressMap storage map,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return\\n            _set(\\n                map._inner,\\n                bytes32(uint256(uint160(key))),\\n                bytes32(uint256(uint160(value)))\\n            );\\n    }\\n\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function remove(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    function toArray(\\n        AddressToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (address[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function toArray(\\n        UintToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (uint256[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n            }\\n        }\\n    }\\n\\n    function values(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function values(\\n        UintToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function _at(\\n        Map storage map,\\n        uint256 index\\n    ) private view returns (bytes32, bytes32) {\\n        if (index >= map._entries.length)\\n            revert EnumerableMap__IndexOutOfBounds();\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    function _contains(\\n        Map storage map,\\n        bytes32 key\\n    ) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) revert EnumerableMap__NonExistentKey();\\n        unchecked {\\n            return map._entries[keyIndex - 1]._value;\\n        }\\n    }\\n\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            unchecked {\\n                map._entries[keyIndex - 1]._value = value;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            unchecked {\\n                MapEntry storage last = map._entries[map._entries.length - 1];\\n\\n                // move last entry to now-vacant index\\n                map._entries[keyIndex - 1] = last;\\n                map._indexes[last._key] = keyIndex;\\n            }\\n\\n            // clear last index\\n            map._entries.pop();\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1140a8669a93db82ea70d7f53e112049d42a813fe7188f50aa2f7ec5e529d38a\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x38ca94617ab4a4cdc08d9fed753f1b17d91a9823b36f7f485cd1ed5e5324aa8f\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/ISolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Base } from './base/IERC721Base.sol';\\nimport { IERC721Enumerable } from './enumerable/IERC721Enumerable.sol';\\nimport { IERC721Metadata } from './metadata/IERC721Metadata.sol';\\n\\ninterface ISolidStateERC721 is IERC721Base, IERC721Enumerable, IERC721Metadata {\\n    error SolidStateERC721__PayableApproveNotSupported();\\n    error SolidStateERC721__PayableTransferNotSupported();\\n}\\n\",\"keccak256\":\"0x4fc3b4d30c0f7124751439c3289e060cd0a566fad2beca51e9f05737bd8cf825\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC165Base } from '../../introspection/ERC165/base/ERC165Base.sol';\\nimport { ERC721Base, ERC721BaseInternal } from './base/ERC721Base.sol';\\nimport { ERC721Enumerable } from './enumerable/ERC721Enumerable.sol';\\nimport { ERC721Metadata } from './metadata/ERC721Metadata.sol';\\nimport { ISolidStateERC721 } from './ISolidStateERC721.sol';\\n\\n/**\\n * @title SolidState ERC721 implementation, including recommended extensions\\n */\\nabstract contract SolidStateERC721 is\\n    ISolidStateERC721,\\n    ERC721Base,\\n    ERC721Enumerable,\\n    ERC721Metadata,\\n    ERC165Base\\n{\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external approve function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableApproveNotSupported();\\n        super._handleApproveMessageValue(operator, tokenId, value);\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external transfer function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableTransferNotSupported();\\n        super._handleTransferMessageValue(from, to, tokenId, value);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721BaseInternal, ERC721Metadata) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x397706dffa317a4d7da18896ae98562ac14a50361a06bedc7e2d4c68f83abf3f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721Base } from './IERC721Base.sol';\\nimport { ERC721BaseInternal } from './ERC721BaseInternal.sol';\\n\\n/**\\n * @title Base ERC721 implementation, excluding optional extensions\\n */\\nabstract contract ERC721Base is IERC721Base, ERC721BaseInternal {\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address) {\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address) {\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool) {\\n        return _isApprovedForAll(account, operator);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable {\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable {\\n        _safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable {\\n        _safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function approve(address operator, uint256 tokenId) external payable {\\n        _approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function setApprovalForAll(address operator, bool status) external {\\n        _setApprovalForAll(operator, status);\\n    }\\n}\\n\",\"keccak256\":\"0x388e07a6595f57c70508f6cc1f25b00f3c44f343bf6ab44898cd262186304630\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\n\\n/**\\n * @title Base ERC721 internal functions\\n */\\nabstract contract ERC721BaseInternal is IERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function _balanceOf(\\n        address account\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0)) revert ERC721Base__BalanceQueryZeroAddress();\\n        return ERC721BaseStorage.layout().holderTokens[account].length();\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        address owner = ERC721BaseStorage.layout().tokenOwners.get(tokenId);\\n        if (owner == address(0)) revert ERC721Base__InvalidOwner();\\n        return owner;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().tokenOwners.contains(tokenId);\\n    }\\n\\n    function _getApproved(\\n        uint256 tokenId\\n    ) internal view virtual returns (address) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        return ERC721BaseStorage.layout().tokenApprovals[tokenId];\\n    }\\n\\n    function _isApprovedForAll(\\n        address account,\\n        address operator\\n    ) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        return (spender == owner ||\\n            _getApproved(tokenId) == spender ||\\n            _isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        if (to == address(0)) revert ERC721Base__MintToZeroAddress();\\n        if (_exists(tokenId)) revert ERC721Base__TokenAlreadyMinted();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[owner].remove(tokenId);\\n        l.tokenOwners.remove(tokenId);\\n\\n        l.tokenApprovals[tokenId] = address(0);\\n\\n        emit Approval(owner, address(0), tokenId);\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        if (owner != from) revert ERC721Base__NotTokenOwner();\\n        if (to == address(0)) revert ERC721Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[from].remove(tokenId);\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n        l.tokenApprovals[tokenId] = address(0);\\n\\n        emit Approval(owner, address(0), tokenId);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    function _approve(address operator, uint256 tokenId) internal virtual {\\n        _handleApproveMessageValue(operator, tokenId, msg.value);\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        if (operator == owner) revert ERC721Base__SelfApproval();\\n        if (msg.sender != owner && !_isApprovedForAll(owner, msg.sender))\\n            revert ERC721Base__NotOwnerOrApproved();\\n\\n        ERC721BaseStorage.layout().tokenApprovals[tokenId] = operator;\\n        emit Approval(owner, operator, tokenId);\\n    }\\n\\n    function _setApprovalForAll(\\n        address operator,\\n        bool status\\n    ) internal virtual {\\n        if (operator == msg.sender) revert ERC721Base__SelfApproval();\\n        ERC721BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes memory returnData = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n\\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\\n        return returnValue == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called approvals for processing of included message value\\n     * @param operator beneficiary of approval\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called transfers for processing of included message value\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xcc7bc3523871dc4f4e67c88f9c12931fd92d261de914144e749a1b71a3787dae\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC721BaseStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Base');\\n\\n    struct Layout {\\n        EnumerableMap.UintToAddressMap tokenOwners;\\n        mapping(address => EnumerableSet.UintSet) holderTokens;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9570596eca4d18e1c872177aa12125fcaba1dd7db940e5affa44e6ce2231b0a1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721Base is IERC721BaseInternal, IERC721 {\\n\\n}\\n\",\"keccak256\":\"0x5b99ebbddcc97f5a825cb21fb377b04c9ad184c4e4b69b92685334b6d42b7636\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../../../interfaces/IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721BaseInternal is IERC721Internal {\\n    error ERC721Base__NotOwnerOrApproved();\\n    error ERC721Base__SelfApproval();\\n    error ERC721Base__BalanceQueryZeroAddress();\\n    error ERC721Base__ERC721ReceiverNotImplemented();\\n    error ERC721Base__InvalidOwner();\\n    error ERC721Base__MintToZeroAddress();\\n    error ERC721Base__NonExistentToken();\\n    error ERC721Base__NotTokenOwner();\\n    error ERC721Base__TokenAlreadyMinted();\\n    error ERC721Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0x3118e4b75bc32c0c5b1f7aca49d30bf618966260179d848171b2ce3e3e0b5373\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { IERC721Enumerable } from './IERC721Enumerable.sol';\\nimport { ERC721EnumerableInternal } from './ERC721EnumerableInternal.sol';\\n\\nabstract contract ERC721Enumerable is\\n    IERC721Enumerable,\\n    ERC721EnumerableInternal\\n{\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view returns (uint256) {\\n        return _tokenOfOwnerByIndex(owner, index);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        return _tokenByIndex(index);\\n    }\\n}\\n\",\"keccak256\":\"0x762db931dbe79f32fa48ba2f66b23b096e9c43e89c09310a98c10ab18b6e73b6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\n\\nabstract contract ERC721EnumerableInternal {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _totalSupply() internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().tokenOwners.length();\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenByIndex(\\n        uint256 index\\n    ) internal view returns (uint256 tokenId) {\\n        (tokenId, ) = ERC721BaseStorage.layout().tokenOwners.at(index);\\n    }\\n}\\n\",\"keccak256\":\"0xcb195fe5d264a1756a67b0c9bf8ac5493c12d25f947290196f15a67d7f3e81ad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Enumerable {\\n    /**\\n     * @notice get total token supply\\n     * @return total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice get token of given owner at given internal storage index\\n     * @param owner token holder to query\\n     * @param index position in owner's token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @notice get token at given internal storage index\\n     * @param index position in global token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x4dcc1d41df336f28a2ea6fa2e7ec17e3d1745938146db5385400238a7e7a1bad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\nimport { IERC721Metadata } from './IERC721Metadata.sol';\\n\\n/**\\n * @title ERC721 metadata extensions\\n */\\nabstract contract ERC721Metadata is IERC721Metadata, ERC721MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view virtual returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721MetadataInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc626c723aa50119564d77caa3749a728526ca8a93b385000e3d52208b6bc40c5\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from '../base/ERC721Base.sol';\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\nimport { ERC721MetadataStorage } from './ERC721MetadataStorage.sol';\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal functions\\n */\\nabstract contract ERC721MetadataInternal is\\n    IERC721MetadataInternal,\\n    ERC721BaseInternal\\n{\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function _name() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function _symbol() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function _tokenURI(\\n        uint256 tokenId\\n    ) internal view virtual returns (string memory) {\\n        if (!_exists(tokenId)) revert ERC721Metadata__NonExistentToken();\\n\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: clear per-token URI data on burn\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (to == address(0)) {\\n            delete ERC721MetadataStorage.layout().tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x087a3302cd70010787bcdb1eb2e225eff23ac2e5ab5f77d6dc26289cb8863a19\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721MetadataInternal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x281dd4dbf81c3acf12bf43bc6e0f77ae68cb2764450cce8121a53c061bf87960\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721BaseInternal } from '../base/IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal interface\\n */\\ninterface IERC721MetadataInternal is IERC721BaseInternal {\\n    error ERC721Metadata__NonExistentToken();\\n}\\n\",\"keccak256\":\"0xd420b4227db773f26b0e40cb6ea4819d340d0ee5ea59d6321c27e79ae7ecca86\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Interface for the Multicall utility contract\\n */\\ninterface IMulticall {\\n    /**\\n     * @notice batch function calls to the contract and return the results of each\\n     * @param data array of function call data payloads\\n     * @return results array of function call results\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x39e630bc189607ae119c1208a632009fe418cc4eb2687b28e7fdbe78af7b79b0\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IMulticall } from './IMulticall.sol';\\n\\n/**\\n * @title Utility contract for supporting processing of multiple function calls in a single transaction\\n */\\nabstract contract Multicall is IMulticall {\\n    /**\\n     * @inheritdoc IMulticall\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        unchecked {\\n            for (uint256 i; i < data.length; i++) {\\n                (bool success, bytes memory returndata) = address(this)\\n                    .delegatecall(data[i]);\\n\\n                if (success) {\\n                    results[i] = returndata;\\n                } else {\\n                    assembly {\\n                        returndatacopy(0, 0, returndatasize())\\n                        revert(0, returndatasize())\\n                    }\\n                }\\n            }\\n        }\\n\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x762f15ac4c28be19d0d7fb303ade8dea6ba52ff558fb6fba36df84a839e216b3\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ERC721BaseInternal } from \\\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\\\";\\nimport { ERC721BaseStorage } from \\\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\\\";\\nimport { ERC721Metadata } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\\\";\\nimport { ISolidStateERC721 } from \\\"@solidstate/contracts/token/ERC721/ISolidStateERC721.sol\\\";\\nimport { SolidStateERC721 } from \\\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\\\";\\nimport { ERC721Enumerable } from \\\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\\\";\\nimport { ERC721Base } from \\\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\\\";\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IERC721Metadata } from \\\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\\\";\\nimport { ArcadiansInternal } from \\\"./ArcadiansInternal.sol\\\";\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { EnumerableMap } from '@solidstate/contracts/data/EnumerableMap.sol';\\nimport { Multicall } from \\\"@solidstate/contracts/utils/Multicall.sol\\\";\\n\\ncontract ArcadiansFacet is SolidStateERC721, ArcadiansInternal, Multicall {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view override (ERC721Metadata, IERC721Metadata) returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    function claimMerkle(uint totalAmount, bytes32[] memory proof)\\n        external nonReentrant\\n    {\\n        ArcadiansStorage.Layout storage es = ArcadiansStorage.layout();\\n\\n        // Revert if the token was already claimed before\\n        require(es.amountClaimed[msg.sender] < totalAmount, \\\"All tokens claimed\\\");\\n\\n        // Verify if is elegible\\n        bytes memory leaf = abi.encode(msg.sender, totalAmount);\\n        _validateLeaf(proof, leaf);\\n\\n        // Mint token to address\\n        uint amountLeftToClaim = totalAmount - es.amountClaimed[msg.sender];\\n        for (uint256 i = 0; i < amountLeftToClaim; i++) {\\n            _safeMint(msg.sender, _totalSupply());\\n        }\\n        es.amountClaimed[msg.sender] += amountLeftToClaim;\\n        emit ArcadianClaimedMerkle(msg.sender, amountLeftToClaim);\\n    }\\n\\n    function getClaimedAmountMerkle(address account) external view returns (uint) {\\n        return _getClaimedAmountMerkle(account);\\n    }\\n\\n    function claimWhitelist(uint amount) external {\\n        _consumeWhitelist(msg.sender, amount);\\n        for (uint i = 0; i < amount; i++) {\\n            _safeMint(msg.sender, _totalSupply());\\n        }\\n    }\\n\\n    function mint()\\n        external payable nonReentrant\\n    {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        require(msg.value == arcadiansSL.mintPrice, \\\"ArcadiansInternal._mint: Invalid pay amount\\\");\\n        uint mintedTokens = _balanceOf(msg.sender) - arcadiansSL.amountClaimed[msg.sender];\\n        require(mintedTokens < arcadiansSL.maxMintPerUser, \\\"ArcadiansInternal._mint: User maximum minted tokens reached\\\");\\n        _safeMint(msg.sender, _totalSupply());\\n    }\\n\\n    function setMintPrice(uint newMintPrice) external onlyManager {\\n        _setMintPrice(newMintPrice);\\n    }\\n    function getMintPrice() external view returns (uint) {\\n        return _getMintPrice();\\n    }\\n\\n    function setMaxMintPerUser(uint newMaxMintPerUser) external onlyManager {\\n        _setMaxMintPerUser(newMaxMintPerUser);\\n    }\\n    function getMaxMintPerUser() external view returns (uint) {\\n        return _getMaxMintPerUser();\\n    }\\n\\n    function setBaseURI(string memory baseURI) external onlyManager {\\n        _setBaseURI(baseURI);\\n    }\\n    function getBaseURI() external view returns (string memory) {\\n        return _getBaseURI();\\n    }\\n\\n\\n\\n\\n    // required overrides\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableApproveNotSupported();\\n        super._handleApproveMessageValue(operator, tokenId, value);\\n    }\\n\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        if (value > 0) revert SolidStateERC721__PayableTransferNotSupported();\\n        super._handleTransferMessageValue(from, to, tokenId, value);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        _unequipAll(tokenId);\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\",\"keccak256\":\"0x9cae39b853f5cc0811b8a04025c506da5389f8174fbf7900a774d605bcb678bb\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ERC721MetadataStorage } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\\\";\\nimport { UintUtils } from '@solidstate/contracts/utils/UintUtils.sol';\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { WhitelistInternal } from \\\"../whitelist/WhitelistInternal.sol\\\";\\nimport { MerkleInternal } from \\\"../merkle/MerkleInternal.sol\\\";\\nimport { InventoryInternal } from \\\"../inventory/InventoryInternal.sol\\\";\\n\\ncontract ArcadiansInternal is RolesInternal, WhitelistInternal, MerkleInternal, InventoryInternal {\\n\\n    event MaxMintPerUserChanged(address indexed by, uint oldMaxMintPerUser, uint newMaxMintPerUser);\\n    event MintPriceChanged(address indexed by, uint oldMintPrice, uint newMintPrice);\\n    event BaseURIChanged(address indexed by, string oldBaseURI, string newBaseURI);\\n    event InventoryAddressChanged(address indexed by, address indexed oldInventoryAddress, address indexed newInventoryAddress);\\n    event ArcadianClaimedMerkle(address indexed to, uint256 indexed amount);\\n\\n    using UintUtils for uint256;\\n\\n    // function _getTokenURI(\\n    //     uint256 tokenId\\n    // ) internal view returns (string memory) {\\n    //     string memory tokenUri = ERC721MetadataInternal._tokenURI(tokenId);\\n    //     // IInventoryFacet inventory = IInventoryFacet(_getInventoryAddress());\\n    //     // IInventoryFacet.EquippedItem[] memory equippedItem = inventory.equippedAll(tokenId);\\n    //     // tokenUri = string.concat(tokenUri, \\\"/?tokenIds=\\\");\\n    //     // for (uint i = 0; i < equippedItem.length; i++) {\\n    //     //     string memory itemId = equippedItem[i].id.toString();\\n    //     //     if (i == 0) {\\n    //     //         tokenUri = string.concat(tokenUri, itemId);\\n    //     //     } else {\\n    //     //         tokenUri = string.concat(tokenUri, \\\",\\\", itemId);\\n    //     //     }\\n    //     // }\\n    //     return tokenUri;\\n    // }\\n\\n    function _setBaseURI(string memory newBaseURI) internal {\\n        ERC721MetadataStorage.Layout storage ERC721SL = ERC721MetadataStorage.layout();\\n        emit BaseURIChanged(msg.sender, ERC721SL.baseURI, newBaseURI);\\n        ERC721SL.baseURI = newBaseURI;\\n    }\\n\\n    function _getBaseURI() internal view returns (string memory) {\\n        return ERC721MetadataStorage.layout().baseURI;\\n    }\\n\\n    function _getClaimedAmountMerkle(address account) internal view returns (uint) {\\n        return ArcadiansStorage.layout().amountClaimed[account];\\n    }\\n\\n    function _setMaxMintPerUser(uint newMaxMintPerUser) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MaxMintPerUserChanged(msg.sender, arcadiansSL.maxMintPerUser, newMaxMintPerUser);\\n        arcadiansSL.maxMintPerUser = newMaxMintPerUser;\\n    }\\n\\n    function _getMintPrice() internal view returns (uint) {\\n        return ArcadiansStorage.layout().mintPrice;\\n    }\\n\\n    function _setMintPrice(uint newMintPrice) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MintPriceChanged(msg.sender, arcadiansSL.mintPrice, newMintPrice);\\n        arcadiansSL.mintPrice = newMintPrice;\\n    }\\n\\n    function _getMaxMintPerUser() internal view returns (uint) {\\n        return ArcadiansStorage.layout().maxMintPerUser;\\n    }\\n}\",\"keccak256\":\"0x3b6daef654ce0251232c87cbd452cb8cdd6b21f9fa70c6c9d52b56b6c57bad02\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary ArcadiansStorage {\\n\\n    bytes32 constant ARCADIANS_STORAGE_POSITION =\\n        keccak256(\\\"equippable.storage.position\\\");\\n\\n    struct Layout {\\n        // wallet => amount claimed \\n        mapping(address => uint) amountClaimed;\\n        uint maxMintPerUser;\\n        uint mintPrice;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ARCADIANS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x609e1c20a44ac29ea86adc79933e8ebdee9a3a57dd9ae1ee6b672fa49f680f02\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { AddressUtils } from \\\"@solidstate/contracts/utils/AddressUtils.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { IERC1155 } from \\\"@solidstate/contracts/interfaces/IERC1155.sol\\\";\\n\\ncontract InventoryInternal is\\n    ReentrancyGuard,\\n    RolesInternal\\n{\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    event ArcadiansAddressChanged(address indexed oldArcadiansAddress, address indexed newArcadiansAddress);\\n\\n    event ItemsAllowedInSlotUpdated(\\n        address indexed by,\\n        uint slot,\\n        address itemAddress, \\n        uint[] allowedItems\\n    );\\n\\n    event ItemsEquipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots,\\n        InventoryStorage.EquippedItem[] equippedItems\\n    );\\n\\n    event ItemsUnequipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event SlotCreated(\\n        address indexed by, \\n        uint capacity,\\n        bool unequippable,\\n        uint slot\\n    );\\n\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    modifier onlyValidSlot(uint slot) {\\n        require(slot != 0, \\\"InventoryFacet: Slot id can't be zero\\\");\\n        require(slot <= InventoryStorage.layout().numSlots, \\\"InventoryFacet: Invalid slot\\\");\\n        _;\\n    }\\n\\n    modifier onlyArcadianOwner(uint arcadianId) {\\n        IERC721 arcadiansContract = IERC721(address(this));\\n        require(\\n            msg.sender == arcadiansContract.ownerOf(arcadianId),\\n            \\\"InventoryFacet: Message sender is not owner of the arcadian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyValidAddress(address _address) {\\n        require(_address != address(0), \\\"Invalid Address\\\");\\n        _;\\n    }\\n\\n    modifier onlyContract(address _address) {\\n        require(_address.isContract(), \\\"InventoryFacet: Address given is not a contract\\\");\\n        _;\\n    }\\n\\n    function _numSlots() internal view returns (uint) {\\n        return InventoryStorage.layout().numSlots;\\n    }\\n\\n    function _equip(\\n        uint arcadianId,\\n        uint slot,\\n        InventoryStorage.EquippedItem calldata itemToEquip\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        require(inventorySL.allowedSlots[itemToEquip.itemAddress][itemToEquip.id].contains(slot), \\\"InventoryFacet.equip: Item not elegible for slot\\\");\\n        require(inventorySL.slots[slot].capacity >= itemToEquip.amount, \\\"InventoryFacet.equip: Item amount exceeds slot capacity\\\");\\n\\n        if (inventorySL.equippedItems[arcadianId][slot].amount != 0) {\\n            _unequipUnchecked(arcadianId, slot);\\n        }\\n\\n        IERC1155 erc1155Contract = IERC1155(itemToEquip.itemAddress);\\n        require(\\n            erc1155Contract.balanceOf(msg.sender, itemToEquip.id) >= itemToEquip.amount,\\n            \\\"InventoryFacet.equip: Message sender does not own enough of that item to equip\\\"\\n        );\\n\\n        erc1155Contract.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            itemToEquip.id,\\n            itemToEquip.amount,\\n            ''\\n        );\\n\\n        uint[] memory slots = new uint[](1);\\n        slots[0] = slot;\\n        InventoryStorage.EquippedItem[] memory itemsToEquip = new InventoryStorage.EquippedItem[](1);\\n        itemsToEquip[0] = itemToEquip;\\n        emit ItemsEquipped(\\n            msg.sender,\\n            arcadianId,\\n            slots,\\n            itemsToEquip\\n        );\\n\\n        inventorySL.equippedItems[arcadianId][slot] = itemToEquip;\\n        require(_hashBaseItemsUnchecked(arcadianId), \\\"InventoryFacet._equip: Base items are not unique\\\");\\n    }\\n\\n    function _equipBatch(\\n        uint arcadianId,\\n        uint[] calldata slots,\\n        InventoryStorage.EquippedItem[] calldata itemsToEquip\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        require(slots.length == itemsToEquip.length, \\\"InventoryFacet._equipBatch: Input data length mismatch\\\");\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < slots.length; i++) {\\n            InventoryStorage.EquippedItem calldata itemToEquip = itemsToEquip[i];\\n            IERC1155 erc1155Contract = IERC1155(itemToEquip.itemAddress);\\n\\n            require(inventorySL.allowedSlots[itemToEquip.itemAddress][itemToEquip.id].contains(slots[i]), \\\"InventoryFacet._equipBatch: Item not elegible for slot\\\");\\n            require(inventorySL.slots[slots[i]].capacity >= itemToEquip.amount, \\\"InventoryFacet._equipBatch: Item amount exceeds slot capacity\\\");\\n\\n            require(\\n                erc1155Contract.balanceOf(msg.sender, itemToEquip.id) >= itemToEquip.amount,\\n                \\\"InventoryFacet.equip: Sender has insufficient item balance\\\"\\n            );\\n\\n            if (inventorySL.equippedItems[arcadianId][slots[i]].amount > 0) {\\n                _unequipUnchecked(arcadianId, slots[i]);\\n            }\\n\\n            inventorySL.equippedItems[arcadianId][slots[i]] = InventoryStorage.EquippedItem({\\n                itemAddress: itemToEquip.itemAddress,\\n                id: itemToEquip.id,\\n                amount: itemToEquip.amount\\n            });\\n\\n            erc1155Contract.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                itemToEquip.id,\\n                itemToEquip.amount,\\n                ''\\n            );\\n        }\\n\\n        emit ItemsEquipped(\\n            msg.sender,\\n            arcadianId,\\n            slots,\\n            itemsToEquip\\n        );\\n\\n        bool isUnique = _hashBaseItemsUnchecked(arcadianId);\\n        require(isUnique, \\\"InventoryFacet._equipBatch: Base items are not unique\\\");\\n    }\\n\\n    function _unequipUnchecked(\\n        uint arcadianId,\\n        uint slot\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        InventoryStorage.EquippedItem storage existingItem = inventorySL.equippedItems[arcadianId][slot];\\n        IERC1155 erc1155Contract = IERC1155(existingItem.itemAddress);\\n        erc1155Contract.safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            existingItem.id,\\n            existingItem.amount,\\n            ''\\n        );\\n\\n        delete inventorySL.equippedItems[arcadianId][slot];\\n    }\\n\\n    function _unequip(\\n        uint arcadianId,\\n        uint slot\\n    ) internal onlyArcadianOwner(arcadianId) onlyValidSlot(slot) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        require(!inventorySL.slots[slot].isUnequippable, \\\"InventoryFacet._unequip: Slot is unequippable\\\");\\n        require(inventorySL.equippedItems[arcadianId][slot].amount > 0, \\\"InventoryFacet._unequip: Slot not equipped\\\");\\n        \\n        _unequipUnchecked(arcadianId, slot);\\n\\n        uint[] memory slots = new uint[](1);\\n        slots[0] = slot;\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slots\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _unequipBatch(\\n        uint arcadianId,\\n        uint[] calldata slots\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        require(slots.length > 0, \\\"InventoryFacet._unequip: Should specify at least one slot\\\");\\n\\n        for (uint i = 0; i < slots.length; i++) {\\n            uint slot = slots[i];\\n            require(slot > 0 && slot <= inventorySL.numSlots, \\\"InventoryFacet._unequip: Invalid slot\\\");\\n            require(!inventorySL.slots[slot].isUnequippable, \\\"InventoryFacet._unequip: Slot is unequippable\\\");\\n            require(inventorySL.equippedItems[arcadianId][slot].amount > 0, \\\"InventoryFacet._unequip: Slot not equipped\\\");\\n            \\n            _unequipUnchecked(arcadianId, slot);\\n        }\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slots\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _unequipAll(\\n        uint arcadianId\\n    ) internal {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        uint numUnequippableSlots;\\n        for (uint i = 0; i < numSlots; i++) {\\n            uint slot = i + 1;\\n            if (!inventorySL.slots[slot].isUnequippable && inventorySL.equippedItems[arcadianId][slot].amount > 0) {\\n                numUnequippableSlots++;\\n            }\\n        }\\n\\n        uint[] memory unequippedSlots = new uint[](numUnequippableSlots);\\n        uint counter;\\n        for (uint i = 0; i < numSlots; i++) {\\n            uint slot = i + 1;\\n            if (!inventorySL.slots[slot].isUnequippable && inventorySL.equippedItems[arcadianId][slot].amount > 0) {\\n                _unequipUnchecked(arcadianId, slot);\\n                unequippedSlots[counter] = slot;\\n                counter++;\\n            }\\n        }\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            unequippedSlots\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _equipped(\\n        uint arcadianId,\\n        uint slot\\n    ) internal view returns (InventoryStorage.EquippedItem memory) {\\n        return InventoryStorage.layout().equippedItems[arcadianId][slot];\\n    }\\n\\n    function _equippedAll(\\n        uint arcadianId\\n    ) internal view returns (InventoryStorage.EquippedItem[] memory) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        InventoryStorage.EquippedItem[] memory items = new InventoryStorage.EquippedItem[](numSlots);\\n        for (uint i = 0; i < numSlots; i++) {\\n            items[i] = inventorySL.equippedItems[arcadianId][i+1];\\n        }\\n        return items;\\n    }\\n\\n    function _baseSlotsUnique(\\n        uint[] memory slots,\\n        address[] memory itemsAddresses,\\n        uint[] memory itemsIds\\n    ) internal view returns (bool) {\\n        require(slots.length == itemsAddresses.length && slots.length == itemsIds.length, \\\"InventoryFacet._baseSlotsUnique: Input data length mismatch\\\");\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        (slots, itemsAddresses, itemsIds) = _sortSlots(slots, itemsAddresses, itemsIds);\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categorySlots[InventoryStorage.SlotCategory.Base];\\n        bytes memory encodedItems;\\n        for (uint i = 0; i < slots.length; i++) {\\n            uint slot = slots[i];\\n            if (!baseSlots.contains(slot)) continue;\\n            encodedItems = abi.encodePacked(encodedItems, slot, itemsAddresses[i], itemsIds[i]);\\n        }\\n        return !inventorySL.baseItemsHashes.contains(keccak256(encodedItems));\\n    }\\n\\n    function _sortSlots(\\n        uint[] memory slots,\\n        address[] memory itemsAddresses,\\n        uint[] memory itemsIds\\n    ) internal pure returns (uint[] memory, address[] memory, uint[] memory) {\\n        uint n = slots.length;\\n        for (uint i = 0; i < n - 1; i++) {\\n            uint minIdx = i;\\n            for (uint j = i + 1; j < n; j++) {\\n                if (slots[j] < slots[minIdx]) {\\n                    minIdx = j;\\n                }\\n            }\\n            if (minIdx != i) {\\n                uint tempSlot = slots[i];\\n                slots[i] = slots[minIdx];\\n                slots[minIdx] = tempSlot;\\n\\n                address tempItemAddress = itemsAddresses[i];\\n                itemsAddresses[i] = itemsAddresses[minIdx];\\n                itemsAddresses[minIdx] = tempItemAddress;\\n\\n                uint tempItemsIds = itemsIds[i];\\n                itemsIds[i] = itemsIds[minIdx];\\n                itemsIds[minIdx] = tempItemsIds;\\n            }\\n        }\\n        return (slots, itemsAddresses, itemsIds);\\n    }\\n\\n    function _hashBaseItemsUnchecked(\\n        uint arcadianId\\n    ) internal returns (bool isUnique) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        bytes memory encodedItems;\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categorySlots[InventoryStorage.SlotCategory.Base];\\n        for (uint i = 0; i < baseSlots.length(); i++) {\\n            uint slot = baseSlots.at(i);\\n            InventoryStorage.EquippedItem storage equippedItem = inventorySL.equippedItems[arcadianId][slot];\\n            encodedItems = abi.encodePacked(encodedItems, slot, equippedItem.itemAddress, equippedItem.id);\\n        }\\n        bytes32 baseItemsHash = keccak256(encodedItems);\\n        isUnique = !inventorySL.baseItemsHashes.contains(baseItemsHash);\\n        inventorySL.baseItemsHashes.remove(inventorySL.arcadiansBaseItemsHashes[arcadianId]);\\n        inventorySL.baseItemsHashes.add(baseItemsHash);\\n        inventorySL.arcadiansBaseItemsHashes[arcadianId] = baseItemsHash;\\n    }\\n\\n    function _createSlot(\\n        uint capacity,\\n        bool unequippable,\\n        InventoryStorage.SlotCategory category,\\n        address itemAddress,\\n        uint[] calldata allowedItemsIds\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        // slots are 1-index\\n        inventorySL.numSlots += 1;\\n        uint newSlot = inventorySL.numSlots;\\n        inventorySL.slots[newSlot].isUnequippable = unequippable;\\n        inventorySL.slots[newSlot].capacity = capacity;\\n        inventorySL.slots[newSlot].category = category;\\n\\n        if (allowedItemsIds.length > 0) {\\n            require(itemAddress.isContract(), \\\"InventoryFacet._createSlot: Invalid item address\\\");\\n            _allowItemsInSlot(newSlot, itemAddress, allowedItemsIds);\\n        }\\n\\n        emit SlotCreated(msg.sender, capacity, unequippable, newSlot);\\n    }\\n\\n    function _allowItemsInSlot(\\n        uint slot,\\n        address itemAddress,\\n        uint[] calldata itemsIds\\n    ) internal virtual onlyValidSlot(slot) onlyValidAddress(itemAddress) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < itemsIds.length; i++) {\\n            require(!inventorySL.allowedItems[slot][itemAddress].contains(itemsIds[i]), \\\"InventoryFacet._disallowItemsInSlot: Item already allowed in the slot\\\");\\n            inventorySL.allowedItems[slot][itemAddress].add(itemsIds[i]);\\n            inventorySL.allowedSlots[itemAddress][itemsIds[i]].add(slot);\\n        }\\n        inventorySL.categorySlots[inventorySL.slots[slot].category].add(slot);\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slot, itemAddress, InventoryStorage.layout().allowedItems[slot][itemAddress].toArray());\\n    }\\n\\n    function _disallowItemsInSlot(\\n        uint slot,\\n        address itemAddress,\\n        uint[] calldata itemsIds\\n    ) internal virtual onlyValidSlot(slot) onlyValidAddress(itemAddress) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < itemsIds.length; i++) {\\n            require(inventorySL.allowedItems[slot][itemAddress].contains(itemsIds[i]), \\\"InventoryFacet._disallowItemsInSlot: Item is not allowed in the slot\\\");\\n            inventorySL.allowedItems[slot][itemAddress].remove(itemsIds[i]);\\n            inventorySL.allowedSlots[itemAddress][itemsIds[i]].remove(slot);\\n        }\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slot, itemAddress, InventoryStorage.layout().allowedItems[slot][itemAddress].toArray());\\n    }\\n\\n    function _getAllowedSlots(address itemAddress, uint itemId) internal view returns (uint[] memory) {\\n        return InventoryStorage.layout().allowedSlots[itemAddress][itemId].toArray();\\n    }\\n\\n    function _getAllowedItems(uint slot, address itemAddress) internal view returns (uint[] memory) {\\n        return InventoryStorage.layout().allowedItems[slot][itemAddress].toArray();\\n    }\\n\\n    function _getSlot(uint slot) internal view returns (InventoryStorage.Slot storage) {\\n        return InventoryStorage.layout().slots[slot];\\n    }\\n}\",\"keccak256\":\"0xbbf880c881f7bad612e879cc427c3ea3ed85907dbd2a15e61d4114eba3c0130d\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\n\\n/**\\nLibInventory defines the storage structure used by the Inventory contract as a facet for an EIP-2535 Diamond\\nproxy.\\n */\\nlibrary InventoryStorage {\\n    bytes32 constant INVENTORY_STORAGE_POSITION =\\n        keccak256(\\\"inventory.storage.position\\\");\\n\\n    uint constant ERC721_ITEM_TYPE = 721;\\n    uint constant ERC1155_ITEM_TYPE = 1155;\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum SlotCategory { Base, Equippment, Cosmetic }\\n\\n    // EquippedItem: holds the information of the currently equipped item for a specific slot in an arcadian\\n    struct EquippedItem {\\n        address itemAddress;\\n        uint id;\\n        uint amount;\\n    }\\n    // Slot: Holds the general information for a slot\\n    struct Slot {\\n        uint capacity;\\n        bool isUnequippable;\\n        SlotCategory category;\\n    }\\n\\n    struct Layout {\\n        uint numSlots;\\n\\n        // Slot id => Slot\\n        mapping(uint => Slot) slots;\\n\\n        mapping(SlotCategory => EnumerableSet.UintSet) categorySlots;\\n\\n        // arcadian id => slot id => EquippedItem\\n        mapping(uint => mapping(uint => EquippedItem)) equippedItems;\\n\\n        // Slot id => item address => items allowed\\n        mapping(uint => mapping(address => EnumerableSet.UintSet)) allowedItems;\\n        // item address => item id => slots allowed\\n        mapping(address => mapping(uint => EnumerableSet.UintSet)) allowedSlots;\\n\\n        // base items hash => arcadian id\\n        EnumerableSet.Bytes32Set baseItemsHashes;\\n        mapping(uint => bytes32) arcadiansBaseItemsHashes;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage istore)\\n    {\\n        bytes32 position = INVENTORY_STORAGE_POSITION;\\n        assembly {\\n            istore.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x2cb69b36884a662fe82166a668f5b9c49985f0873620d27ad62eace7d2fd5f77\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/merkle/MerkleInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { MerkleProof } from \\\"@solidstate/contracts/cryptography/MerkleProof.sol\\\";\\nimport { MerkleStorage } from \\\"./MerkleStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract MerkleInternal is RolesInternal {\\n\\n    function _getMerkleRoot() internal view returns (bytes32) {\\n        return MerkleStorage.layout().merkleRoot;\\n    }\\n\\n    function _updateMerkleRoot(bytes32 merkleRoot) onlyManager internal {\\n        MerkleStorage.layout().merkleRoot = merkleRoot;\\n    }\\n\\n    // To create 'leaf' use abi.encode(leafProp1, leafProp2, ...)\\n    function _validateLeaf(bytes32[] memory proof, bytes memory _leaf) internal view returns (bool isValid) {\\n        bytes32 leaf = keccak256(bytes.concat(keccak256(_leaf)));\\n        isValid = MerkleProof.verify(proof, MerkleStorage.layout().merkleRoot, leaf);\\n        require(isValid, \\\"Data not included in merkle\\\");\\n    }\\n}\",\"keccak256\":\"0x02be8835f8ceca270eba33286d3f83fc68972278d229bdfe2b9589231c240cf7\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/merkle/MerkleStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary MerkleStorage {\\n\\n    bytes32 constant MERKLE_STORAGE_POSITION =\\n        keccak256(\\\"merkle.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 merkleRoot;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = MERKLE_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x5ed5d36d30cda447858ff4ad784c43281a332ef4be8644681327f8fab3c71ce8\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(_getDefaultAdminRole());\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        _checkRole(_getManagerRole());\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        _checkRole(_getMinterRole());\\n        _;\\n    }\\n\\n    function _getDefaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _getManagerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _getMinterRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().minterRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.minterRole = keccak256(\\\"minter.role\\\");\\n\\n        _grantRole(_getDefaultAdminRole(), msg.sender);\\n        _grantRole(_getManagerRole(), msg.sender);\\n        _grantRole(_getMinterRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0x43a83b4e0383d0fb5c977b6c1119e4c7671e575964f0c8f7b4bb66242af716e4\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 minterRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x203cfbe268a1ac5fe32593c66ace04b576dfb2e25173e02654e504cf0de44d71\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { MerkleProof } from \\\"@solidstate/contracts/cryptography/MerkleProof.sol\\\";\\nimport { WhitelistStorage } from \\\"./WhitelistStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract WhitelistInternal is RolesInternal {\\n\\n    event WhitelistBalanceChanged(address account, int amount, uint totalElegibleAmount, uint totalClaimedAmount);\\n\\n    function _getWhitelistClaimed(address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().claimed[account];\\n    }\\n\\n    function _getWhitelistBalance(address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().elegible[account];\\n    }\\n\\n    function _consumeWhitelist(address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        require(whitelistSL.elegible[account] >= amount, \\\"WhitelistInternal._consumeWhitelist: amount exceeds elegible amount\\\");\\n        whitelistSL.elegible[account] -= amount;\\n        whitelistSL.claimed[account] += amount;\\n        emit WhitelistBalanceChanged(msg.sender, int(amount), whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _addToWhitelist(address account, uint amount) onlyManager internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        whitelistSL.elegible[account] += amount;\\n        emit WhitelistBalanceChanged(msg.sender, int(amount), whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _addToWhitelistBatch(address[] calldata accounts, uint[] calldata amounts) onlyManager internal {\\n        require(accounts.length == amounts.length, \\\"WhitelistInternal._addToWhitelistBatch: Inputs length mismatch\\\");\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        for (uint i = 0; i < accounts.length; i++) {\\n            WhitelistStorage.layout().elegible[accounts[i]] += amounts[i];\\n            emit WhitelistBalanceChanged(msg.sender, int(amounts[i]), whitelistSL.elegible[accounts[i]], whitelistSL.claimed[accounts[i]]);\\n        }\\n    }\\n}\",\"keccak256\":\"0xbccda082f0c07ff0cf4462e954768d251684a5205a1179d1bab092c715f9adfc\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary WhitelistStorage {\\n\\n    bytes32 constant WHITELIST_STORAGE_POSITION =\\n        keccak256(\\\"whitelist.storage.position\\\");\\n\\n    struct Layout {\\n        mapping(address => uint) claimed;\\n        mapping(address => uint) elegible;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = WHITELIST_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x1eae9928eb6da719f50ca96c4081e0d83e8d5cfb6dee9ca57c4f0e3a5fc9cd39\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613209806100206000396000f3fe60806040526004361061019c5760003560e01c8063714c5398116100ec578063ac9650d81161008a578063ccb4f8d611610064578063ccb4f8d614610455578063db718c9414610475578063e985e9c51461048a578063f4a0a528146104aa57600080fd5b8063ac9650d8146103f5578063b88d4fde14610422578063c87b56dd1461043557600080fd5b8063958944f1116100c6578063958944f11461038b57806395d89b41146103ab578063a22cb465146103c0578063a7f93ebd146103e057600080fd5b8063714c53981461033657806383ccaef71461034b5780638e10d5541461036b57600080fd5b806323b872dd116101595780634f6ccce7116101335780634f6ccce7146102b657806355f804b3146102d65780636352211e146102f657806370a082311461031657600080fd5b806323b872dd146102705780632f745c591461028357806342842e0e146102a357600080fd5b806301ffc9a7146101a157806306fdde03146101d6578063081812fc146101f8578063095ea7b3146102305780631249c58b1461024557806318160ddd1461024d575b600080fd5b3480156101ad57600080fd5b506101c16101bc3660046127fd565b6104ca565b60405190151581526020015b60405180910390f35b3480156101e257600080fd5b506101eb61050d565b6040516101cd919061286a565b34801561020457600080fd5b5061021861021336600461287d565b61051c565b6040516001600160a01b0390911681526020016101cd565b61024361023e3660046128b2565b610527565b005b610243610535565b34801561025957600080fd5b506102626106ce565b6040519081526020016101cd565b61024361027e3660046128dc565b6106d8565b34801561028f57600080fd5b5061026261029e3660046128b2565b6106e8565b6102436102b13660046128dc565b6106fb565b3480156102c257600080fd5b506102626102d136600461287d565b610706565b3480156102e257600080fd5b506102436102f13660046129b7565b610711565b34801561030257600080fd5b5061021861031136600461287d565b61074d565b34801561032257600080fd5b50610262610331366004612a00565b610758565b34801561034257600080fd5b506101eb610763565b34801561035757600080fd5b5061024361036636600461287d565b61076d565b34801561037757600080fd5b5061024361038636600461287d565b6107a1565b34801561039757600080fd5b506102436103a6366004612a1b565b6107d4565b3480156103b757600080fd5b506101eb61094d565b3480156103cc57600080fd5b506102436103db366004612acd565b610957565b3480156103ec57600080fd5b50610262610961565b34801561040157600080fd5b50610415610410366004612b09565b61098b565b6040516101cd9190612b7e565b610243610430366004612be0565b610aa6565b34801561044157600080fd5b506101eb61045036600461287d565b610ab8565b34801561046157600080fd5b50610262610470366004612a00565b610ac3565b34801561048157600080fd5b50610262610aee565b34801561049657600080fd5b506101c16104a5366004612c5c565b610b18565b3480156104b657600080fd5b506102436104c536600461287d565b610b24565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b6060610517610b58565b905090565b600061050782610bf7565b6105318282610c5a565b5050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361057857604051635db5c7cd60e11b815260040160405180910390fd5b600281557f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7465546000805160206131948339815191529034146106155760405162461bcd60e51b815260206004820152602b60248201527f417263616469616e73496e7465726e616c2e5f6d696e743a20496e76616c696460448201526a081c185e48185b5bdd5b9d60aa1b60648201526084015b60405180910390fd5b33600081815260208390526040812054909161063090610d5d565b61063a9190612ca5565b9050816001015481106106b55760405162461bcd60e51b815260206004820152603b60248201527f417263616469616e73496e7465726e616c2e5f6d696e743a2055736572206d6160448201527f78696d756d206d696e74656420746f6b656e7320726561636865640000000000606482015260840161060c565b6106c6336106c1610dc6565b610ddf565b505060019055565b6000610517610dc6565b6106e3838383610df9565b505050565b60006106f48383610e37565b9392505050565b6106e3838383610e78565b600061050782610e93565b61074161073c7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b610ead565b61074a81610eb7565b50565b600061050782610f31565b600061050782610d5d565b6060610517610f75565b61079861073c7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61074a81610f94565b6107ab3382611007565b60005b81811015610531576107c2336106c1610dc6565b806107cc81612cb8565b9150506107ae565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361081757604051635db5c7cd60e11b815260040160405180910390fd5b600281553360009081526000805160206131948339815191526020819052604090912054841161087e5760405162461bcd60e51b8152602060048201526012602482015271105b1b081d1bdad95b9cc818db185a5b595960721b604482015260640161060c565b6040805133602082015280820186905281518082038301815260609091019091526108a984826111b0565b50336000908152602083905260408120546108c49087612ca5565b905060005b818110156108ef576108dd336106c1610dc6565b806108e781612cb8565b9150506108c9565b50336000908152602084905260408120805483929061090f908490612cd1565b9091555050604051819033907fc169c3974ad5176ea41e766768be74079ba8c86a136ed66c5ac85e602782db7d90600090a350506001909155505050565b6060610517611266565b6105318282611285565b60006105177f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74655490565b60608167ffffffffffffffff8111156109a6576109a6612918565b6040519080825280602002602001820160405280156109d957816020015b60608152602001906001900390816109c45790505b50905060005b82811015610a9f57600080308686858181106109fd576109fd612ce4565b9050602002810190610a0f9190612cfa565b604051610a1d929190612d41565b600060405180830381855af49150503d8060008114610a58576040519150601f19603f3d011682016040523d82523d6000602084013e610a5d565b606091505b50915091508115610a8b5780848481518110610a7b57610a7b612ce4565b6020026020010181905250610a95565b3d6000803e3d6000fd5b50506001016109df565b5092915050565b610ab284848484611339565b50505050565b606061050782611378565b6001600160a01b03811660009081526000805160206131948339815191526020526040812054610507565b60006105177f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645490565b60006106f48383611559565b610b4f61073c7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61074a816115a6565b60606000805160206131b48339815191528054610b7490612d51565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba090612d51565b8015610bed5780601f10610bc257610100808354040283529160200191610bed565b820191906000526020600020905b815481529060010190602001808311610bd057829003601f168201915b5050505050905090565b6000610c0282611619565b610c1f5760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b610c65828234611633565b6000610c7082610f31565b9050806001600160a01b0316836001600160a01b031603610ca45760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b03821614801590610cc45750610cc28133611559565b155b15610ce257604051632f5de44f60e01b815260040160405180910390fd5b60008281527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a9602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006001600160a01b038216610d8657604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604090206105079061165d565b600061051760008051602061317483398151915261165d565b610531828260405180602001604052806000815250611667565b610e058383833461169b565b610e0f33826116c6565b610e2c57604051632f5de44f60e01b815260040160405180910390fd5b6106e383838361174c565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604081206106f490836118db565b6106e383838360405180602001604052806000815250611339565b6000610a9f600080516020613174833981519152836118e7565b61074a8133611905565b6040516000805160206131b48339815191529033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea90610f1b907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b3908690612d8b565b60405180910390a2600281016106e38382612e78565b600080610f4c60008051602061317483398151915284611967565b90506001600160a01b03811661050757604051637e1a7d8b60e01b815260040160405180910390fd5b60606000805160206131b48339815191526002018054610b7490612d51565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746454604080519182526020820183905280516000805160206131948339815191529233927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92918290030190a260010155565b6001600160a01b03821660009081527ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb358960205260409020547ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb3588908211156110e25760405162461bcd60e51b815260206004820152604360248201527f57686974656c697374496e7465726e616c2e5f636f6e73756d6557686974656c60448201527f6973743a20616d6f756e74206578636565647320656c656769626c6520616d6f6064820152621d5b9d60ea1b608482015260a40161060c565b6001600160a01b03831660009081526001820160205260408120805484929061110c908490612ca5565b90915550506001600160a01b03831660009081526020829052604081208054849290611139908490612cd1565b90915550506001600160a01b0383166000908152600182016020908152604080832054848352928190205481513381529283018690529082019290925260608101919091527fdb4f4d78cc1c961ddedd2f43596d41d07e607b7517c7106d83f6421215e1f6a79060800160405180910390a1505050565b60008082805190602001206040516020016111cd91815260200190565b604051602081830303815290604052805190602001209050611217846112107f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c0890565b5483611973565b915081610a9f5760405162461bcd60e51b815260206004820152601b60248201527f44617461206e6f7420696e636c7564656420696e206d65726b6c650000000000604482015260640161060c565b60606000805160206131b48339815191526001018054610b7490612d51565b336001600160a01b038316036112ae5760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6113458484843461169b565b61134f33836116c6565b61136c57604051632f5de44f60e01b815260040160405180910390fd5b610ab284848484611a18565b606061138382611619565b61139f57604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812080546000805160206131b48339815191529291906113e990612d51565b80601f016020809104026020016040519081016040528092919081815260200182805461141590612d51565b80156114625780601f1061143757610100808354040283529160200191611462565b820191906000526020600020905b81548152906001019060200180831161144557829003601f168201915b50505050509050600082600201805461147a90612d51565b80601f01602080910402602001604051908101604052809291908181526020018280546114a690612d51565b80156114f35780601f106114c8576101008083540402835291602001916114f3565b820191906000526020600020905b8154815290600101906020018083116114d657829003601f168201915b50505050509050805160000361150b57509392505050565b81511561153e578082604051602001611525929190612f38565b6040516020818303038152906040529350505050919050565b8061154886611a4c565b604051602001611525929190612f38565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746554604080519182526020820183905280516000805160206131948339815191529233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260020155565b600061050760008051602061317483398151915283611b4d565b80156116525760405163b56d7c1b60e01b815260040160405180910390fd5b6106e3838383611b65565b6000610507825490565b6116718383611b84565b61167e6000848484611c79565b6106e357604051639ff10cdd60e01b815260040160405180910390fd5b80156116ba576040516322b1813960e01b815260040160405180910390fd5b610ab284848484611d4a565b60006116d182611619565b6116ee5760405163c1b843ef60e01b815260040160405180910390fd5b60006116f983610f31565b9050806001600160a01b0316846001600160a01b031614806117345750836001600160a01b031661172984610bf7565b6001600160a01b0316145b8061174457506117448185611559565b949350505050565b600061175782610f31565b9050836001600160a01b0316816001600160a01b03161461178b57604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b0383166117b2576040516340311a0960e01b815260040160405180910390fd5b6117bd848484611d6e565b6001600160a01b03841660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604090206000805160206131748339815191529061180e9084611d82565b506001600160a01b038416600090815260028201602052604090206118339084611d8e565b5061183f818486611d9a565b50600083815260038201602052604080822080546001600160a01b0319169055518491906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a482846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60006106f48383611db0565b60008080806118f68686611dfc565b909450925050505b9250929050565b61190f8282611e5f565b61053157611925816001600160a01b0316611e96565b611930836020611ea8565b604051602001611941929190612f67565b60408051601f198184030181529082905262461bcd60e51b825261060c9160040161286a565b60006106f48383611ffb565b600081815b8551811015611a0d57600086828151811061199557611995612ce4565b602002602001015190508083116119d7576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611a04565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50600101611978565b509092149392505050565b611a2384848461174c565b611a2f84848484611c79565b610ab257604051639ff10cdd60e01b815260040160405180910390fd5b606081600003611a735750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a9d5780611a8781612cb8565b9150611a969050600a83612ff2565b9150611a77565b60008167ffffffffffffffff811115611ab857611ab8612918565b6040519080825280601f01601f191660200182016040528015611ae2576020820181803683370190505b5090505b841561174457611af7600183612ca5565b9150611b04600a86613006565b611b0f906030612cd1565b60f81b818381518110611b2457611b24612ce4565b60200101906001600160f81b031916908160001a905350611b46600a86612ff2565b9450611ae6565b600081815260018301602052604081205415156106f4565b80156106e35760405163b56d7c1b60e01b815260040160405180910390fd5b6001600160a01b038216611bab576040516311f2988d60e11b815260040160405180910390fd5b611bb481611619565b15611bd257604051630d86bb7b60e31b815260040160405180910390fd5b611bde60008383611d6e565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902060008051602061317483398151915290611c2f9083611d8e565b50611c3b818385611d9a565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b60006001600160a01b0384163b611c9257506001611744565b6000611d1363150b7a0260e01b33888787604051602401611cb6949392919061301a565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613142603291396001600160a01b038816919061205f565b9050600081806020019051810190611d2b9190613056565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b8015611d69576040516322b1813960e01b815260040160405180910390fd5b610ab2565b611d778161206e565b6106e383838361225c565b60006106f48383612267565b60006106f48383612321565b600061174484846001600160a01b038516612364565b81546000908210611dd45760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110611de957611de9612ce4565b9060005260206000200154905092915050565b815460009081908310611e225760405163022fd82760e31b815260040160405180910390fd5b6000846000018481548110611e3957611e39612ce4565b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206106f49083612403565b60606105076001600160a01b03831660145b60606000611eb7836002613073565b611ec2906002612cd1565b67ffffffffffffffff811115611eda57611eda612918565b6040519080825280601f01601f191660200182016040528015611f04576020820181803683370190505b509050600360fc1b81600081518110611f1f57611f1f612ce4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f4e57611f4e612ce4565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115611fdb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f9e57611f9e612ce4565b1a60f81b828281518110611fb457611fb4612ce4565b60200101906001600160f81b031916908160001a90535060049490941c9360001901611f6d565b5083156106f45760405163c913478560e01b815260040160405180910390fd5b600081815260018301602052604081205480820361202c57604051633d547ec560e21b815260040160405180910390fd5b83600001600182038154811061204457612044612ce4565b90600052602060002090600202016001015491505092915050565b60606117448484600085612425565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43680546000805b828110156121145760006120aa826001612cd1565b600081815260018088016020526040909120015490915060ff161580156120ee57506000868152600386016020908152604080832084845290915290206002015415155b1561210157826120fd81612cb8565b9350505b508061210c81612cb8565b915050612095565b5060008167ffffffffffffffff81111561213057612130612918565b604051908082528060200260200182016040528015612159578160200160208202803683370190505b5090506000805b84811015612207576000612175826001612cd1565b60008181526001808a016020526040909120015490915060ff161580156121b957506000888152600388016020908152604080832084845290915290206002015415155b156121f4576121c888826124e2565b808484815181106121db576121db612ce4565b6020908102919091010152826121f081612cb8565b9350505b50806121ff81612cb8565b915050612160565b5085336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab6384604051612242919061308a565b60405180910390a3612253866125ff565b50505050505050565b6106e3838383612754565b60008181526001830160205260408120548015610a9f5783546000908590600019810190811061229957612299612ce4565b90600052602060002001549050808560000160018403815481106122bf576122bf612ce4565b60009182526020808320909101929092559182526001860190526040902081905583548490806122f1576122f16130ce565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b6000818152600183016020526040812054610507575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b60008281526001840160205260408120548082036123cb5750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556106f4565b828560000160018303815481106123e4576123e4612ce4565b90600052602060002090600202016001018190555060009150506106f4565b6001600160a01b038116600090815260018301602052604081205415156106f4565b6060843b61244657604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b0316858760405161246291906130e4565b60006040518083038185875af1925050503d806000811461249f576040519150601f19603f3d011682016040523d82523d6000602084013e6124a4565b606091505b509150915081156124b85791506117449050565b8051156124c85780518082602001fd5b8360405162461bcd60e51b815260040161060c919061286a565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d439602090815260408083208484529091528082208054600182015460028301548451637921219560e11b81523060048201523360248201526044810192909252606482015260a0608482015260a4810185905292517ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4369492936001600160a01b0390921692839263f242432a9260c4808301939282900301818387803b1580156125b057600080fd5b505af11580156125c4573d6000803e3d6000fd5b505050600095865250505060030160209081526040808420928452919052812080546001600160a01b03191681556001810182905560020155565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43660607f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9835b6126778261165d565b8110156126f257600061268a83836118db565b6000888152600387016020908152604080832084845282529182902080546001820154935194955090936126cc93899387936001600160a01b03169201613100565b6040516020818303038152906040529450505080806126ea90612cb8565b91505061266e565b50815160208301206127076006850182611b4d565b60008781526008860160205260409020549015955061272a906006860190611d82565b506127386006850182611d8e565b5060009586526008909301602052505060409092209190915590565b6106e38383836001600160a01b0382166106e35760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040902080546106e391906127a590612d51565b6000825580601f106127b5575050565b601f01602090049060005260206000209081019061074a91905b808211156127e357600081556001016127cf565b5090565b6001600160e01b03198116811461074a57600080fd5b60006020828403121561280f57600080fd5b81356106f4816127e7565b60005b8381101561283557818101518382015260200161281d565b50506000910152565b6000815180845261285681602086016020860161281a565b601f01601f19169290920160200192915050565b6020815260006106f4602083018461283e565b60006020828403121561288f57600080fd5b5035919050565b80356001600160a01b03811681146128ad57600080fd5b919050565b600080604083850312156128c557600080fd5b6128ce83612896565b946020939093013593505050565b6000806000606084860312156128f157600080fd5b6128fa84612896565b925061290860208501612896565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561295757612957612918565b604052919050565b600067ffffffffffffffff83111561297957612979612918565b61298c601f8401601f191660200161292e565b90508281528383830111156129a057600080fd5b828260208301376000602084830101529392505050565b6000602082840312156129c957600080fd5b813567ffffffffffffffff8111156129e057600080fd5b8201601f810184136129f157600080fd5b6117448482356020840161295f565b600060208284031215612a1257600080fd5b6106f482612896565b60008060408385031215612a2e57600080fd5b8235915060208084013567ffffffffffffffff80821115612a4e57600080fd5b818601915086601f830112612a6257600080fd5b813581811115612a7457612a74612918565b8060051b9150612a8584830161292e565b8181529183018401918481019089841115612a9f57600080fd5b938501935b83851015612abd57843582529385019390850190612aa4565b8096505050505050509250929050565b60008060408385031215612ae057600080fd5b612ae983612896565b915060208301358015158114612afe57600080fd5b809150509250929050565b60008060208385031215612b1c57600080fd5b823567ffffffffffffffff80821115612b3457600080fd5b818501915085601f830112612b4857600080fd5b813581811115612b5757600080fd5b8660208260051b8501011115612b6c57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612bd357603f19888603018452612bc185835161283e565b94509285019290850190600101612ba5565b5092979650505050505050565b60008060008060808587031215612bf657600080fd5b612bff85612896565b9350612c0d60208601612896565b925060408501359150606085013567ffffffffffffffff811115612c3057600080fd5b8501601f81018713612c4157600080fd5b612c508782356020840161295f565b91505092959194509250565b60008060408385031215612c6f57600080fd5b612c7883612896565b9150612c8660208401612896565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561050757610507612c8f565b600060018201612cca57612cca612c8f565b5060010190565b8082018082111561050757610507612c8f565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612d1157600080fd5b83018035915067ffffffffffffffff821115612d2c57600080fd5b6020019150368190038213156118fe57600080fd5b8183823760009101908152919050565b600181811c90821680612d6557607f821691505b602082108103612d8557634e487b7160e01b600052602260045260246000fd5b50919050565b604081526000808454612d9d81612d51565b8060408601526060600180841660008114612dbf5760018114612dd957612e0a565b60ff1985168884015283151560051b880183019550612e0a565b8960005260208060002060005b86811015612e015781548b8201870152908401908201612de6565b8a018501975050505b50505050508281036020840152612e21818561283e565b95945050505050565b601f8211156106e357600081815260208120601f850160051c81016020861015612e515750805b601f850160051c820191505b81811015612e7057828155600101612e5d565b505050505050565b815167ffffffffffffffff811115612e9257612e92612918565b612ea681612ea08454612d51565b84612e2a565b602080601f831160018114612edb5760008415612ec35750858301515b600019600386901b1c1916600185901b178555612e70565b600085815260208120601f198616915b82811015612f0a57888601518255948401946001909101908401612eeb565b5085821015612f285787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008351612f4a81846020880161281a565b835190830190612f5e81836020880161281a565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612f9f81601785016020880161281a565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612fd081602884016020880161281a565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261300157613001612fdc565b500490565b60008261301557613015612fdc565b500690565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261304c608083018461283e565b9695505050505050565b60006020828403121561306857600080fd5b81516106f4816127e7565b808202811582820484141761050757610507612c8f565b6020808252825182820181905260009190848201906040850190845b818110156130c2578351835292840192918401916001016130a6565b50909695505050505050565b634e487b7160e01b600052603160045260246000fd5b600082516130f681846020870161281a565b9190910192915050565b60008551613112818460208a0161281a565b919091019384525060609190911b6bffffffffffffffffffffffff19166020830152603482015260540191905056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a687a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746399574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1a264697066735822122010196668600672b93346f7bf572f0239f7ebda8bde87db2ed058c4840ae7f47b64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c8063714c5398116100ec578063ac9650d81161008a578063ccb4f8d611610064578063ccb4f8d614610455578063db718c9414610475578063e985e9c51461048a578063f4a0a528146104aa57600080fd5b8063ac9650d8146103f5578063b88d4fde14610422578063c87b56dd1461043557600080fd5b8063958944f1116100c6578063958944f11461038b57806395d89b41146103ab578063a22cb465146103c0578063a7f93ebd146103e057600080fd5b8063714c53981461033657806383ccaef71461034b5780638e10d5541461036b57600080fd5b806323b872dd116101595780634f6ccce7116101335780634f6ccce7146102b657806355f804b3146102d65780636352211e146102f657806370a082311461031657600080fd5b806323b872dd146102705780632f745c591461028357806342842e0e146102a357600080fd5b806301ffc9a7146101a157806306fdde03146101d6578063081812fc146101f8578063095ea7b3146102305780631249c58b1461024557806318160ddd1461024d575b600080fd5b3480156101ad57600080fd5b506101c16101bc3660046127fd565b6104ca565b60405190151581526020015b60405180910390f35b3480156101e257600080fd5b506101eb61050d565b6040516101cd919061286a565b34801561020457600080fd5b5061021861021336600461287d565b61051c565b6040516001600160a01b0390911681526020016101cd565b61024361023e3660046128b2565b610527565b005b610243610535565b34801561025957600080fd5b506102626106ce565b6040519081526020016101cd565b61024361027e3660046128dc565b6106d8565b34801561028f57600080fd5b5061026261029e3660046128b2565b6106e8565b6102436102b13660046128dc565b6106fb565b3480156102c257600080fd5b506102626102d136600461287d565b610706565b3480156102e257600080fd5b506102436102f13660046129b7565b610711565b34801561030257600080fd5b5061021861031136600461287d565b61074d565b34801561032257600080fd5b50610262610331366004612a00565b610758565b34801561034257600080fd5b506101eb610763565b34801561035757600080fd5b5061024361036636600461287d565b61076d565b34801561037757600080fd5b5061024361038636600461287d565b6107a1565b34801561039757600080fd5b506102436103a6366004612a1b565b6107d4565b3480156103b757600080fd5b506101eb61094d565b3480156103cc57600080fd5b506102436103db366004612acd565b610957565b3480156103ec57600080fd5b50610262610961565b34801561040157600080fd5b50610415610410366004612b09565b61098b565b6040516101cd9190612b7e565b610243610430366004612be0565b610aa6565b34801561044157600080fd5b506101eb61045036600461287d565b610ab8565b34801561046157600080fd5b50610262610470366004612a00565b610ac3565b34801561048157600080fd5b50610262610aee565b34801561049657600080fd5b506101c16104a5366004612c5c565b610b18565b3480156104b657600080fd5b506102436104c536600461287d565b610b24565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b6060610517610b58565b905090565b600061050782610bf7565b6105318282610c5a565b5050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361057857604051635db5c7cd60e11b815260040160405180910390fd5b600281557f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c7465546000805160206131948339815191529034146106155760405162461bcd60e51b815260206004820152602b60248201527f417263616469616e73496e7465726e616c2e5f6d696e743a20496e76616c696460448201526a081c185e48185b5bdd5b9d60aa1b60648201526084015b60405180910390fd5b33600081815260208390526040812054909161063090610d5d565b61063a9190612ca5565b9050816001015481106106b55760405162461bcd60e51b815260206004820152603b60248201527f417263616469616e73496e7465726e616c2e5f6d696e743a2055736572206d6160448201527f78696d756d206d696e74656420746f6b656e7320726561636865640000000000606482015260840161060c565b6106c6336106c1610dc6565b610ddf565b505060019055565b6000610517610dc6565b6106e3838383610df9565b505050565b60006106f48383610e37565b9392505050565b6106e3838383610e78565b600061050782610e93565b61074161073c7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b610ead565b61074a81610eb7565b50565b600061050782610f31565b600061050782610d5d565b6060610517610f75565b61079861073c7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61074a81610f94565b6107ab3382611007565b60005b81811015610531576107c2336106c1610dc6565b806107cc81612cb8565b9150506107ae565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361081757604051635db5c7cd60e11b815260040160405180910390fd5b600281553360009081526000805160206131948339815191526020819052604090912054841161087e5760405162461bcd60e51b8152602060048201526012602482015271105b1b081d1bdad95b9cc818db185a5b595960721b604482015260640161060c565b6040805133602082015280820186905281518082038301815260609091019091526108a984826111b0565b50336000908152602083905260408120546108c49087612ca5565b905060005b818110156108ef576108dd336106c1610dc6565b806108e781612cb8565b9150506108c9565b50336000908152602084905260408120805483929061090f908490612cd1565b9091555050604051819033907fc169c3974ad5176ea41e766768be74079ba8c86a136ed66c5ac85e602782db7d90600090a350506001909155505050565b6060610517611266565b6105318282611285565b60006105177f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74655490565b60608167ffffffffffffffff8111156109a6576109a6612918565b6040519080825280602002602001820160405280156109d957816020015b60608152602001906001900390816109c45790505b50905060005b82811015610a9f57600080308686858181106109fd576109fd612ce4565b9050602002810190610a0f9190612cfa565b604051610a1d929190612d41565b600060405180830381855af49150503d8060008114610a58576040519150601f19603f3d011682016040523d82523d6000602084013e610a5d565b606091505b50915091508115610a8b5780848481518110610a7b57610a7b612ce4565b6020026020010181905250610a95565b3d6000803e3d6000fd5b50506001016109df565b5092915050565b610ab284848484611339565b50505050565b606061050782611378565b6001600160a01b03811660009081526000805160206131948339815191526020526040812054610507565b60006105177f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74645490565b60006106f48383611559565b610b4f61073c7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61074a816115a6565b60606000805160206131b48339815191528054610b7490612d51565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba090612d51565b8015610bed5780601f10610bc257610100808354040283529160200191610bed565b820191906000526020600020905b815481529060010190602001808311610bd057829003601f168201915b5050505050905090565b6000610c0282611619565b610c1f5760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b610c65828234611633565b6000610c7082610f31565b9050806001600160a01b0316836001600160a01b031603610ca45760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b03821614801590610cc45750610cc28133611559565b155b15610ce257604051632f5de44f60e01b815260040160405180910390fd5b60008281527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a9602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006001600160a01b038216610d8657604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604090206105079061165d565b600061051760008051602061317483398151915261165d565b610531828260405180602001604052806000815250611667565b610e058383833461169b565b610e0f33826116c6565b610e2c57604051632f5de44f60e01b815260040160405180910390fd5b6106e383838361174c565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604081206106f490836118db565b6106e383838360405180602001604052806000815250611339565b6000610a9f600080516020613174833981519152836118e7565b61074a8133611905565b6040516000805160206131b48339815191529033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea90610f1b907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b3908690612d8b565b60405180910390a2600281016106e38382612e78565b600080610f4c60008051602061317483398151915284611967565b90506001600160a01b03811661050757604051637e1a7d8b60e01b815260040160405180910390fd5b60606000805160206131b48339815191526002018054610b7490612d51565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746454604080519182526020820183905280516000805160206131948339815191529233927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92918290030190a260010155565b6001600160a01b03821660009081527ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb358960205260409020547ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb3588908211156110e25760405162461bcd60e51b815260206004820152604360248201527f57686974656c697374496e7465726e616c2e5f636f6e73756d6557686974656c60448201527f6973743a20616d6f756e74206578636565647320656c656769626c6520616d6f6064820152621d5b9d60ea1b608482015260a40161060c565b6001600160a01b03831660009081526001820160205260408120805484929061110c908490612ca5565b90915550506001600160a01b03831660009081526020829052604081208054849290611139908490612cd1565b90915550506001600160a01b0383166000908152600182016020908152604080832054848352928190205481513381529283018690529082019290925260608101919091527fdb4f4d78cc1c961ddedd2f43596d41d07e607b7517c7106d83f6421215e1f6a79060800160405180910390a1505050565b60008082805190602001206040516020016111cd91815260200190565b604051602081830303815290604052805190602001209050611217846112107f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c0890565b5483611973565b915081610a9f5760405162461bcd60e51b815260206004820152601b60248201527f44617461206e6f7420696e636c7564656420696e206d65726b6c650000000000604482015260640161060c565b60606000805160206131b48339815191526001018054610b7490612d51565b336001600160a01b038316036112ae5760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6113458484843461169b565b61134f33836116c6565b61136c57604051632f5de44f60e01b815260040160405180910390fd5b610ab284848484611a18565b606061138382611619565b61139f57604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812080546000805160206131b48339815191529291906113e990612d51565b80601f016020809104026020016040519081016040528092919081815260200182805461141590612d51565b80156114625780601f1061143757610100808354040283529160200191611462565b820191906000526020600020905b81548152906001019060200180831161144557829003601f168201915b50505050509050600082600201805461147a90612d51565b80601f01602080910402602001604051908101604052809291908181526020018280546114a690612d51565b80156114f35780601f106114c8576101008083540402835291602001916114f3565b820191906000526020600020905b8154815290600101906020018083116114d657829003601f168201915b50505050509050805160000361150b57509392505050565b81511561153e578082604051602001611525929190612f38565b6040516020818303038152906040529350505050919050565b8061154886611a4c565b604051602001611525929190612f38565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746554604080519182526020820183905280516000805160206131948339815191529233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260020155565b600061050760008051602061317483398151915283611b4d565b80156116525760405163b56d7c1b60e01b815260040160405180910390fd5b6106e3838383611b65565b6000610507825490565b6116718383611b84565b61167e6000848484611c79565b6106e357604051639ff10cdd60e01b815260040160405180910390fd5b80156116ba576040516322b1813960e01b815260040160405180910390fd5b610ab284848484611d4a565b60006116d182611619565b6116ee5760405163c1b843ef60e01b815260040160405180910390fd5b60006116f983610f31565b9050806001600160a01b0316846001600160a01b031614806117345750836001600160a01b031661172984610bf7565b6001600160a01b0316145b8061174457506117448185611559565b949350505050565b600061175782610f31565b9050836001600160a01b0316816001600160a01b03161461178b57604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b0383166117b2576040516340311a0960e01b815260040160405180910390fd5b6117bd848484611d6e565b6001600160a01b03841660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604090206000805160206131748339815191529061180e9084611d82565b506001600160a01b038416600090815260028201602052604090206118339084611d8e565b5061183f818486611d9a565b50600083815260038201602052604080822080546001600160a01b0319169055518491906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a482846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60006106f48383611db0565b60008080806118f68686611dfc565b909450925050505b9250929050565b61190f8282611e5f565b61053157611925816001600160a01b0316611e96565b611930836020611ea8565b604051602001611941929190612f67565b60408051601f198184030181529082905262461bcd60e51b825261060c9160040161286a565b60006106f48383611ffb565b600081815b8551811015611a0d57600086828151811061199557611995612ce4565b602002602001015190508083116119d7576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611a04565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50600101611978565b509092149392505050565b611a2384848461174c565b611a2f84848484611c79565b610ab257604051639ff10cdd60e01b815260040160405180910390fd5b606081600003611a735750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a9d5780611a8781612cb8565b9150611a969050600a83612ff2565b9150611a77565b60008167ffffffffffffffff811115611ab857611ab8612918565b6040519080825280601f01601f191660200182016040528015611ae2576020820181803683370190505b5090505b841561174457611af7600183612ca5565b9150611b04600a86613006565b611b0f906030612cd1565b60f81b818381518110611b2457611b24612ce4565b60200101906001600160f81b031916908160001a905350611b46600a86612ff2565b9450611ae6565b600081815260018301602052604081205415156106f4565b80156106e35760405163b56d7c1b60e01b815260040160405180910390fd5b6001600160a01b038216611bab576040516311f2988d60e11b815260040160405180910390fd5b611bb481611619565b15611bd257604051630d86bb7b60e31b815260040160405180910390fd5b611bde60008383611d6e565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902060008051602061317483398151915290611c2f9083611d8e565b50611c3b818385611d9a565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b60006001600160a01b0384163b611c9257506001611744565b6000611d1363150b7a0260e01b33888787604051602401611cb6949392919061301a565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613142603291396001600160a01b038816919061205f565b9050600081806020019051810190611d2b9190613056565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b8015611d69576040516322b1813960e01b815260040160405180910390fd5b610ab2565b611d778161206e565b6106e383838361225c565b60006106f48383612267565b60006106f48383612321565b600061174484846001600160a01b038516612364565b81546000908210611dd45760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110611de957611de9612ce4565b9060005260206000200154905092915050565b815460009081908310611e225760405163022fd82760e31b815260040160405180910390fd5b6000846000018481548110611e3957611e39612ce4565b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206106f49083612403565b60606105076001600160a01b03831660145b60606000611eb7836002613073565b611ec2906002612cd1565b67ffffffffffffffff811115611eda57611eda612918565b6040519080825280601f01601f191660200182016040528015611f04576020820181803683370190505b509050600360fc1b81600081518110611f1f57611f1f612ce4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f4e57611f4e612ce4565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115611fdb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f9e57611f9e612ce4565b1a60f81b828281518110611fb457611fb4612ce4565b60200101906001600160f81b031916908160001a90535060049490941c9360001901611f6d565b5083156106f45760405163c913478560e01b815260040160405180910390fd5b600081815260018301602052604081205480820361202c57604051633d547ec560e21b815260040160405180910390fd5b83600001600182038154811061204457612044612ce4565b90600052602060002090600202016001015491505092915050565b60606117448484600085612425565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43680546000805b828110156121145760006120aa826001612cd1565b600081815260018088016020526040909120015490915060ff161580156120ee57506000868152600386016020908152604080832084845290915290206002015415155b1561210157826120fd81612cb8565b9350505b508061210c81612cb8565b915050612095565b5060008167ffffffffffffffff81111561213057612130612918565b604051908082528060200260200182016040528015612159578160200160208202803683370190505b5090506000805b84811015612207576000612175826001612cd1565b60008181526001808a016020526040909120015490915060ff161580156121b957506000888152600388016020908152604080832084845290915290206002015415155b156121f4576121c888826124e2565b808484815181106121db576121db612ce4565b6020908102919091010152826121f081612cb8565b9350505b50806121ff81612cb8565b915050612160565b5085336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab6384604051612242919061308a565b60405180910390a3612253866125ff565b50505050505050565b6106e3838383612754565b60008181526001830160205260408120548015610a9f5783546000908590600019810190811061229957612299612ce4565b90600052602060002001549050808560000160018403815481106122bf576122bf612ce4565b60009182526020808320909101929092559182526001860190526040902081905583548490806122f1576122f16130ce565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b6000818152600183016020526040812054610507575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b60008281526001840160205260408120548082036123cb5750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556106f4565b828560000160018303815481106123e4576123e4612ce4565b90600052602060002090600202016001018190555060009150506106f4565b6001600160a01b038116600090815260018301602052604081205415156106f4565b6060843b61244657604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b0316858760405161246291906130e4565b60006040518083038185875af1925050503d806000811461249f576040519150601f19603f3d011682016040523d82523d6000602084013e6124a4565b606091505b509150915081156124b85791506117449050565b8051156124c85780518082602001fd5b8360405162461bcd60e51b815260040161060c919061286a565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d439602090815260408083208484529091528082208054600182015460028301548451637921219560e11b81523060048201523360248201526044810192909252606482015260a0608482015260a4810185905292517ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4369492936001600160a01b0390921692839263f242432a9260c4808301939282900301818387803b1580156125b057600080fd5b505af11580156125c4573d6000803e3d6000fd5b505050600095865250505060030160209081526040808420928452919052812080546001600160a01b03191681556001810182905560020155565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43660607f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9835b6126778261165d565b8110156126f257600061268a83836118db565b6000888152600387016020908152604080832084845282529182902080546001820154935194955090936126cc93899387936001600160a01b03169201613100565b6040516020818303038152906040529450505080806126ea90612cb8565b91505061266e565b50815160208301206127076006850182611b4d565b60008781526008860160205260409020549015955061272a906006860190611d82565b506127386006850182611d8e565b5060009586526008909301602052505060409092209190915590565b6106e38383836001600160a01b0382166106e35760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040902080546106e391906127a590612d51565b6000825580601f106127b5575050565b601f01602090049060005260206000209081019061074a91905b808211156127e357600081556001016127cf565b5090565b6001600160e01b03198116811461074a57600080fd5b60006020828403121561280f57600080fd5b81356106f4816127e7565b60005b8381101561283557818101518382015260200161281d565b50506000910152565b6000815180845261285681602086016020860161281a565b601f01601f19169290920160200192915050565b6020815260006106f4602083018461283e565b60006020828403121561288f57600080fd5b5035919050565b80356001600160a01b03811681146128ad57600080fd5b919050565b600080604083850312156128c557600080fd5b6128ce83612896565b946020939093013593505050565b6000806000606084860312156128f157600080fd5b6128fa84612896565b925061290860208501612896565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561295757612957612918565b604052919050565b600067ffffffffffffffff83111561297957612979612918565b61298c601f8401601f191660200161292e565b90508281528383830111156129a057600080fd5b828260208301376000602084830101529392505050565b6000602082840312156129c957600080fd5b813567ffffffffffffffff8111156129e057600080fd5b8201601f810184136129f157600080fd5b6117448482356020840161295f565b600060208284031215612a1257600080fd5b6106f482612896565b60008060408385031215612a2e57600080fd5b8235915060208084013567ffffffffffffffff80821115612a4e57600080fd5b818601915086601f830112612a6257600080fd5b813581811115612a7457612a74612918565b8060051b9150612a8584830161292e565b8181529183018401918481019089841115612a9f57600080fd5b938501935b83851015612abd57843582529385019390850190612aa4565b8096505050505050509250929050565b60008060408385031215612ae057600080fd5b612ae983612896565b915060208301358015158114612afe57600080fd5b809150509250929050565b60008060208385031215612b1c57600080fd5b823567ffffffffffffffff80821115612b3457600080fd5b818501915085601f830112612b4857600080fd5b813581811115612b5757600080fd5b8660208260051b8501011115612b6c57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612bd357603f19888603018452612bc185835161283e565b94509285019290850190600101612ba5565b5092979650505050505050565b60008060008060808587031215612bf657600080fd5b612bff85612896565b9350612c0d60208601612896565b925060408501359150606085013567ffffffffffffffff811115612c3057600080fd5b8501601f81018713612c4157600080fd5b612c508782356020840161295f565b91505092959194509250565b60008060408385031215612c6f57600080fd5b612c7883612896565b9150612c8660208401612896565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561050757610507612c8f565b600060018201612cca57612cca612c8f565b5060010190565b8082018082111561050757610507612c8f565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612d1157600080fd5b83018035915067ffffffffffffffff821115612d2c57600080fd5b6020019150368190038213156118fe57600080fd5b8183823760009101908152919050565b600181811c90821680612d6557607f821691505b602082108103612d8557634e487b7160e01b600052602260045260246000fd5b50919050565b604081526000808454612d9d81612d51565b8060408601526060600180841660008114612dbf5760018114612dd957612e0a565b60ff1985168884015283151560051b880183019550612e0a565b8960005260208060002060005b86811015612e015781548b8201870152908401908201612de6565b8a018501975050505b50505050508281036020840152612e21818561283e565b95945050505050565b601f8211156106e357600081815260208120601f850160051c81016020861015612e515750805b601f850160051c820191505b81811015612e7057828155600101612e5d565b505050505050565b815167ffffffffffffffff811115612e9257612e92612918565b612ea681612ea08454612d51565b84612e2a565b602080601f831160018114612edb5760008415612ec35750858301515b600019600386901b1c1916600185901b178555612e70565b600085815260208120601f198616915b82811015612f0a57888601518255948401946001909101908401612eeb565b5085821015612f285787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008351612f4a81846020880161281a565b835190830190612f5e81836020880161281a565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612f9f81601785016020880161281a565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612fd081602884016020880161281a565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261300157613001612fdc565b500490565b60008261301557613015612fdc565b500690565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261304c608083018461283e565b9695505050505050565b60006020828403121561306857600080fd5b81516106f4816127e7565b808202811582820484141761050757610507612c8f565b6020808252825182820181905260009190848201906040850190845b818110156130c2578351835292840192918401916001016130a6565b50909695505050505050565b634e487b7160e01b600052603160045260246000fd5b600082516130f681846020870161281a565b9190910192915050565b60008551613112818460208a0161281a565b919091019384525060609190911b6bffffffffffffffffffffffff19166020830152603482015260540191905056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a687a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746399574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1a264697066735822122010196668600672b93346f7bf572f0239f7ebda8bde87db2ed058c4840ae7f47b64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "address to be approved",
          "tokenId": "token to approve"
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "quantity of tokens held"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "address approved to spend token"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "array of function call data payloads"
        },
        "returns": {
          "results": "array of function call results"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token owner"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "data payload",
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address to be approved",
          "status": "approval status"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "position in global token list to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "position in owner's token list to query",
          "owner": "token holder to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total supply"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "grant approval to given account to spend token"
      },
      "balanceOf(address)": {
        "notice": "query the balance of given address"
      },
      "getApproved(uint256)": {
        "notice": "get approval status for given token"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "multicall(bytes[])": {
        "notice": "batch function calls to the contract and return the results of each"
      },
      "name()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "ownerOf(uint256)": {
        "notice": "query the owner of given token"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given account to spend all tokens held by sender"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "symbol()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "tokenByIndex(uint256)": {
        "notice": "get token at given internal storage index"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "get token of given owner at given internal storage index"
      },
      "totalSupply()": {
        "notice": "get total token supply"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, without checking for ERC721Receiver implementation if applicable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}