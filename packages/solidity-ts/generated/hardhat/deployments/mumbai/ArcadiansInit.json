{
  "address": "0x55f82884D4a5d8a4FF492587AfEDF389b8818432",
  "abi": [
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ArcadianClaimedMerkle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldArcadiansAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newArcadiansAddress",
          "type": "address"
        }
      ],
      "name": "ArcadiansAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldBaseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "BaseURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldInventoryAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newInventoryAddress",
          "type": "address"
        }
      ],
      "name": "InventoryAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "ItemsAllowedInSlotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxMintPerUser",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxMintPerUser",
          "type": "uint256"
        }
      ],
      "name": "MaxMintPerUserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMintPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintPrice",
          "type": "uint256"
        }
      ],
      "name": "MintPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "unequippable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum InventoryStorage.SlotCategory",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "SlotCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalElegibleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimedAmount",
          "type": "uint256"
        }
      ],
      "name": "WhitelistBalanceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxMintPerUser",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0838f57505da9778d24b92ed51104e4abe0a54e672dcbef230cd1c779700c9a2",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0x55f82884D4a5d8a4FF492587AfEDF389b8818432",
    "transactionIndex": 1,
    "gasUsed": "447877",
    "logsBloom": "0x
    "blockHash": "0x72f192f2edd9d8c436bf4b88f804915b729d5ba8cf9d9f95c714920da9dad1a0",
    "transactionHash": "0x0838f57505da9778d24b92ed51104e4abe0a54e672dcbef230cd1c779700c9a2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 33769827,
        "transactionHash": "0x0838f57505da9778d24b92ed51104e4abe0a54e672dcbef230cd1c779700c9a2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003fa5ab9b1877b000000000000000000000000000000000000000000000000015c9e707ca58d8cf000000000000000000000000000000000000000000000518515e46145d0f4e75000000000000000000000000000000000000000000000000158a415c2f40611f000000000000000000000000000000000000000000000518519debbff827c625",
        "logIndex": 2,
        "blockHash": "0x72f192f2edd9d8c436bf4b88f804915b729d5ba8cf9d9f95c714920da9dad1a0"
      }
    ],
    "blockNumber": 33769827,
    "cumulativeGasUsed": "476683",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "d5e8d2bfc62fcce0683f8c2aa0a5fb01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ArcadianClaimedMerkle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldArcadiansAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newArcadiansAddress\",\"type\":\"address\"}],\"name\":\"ArcadiansAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldBaseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldInventoryAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newInventoryAddress\",\"type\":\"address\"}],\"name\":\"InventoryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"ItemsAllowedInSlotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxMintPerUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxMintPerUser\",\"type\":\"uint256\"}],\"name\":\"MaxMintPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"MintPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unequippable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"SlotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalElegibleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"}],\"name\":\"WhitelistBalanceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/arcadians/ArcadiansInit.sol\":\"ArcadiansInit\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Merkle tree verification utility\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @notice verify whether given leaf is contained within Merkle tree defined by given root\\n     * @param proof proof that Merkle tree contains given leaf\\n     * @param root Merkle tree root\\n     * @param leaf element whose presence in Merkle tree to prove\\n     * @return whether leaf is proven to be contained within Merkle tree defined by root\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            bytes32 computedHash = leaf;\\n\\n            for (uint256 i = 0; i < proof.length; i++) {\\n                bytes32 proofElement = proof[i];\\n\\n                if (computedHash <= proofElement) {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(computedHash, proofElement)\\n                    );\\n                } else {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(proofElement, computedHash)\\n                    );\\n                }\\n            }\\n\\n            return computedHash == root;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3a6592d4e2c90f92ccae441401241b4a8837e95a15f3c3887abc544e85e362c\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 minValue = bytes32(type(uint256).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(address[] memory array) internal pure returns (address) {\\n        address minValue = address(type(uint160).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 minValue = type(uint256).max;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 maxValue = bytes32(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(address[] memory array) internal pure returns (address) {\\n        address maxValue = address(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 maxValue = 0;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86a2953855b8df5a5ded23a79016f1584b6321ef2c04f44466ebfbb6d23e728c\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansInit.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { MerkleStorage } from \\\"../merkle/MerkleStorage.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { ArcadiansInternal } from \\\"./ArcadiansInternal.sol\\\";\\n\\ncontract ArcadiansInit is RolesInternal, ArcadiansInternal {\\n    function init(bytes32 merkleRoot, string calldata baseUri, uint maxMintPerUser, uint mintPrice) external {\\n        MerkleStorage.Layout storage es = MerkleStorage.layout();\\n        es.merkleRoot = merkleRoot;\\n\\n        // Roles facet\\n        _initRoles();\\n\\n        // Arcadians facet\\n        _setBaseURI(baseUri);\\n        _setMaxMintPerUser(maxMintPerUser);\\n        _setMintPrice(mintPrice);\\n    }\\n}\\n\",\"keccak256\":\"0x4e9ccbdcd147aa157e9968f5767df04cf194da77174178279be374b1a3e8ad1b\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ERC721MetadataStorage } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\\\";\\nimport { UintUtils } from '@solidstate/contracts/utils/UintUtils.sol';\\nimport { ArcadiansStorage } from \\\"./ArcadiansStorage.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { WhitelistInternal } from \\\"../whitelist/WhitelistInternal.sol\\\";\\nimport { MerkleInternal } from \\\"../merkle/MerkleInternal.sol\\\";\\nimport { InventoryInternal } from \\\"../inventory/InventoryInternal.sol\\\";\\n\\ncontract ArcadiansInternal is RolesInternal, WhitelistInternal, MerkleInternal, InventoryInternal {\\n\\n    event MaxMintPerUserChanged(address indexed by, uint oldMaxMintPerUser, uint newMaxMintPerUser);\\n    event MintPriceChanged(address indexed by, uint oldMintPrice, uint newMintPrice);\\n    event BaseURIChanged(address indexed by, string oldBaseURI, string newBaseURI);\\n    event InventoryAddressChanged(address indexed by, address indexed oldInventoryAddress, address indexed newInventoryAddress);\\n    event ArcadianClaimedMerkle(address indexed to, uint256 indexed amount);\\n\\n    using UintUtils for uint256;\\n\\n    function _setBaseURI(string memory newBaseURI) internal {\\n        ERC721MetadataStorage.Layout storage ERC721SL = ERC721MetadataStorage.layout();\\n        emit BaseURIChanged(msg.sender, ERC721SL.baseURI, newBaseURI);\\n        ERC721SL.baseURI = newBaseURI;\\n    }\\n\\n    function _baseURI() internal view returns (string memory) {\\n        return ERC721MetadataStorage.layout().baseURI;\\n    }\\n\\n    function _claimedAmountMerkle(address account) internal view returns (uint) {\\n        return ArcadiansStorage.layout().amountClaimed[account];\\n    }\\n\\n    function _setMaxMintPerUser(uint newMaxMintPerUser) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MaxMintPerUserChanged(msg.sender, arcadiansSL.maxMintPerUser, newMaxMintPerUser);\\n        arcadiansSL.maxMintPerUser = newMaxMintPerUser;\\n    }\\n\\n    function _mintPrice() internal view returns (uint) {\\n        return ArcadiansStorage.layout().mintPrice;\\n    }\\n\\n    function _setMintPrice(uint newMintPrice) internal {\\n        ArcadiansStorage.Layout storage arcadiansSL = ArcadiansStorage.layout();\\n        emit MintPriceChanged(msg.sender, arcadiansSL.mintPrice, newMintPrice);\\n        arcadiansSL.mintPrice = newMintPrice;\\n    }\\n\\n    function _maxMintPerUser() internal view returns (uint) {\\n        return ArcadiansStorage.layout().maxMintPerUser;\\n    }\\n}\",\"keccak256\":\"0x94a48d94cf571633355adbe62c0fb575c1a50fb76c1ab6f1c4445bff370058ce\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/arcadians/ArcadiansStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary ArcadiansStorage {\\n\\n    bytes32 constant ARCADIANS_STORAGE_POSITION =\\n        keccak256(\\\"equippable.storage.position\\\");\\n\\n    struct Layout {\\n        // wallet address => amount claimed \\n        mapping(address => uint) amountClaimed;\\n        uint maxMintPerUser;\\n        uint mintPrice;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ARCADIANS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xde06cba93d070cfdf7260ea85d4e914a9fa7ead08590137166bf8b885ad1f3b9\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { AddressUtils } from \\\"@solidstate/contracts/utils/AddressUtils.sol\\\";\\nimport { ArrayUtils } from \\\"@solidstate/contracts/utils/ArrayUtils.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { IERC1155 } from \\\"@solidstate/contracts/interfaces/IERC1155.sol\\\";\\n\\ncontract InventoryInternal is\\n    ReentrancyGuard,\\n    RolesInternal\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using AddressUtils for address;\\n\\n    event ArcadiansAddressChanged(address indexed oldArcadiansAddress, address indexed newArcadiansAddress);\\n\\n    event ItemsAllowedInSlotUpdated(\\n        address indexed by,\\n        uint slotId\\n    );\\n\\n    event ItemsEquipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event ItemsUnequipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event SlotCreated(\\n        address indexed by,\\n        uint slotId,\\n        bool unequippable,\\n        InventoryStorage.SlotCategory category\\n    );\\n\\n    modifier onlyValidSlot(uint slotId) {\\n        require(slotId != 0, \\\"InventoryFacet: Slot id can't be zero\\\");\\n        require(slotId <= InventoryStorage.layout().numSlots, \\\"InventoryFacet: Invalid slot\\\");\\n        _;\\n    }\\n\\n    modifier onlyArcadianOwner(uint arcadianId) {\\n        IERC721 arcadiansContract = IERC721(address(this));\\n        require(\\n            msg.sender == arcadiansContract.ownerOf(arcadianId),\\n            \\\"InventoryFacet: Message sender is not owner of the arcadian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyValidAddress(address _address) {\\n        require(_address != address(0), \\\"Invalid Address\\\");\\n        _;\\n    }\\n\\n    modifier onlyContract(address _address) {\\n        require(_address.isContract(), \\\"InventoryFacet: Address given is not a contract\\\");\\n        _;\\n    }\\n\\n    function _numSlots() internal view returns (uint) {\\n        return InventoryStorage.layout().numSlots;\\n    }\\n\\n    struct ItemInSlot {\\n        uint slotId;\\n        address contractAddress;\\n        uint itemId;\\n    }\\n\\n    function _equip(\\n        uint arcadianId,\\n        uint slotId,\\n        InventoryStorage.Item calldata item\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        require(inventorySL.itemSlot[item.contractAddress][item.id] == slotId, \\\"InventoryFacet.equip: Item not elegible for slot\\\");\\n        require(!inventorySL.slots[slotId].unequippable || inventorySL.equippedItems[arcadianId][slotId].contractAddress == address(0), \\\"InventoryFacet.equip: Unequippable slots already has an item\\\");\\n        _unequipUnchecked(arcadianId, slotId);\\n\\n        IERC1155 erc1155Contract = IERC1155(item.contractAddress);\\n        require(\\n            erc1155Contract.balanceOf(msg.sender, item.id) > 0,\\n            \\\"InventoryFacet.equip: Message sender does not own enough of that item to equip\\\"\\n        );\\n\\n        erc1155Contract.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            item.id,\\n            1,\\n            ''\\n        );\\n\\n        uint[] memory slotsIds = new uint[](1);\\n        slotsIds[0] = slotId;\\n        emit ItemsEquipped(\\n            msg.sender,\\n            arcadianId,\\n            slotsIds\\n        );\\n\\n        inventorySL.equippedItems[arcadianId][slotId] = item;\\n        require(_hashBaseItemsUnchecked(arcadianId), \\\"InventoryFacet._equip: Base items are not unique\\\");\\n    }\\n\\n    function _equipBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds,\\n        InventoryStorage.Item[] calldata items\\n    ) internal {\\n        // current: 1954977\\n        require(slotIds.length > 0, \\\"InventoryFacet._equipBatch: Should specify at least one slot\\\");\\n        require(slotIds.length == items.length, \\\"InventoryFacet._equipBatch: Input data length mismatch\\\");\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            uint slotId = slotIds[i];\\n            require(\\n                slotId > 0 && slotId <= numSlots, \\n                \\\"InventoryFacet._equipBatch: Invalid slot\\\"\\n            );\\n            require(\\n                inventorySL.itemSlot[items[i].contractAddress][items[i].id] == slotId, \\n                \\\"InventoryFacet._equipBatch: Item not elegible for slot\\\"\\n            );\\n\\n            IERC1155 erc1155Contract = IERC1155(items[i].contractAddress);\\n            require(\\n                erc1155Contract.balanceOf(msg.sender, items[i].id) > 0,\\n                \\\"InventoryFacet.equip: Sender has insufficient item balance\\\"\\n            );\\n\\n            InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n            require(\\n                !inventorySL.slots[slotId].unequippable || existingItem.contractAddress == address(0), \\n                \\\"InventoryFacet.equip: Unequippable slots already has an item\\\"\\n            );\\n\\n            if (existingItem.contractAddress == items[i].contractAddress && existingItem.id == items[i].id) {\\n                continue;\\n            }\\n\\n            if (existingItem.contractAddress != address(0)) {\\n                erc1155Contract.safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    existingItem.id,\\n                    1,\\n                    ''\\n                );\\n            }\\n\\n            inventorySL.equippedItems[arcadianId][slotId] = items[i];\\n\\n            erc1155Contract.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                items[i].id,\\n                1,\\n                ''\\n            );\\n        }\\n\\n        emit ItemsEquipped(\\n            msg.sender,\\n            arcadianId,\\n            slotIds\\n        );\\n\\n        require(_hashBaseItemsUnchecked(arcadianId), \\\"InventoryFacet._equipBatch: Base items are not unique\\\");\\n    }\\n\\n    function _unequipUnchecked(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n        IERC1155 erc1155Contract = IERC1155(existingItem.contractAddress);\\n        if (existingItem.contractAddress != address(0)) {\\n            erc1155Contract.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                existingItem.id,\\n                1,\\n                ''\\n            );\\n            delete inventorySL.equippedItems[arcadianId][slotId];\\n        }\\n    }\\n\\n    function _unequip(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal onlyArcadianOwner(arcadianId) onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        require(!inventorySL.slots[slotId].unequippable, \\\"InventoryFacet._unequip: Slot is unequippable\\\");\\n        require(inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0), \\\"InventoryFacet._unequip: Slot not equipped\\\");\\n        \\n        _unequipUnchecked(arcadianId, slotId);\\n\\n        uint[] memory slots = new uint[](1);\\n        slots[0] = slotId;\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slots\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _unequipBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        require(slotIds.length > 0, \\\"InventoryFacet._unequip: Should specify at least one slot\\\");\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            uint slotId = slotIds[i];\\n            require(slotId > 0 && slotId <= inventorySL.numSlots, \\\"InventoryFacet._unequip: Invalid slot\\\");\\n            require(!inventorySL.slots[slotId].unequippable, \\\"InventoryFacet._unequip: Slot is unequippable\\\");\\n            require(inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0), \\\"InventoryFacet._unequip: Slot not equipped\\\");\\n            \\n            _unequipUnchecked(arcadianId, slotId);\\n        }\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slotIds\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _unequipAllUnchecked(\\n        uint arcadianId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        uint numUnequippableSlots;\\n        for (uint slotId = 1; slotId <= numSlots; slotId++) {\\n            if (!inventorySL.slots[slotId].unequippable && inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0)) {\\n                numUnequippableSlots++;\\n            }\\n        }\\n\\n        uint[] memory unequippedSlots = new uint[](numUnequippableSlots);\\n        uint counter;\\n        for (uint slotId = 1; slotId <= numSlots; slotId++) {\\n            if (!inventorySL.slots[slotId].unequippable && inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0)) {\\n                _unequipUnchecked(arcadianId, slotId);\\n                unequippedSlots[counter] = slotId;\\n                counter++;\\n            }\\n        }\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            unequippedSlots\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _equipped(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal view returns (ItemInSlot memory) {\\n        // return InventoryStorage.layout().equippedItems[arcadianId][slotId];\\n        InventoryStorage.Item storage item = InventoryStorage.layout().equippedItems[arcadianId][slotId];\\n        return ItemInSlot(slotId, item.contractAddress, item.id);\\n    }\\n\\n    function _equippedAll(\\n        uint arcadianId\\n    ) internal view returns (ItemInSlot[] memory equippedSlots) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        equippedSlots = new ItemInSlot[](numSlots);\\n        for (uint i = 0; i < numSlots; i++) {\\n            uint slot = i + 1;\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slot];\\n            equippedSlots[i] = ItemInSlot(slot, equippedItem.contractAddress, equippedItem.id);\\n        }\\n    }\\n\\n    function _isArcadianUnique(\\n        uint arcadianId,\\n        uint[] calldata slotsIds,\\n        InventoryStorage.Item[] calldata items\\n    ) internal view returns (bool) {\\n        require(slotsIds.length == items.length, \\\"InventoryFacet._isArcadianUnique: Input data length mismatch\\\");\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n\\n        uint baseSlotsLength = baseSlots.length();\\n        uint[] memory baseSlotsIds = new uint[](baseSlotsLength);\\n        InventoryStorage.Item[] memory baseItems = new InventoryStorage.Item[](baseSlotsLength);\\n        uint numSlots = inventorySL.numSlots;\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            require(slotId > 0 && slotId <= numSlots, \\\"InventoryFacet._isArcadianUnique: Invalid slot\\\");\\n            baseSlotsIds[i] = slotId;\\n            baseItems[i] = inventorySL.equippedItems[arcadianId][slotId];\\n        }\\n\\n        for (uint i = 0; i < slotsIds.length; i++) {\\n            if (!baseSlots.contains(slotsIds[i])) continue;\\n            baseSlotsIds[i] = slotsIds[i];\\n            baseItems[i].contractAddress = items[i].contractAddress;\\n            baseItems[i].id = items[i].id;\\n        }\\n\\n        bytes memory encodedItems;\\n        for (uint i = 0; i < baseSlotsIds.length; i++) {\\n            encodedItems = abi.encodePacked(encodedItems, baseSlotsIds[i], baseItems[i].contractAddress, baseItems[i].id);\\n        }\\n\\n        return !inventorySL.baseItemsHashes.contains(keccak256(encodedItems));\\n    }\\n\\n    function _hashBaseItemsUnchecked(\\n        uint arcadianId\\n    ) internal returns (bool isUnique) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        bytes memory encodedItems;\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n        uint baseSlotsLength = baseSlots.length();\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotId];\\n            encodedItems = abi.encodePacked(encodedItems, slotId, equippedItem.contractAddress, equippedItem.id);\\n        }\\n        bytes32 baseItemsHash = keccak256(encodedItems);\\n        isUnique = !inventorySL.baseItemsHashes.contains(baseItemsHash);\\n        inventorySL.baseItemsHashes.remove(inventorySL.arcadianToBaseItemHash[arcadianId]);\\n        inventorySL.baseItemsHashes.add(baseItemsHash);\\n        inventorySL.arcadianToBaseItemHash[arcadianId] = baseItemsHash;\\n    }\\n\\n    function _createSlot(\\n        bool unequippable,\\n        InventoryStorage.SlotCategory category,\\n        InventoryStorage.Item[] calldata allowedItems\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        // slots are 1-index\\n        inventorySL.numSlots += 1;\\n        uint newSlot = inventorySL.numSlots;\\n        inventorySL.slots[newSlot].unequippable = unequippable;\\n        inventorySL.slots[newSlot].category = category;\\n        inventorySL.slots[newSlot].id = newSlot;\\n\\n        if (allowedItems.length > 0) {\\n            _allowItemsInSlot(newSlot, allowedItems);\\n        }\\n\\n        emit SlotCreated(msg.sender, newSlot, unequippable, category);\\n    }\\n\\n    function _allowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < items.length; i++) {\\n            require(items[i].contractAddress.isContract(), \\\"InventoryFacet._allowItemsInSlot: Invalid items contract address\\\");\\n            require(inventorySL.itemSlot[items[i].contractAddress][items[i].id] != slotId, \\\"InventoryFacet._allowItemsInSlot: Item already allowed in the slot\\\");\\n\\n            if (inventorySL.itemSlot[items[i].contractAddress][items[i].id] > 0) {\\n                _disallowItemInSlotUnchecked(slotId, items[i]);\\n            }\\n            inventorySL.slots[slotId].allowedItems.push(items[i]);\\n            inventorySL.itemSlot[items[i].contractAddress][items[i].id] = slotId;\\n        }\\n        inventorySL.categoryToSlots[inventorySL.slots[slotId].category].add(slotId);\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < items.length; i++) {\\n            require(inventorySL.itemSlot[items[i].contractAddress][items[i].id] == slotId, \\\"InventoryFacet._disallowItemsInSlot: Item already not allowed in the slot\\\");\\n            _disallowItemInSlotUnchecked(slotId, items[i]);\\n        }\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemInSlotUnchecked(\\n        uint slotId,\\n        InventoryStorage.Item calldata item\\n    ) internal virtual {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        for (uint i = 0; i < inventorySL.slots[slotId].allowedItems.length; i++) {\\n            if (inventorySL.slots[slotId].allowedItems[i].id == item.id) {\\n                inventorySL.slots[slotId].allowedItems[i] = inventorySL.slots[slotId].allowedItems[inventorySL.slots[slotId].allowedItems.length-1];\\n                delete inventorySL.slots[slotId].allowedItems[inventorySL.slots[slotId].allowedItems.length-1];\\n                inventorySL.slots[slotId].allowedItems.pop();\\n                break;\\n            }\\n        }\\n        \\n        delete inventorySL.itemSlot[item.contractAddress][item.id];\\n    }\\n\\n    function _allowedSlot(InventoryStorage.Item calldata item) internal view returns (uint) {\\n        return InventoryStorage.layout().itemSlot[item.contractAddress][item.id];\\n    }\\n\\n    function _allowedItems(uint slotId) internal view onlyValidSlot(slotId) returns (InventoryStorage.Item[] memory) {\\n        return InventoryStorage.layout().slots[slotId].allowedItems;\\n    }\\n\\n    function _slot(uint slotId) internal view returns (InventoryStorage.Slot storage slot) {\\n        return InventoryStorage.layout().slots[slotId];\\n    }\\n\\n    function _slotsAll() internal view returns (InventoryStorage.Slot[] memory slotsAll) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        slotsAll = new InventoryStorage.Slot[](numSlots);\\n        for (uint i = 0; i < numSlots; i++) {\\n            uint slotId = i + 1;\\n            slotsAll[i] = InventoryStorage.layout().slots[slotId];\\n        }\\n    }\\n}\",\"keccak256\":\"0xdeb75aeda01b89f2def0341706617b99df9e456e6787518f645b226963f95bff\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\n\\n/**\\nLibInventory defines the storage structure used by the Inventory contract as a facet for an EIP-2535 Diamond\\nproxy.\\n */\\nlibrary InventoryStorage {\\n    bytes32 constant INVENTORY_STORAGE_POSITION =\\n        keccak256(\\\"inventory.storage.position\\\");\\n\\n    uint constant ERC721_ITEM_TYPE = 721;\\n    uint constant ERC1155_ITEM_TYPE = 1155;\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum SlotCategory { Base, Equippment, Cosmetic }\\n\\n    // Holds the information needed to identify an ERC1155 item\\n    struct Item {\\n        address contractAddress;\\n        uint id;\\n    }\\n\\n    // Holds the general information about a slot\\n    struct Slot {\\n        uint id;\\n        bool unequippable;\\n        SlotCategory category;\\n        InventoryStorage.Item[] allowedItems;\\n    }\\n\\n    struct Layout {\\n        uint numSlots;\\n\\n        // Slot id => Slot\\n        mapping(uint => Slot) slots;\\n        // Slot category => List of slots\\n        mapping(SlotCategory => EnumerableSet.UintSet) categoryToSlots;\\n\\n        // arcadian id => slot id => Items equipped\\n        mapping(uint => mapping(uint => Item)) equippedItems;\\n\\n        // item address => item id => allowed slot id\\n        mapping(address => mapping(uint => uint)) itemSlot;\\n\\n        // List of all the existent hashes\\n        EnumerableSet.Bytes32Set baseItemsHashes;\\n        // arcadian id => base items hash\\n        mapping(uint => bytes32) arcadianToBaseItemHash;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage istore)\\n    {\\n        bytes32 position = INVENTORY_STORAGE_POSITION;\\n        assembly {\\n            istore.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xee1e5bef9a74d4c9c2188b29bee7fe76ee38cf8ee8c1eee935330ff96d8b0e2e\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/merkle/MerkleInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { MerkleProof } from \\\"@solidstate/contracts/cryptography/MerkleProof.sol\\\";\\nimport { MerkleStorage } from \\\"./MerkleStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract MerkleInternal is RolesInternal {\\n\\n    function _merkleRoot() internal view returns (bytes32) {\\n        return MerkleStorage.layout().merkleRoot;\\n    }\\n\\n    function _updateMerkleRoot(bytes32 newMerkleRoot) internal {\\n        MerkleStorage.layout().merkleRoot = newMerkleRoot;\\n    }\\n\\n    // To create 'leaf' use abi.encode(leafProp1, leafProp2, ...)\\n    function _validateLeaf(bytes32[] memory proof, bytes memory _leaf) internal view returns (bool isValid) {\\n        bytes32 leaf = keccak256(bytes.concat(keccak256(_leaf)));\\n        isValid = MerkleProof.verify(proof, MerkleStorage.layout().merkleRoot, leaf);\\n        require(isValid, \\\"Data not included in merkle\\\");\\n    }\\n}\",\"keccak256\":\"0xababe8f3cdbf1badf238e3183162c1239436514f1ef1aa948f7f5e9e80873e79\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/merkle/MerkleStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary MerkleStorage {\\n\\n    bytes32 constant MERKLE_STORAGE_POSITION =\\n        keccak256(\\\"merkle.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 merkleRoot;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = MERKLE_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x5ed5d36d30cda447858ff4ad784c43281a332ef4be8644681327f8fab3c71ce8\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(_defaultAdminRole());\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        _checkRole(_managerRole());\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        _checkRole(_minterRole());\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _minterRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().minterRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.minterRole = keccak256(\\\"minter.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n        _grantRole(_minterRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0xd3fa8bcc9380c117c2e22aeb6b4489ad01c31433b3c2d412742b681c94cf407d\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 minterRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x203cfbe268a1ac5fe32593c66ace04b576dfb2e25173e02654e504cf0de44d71\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { MerkleProof } from \\\"@solidstate/contracts/cryptography/MerkleProof.sol\\\";\\nimport { WhitelistStorage } from \\\"./WhitelistStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract WhitelistInternal is RolesInternal {\\n\\n    event WhitelistBalanceChanged(address account, int amount, uint totalElegibleAmount, uint totalClaimedAmount);\\n\\n    function _whitelistClaimed(address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().claimed[account];\\n    }\\n\\n    function _whitelistBalance(address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().elegible[account];\\n    }\\n\\n    function _consumeWhitelist(address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        require(whitelistSL.elegible[account] >= amount, \\\"WhitelistInternal._consumeWhitelist: amount exceeds elegible amount\\\");\\n        whitelistSL.elegible[account] -= amount;\\n        whitelistSL.claimed[account] += amount;\\n        emit WhitelistBalanceChanged(msg.sender, int(amount), whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _addToWhitelist(address account, uint amount) onlyManager internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        whitelistSL.elegible[account] += amount;\\n        emit WhitelistBalanceChanged(msg.sender, int(amount), whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _addToWhitelistBatch(address[] calldata accounts, uint[] calldata amounts) onlyManager internal {\\n        require(accounts.length == amounts.length, \\\"WhitelistInternal._addToWhitelistBatch: Inputs length mismatch\\\");\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        for (uint i = 0; i < accounts.length; i++) {\\n            WhitelistStorage.layout().elegible[accounts[i]] += amounts[i];\\n            emit WhitelistBalanceChanged(msg.sender, int(amounts[i]), whitelistSL.elegible[accounts[i]], whitelistSL.claimed[accounts[i]]);\\n        }\\n    }\\n}\",\"keccak256\":\"0xac2ac000e58d976ce186d9c4e48c7f71e2fd3fe80cd1a3ce6ee1da86a8f80093\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary WhitelistStorage {\\n\\n    bytes32 constant WHITELIST_STORAGE_POSITION =\\n        keccak256(\\\"whitelist.storage.position\\\");\\n\\n    struct Layout {\\n        mapping(address => uint) claimed;\\n        mapping(address => uint) elegible;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = WHITELIST_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x1eae9928eb6da719f50ca96c4081e0d83e8d5cfb6dee9ca57c4f0e3a5fc9cd39\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610723806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632f2bf21514610030575b600080fd5b61004361003e366004610427565b610045565b005b7f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c088581556100716100ca565b6100b085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101b792505050565b6100b983610248565b6100c2826102cd565b505050505050565b7fb462f6088ae062dff8b9775f21c40e03e3712c046de379405b569825959678c97ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa729081557fb7400b17e52d343f741138df9e91f7b1f847b285f261edc36ddf5d104892f80d7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa735561015e60005b33610352565b6101896101587ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b6101b46101587ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa735490565b50565b6040517f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b19033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea9061022d907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b3908690610532565b60405180910390a260028101610243838261062d565b505050565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746454604080519182526020820183905280517f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74639233927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92918290030190a260010155565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746554604080519182526020820183905280517f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74639233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260020155565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040902061038990826103c6565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b60006103db836001600160a01b0384166103e4565b90505b92915050565b60008181526001830160205260408120546103de575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b60008060008060006080868803121561043f57600080fd5b85359450602086013567ffffffffffffffff8082111561045e57600080fd5b818801915088601f83011261047257600080fd5b81358181111561048157600080fd5b89602082850101111561049357600080fd5b9699602092909201985095966040810135965060600135945092505050565b600181811c908216806104c657607f821691505b6020821081036104e657634e487b7160e01b600052602260045260246000fd5b50919050565b6000815180845260005b81811015610512576020818501810151868301820152016104f6565b506000602082860101526020601f19601f83011685010191505092915050565b604081526000808454610544816104b2565b80604086015260606001808416600081146105665760018114610580576105b1565b60ff1985168884015283151560051b8801830195506105b1565b8960005260208060002060005b868110156105a85781548b820187015290840190820161058d565b8a018501975050505b505050505082810360208401526105c881856104ec565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b601f82111561024357600081815260208120601f850160051c8101602086101561060e5750805b601f850160051c820191505b818110156100c25782815560010161061a565b815167ffffffffffffffff811115610647576106476105d1565b61065b8161065584546104b2565b846105e7565b602080601f83116001811461069057600084156106785750858301515b600019600386901b1c1916600185901b1785556100c2565b600085815260208120601f198616915b828110156106bf578886015182559484019460019091019084016106a0565b50858210156106dd5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220f0279e1ec3ba1a4c41ac0b76146ce492fd42fe1ad73e795e107744277ad9fe2a64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80632f2bf21514610030575b600080fd5b61004361003e366004610427565b610045565b005b7f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c088581556100716100ca565b6100b085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101b792505050565b6100b983610248565b6100c2826102cd565b505050505050565b7fb462f6088ae062dff8b9775f21c40e03e3712c046de379405b569825959678c97ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa729081557fb7400b17e52d343f741138df9e91f7b1f847b285f261edc36ddf5d104892f80d7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa735561015e60005b33610352565b6101896101587ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b6101b46101587ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa735490565b50565b6040517f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b19033907f92bf6a7b8937c17e6781a68d61f9fe6a5ce08604b96ca2206f311049a3a295ea9061022d907f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b3908690610532565b60405180910390a260028101610243838261062d565b505050565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746454604080519182526020820183905280517f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74639233927f9a201d4a67373d8576462c238c27108c61b3deec32a932aac079a84cc3b7742c92918290030190a260010155565b7f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c746554604080519182526020820183905280517f87a01bd38845081b30641ebc639dfadf787bd49017c45985af2341fe932c74639233927fed96032e9c101f4508a9696e8861f06aa3674be1b735fc685aed0efb83db76e992918290030190a260020155565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040902061038990826103c6565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b60006103db836001600160a01b0384166103e4565b90505b92915050565b60008181526001830160205260408120546103de575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b60008060008060006080868803121561043f57600080fd5b85359450602086013567ffffffffffffffff8082111561045e57600080fd5b818801915088601f83011261047257600080fd5b81358181111561048157600080fd5b89602082850101111561049357600080fd5b9699602092909201985095966040810135965060600135945092505050565b600181811c908216806104c657607f821691505b6020821081036104e657634e487b7160e01b600052602260045260246000fd5b50919050565b6000815180845260005b81811015610512576020818501810151868301820152016104f6565b506000602082860101526020601f19601f83011685010191505092915050565b604081526000808454610544816104b2565b80604086015260606001808416600081146105665760018114610580576105b1565b60ff1985168884015283151560051b8801830195506105b1565b8960005260208060002060005b868110156105a85781548b820187015290840190820161058d565b8a018501975050505b505050505082810360208401526105c881856104ec565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b601f82111561024357600081815260208120601f850160051c8101602086101561060e5750805b601f850160051c820191505b818110156100c25782815560010161061a565b815167ffffffffffffffff811115610647576106476105d1565b61065b8161065584546104b2565b846105e7565b602080601f83116001811461069057600084156106785750858301515b600019600386901b1c1916600185901b1785556100c2565b600085815260208120601f198616915b828110156106bf578886015182559484019460019091019084016106a0565b50858210156106dd5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220f0279e1ec3ba1a4c41ac0b76146ce492fd42fe1ad73e795e107744277ad9fe2a64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}