{
  "address": "0x8ddAbf9b8E2995FaC40198EE070295DA646E7FCf",
  "abi": [
    {
      "inputs": [],
      "name": "ERC1155Base__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BurnExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BurnFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__ERC1155ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__ERC1155ReceiverRejected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__TransferExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_InputsLengthMistatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_InvalidItemId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_ItemsBasicStatusAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_MaximumItemMintsExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_MintingNonBasicItem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Merkle_AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Merkle_ClaimInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Merkle_ClaimStateAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Merkle_InvalidClaimAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Merkle_NotIncludedInMerkleTree",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingAdminRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingAutomationRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingManagerRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ClaimInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ClaimStateAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ExceedsElegibleAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_InputDataMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "itemsIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsClaimedMerkle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum WhitelistStorage.PoolId",
          "name": "poolId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalElegibleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimedAmount",
          "type": "uint256"
        }
      ],
      "name": "WhitelistBalanceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "accountsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMerkle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "itemsIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "proofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "claimMerkleBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "claimWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "claimedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInventoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "migrate",
          "type": "bool"
        }
      ],
      "name": "migrateToIPFS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inventoryAddress",
          "type": "address"
        }
      ],
      "name": "setInventoryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interface",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tokensByAccount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x608abd25ccf3879878e58484e5fa4399e85e5755df90174816882ce86fc777c6",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0x8ddAbf9b8E2995FaC40198EE070295DA646E7FCf",
    "transactionIndex": 1,
    "gasUsed": "3296970",
    "logsBloom": "0x
    "blockHash": "0x2dda9d2db3e44fcba3b8d2eb95416fbdb6fd6c565dfe95490fc3e8988d591f08",
    "transactionHash": "0x608abd25ccf3879878e58484e5fa4399e85e5755df90174816882ce86fc777c6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 36068653,
        "transactionHash": "0x608abd25ccf3879878e58484e5fa4399e85e5755df90174816882ce86fc777c6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001d48711dfde15cc0000000000000000000000000000000000000000000000002a5d474e373b1760000000000000000000000000000000000000000000000e90be4536a444ecfe660000000000000000000000000000000000000000000000002888c03c575d0194000000000000000000000000000000000000000000000e90c019bdb624cb1432",
        "logIndex": 9,
        "blockHash": "0x2dda9d2db3e44fcba3b8d2eb95416fbdb6fd6c565dfe95490fc3e8988d591f08"
      }
    ],
    "blockNumber": 36068653,
    "cumulativeGasUsed": "3664678",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "809d7be22097a5c8c827ce9df4fa956c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC1155Base__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BurnExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BurnFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__ERC1155ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__ERC1155ReceiverRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__TransferExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_InputsLengthMistatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_InvalidItemId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_ItemsBasicStatusAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_MaximumItemMintsExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_MintingNonBasicItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Merkle_AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Merkle_ClaimInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Merkle_ClaimStateAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Merkle_InvalidClaimAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Merkle_NotIncludedInMerkleTree\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingAdminRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingAutomationRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingManagerRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ClaimInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ClaimStateAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ExceedsElegibleAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_InputDataMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"itemsIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ItemsClaimedMerkle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum WhitelistStorage.PoolId\",\"name\":\"poolId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalElegibleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"}],\"name\":\"WhitelistBalanceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"accountsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimMerkle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"claimMerkleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInventoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"migrate\",\"type\":\"bool\"}],\"name\":\"migrateToIPFS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inventoryAddress\",\"type\":\"address\"}],\"name\":\"setInventoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interface\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokensByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract handles the creation and management of items It uses ERC1155 tokens to represent items and provides methods to mint new items, claim items via Merkle tree or a whitelist, and set the base and URIs for the items. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.\",\"kind\":\"dev\",\"methods\":{\"accountsByToken(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"list of holder addresses\"}},\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"burn(uint256,uint256)\":{\"params\":{\"amount\":\"The item amount to burn\",\"itemId\":\"The ID of the item to burn\"}},\"burnBatch(uint256[],uint256[])\":{\"params\":{\"amounts\":\"The item amounts to be minted\",\"itemIds\":\"The item ID burn\"}},\"claimMerkle(uint256,uint256,bytes32[])\":{\"params\":{\"amount\":\"The amount of the item to claim\",\"itemId\":\"The ID of the item to claim\",\"proof\":\"The Merkle proof for the item\"}},\"claimMerkleBatch(uint256[],uint256[],bytes32[][])\":{\"params\":{\"amounts\":\"The amounts of the items to claim\",\"itemsIds\":\"The IDs of the items to claim\",\"proofs\":\"The Merkle proofs for the items\"}},\"claimWhitelist(uint256[],uint256[])\":{\"params\":{\"amounts\":\"The amounts of the items to claim\",\"itemIds\":\"The IDs of the items to claim\"}},\"claimedAmount(address,uint256)\":{\"params\":{\"account\":\"the account to query\",\"itemId\":\"the item id to query\"},\"returns\":{\"amount\":\"returns the claimed amount given an account and an item id\"}},\"getInventoryAddress()\":{\"details\":\"Returns the current inventory address\",\"returns\":{\"_0\":\"The address of the inventory contract\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"migrateToIPFS(string,bool)\":{\"details\":\"Only the manager role can call this function\",\"params\":{\"migrate\":\"Should migrate to IPFS\",\"newBaseURI\":\"The new base URI\"}},\"mint(address,uint256,uint256)\":{\"params\":{\"amount\":\"The item amount to be minted\",\"itemId\":\"The ID of the item to mint\",\"to\":\"The address to mint the item to\"}},\"mintBatch(address,uint256[],uint256[])\":{\"params\":{\"amounts\":\"The items amounts to be minted\",\"itemIds\":\"An array of items IDs to be minted\",\"to\":\"The address to receive the minted items\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"array of function call data payloads\"},\"returns\":{\"results\":\"array of function call results\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"setBaseURI(string)\":{\"details\":\"Only the manager role can call this function\",\"params\":{\"baseURI\":\"The new base URI\"}},\"setInventoryAddress(address)\":{\"details\":\"Sets the inventory address\",\"params\":{\"inventoryAddress\":\"The new address of the inventory contract\"}},\"setTokenURI(uint256,string)\":{\"details\":\"Only the manager role can call this function\",\"params\":{\"tokenId\":\"The ID of the item to set the URI for\",\"tokenURI\":\"The new item URI\"}},\"tokensByAccount(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"list of token ids\"}},\"totalHolders(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"quantity of holders\"}},\"totalSupply(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"token supply\"}}},\"title\":\"ItemsFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountsByToken(uint256)\":{\"notice\":\"query holders of given token\"},\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"burn(uint256,uint256)\":{\"notice\":\"Burn an amount of an item\"},\"burnBatch(uint256[],uint256[])\":{\"notice\":\"Burn amounts of items\"},\"claimMerkle(uint256,uint256,bytes32[])\":{\"notice\":\"Claims an item if present in the Merkle tree\"},\"claimMerkleBatch(uint256[],uint256[],bytes32[][])\":{\"notice\":\"Claims items if present in the Merkle tree\"},\"claimWhitelist(uint256[],uint256[])\":{\"notice\":\"Claims items from a whitelist\"},\"claimedAmount(address,uint256)\":{\"notice\":\"Amount claimed by an address of a specific item\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"migrateToIPFS(string,bool)\":{\"notice\":\"Set the base URI for all items metadata\"},\"mint(address,uint256,uint256)\":{\"notice\":\"Mints a new item. Only minter role account can mint\"},\"mintBatch(address,uint256[],uint256[])\":{\"notice\":\"Mint a batch of items to a specific address. Only minter role account can mint\"},\"multicall(bytes[])\":{\"notice\":\"batch function calls to the contract and return the results of each\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"},\"setBaseURI(string)\":{\"notice\":\"Set the base URI for all items metadata\"},\"setTokenURI(uint256,string)\":{\"notice\":\"Set the URI for a specific item ID\"},\"tokensByAccount(address)\":{\"notice\":\"query tokens held by given address\"},\"totalHolders(uint256)\":{\"notice\":\"query total number of holders for given token\"},\"totalSupply(uint256)\":{\"notice\":\"query total minted supply of given token\"},\"uri(uint256)\":{\"notice\":\"Override ERC1155Metadata\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/items/ItemsFacet.sol\":\"ItemsFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Merkle tree verification utility\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @notice verify whether given leaf is contained within Merkle tree defined by given root\\n     * @param proof proof that Merkle tree contains given leaf\\n     * @param root Merkle tree root\\n     * @param leaf element whose presence in Merkle tree to prove\\n     * @return whether leaf is proven to be contained within Merkle tree defined by root\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            bytes32 computedHash = leaf;\\n\\n            for (uint256 i = 0; i < proof.length; i++) {\\n                bytes32 proofElement = proof[i];\\n\\n                if (computedHash <= proofElement) {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(computedHash, proofElement)\\n                    );\\n                } else {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(proofElement, computedHash)\\n                    );\\n                }\\n            }\\n\\n            return computedHash == root;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3a6592d4e2c90f92ccae441401241b4a8837e95a15f3c3887abc544e85e362c\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8688f1b897b4ddde7ebd48ee5ce1063f56d8af8ea3aa80aa1df12ff669d133a4\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155 } from '../../../interfaces/IERC1155.sol';\\nimport { IERC1155Receiver } from '../../../interfaces/IERC1155Receiver.sol';\\nimport { IERC1155Base } from './IERC1155Base.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from './ERC1155BaseInternal.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155Base, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) public view virtual returns (uint256) {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                if (accounts[i] == address(0))\\n                    revert ERC1155Base__BalanceQueryZeroAddress();\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) public view virtual returns (bool) {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status) public virtual {\\n        if (msg.sender == operator) revert ERC1155Base__SelfApproval();\\n        ERC1155BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        if (from != msg.sender && !isApprovedForAll(from, msg.sender))\\n            revert ERC1155Base__NotOwnerOrApproved();\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        if (from != msg.sender && !isApprovedForAll(from, msg.sender))\\n            revert ERC1155Base__NotOwnerOrApproved();\\n        _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x3e36cb8094f6e5a890b8a599a76275a8d992f7e877a9021e8abd090a3dce2331\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155Receiver } from '../../../interfaces/IERC1155Receiver.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC1155BaseInternal } from './IERC1155BaseInternal.sol';\\nimport { ERC1155BaseStorage } from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155BaseInternal {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(\\n        address account,\\n        uint256 id\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0))\\n            revert ERC1155Base__BalanceQueryZeroAddress();\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__MintToZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        ERC1155BaseStorage.layout().balances[id][account] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__MintToZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            balances[ids[i]][account] += amounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__BurnFromZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            ''\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n\\n        unchecked {\\n            if (amount > balances[account])\\n                revert ERC1155Base__BurnExceedsBalance();\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__BurnFromZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                if (amounts[i] > balances[id][account])\\n                    revert ERC1155Base__BurnExceedsBalance();\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (recipient == address(0))\\n            revert ERC1155Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            sender,\\n            recipient,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            if (amount > senderBalance)\\n                revert ERC1155Base__TransferExceedsBalance();\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (recipient == address(0))\\n            revert ERC1155Base__TransferToZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n\\n                if (amount > senderBalance)\\n                    revert ERC1155Base__TransferExceedsBalance();\\n\\n                balances[token][sender] = senderBalance - amount;\\n\\n                i++;\\n            }\\n\\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(\\n        uint256 element\\n    ) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector)\\n                    revert ERC1155Base__ERC1155ReceiverRejected();\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert ERC1155Base__ERC1155ReceiverNotImplemented();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\\n                ) revert ERC1155Base__ERC1155ReceiverRejected();\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert ERC1155Base__ERC1155ReceiverNotImplemented();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x347e1d1bbff3001b09b0ac140f8d0ff8d526d34e310610c7fe31cdbf418059ed\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bc1fde9bab7b338312099733e21c7bbbc44597fd25970bd68187eb65e622ef1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/IERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155 } from '../../../interfaces/IERC1155.sol';\\nimport { IERC1155BaseInternal } from './IERC1155BaseInternal.sol';\\n\\n/**\\n * @title ERC1155 base interface\\n */\\ninterface IERC1155Base is IERC1155BaseInternal, IERC1155 {\\n\\n}\\n\",\"keccak256\":\"0x1031b70a5355e29a4f729ec602bbf6e1d074e4e1ab86bff29b486f31eb639ffe\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/IERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155Internal } from '../../../interfaces/IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 base interface\\n */\\ninterface IERC1155BaseInternal is IERC1155Internal {\\n    error ERC1155Base__ArrayLengthMismatch();\\n    error ERC1155Base__BalanceQueryZeroAddress();\\n    error ERC1155Base__NotOwnerOrApproved();\\n    error ERC1155Base__SelfApproval();\\n    error ERC1155Base__BurnExceedsBalance();\\n    error ERC1155Base__BurnFromZeroAddress();\\n    error ERC1155Base__ERC1155ReceiverRejected();\\n    error ERC1155Base__ERC1155ReceiverNotImplemented();\\n    error ERC1155Base__MintToZeroAddress();\\n    error ERC1155Base__TransferExceedsBalance();\\n    error ERC1155Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0xece161d9a4ab29e5b539b8b0f808660fcdd6b8c35bb1920dd99acdb5c576efbc\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC1155BaseInternal } from '../base/ERC1155BaseInternal.sol';\\nimport { IERC1155Enumerable } from './IERC1155Enumerable.sol';\\nimport { ERC1155EnumerableInternal, ERC1155EnumerableStorage } from './ERC1155EnumerableInternal.sol';\\n\\n/**\\n * @title ERC1155 implementation including enumerable and aggregate functions\\n */\\nabstract contract ERC1155Enumerable is\\n    IERC1155Enumerable,\\n    ERC1155EnumerableInternal\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalHolders(uint256 id) public view virtual returns (uint256) {\\n        return _totalHolders(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function accountsByToken(\\n        uint256 id\\n    ) public view virtual returns (address[] memory) {\\n        return _accountsByToken(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function tokensByAccount(\\n        address account\\n    ) public view virtual returns (uint256[] memory) {\\n        return _tokensByAccount(account);\\n    }\\n}\\n\",\"keccak256\":\"0x452201121747be0d0af28279da9e824d1e99a261a6cd34abd156c432b97f0338\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from '../base/ERC1155BaseInternal.sol';\\nimport { ERC1155EnumerableStorage } from './ERC1155EnumerableStorage.sol';\\n\\n/**\\n * @title ERC1155Enumerable internal functions\\n */\\nabstract contract ERC1155EnumerableInternal is ERC1155BaseInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function _totalSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155EnumerableStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function _totalHolders(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155EnumerableStorage.layout().accountsByToken[id].length();\\n    }\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function _accountsByToken(\\n        uint256 id\\n    ) internal view virtual returns (address[] memory) {\\n        EnumerableSet.AddressSet storage accounts = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[id];\\n\\n        address[] memory addresses = new address[](accounts.length());\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length(); i++) {\\n                addresses[i] = accounts.at(i);\\n            }\\n        }\\n\\n        return addresses;\\n    }\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function _tokensByAccount(\\n        address account\\n    ) internal view virtual returns (uint256[] memory) {\\n        EnumerableSet.UintSet storage tokens = ERC1155EnumerableStorage\\n            .layout()\\n            .tokensByAccount[account];\\n\\n        uint256[] memory ids = new uint256[](tokens.length());\\n\\n        unchecked {\\n            for (uint256 i; i < tokens.length(); i++) {\\n                ids[i] = tokens.at(i);\\n            }\\n        }\\n\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from != to) {\\n            ERC1155EnumerableStorage.Layout storage l = ERC1155EnumerableStorage\\n                .layout();\\n            mapping(uint256 => EnumerableSet.AddressSet)\\n                storage tokenAccounts = l.accountsByToken;\\n            EnumerableSet.UintSet storage fromTokens = l.tokensByAccount[from];\\n            EnumerableSet.UintSet storage toTokens = l.tokensByAccount[to];\\n\\n            for (uint256 i; i < ids.length; ) {\\n                uint256 amount = amounts[i];\\n\\n                if (amount > 0) {\\n                    uint256 id = ids[i];\\n\\n                    if (from == address(0)) {\\n                        l.totalSupply[id] += amount;\\n                    } else if (_balanceOf(from, id) == amount) {\\n                        tokenAccounts[id].remove(from);\\n                        fromTokens.remove(id);\\n                    }\\n\\n                    if (to == address(0)) {\\n                        l.totalSupply[id] -= amount;\\n                    } else if (_balanceOf(to, id) == 0) {\\n                        tokenAccounts[id].add(to);\\n                        toTokens.add(id);\\n                    }\\n                }\\n\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa60052b304f895a1893378f757223a3081f9d53044776ddc4bc283a51fd62388\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC1155EnumerableStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\n        mapping(address => EnumerableSet.UintSet) tokensByAccount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Enumerable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x89e73d6d5c7f19d54927dcbeb8b3bf782c8a9f51ad2f12e67b6491b3681a1549\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/IERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155BaseInternal } from '../base/IERC1155BaseInternal.sol';\\n\\n/**\\n * @title ERC1155 enumerable and aggregate function interface\\n */\\ninterface IERC1155Enumerable is IERC1155BaseInternal {\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function totalHolders(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function accountsByToken(\\n        uint256 id\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function tokensByAccount(\\n        address account\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x2e31e7a736871d52e5d24b0f0917a63bbdc25503bdc70ba6d8d001888aa0049f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { IERC1155Metadata } from './IERC1155Metadata.sol';\\nimport { ERC1155MetadataInternal } from './ERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @title ERC1155 metadata extensions\\n */\\nabstract contract ERC1155Metadata is IERC1155Metadata, ERC1155MetadataInternal {\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId) public view virtual returns (string memory) {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ea046fa006ec93948d00a4c93d0423d2cc3fa7f6bb5a4f4fa7dd59f8025404e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @title ERC1155Metadata internal functions\\n */\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataInternal {\\n    /**\\n     * @notice set base metadata URI\\n     * @dev base URI is a non-standard feature adapted from the ERC721 specification\\n     * @param baseURI base URI\\n     */\\n    function _setBaseURI(string memory baseURI) internal {\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @notice set per-token metadata URI\\n     * @param tokenId token whose metadata URI to set\\n     * @param tokenURI per-token URI\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xaf972740ad8d28ccc306fa49c5b0e581fc637f3706eb77fd5bb08d02b3b2a762\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC1155 metadata extensions\\n */\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Metadata');\\n\\n    struct Layout {\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e8228a4c843b8bb45252d360370ba12839e7bb53a3f6c97b1aee482d77d4ec\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata is IERC1155MetadataInternal {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x5996ccbe41ca8000926401f9172fe777853be594ca516bed5d56513f24b35798\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155Metadata interface needed by internal functions\\n */\\ninterface IERC1155MetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0x394093a86fbfebdcda356fe9407480d81434aa162afc6a3e8efbf72a4c05b98d\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 minValue = bytes32(type(uint256).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(address[] memory array) internal pure returns (address) {\\n        address minValue = address(type(uint160).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 minValue = type(uint256).max;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 maxValue = bytes32(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(address[] memory array) internal pure returns (address) {\\n        address maxValue = address(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 maxValue = 0;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86a2953855b8df5a5ded23a79016f1584b6321ef2c04f44466ebfbb6d23e728c\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Interface for the Multicall utility contract\\n */\\ninterface IMulticall {\\n    /**\\n     * @notice batch function calls to the contract and return the results of each\\n     * @param data array of function call data payloads\\n     * @return results array of function call results\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x39e630bc189607ae119c1208a632009fe418cc4eb2687b28e7fdbe78af7b79b0\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IMulticall } from './IMulticall.sol';\\n\\n/**\\n * @title Utility contract for supporting processing of multiple function calls in a single transaction\\n */\\nabstract contract Multicall is IMulticall {\\n    /**\\n     * @inheritdoc IMulticall\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        unchecked {\\n            for (uint256 i; i < data.length; i++) {\\n                (bool success, bytes memory returndata) = address(this)\\n                    .delegatecall(data[i]);\\n\\n                if (success) {\\n                    results[i] = returndata;\\n                } else {\\n                    assembly {\\n                        returndatacopy(0, 0, returndatasize())\\n                        revert(0, returndatasize())\\n                    }\\n                }\\n            }\\n        }\\n\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x762f15ac4c28be19d0d7fb303ade8dea6ba52ff558fb6fba36df84a839e216b3\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/items/ItemsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { ERC1155Base } from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\\\";\\nimport { ERC1155BaseInternal } from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\\\";\\nimport { ERC1155Enumerable } from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\\\";\\nimport { ERC1155EnumerableInternal } from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\\\";\\nimport { ERC1155Metadata } from \\\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\\\";\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ItemsInternal } from \\\"./ItemsInternal.sol\\\";\\nimport { ItemsStorage } from \\\"./ItemsStorage.sol\\\";\\nimport { Multicall } from \\\"@solidstate/contracts/utils/Multicall.sol\\\";\\nimport { IERC1155 } from '@solidstate/contracts/interfaces/IERC1155.sol';\\n\\n/**\\n * @title ItemsFacet\\n * @dev This contract handles the creation and management of items\\n * It uses ERC1155 tokens to represent items and provides methods to mint new items,\\n * claim items via Merkle tree or a whitelist, and set the base and URIs for\\n * the items. It also uses the ReentrancyGuard and Multicall contracts for security\\n * and gas efficiency.\\n */\\ncontract ItemsFacet is ERC1155Base, ERC1155Enumerable, ERC1155Metadata, ReentrancyGuard, ItemsInternal, Multicall {\\n    \\n    /**\\n     * @notice Claims an item if present in the Merkle tree\\n     * @param itemId The ID of the item to claim\\n     * @param amount The amount of the item to claim\\n     * @param proof The Merkle proof for the item\\n     */\\n    function claimMerkle(uint itemId, uint amount, bytes32[] calldata proof)\\n        public nonReentrant\\n    {\\n        _claimMerkle(msg.sender, itemId, amount, proof);\\n    }\\n\\n    /**\\n     * @notice Claims items if present in the Merkle tree\\n     * @param itemsIds The IDs of the items to claim\\n     * @param amounts The amounts of the items to claim\\n     * @param proofs The Merkle proofs for the items\\n     */\\n    function claimMerkleBatch(uint[] calldata itemsIds, uint[] calldata amounts, bytes32[][] calldata proofs) external nonReentrant {\\n        _claimMerkleBatch(msg.sender, itemsIds, amounts, proofs);\\n    }\\n\\n    /**\\n     * @notice Claims items from a whitelist\\n     * @param itemIds The IDs of the items to claim\\n     * @param amounts The amounts of the items to claim\\n     */\\n    function claimWhitelist(uint[] calldata itemIds, uint[] calldata amounts) external nonReentrant {\\n        _claimWhitelist(itemIds, amounts);\\n    }\\n\\n    /**\\n     * @notice Amount claimed by an address of a specific item\\n     * @param account the account to query\\n     * @param itemId the item id to query\\n     * @return amount returns the claimed amount given an account and an item id\\n     */\\n    function claimedAmount(address account, uint itemId) external view returns (uint amount) {\\n        return _claimedAmount(account, itemId);\\n    }\\n\\n    /**\\n     * @notice Burn an amount of an item\\n     * @param itemId The ID of the item to burn\\n     * @param amount The item amount to burn\\n     */\\n    function burn(uint itemId, uint amount)\\n        public\\n    {\\n        _burn(msg.sender, itemId, amount);\\n    }\\n\\n    /**\\n     * @notice Burn amounts of items\\n     * @param itemIds The item ID burn\\n     * @param amounts The item amounts to be minted\\n     */\\n    function burnBatch(uint256[] memory itemIds, uint256[] memory amounts)\\n        public\\n    {\\n        _burnBatch(msg.sender, itemIds, amounts);\\n    }\\n\\n    /**\\n     * @notice Mints a new item. Only minter role account can mint\\n     * @param to The address to mint the item to\\n     * @param itemId The ID of the item to mint\\n     * @param amount The item amount to be minted\\n     */\\n    function mint(address to, uint itemId, uint amount)\\n        public onlyManager\\n    {\\n        _mint(to, itemId, amount);\\n    }\\n\\n    /**\\n     * @notice Mint a batch of items to a specific address. Only minter role account can mint\\n     * @param to The address to receive the minted items\\n     * @param itemIds An array of items IDs to be minted\\n     * @param amounts The items amounts to be minted\\n     */\\n    function mintBatch(address to, uint[] calldata itemIds, uint[] calldata amounts)\\n        public onlyManager\\n    {\\n        _mintBatch(to, itemIds, amounts);\\n    }\\n\\n    /**\\n     * @notice Set the base URI for all items metadata\\n     * @dev Only the manager role can call this function\\n     * @param baseURI The new base URI\\n     */\\n    function setBaseURI(string calldata baseURI) external onlyManager {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /**\\n     * @notice Set the base URI for all items metadata\\n     * @dev Only the manager role can call this function\\n     * @param newBaseURI The new base URI\\n     * @param migrate Should migrate to IPFS\\n     */\\n    function migrateToIPFS(string calldata newBaseURI, bool migrate) external onlyManager {\\n        _migrateToIPFS(newBaseURI, migrate);\\n    }\\n\\n    /**\\n     * @dev Returns the current inventory address\\n     * @return The address of the inventory contract\\n     */\\n    function getInventoryAddress() external view returns (address) {\\n        return _getInventoryAddress();\\n    }\\n\\n    /**\\n     * @dev Sets the inventory address\\n     * @param inventoryAddress The new address of the inventory contract\\n     */\\n    function setInventoryAddress(address inventoryAddress) external onlyManager {\\n        _setInventoryAddress(inventoryAddress);\\n    }\\n\\n    /**\\n     * @notice Override ERC1155Metadata\\n     */\\n    function uri(uint tokenId) public view override returns (string memory) {\\n        if (ItemsStorage.layout().isMigratedToIPFS) {\\n            return string.concat(super.uri(tokenId), \\\".json\\\");\\n        } else {\\n            return super.uri(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the URI for a specific item ID\\n     * @dev Only the manager role can call this function\\n     * @param tokenId The ID of the item to set the URI for\\n     * @param tokenURI The new item URI\\n     */\\n    function setTokenURI(uint tokenId, string calldata tokenURI) external onlyManager {\\n        _setTokenURI(tokenId, tokenURI);\\n    }\\n\\n\\n    // overrides\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint id,\\n        uint amount,\\n        bytes memory data\\n    ) public override (ERC1155Base) {\\n        // Add red carpet logic for the inventory\\n        if (from != msg.sender && !isApprovedForAll(from, msg.sender) && _getInventoryAddress() != msg.sender )\\n            revert ERC1155Base__NotOwnerOrApproved();\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    function supportsInterface(bytes4 _interface) external pure returns (bool) {\\n        return type(IERC1155).interfaceId == _interface;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint[] memory ids,\\n        uint[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override (ERC1155BaseInternal, ERC1155EnumerableInternal, ItemsInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\",\"keccak256\":\"0x8dbe04adef1bbb0f15fa71b94241ae498dc2078c2ed5c07f915c07b5442acafe\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/items/ItemsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { ERC1155BaseInternal } from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\\\";\\nimport { ERC1155EnumerableInternal } from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\\\";\\nimport { ERC1155MetadataInternal } from \\\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\\\";\\nimport { ItemsStorage } from \\\"./ItemsStorage.sol\\\";\\nimport { MerkleInternal } from \\\"../merkle/MerkleInternal.sol\\\";\\nimport { WhitelistInternal } from \\\"../whitelist/WhitelistInternal.sol\\\";\\nimport { ArrayUtils } from \\\"@solidstate/contracts/utils/ArrayUtils.sol\\\";\\nimport { WhitelistStorage } from \\\"../whitelist/WhitelistStorage.sol\\\";\\n\\ncontract ItemsInternal is MerkleInternal, WhitelistInternal, ERC1155BaseInternal, ERC1155EnumerableInternal, ERC1155MetadataInternal {\\n\\n    error Items_InputsLengthMistatch();\\n    error Items_InvalidItemId();\\n    error Items_ItemsBasicStatusAlreadyUpdated();\\n    error Items_MintingNonBasicItem();\\n    error Items_MaximumItemMintsExceeded();\\n\\n    event ItemsClaimedMerkle(address indexed to, uint[] itemsIds, uint[] amounts);\\n\\n    using ArrayUtils for uint[];\\n\\n    function _claimMerkle(address to, uint itemId, uint amount, bytes32[] memory proof)\\n        internal\\n    {\\n        if (itemId < 1) revert Items_InvalidItemId();\\n\\n        ItemsStorage.Layout storage itemsSL = ItemsStorage.layout();\\n\\n        bytes memory leaf = abi.encode(to, itemId, amount);\\n        _consumeLeaf(proof, leaf);\\n\\n        ERC1155BaseInternal._mint(to, itemId, amount, \\\"\\\");\\n\\n        itemsSL.amountClaimed[to][itemId] += amount;\\n        \\n        uint[] memory itemsIds = new uint[](1);\\n        itemsIds[0] = itemId;\\n        uint[] memory amounts = new uint[](1);\\n        amounts[0] = amount;\\n        emit ItemsClaimedMerkle(to, itemsIds, amounts);\\n    }\\n\\n    function _claimMerkleBatch(address to, uint[] calldata itemsIds, uint[] calldata amounts, bytes32[][] calldata proofs) \\n        internal\\n    {\\n        if (itemsIds.length != amounts.length) \\n            revert Items_InputsLengthMistatch();\\n\\n        ItemsStorage.Layout storage itemsSL = ItemsStorage.layout();\\n\\n        for (uint i = 0; i < itemsIds.length; i++) {\\n\\n            if (itemsIds[i] < 1) revert Items_InvalidItemId();\\n\\n            bytes memory leaf = abi.encode(to, itemsIds[i], amounts[i]);\\n            _consumeLeaf(proofs[i], leaf);\\n\\n            ERC1155BaseInternal._mint(to, itemsIds[i], amounts[i], \\\"\\\");\\n\\n            itemsSL.amountClaimed[to][itemsIds[i]] += amounts[i];\\n        }\\n\\n        emit ItemsClaimedMerkle(to, itemsIds, amounts);\\n    }\\n    \\n    function _claimWhitelist(uint[] calldata itemIds, uint[] calldata amounts) internal {\\n        if (itemIds.length != amounts.length) \\n            revert Items_InputsLengthMistatch();\\n\\n\\n        uint totalAmount = 0;\\n        for (uint i = 0; i < itemIds.length; i++) {\\n            if (itemIds[i] < 1) \\n                revert Items_InvalidItemId();\\n\\n            ERC1155BaseInternal._mint(msg.sender, itemIds[i], amounts[i], \\\"\\\");\\n            totalAmount += amounts[i];\\n        }\\n        _consumeWhitelist(WhitelistStorage.PoolId.Guaranteed, msg.sender, totalAmount);\\n    }\\n\\n    function _claimedAmount(address account, uint itemId) internal view returns (uint) {\\n        return ItemsStorage.layout().amountClaimed[account][itemId];\\n    }\\n\\n    function _mint(address to, uint itemId, uint amount)\\n        internal\\n    {\\n        if (itemId < 1) revert Items_InvalidItemId();\\n\\n        ERC1155BaseInternal._mint(to, itemId, amount, \\\"\\\");\\n    }\\n\\n    function _mintBatch(address to, uint[] calldata itemsIds, uint[] calldata amounts)\\n        internal\\n    {\\n        if (itemsIds.min() < 1) revert Items_InvalidItemId();\\n\\n        ERC1155BaseInternal._mintBatch(to, itemsIds, amounts, \\\"\\\");\\n    }\\n\\n    function _migrateToIPFS(string calldata newBaseURI, bool migrate) internal {\\n        _setBaseURI(newBaseURI);\\n        ItemsStorage.layout().isMigratedToIPFS = migrate;\\n    }\\n\\n    function _getInventoryAddress() internal view returns (address) {\\n        return ItemsStorage.layout().inventoryAddress;\\n    }\\n\\n    function _setInventoryAddress(address inventoryAddress) internal {\\n        ItemsStorage.layout().inventoryAddress = inventoryAddress;\\n    }\\n\\n    // overrides\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint[] memory ids,\\n        uint[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override (ERC1155BaseInternal, ERC1155EnumerableInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\",\"keccak256\":\"0x3653b90d1656ea5346f3cd221f616feadae08b5a34888a68cfbd513e3ef1a165\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/items/ItemsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary ItemsStorage {\\n\\n    bytes32 constant ITEMS_STORAGE_POSITION =\\n        keccak256(\\\"items.storage.position\\\");\\n\\n    struct Layout {\\n        // wallet address => token id => is claimed \\n        mapping(address => mapping(uint => uint)) amountClaimed;\\n        bool isMigratedToIPFS;\\n\\n        // token id => is basic item\\n        mapping(uint => bool) isBasicItem;\\n        uint[] basicItemsIds;\\n        address inventoryAddress;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ITEMS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x3402a30b584291bdf9a4e3b0f0c4514a5a076e2015fb6ccefe497d5970dd01a2\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/merkle/MerkleInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { MerkleProof } from \\\"@solidstate/contracts/cryptography/MerkleProof.sol\\\";\\nimport { MerkleStorage } from \\\"./MerkleStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract MerkleInternal is RolesInternal {\\n\\n    error Merkle_AlreadyClaimed();\\n    error Merkle_InvalidClaimAmount();\\n    error Merkle_NotIncludedInMerkleTree();\\n    error Merkle_ClaimInactive();\\n    error Merkle_ClaimStateAlreadyUpdated();\\n\\n    function _merkleRoot() internal view returns (bytes32) {\\n        return MerkleStorage.layout().merkleRoot;\\n    }\\n\\n    function _updateMerkleRoot(bytes32 newMerkleRoot) internal {\\n        MerkleStorage.layout().merkleRoot = newMerkleRoot;\\n    }\\n\\n    function _isMerkleClaimActive() view internal returns (bool) {\\n        return !MerkleStorage.layout().claimInactive;\\n    }\\n\\n    function _setMerkleClaimActive() internal {\\n        MerkleStorage.Layout storage merkleSL = MerkleStorage.layout();\\n\\n        if (!merkleSL.claimInactive) revert Merkle_ClaimStateAlreadyUpdated();\\n        \\n        merkleSL.claimInactive = false;\\n    }\\n\\n    function _setMerkleClaimInactive() internal {\\n        MerkleStorage.Layout storage merkleSL = MerkleStorage.layout();\\n\\n        if (merkleSL.claimInactive) revert Merkle_ClaimStateAlreadyUpdated();\\n        \\n        merkleSL.claimInactive = true;\\n    }\\n\\n    // To create 'leaf' use abi.encode(leafProp1, leafProp2, ...)\\n    function _consumeLeaf(bytes32[] memory proof, bytes memory _leaf) internal {\\n        MerkleStorage.Layout storage merkleSL = MerkleStorage.layout();\\n\\n        if (merkleSL.claimInactive) revert Merkle_ClaimInactive();\\n\\n        // TODO: IMPORTANT: ON PRODUCTION REVERT CHANGED ON ITEMS MERKLE CLAIM, TO AVOID INFINITE CLAIM\\n        bytes32 proofHash = keccak256(abi.encodePacked(proof));\\n        // if (merkleSL.claimedProof[proofHash]) revert Merkle_AlreadyClaimed();\\n\\n        bytes32 leaf = keccak256(bytes.concat(keccak256(_leaf)));\\n        bool isValid = MerkleProof.verify(proof, merkleSL.merkleRoot, leaf);\\n        \\n        if (!isValid) revert Merkle_NotIncludedInMerkleTree();\\n        \\n        merkleSL.claimedProof[proofHash] = true;\\n    }\\n}\",\"keccak256\":\"0x43428f13c6394136647e5ae9896fa48251b857228773ea2065cb57e7e01b9a21\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/merkle/MerkleStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary MerkleStorage {\\n\\n    bytes32 constant MERKLE_STORAGE_POSITION =\\n        keccak256(\\\"merkle.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 merkleRoot;\\n        bool claimInactive;\\n        mapping(bytes32 => bool) claimedProof;\\n        mapping(address => uint) amountClaimed;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = MERKLE_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x11ef54c6b46d894d3411e17a58e16372d442881341a87dc6c5d3d85473249b9b\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    error Roles_MissingAdminRole();\\n    error Roles_MissingManagerRole();\\n    error Roles_MissingAutomationRole();\\n\\n    modifier onlyDefaultAdmin() {\\n        if (!_hasRole(_defaultAdminRole(), msg.sender))\\n            revert Roles_MissingAdminRole();\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        if (!_hasRole(_managerRole(), msg.sender))\\n            revert Roles_MissingManagerRole();\\n        _;\\n    }\\n\\n    modifier onlyAutomation() {\\n        if (!_hasRole(_managerRole(), msg.sender) && !_hasRole(_automationRole(), msg.sender))\\n            revert Roles_MissingAutomationRole();\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _automationRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().automationRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.automationRole = keccak256(\\\"automation.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0x3bbcaec7bceb8497e1e96785c524e1cf67b54ba34713086686887d13502b5264\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 automationRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x6eb213b99e10477f695528196487fafafaeceb2b11c6f9f43f3ddb9e83f9e8d3\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { WhitelistStorage } from \\\"./WhitelistStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\ncontract WhitelistInternal is RolesInternal {\\n\\n    error Whitelist_ExceedsElegibleAmount();\\n    error Whitelist_InputDataMismatch();\\n    error Whitelist_ClaimStateAlreadyUpdated();\\n    error Whitelist_ClaimInactive();\\n\\n    event WhitelistBalanceChanged(address indexed account, WhitelistStorage.PoolId poolId, uint totalElegibleAmount, uint totalClaimedAmount);\\n\\n    function _totalClaimedWhitelist(WhitelistStorage.PoolId poolId) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].totalClaimed;\\n    }\\n\\n    function _totalElegibleWhitelist(WhitelistStorage.PoolId poolId) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].totalElegible;\\n    }\\n\\n    function _claimedWhitelist(WhitelistStorage.PoolId poolId, address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].claimed[account];\\n    }\\n\\n    function _elegibleWhitelist(WhitelistStorage.PoolId poolId, address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].elegible[account];\\n    }\\n\\n    function _consumeWhitelist(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        if (!pool.claimActive)\\n            revert Whitelist_ClaimInactive();\\n\\n        if (pool.elegible[account] < amount) \\n            revert Whitelist_ExceedsElegibleAmount();\\n\\n        pool.elegible[account] -= amount;\\n        pool.claimed[account] += amount;\\n        pool.totalClaimed += amount;\\n        pool.totalElegible -= amount;\\n\\n        emit WhitelistBalanceChanged(account, poolId, pool.elegible[account], pool.claimed[account]);\\n    }\\n\\n    function _increaseWhitelistElegible(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n        pool.elegible[account] += amount;\\n        pool.totalElegible += amount;\\n        \\n        emit WhitelistBalanceChanged(account, poolId, pool.elegible[account], pool.claimed[account]);\\n    }\\n\\n    function _increaseWhitelistElegibleBatch(WhitelistStorage.PoolId poolId, address[] calldata accounts, uint[] calldata amounts) internal {\\n        if (accounts.length != amounts.length) revert Whitelist_InputDataMismatch();\\n\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        for (uint i = 0; i < accounts.length; i++) {\\n            pool.elegible[accounts[i]] += amounts[i];\\n            pool.totalElegible += amounts[i];\\n            emit WhitelistBalanceChanged(accounts[i], poolId, pool.elegible[accounts[i]], pool.claimed[accounts[i]]);\\n        }\\n    }\\n\\n    function _setWhitelistElegible(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        pool.totalElegible += amount - pool.elegible[account];\\n        pool.elegible[account] += amount;\\n        emit WhitelistBalanceChanged(account, poolId, pool.elegible[account], pool.claimed[account]);\\n    }\\n\\n    function _setWhitelistElegibleBatch(WhitelistStorage.PoolId poolId, address[] calldata accounts, uint[] calldata amounts) internal {\\n        if (accounts.length != amounts.length) revert Whitelist_InputDataMismatch();\\n\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        for (uint i = 0; i < accounts.length; i++) {\\n            pool.totalElegible += amounts[i] - pool.elegible[accounts[i]];\\n            pool.elegible[accounts[i]] = amounts[i];\\n            emit WhitelistBalanceChanged(accounts[i], poolId, pool.elegible[accounts[i]], pool.claimed[accounts[i]]);\\n        }\\n    }\\n\\n    function _isWhitelistClaimActive(WhitelistStorage.PoolId poolId) view internal returns (bool) {\\n        return WhitelistStorage.layout().pools[poolId].claimActive;\\n    }\\n\\n    function _setWhitelistClaimActive(WhitelistStorage.PoolId poolId, bool active) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n        \\n        pool.claimActive = active;\\n    }\\n}\",\"keccak256\":\"0x680f347ea3539a2471f2348e90975112f23bcc14905113ceea7a1626d850d591\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary WhitelistStorage {\\n\\n    bytes32 constant WHITELIST_STORAGE_POSITION =\\n        keccak256(\\\"whitelist.storage.position\\\");\\n\\n    enum PoolId { Guaranteed, Restricted }\\n    \\n    struct Pool {\\n        mapping(address => uint) claimed;\\n        mapping(address => uint) elegible;\\n        uint totalClaimed;\\n        uint totalElegible;\\n        bool claimActive;\\n    }\\n\\n    struct Layout {\\n        // pool id => tokens pool\\n        mapping(PoolId => Pool) pools;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = WHITELIST_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xe7be89f6f179b20a27648d166a17cc0f91abd01fc7898cf6963dacb299cf4ae1\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613aae806100206000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806384118c5d116100de578063bd85b03911610097578063ceb60ee611610071578063ceb60ee6146103ab578063d81d0a15146103be578063e985e9c5146103d1578063f242432a146103e457600080fd5b8063bd85b03914610372578063c22cbb5d14610385578063cdc11b111461039857600080fd5b806384118c5d146102e657806385bff2e7146102f9578063a22cb4651461030c578063ac9650d81461031f578063b390c0ab1461033f578063ba58bb171461035257600080fd5b80632eb2c2d61161014b57806355b4b1a41161012557806355b4b1a41461028d57806355f804b3146102a05780636dcfd841146102b357806383ca4b6f146102d357600080fd5b80632eb2c2d6146102475780634e1273f41461025a5780634f7fb3321461027a57600080fd5b8062fdd58e1461019257806301ffc9a7146101b85780630e89341c146101ec57806313ba55df1461020c578063156e29f61461021f578063162094c414610234575b600080fd5b6101a56101a0366004612b47565b6103f7565b6040519081526020015b60405180910390f35b6101dc6101c6366004612b87565b6001600160e01b031916636cdb3d1360e11b1490565b60405190151581526020016101af565b6101ff6101fa366004612bab565b61040c565b6040516101af9190612c14565b6101a561021a366004612bab565b610476565b61023261022d366004612c27565b610481565b005b610232610242366004612ca2565b6104cd565b610232610255366004612e36565b610543565b61026d610268366004612edf565b610595565b6040516101af9190612fe4565b61023261028836600461303b565b6106ff565b6101a561029b366004612b47565b610761565b6102326102ae3660046130d4565b6107a9565b6102c66102c1366004612bab565b610822565b6040516101af9190613115565b6102326102e1366004613162565b61082d565b6102326102f43660046131ae565b610838565b61026d610307366004613200565b6108c8565b61023261031a36600461322b565b6108d3565b61033261032d36600461325e565b610987565b6040516101af9190613293565b61023261034d3660046132f5565b610aa1565b61035a610aac565b6040516001600160a01b0390911681526020016101af565b6101a5610380366004612bab565b610ae4565b610232610393366004613200565b610b17565b6102326103a6366004613317565b610b9a565b6102326103b936600461336a565b610bdb565b6102326103cc3660046133c9565b610c2e565b6101dc6103df366004613449565b610c71565b6102326103f2366004613473565b610cbe565b60006104038383610d4e565b90505b92915050565b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d75460609060ff16156104685761044282610dac565b60405160200161045291906134d7565b6040516020818303038152906040529050919050565b61040682610dac565b919050565b600061040682610f7b565b6104a061049a600080516020613a398339815191525490565b33610fb1565b6104bd5760405163d0befa1d60e01b815260040160405180910390fd5b6104c8838383610fe8565b505050565b6104e661049a600080516020613a398339815191525490565b6105035760405163d0befa1d60e01b815260040160405180910390fd5b6104c88383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102592505050565b6001600160a01b038516331480159061056357506105618533610c71565b155b15610580576040516212efed60e91b815260040160405180910390fd5b61058e338686868686611099565b5050505050565b606081518351146105b957604051633e7e0b6d60e11b815260040160405180910390fd5b8251600080516020613a59833981519152906000906001600160401b038111156105e5576105e5612ced565b60405190808252806020026020018201604052801561060e578160200160208202803683370190505b50905060005b85518110156106f65760006001600160a01b031686828151811061063a5761063a613500565b60200260200101516001600160a01b0316036106695760405163db5d879760e01b815260040160405180910390fd5b82600086838151811061067e5761067e613500565b6020026020010151815260200190815260200160002060008783815181106106a8576106a8613500565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106106e3576106e3613500565b6020908102919091010152600101610614565b50949350505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361074257604051635db5c7cd60e11b815260040160405180910390fd5b60028155610755338888888888886110bd565b60019055505050505050565b6001600160a01b03821660009081527f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d660209081526040808320848452909152812054610403565b6107c261049a600080516020613a398339815191525490565b6107df5760405163d0befa1d60e01b815260040160405180910390fd5b61081e82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061133992505050565b5050565b606061040682611364565b61081e338383611437565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361087b57604051635db5c7cd60e11b815260040160405180910390fd5b6002815560408051602080850282810182019093528482526108be923392899289928991899182918501908490808284376000920191909152506115f192505050565b6001905550505050565b606061040682611783565b6001600160a01b03821633036108fc57604051637b30a93360e11b815260040160405180910390fd5b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b038111156109a1576109a1612ced565b6040519080825280602002602001820160405280156109d457816020015b60608152602001906001900390816109bf5790505b50905060005b82811015610a9a57600080308686858181106109f8576109f8613500565b9050602002810190610a0a9190613516565b604051610a1892919061355c565b600060405180830381855af49150503d8060008114610a53576040519150601f19603f3d011682016040523d82523d6000602084013e610a58565b606091505b50915091508115610a865780848481518110610a7657610a76613500565b6020026020010181905250610a90565b3d6000803e3d6000fd5b50506001016109da565b5092915050565b61081e33838361184b565b6000610adf7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da546001600160a01b031690565b905090565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea6020526040812054610406565b610b3061049a600080516020613a398339815191525490565b610b4d5760405163d0befa1d60e01b815260040160405180910390fd5b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b50565b610bb361049a600080516020613a398339815191525490565b610bd05760405163d0befa1d60e01b815260040160405180910390fd5b6104c883838361194a565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc8054600203610c1e57604051635db5c7cd60e11b815260040160405180910390fd5b600281556108be858585856119bd565b610c4761049a600080516020613a398339815191525490565b610c645760405163d0befa1d60e01b815260040160405180910390fd5b61058e8585858585611a97565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b6001600160a01b0385163314801590610cde5750610cdc8533610c71565b155b8015610d23575033610d177f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da546001600160a01b031690565b6001600160a01b031614155b15610d40576040516212efed60e91b815260040160405180910390fd5b61058e338686868686611b70565b60006001600160a01b038316610d775760405163db5d879760e01b815260040160405180910390fd5b600080516020613a598339815191526000928352602090815260408084206001600160a01b0395909516845293905250205490565b60008181527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f56020526040812080546060927f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f4929091610e0b9061356c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e379061356c565b8015610e845780601f10610e5957610100808354040283529160200191610e84565b820191906000526020600020905b815481529060010190602001808311610e6757829003601f168201915b505050505090506000826000018054610e9c9061356c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec89061356c565b8015610f155780601f10610eea57610100808354040283529160200191610f15565b820191906000526020600020905b815481529060010190602001808311610ef857829003601f168201915b505050505090508051600003610f2d57509392505050565b815115610f60578082604051602001610f479291906135a6565b6040516020818303038152906040529350505050919050565b80610f6a86611b8c565b604051602001610f479291906135a6565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb6020526040812061040690611c94565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206104039083611c9e565b600182101561100a5760405163225c19bb60e11b815260040160405180910390fd5b6104c883838360405180602001604052806000815250611cc0565b60008281527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f56020526040902061105c828261361b565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8260405161108d9190612c14565b60405180910390a25050565b6110a7868686868686611d90565b6110b5868686868686611f39565b505050505050565b8483146110dd57604051634e98d26360e01b815260040160405180910390fd5b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d660005b868110156112e757600188888381811061111d5761111d613500565b9050602002013510156111435760405163225c19bb60e11b815260040160405180910390fd5b60008989898481811061115857611158613500565b9050602002013588888581811061117157611171613500565b905060200201356040516020016111a6939291906001600160a01b039390931683526020830191909152604082015260600190565b60405160208183030381529060405290506112178585848181106111cc576111cc613500565b90506020028101906111de91906136da565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525085925061205b915050565b6112628a8a8a8581811061122d5761122d613500565b9050602002013589898681811061124657611246613500565b9050602002013560405180602001604052806000815250611cc0565b86868381811061127457611274613500565b6001600160a01b038d16600090815260208781526040822092029390930135929091508b8b868181106112a9576112a9613500565b90506020020135815260200190815260200160002060008282546112cd9190613739565b909155508291506112df90508161374c565b915050611101565b50876001600160a01b03167f34b59152bfd6249b4e606f915024f944c88ccc9dfe0c2ee58cf094b5152b1a9d888888886040516113279493929190613797565b60405180910390a25050505050505050565b7f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f461081e828261361b565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb6020526040812060609161139d82611c94565b6001600160401b038111156113b4576113b4612ced565b6040519080825280602002602001820160405280156113dd578160200160208202803683370190505b50905060005b6113ec83611c94565b81101561142f576113fd8382612172565b82828151811061140f5761140f613500565b6001600160a01b03909216602092830291909101909101526001016113e3565b509392505050565b6001600160a01b03831661145e5760405163baa75df760e01b815260040160405180910390fd5b805182511461148057604051633e7e0b6d60e11b815260040160405180910390fd5b61149e3384600085856040518060200160405280600081525061217e565b600080516020613a5983398151915260005b83518110156115925760008482815181106114cd576114cd613500565b602002602001015190508260008281526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000205484838151811061151f5761151f613500565b6020026020010151111561154657604051634190713d60e01b815260040160405180910390fd5b83828151811061155857611558613500565b602090810291909101810151600092835284825260408084206001600160a01b038a168552909252912080549190910390556001016114b0565b5060006001600160a01b0316846001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516115e39291906137c9565b60405180910390a450505050565b60018310156116135760405163225c19bb60e11b815260040160405180910390fd5b604080516001600160a01b038616602082015280820185905260608082018590528251808303909101815260809091019091527f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d690611672838261205b565b61168d86868660405180602001604052806000815250611cc0565b6001600160a01b038616600090815260208381526040808320888452909152812080548692906116be908490613739565b90915550506040805160018082528183019092526000916020808301908036833701905050905085816000815181106116f9576116f9613500565b6020908102919091010152604080516001808252818301909252600091816020016020820280368337019050509050858160008151811061173c5761173c613500565b602002602001018181525050876001600160a01b03167f34b59152bfd6249b4e606f915024f944c88ccc9dfe0c2ee58cf094b5152b1a9d83836040516113279291906137c9565b6001600160a01b03811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec602052604081206060916117c682611c94565b6001600160401b038111156117dd576117dd612ced565b604051908082528060200260200182016040528015611806578160200160208202803683370190505b50905060005b61181583611c94565b81101561142f576118268382612172565b82828151811061183857611838613500565b602090810291909101015260010161180c565b6001600160a01b0383166118725760405163baa75df760e01b815260040160405180910390fd5b6118a0338460006118828661218c565b61188b8661218c565b6040518060200160405280600081525061217e565b6000828152600080516020613a59833981519152602090815260408083206001600160a01b038716845291829052909120548211156118f257604051634190713d60e01b815260040160405180910390fd5b6001600160a01b03841660008181526020838152604080832080548790039055805187815291820186905291929133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291016115e3565b61198983838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061133992505050565b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d7805460ff19169115159190911790555050565b8281146119dd57604051634e98d26360e01b815260040160405180910390fd5b6000805b84811015611a8a5760018686838181106119fd576119fd613500565b905060200201351015611a235760405163225c19bb60e11b815260040160405180910390fd5b611a5233878784818110611a3957611a39613500565b9050602002013586868581811061124657611246613500565b838382818110611a6457611a64613500565b9050602002013582611a769190613739565b915080611a828161374c565b9150506119e1565b5061058e600033836121d7565b6001611ad585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061238c92505050565b1015611af45760405163225c19bb60e11b815260040160405180910390fd5b61058e85858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920182905250604080516020810190915290815292506123e2915050565b611b7e868686868686612539565b6110b586868686868661264f565b606081600003611bb35750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611bdd5780611bc78161374c565b9150611bd69050600a8361380d565b9150611bb7565b6000816001600160401b03811115611bf757611bf7612ced565b6040519080825280601f01601f191660200182016040528015611c21576020820181803683370190505b5090505b8415611c8c57611c36600183613821565b9150611c43600a86613834565b611c4e906030613739565b60f81b818381518110611c6357611c63613500565b60200101906001600160f81b031916908160001a905350611c85600a8661380d565b9450611c25565b949350505050565b6000610406825490565b6001600160a01b03811660009081526001830160205260408120541515610403565b6001600160a01b038416611ce7576040516301c8efbf60e11b815260040160405180910390fd5b611d0633600086611cf78761218c565b611d008761218c565b8661217e565b6000838152600080516020613a59833981519152602090815260408083206001600160a01b038816845290915281208054849290611d45908490613739565b909155505060408051848152602081018490526001600160a01b0386169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291016115e3565b6001600160a01b038416611db75760405163f5cadad560e01b815260040160405180910390fd5b8151835114611dd957604051633e7e0b6d60e11b815260040160405180910390fd5b611de786868686868661217e565b600080516020613a5983398151915260005b8451811015611ed8576000858281518110611e1657611e16613500565b602002602001015190506000858381518110611e3457611e34613500565b602090810291909101810151600084815286835260408082206001600160a01b038e168352909352919091205490915080821115611e855760405163119ac6bb60e31b815260040160405180910390fd5b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a168152908120805460019590950194839290611ecb908490613739565b90915550611df992505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f289291906137c9565b60405180910390a450505050505050565b6001600160a01b0384163b156110b55760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611f7d9089908990889088908890600401613848565b6020604051808303816000875af1925050508015611fb8575060408051601f3d908101601f19168201909252611fb5918101906138a6565b60015b61202157611fc46138c3565b806308c379a0036120065750611fd86138df565b80611fe35750612008565b8060405162461bcd60e51b8152600401611ffd9190612c14565b60405180910390fd5b505b60405163380147a960e01b815260040160405180910390fd5b6001600160e01b0319811663bc197c8160e01b1461205257604051633744db2960e01b815260040160405180910390fd5b50505050505050565b7f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c09547f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c089060ff16156120c05760405163a2f902f160e01b815260040160405180910390fd5b6000836040516020016120d39190613968565b6040516020818303038152906040528051906020012090506000838051906020012060405160200161210791815260200190565b60405160208183030381529060405280519060200120905060006121308685600001548461270b565b90508061215057604051631006f83b60e31b815260040160405180910390fd5b50506000908152600290910160205260409020805460ff191660011790555050565b600061040383836127b0565b6110b58686868686866127fc565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106121c6576121c6613500565b602090810291909101015292915050565b7ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35886000818186600181111561220e5761220e61399e565b600181111561221f5761221f61399e565b81526020810191909152604001600020600481015490915060ff1661225757604051633137c0e960e11b815260040160405180910390fd5b6001600160a01b038416600090815260018201602052604090205483111561229257604051630f8a2c5f60e31b815260040160405180910390fd5b6001600160a01b0384166000908152600182016020526040812080548592906122bc908490613821565b90915550506001600160a01b038416600090815260208290526040812080548592906122e9908490613739565b92505081905550828160020160008282546123049190613739565b925050819055508281600301600082825461231f9190613821565b90915550506001600160a01b038416600081815260018301602090815260408083205491859052918290205491517f6526db8cb857c3bc972db45a7984e99efaed17f7a4e51afb85c64450133cb55c9261237d928a929091906139b4565b60405180910390a25050505050565b6000600019815b8351811015610a9a57818482815181106123af576123af613500565b602002602001015110156123da578381815181106123cf576123cf613500565b602002602001015191505b600101612393565b6001600160a01b038416612409576040516301c8efbf60e11b815260040160405180910390fd5b815183511461242b57604051633e7e0b6d60e11b815260040160405180910390fd5b61243a3360008686868661217e565b600080516020613a5983398151915260005b84518110156124d95783818151811061246757612467613500565b602002602001015182600087848151811061248457612484613500565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546124cc9190613739565b909155505060010161244c565b50846001600160a01b031660006001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161252a9291906137c9565b60405180910390a45050505050565b6001600160a01b0384166125605760405163f5cadad560e01b815260040160405180910390fd5b61256f868686611cf78761218c565b6000838152600080516020613a59833981519152602081815260408084206001600160a01b038a16855290915290912054808411156125c15760405163119ac6bb60e31b815260040160405180910390fd5b6000858152602083815260408083206001600160a01b038b81168552925280832093879003909355871681529081208054859290612600908490613739565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611f28565b6001600160a01b0384163b156110b55760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061269390899089908890889088906004016139ea565b6020604051808303816000875af19250505080156126ce575060408051601f3d908101601f191682019092526126cb918101906138a6565b60015b6126da57611fc46138c3565b6001600160e01b0319811663f23a6e6160e01b1461205257604051633744db2960e01b815260040160405180910390fd5b600081815b85518110156127a557600086828151811061272d5761272d613500565b6020026020010151905080831161276f57604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061279c565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50600101612710565b509092149392505050565b815460009082106127d45760405163e637bf3b60e01b815260040160405180910390fd5b8260000182815481106127e9576127e9613500565b9060005260206000200154905092915050565b6110b5868686868686836001600160a01b0316856001600160a01b0316146110b5576001600160a01b0385811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040808220928716825281207fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea927fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb929091905b87518110156129e45760008782815181106128c3576128c3613500565b6020026020010151905060008111156129db5760008983815181106128ea576128ea613500565b6020026020010151905060006001600160a01b03168c6001600160a01b031603612937576000818152602088905260408120805484929061292c908490613739565b9091555061296c9050565b816129428d83610d4e565b0361296c57600081815260208790526040902061295f908d6129f1565b5061296a8582612a06565b505b6001600160a01b038b166129a35760008181526020889052604081208054849290612998908490613821565b909155506129d99050565b6129ad8b82610d4e565b6000036129d95760008181526020879052604090206129cc908c612a12565b506129d78482612a27565b505b505b506001016128a6565b5050505050505050505050565b6000610403836001600160a01b038416612a33565b60006104038383612a33565b6000610403836001600160a01b038416612aed565b60006104038383612aed565b60008181526001830160205260408120548015610a9a57835460009085906000198101908110612a6557612a65613500565b9060005260206000200154905080856000016001840381548110612a8b57612a8b613500565b6000918252602080832090910192909255918252600186019052604090208190558354849080612abd57612abd613a22565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b6000818152600183016020526040812054610406575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b80356001600160a01b038116811461047157600080fd5b60008060408385031215612b5a57600080fd5b612b6383612b30565b946020939093013593505050565b6001600160e01b031981168114610b9757600080fd5b600060208284031215612b9957600080fd5b8135612ba481612b71565b9392505050565b600060208284031215612bbd57600080fd5b5035919050565b60005b83811015612bdf578181015183820152602001612bc7565b50506000910152565b60008151808452612c00816020860160208601612bc4565b601f01601f19169290920160200192915050565b6020815260006104036020830184612be8565b600080600060608486031215612c3c57600080fd5b612c4584612b30565b95602085013595506040909401359392505050565b60008083601f840112612c6c57600080fd5b5081356001600160401b03811115612c8357600080fd5b602083019150836020828501011115612c9b57600080fd5b9250929050565b600080600060408486031215612cb757600080fd5b8335925060208401356001600160401b03811115612cd457600080fd5b612ce086828701612c5a565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612d2857612d28612ced565b6040525050565b60006001600160401b03821115612d4857612d48612ced565b5060051b60200190565b600082601f830112612d6357600080fd5b81356020612d7082612d2f565b604051612d7d8282612d03565b83815260059390931b8501820192828101915086841115612d9d57600080fd5b8286015b84811015612db85780358352918301918301612da1565b509695505050505050565b600082601f830112612dd457600080fd5b81356001600160401b03811115612ded57612ded612ced565b604051612e04601f8301601f191660200182612d03565b818152846020838601011115612e1957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612e4e57600080fd5b612e5786612b30565b9450612e6560208701612b30565b935060408601356001600160401b0380821115612e8157600080fd5b612e8d89838a01612d52565b94506060880135915080821115612ea357600080fd5b612eaf89838a01612d52565b93506080880135915080821115612ec557600080fd5b50612ed288828901612dc3565b9150509295509295909350565b60008060408385031215612ef257600080fd5b82356001600160401b0380821115612f0957600080fd5b818501915085601f830112612f1d57600080fd5b81356020612f2a82612d2f565b604051612f378282612d03565b83815260059390931b8501820192828101915089841115612f5757600080fd5b948201945b83861015612f7c57612f6d86612b30565b82529482019490820190612f5c565b96505086013592505080821115612f9257600080fd5b50612f9f85828601612d52565b9150509250929050565b600081518084526020808501945080840160005b83811015612fd957815187529582019590820190600101612fbd565b509495945050505050565b6020815260006104036020830184612fa9565b60008083601f84011261300957600080fd5b5081356001600160401b0381111561302057600080fd5b6020830191508360208260051b8501011115612c9b57600080fd5b6000806000806000806060878903121561305457600080fd5b86356001600160401b038082111561306b57600080fd5b6130778a838b01612ff7565b9098509650602089013591508082111561309057600080fd5b61309c8a838b01612ff7565b909650945060408901359150808211156130b557600080fd5b506130c289828a01612ff7565b979a9699509497509295939492505050565b600080602083850312156130e757600080fd5b82356001600160401b038111156130fd57600080fd5b61310985828601612c5a565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156131565783516001600160a01b031683529284019291840191600101613131565b50909695505050505050565b6000806040838503121561317557600080fd5b82356001600160401b038082111561318c57600080fd5b61319886838701612d52565b93506020850135915080821115612f9257600080fd5b600080600080606085870312156131c457600080fd5b843593506020850135925060408501356001600160401b038111156131e857600080fd5b6131f487828801612ff7565b95989497509550505050565b60006020828403121561321257600080fd5b61040382612b30565b8035801515811461047157600080fd5b6000806040838503121561323e57600080fd5b61324783612b30565b91506132556020840161321b565b90509250929050565b6000806020838503121561327157600080fd5b82356001600160401b0381111561328757600080fd5b61310985828601612ff7565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156132e857603f198886030184526132d6858351612be8565b945092850192908501906001016132ba565b5092979650505050505050565b6000806040838503121561330857600080fd5b50508035926020909101359150565b60008060006040848603121561332c57600080fd5b83356001600160401b0381111561334257600080fd5b61334e86828701612c5a565b909450925061336190506020850161321b565b90509250925092565b6000806000806040858703121561338057600080fd5b84356001600160401b038082111561339757600080fd5b6133a388838901612ff7565b909650945060208701359150808211156133bc57600080fd5b506131f487828801612ff7565b6000806000806000606086880312156133e157600080fd5b6133ea86612b30565b945060208601356001600160401b038082111561340657600080fd5b61341289838a01612ff7565b9096509450604088013591508082111561342b57600080fd5b5061343888828901612ff7565b969995985093965092949392505050565b6000806040838503121561345c57600080fd5b61346583612b30565b915061325560208401612b30565b600080600080600060a0868803121561348b57600080fd5b61349486612b30565b94506134a260208701612b30565b9350604086013592506060860135915060808601356001600160401b038111156134cb57600080fd5b612ed288828901612dc3565b600082516134e9818460208701612bc4565b64173539b7b760d91b920191825250600501919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261352d57600080fd5b8301803591506001600160401b0382111561354757600080fd5b602001915036819003821315612c9b57600080fd5b8183823760009101908152919050565b600181811c9082168061358057607f821691505b6020821081036135a057634e487b7160e01b600052602260045260246000fd5b50919050565b600083516135b8818460208801612bc4565b8351908301906135cc818360208801612bc4565b01949350505050565b601f8211156104c857600081815260208120601f850160051c810160208610156135fc5750805b601f850160051c820191505b818110156110b557828155600101613608565b81516001600160401b0381111561363457613634612ced565b61364881613642845461356c565b846135d5565b602080601f83116001811461367d57600084156136655750858301515b600019600386901b1c1916600185901b1785556110b5565b600085815260208120601f198616915b828110156136ac5788860151825594840194600190910190840161368d565b50858210156136ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808335601e198436030181126136f157600080fd5b8301803591506001600160401b0382111561370b57600080fd5b6020019150600581901b3603821315612c9b57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561040657610406613723565b60006001820161375e5761375e613723565b5060010190565b81835260006001600160fb1b0383111561377e57600080fd5b8260051b80836020870137939093016020019392505050565b6040815260006137ab604083018688613765565b82810360208401526137be818587613765565b979650505050505050565b6040815260006137dc6040830185612fa9565b82810360208401526137ee8185612fa9565b95945050505050565b634e487b7160e01b600052601260045260246000fd5b60008261381c5761381c6137f7565b500490565b8181038181111561040657610406613723565b600082613843576138436137f7565b500690565b60006001600160a01b03808816835280871660208401525060a0604083015261387460a0830186612fa9565b82810360608401526138868186612fa9565b9050828103608084015261389a8185612be8565b98975050505050505050565b6000602082840312156138b857600080fd5b8151612ba481612b71565b600060033d11156138dc5760046000803e5060005160e01c5b90565b600060443d10156138ed5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561391c57505050505090565b82850191508151818111156139345750505050505090565b843d870101602082850101111561394e5750505050505090565b61395d60208286010187612d03565b509095945050505050565b815160009082906020808601845b8381101561399257815185529382019390820190600101613976565b50929695505050505050565b634e487b7160e01b600052602160045260246000fd5b60608101600285106139d657634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526137be60a0830184612be8565b634e487b7160e01b600052603160045260246000fdfef6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa721799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68ba2646970667358221220b1befb9f4a95af1d63dcd5b29e21c8b813616f16fd8dd1f2563b55ee9b49097e64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c806384118c5d116100de578063bd85b03911610097578063ceb60ee611610071578063ceb60ee6146103ab578063d81d0a15146103be578063e985e9c5146103d1578063f242432a146103e457600080fd5b8063bd85b03914610372578063c22cbb5d14610385578063cdc11b111461039857600080fd5b806384118c5d146102e657806385bff2e7146102f9578063a22cb4651461030c578063ac9650d81461031f578063b390c0ab1461033f578063ba58bb171461035257600080fd5b80632eb2c2d61161014b57806355b4b1a41161012557806355b4b1a41461028d57806355f804b3146102a05780636dcfd841146102b357806383ca4b6f146102d357600080fd5b80632eb2c2d6146102475780634e1273f41461025a5780634f7fb3321461027a57600080fd5b8062fdd58e1461019257806301ffc9a7146101b85780630e89341c146101ec57806313ba55df1461020c578063156e29f61461021f578063162094c414610234575b600080fd5b6101a56101a0366004612b47565b6103f7565b6040519081526020015b60405180910390f35b6101dc6101c6366004612b87565b6001600160e01b031916636cdb3d1360e11b1490565b60405190151581526020016101af565b6101ff6101fa366004612bab565b61040c565b6040516101af9190612c14565b6101a561021a366004612bab565b610476565b61023261022d366004612c27565b610481565b005b610232610242366004612ca2565b6104cd565b610232610255366004612e36565b610543565b61026d610268366004612edf565b610595565b6040516101af9190612fe4565b61023261028836600461303b565b6106ff565b6101a561029b366004612b47565b610761565b6102326102ae3660046130d4565b6107a9565b6102c66102c1366004612bab565b610822565b6040516101af9190613115565b6102326102e1366004613162565b61082d565b6102326102f43660046131ae565b610838565b61026d610307366004613200565b6108c8565b61023261031a36600461322b565b6108d3565b61033261032d36600461325e565b610987565b6040516101af9190613293565b61023261034d3660046132f5565b610aa1565b61035a610aac565b6040516001600160a01b0390911681526020016101af565b6101a5610380366004612bab565b610ae4565b610232610393366004613200565b610b17565b6102326103a6366004613317565b610b9a565b6102326103b936600461336a565b610bdb565b6102326103cc3660046133c9565b610c2e565b6101dc6103df366004613449565b610c71565b6102326103f2366004613473565b610cbe565b60006104038383610d4e565b90505b92915050565b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d75460609060ff16156104685761044282610dac565b60405160200161045291906134d7565b6040516020818303038152906040529050919050565b61040682610dac565b919050565b600061040682610f7b565b6104a061049a600080516020613a398339815191525490565b33610fb1565b6104bd5760405163d0befa1d60e01b815260040160405180910390fd5b6104c8838383610fe8565b505050565b6104e661049a600080516020613a398339815191525490565b6105035760405163d0befa1d60e01b815260040160405180910390fd5b6104c88383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102592505050565b6001600160a01b038516331480159061056357506105618533610c71565b155b15610580576040516212efed60e91b815260040160405180910390fd5b61058e338686868686611099565b5050505050565b606081518351146105b957604051633e7e0b6d60e11b815260040160405180910390fd5b8251600080516020613a59833981519152906000906001600160401b038111156105e5576105e5612ced565b60405190808252806020026020018201604052801561060e578160200160208202803683370190505b50905060005b85518110156106f65760006001600160a01b031686828151811061063a5761063a613500565b60200260200101516001600160a01b0316036106695760405163db5d879760e01b815260040160405180910390fd5b82600086838151811061067e5761067e613500565b6020026020010151815260200190815260200160002060008783815181106106a8576106a8613500565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106106e3576106e3613500565b6020908102919091010152600101610614565b50949350505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361074257604051635db5c7cd60e11b815260040160405180910390fd5b60028155610755338888888888886110bd565b60019055505050505050565b6001600160a01b03821660009081527f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d660209081526040808320848452909152812054610403565b6107c261049a600080516020613a398339815191525490565b6107df5760405163d0befa1d60e01b815260040160405180910390fd5b61081e82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061133992505050565b5050565b606061040682611364565b61081e338383611437565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361087b57604051635db5c7cd60e11b815260040160405180910390fd5b6002815560408051602080850282810182019093528482526108be923392899289928991899182918501908490808284376000920191909152506115f192505050565b6001905550505050565b606061040682611783565b6001600160a01b03821633036108fc57604051637b30a93360e11b815260040160405180910390fd5b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b038111156109a1576109a1612ced565b6040519080825280602002602001820160405280156109d457816020015b60608152602001906001900390816109bf5790505b50905060005b82811015610a9a57600080308686858181106109f8576109f8613500565b9050602002810190610a0a9190613516565b604051610a1892919061355c565b600060405180830381855af49150503d8060008114610a53576040519150601f19603f3d011682016040523d82523d6000602084013e610a58565b606091505b50915091508115610a865780848481518110610a7657610a76613500565b6020026020010181905250610a90565b3d6000803e3d6000fd5b50506001016109da565b5092915050565b61081e33838361184b565b6000610adf7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da546001600160a01b031690565b905090565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea6020526040812054610406565b610b3061049a600080516020613a398339815191525490565b610b4d5760405163d0befa1d60e01b815260040160405180910390fd5b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b50565b610bb361049a600080516020613a398339815191525490565b610bd05760405163d0befa1d60e01b815260040160405180910390fd5b6104c883838361194a565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc8054600203610c1e57604051635db5c7cd60e11b815260040160405180910390fd5b600281556108be858585856119bd565b610c4761049a600080516020613a398339815191525490565b610c645760405163d0befa1d60e01b815260040160405180910390fd5b61058e8585858585611a97565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b6001600160a01b0385163314801590610cde5750610cdc8533610c71565b155b8015610d23575033610d177f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da546001600160a01b031690565b6001600160a01b031614155b15610d40576040516212efed60e91b815260040160405180910390fd5b61058e338686868686611b70565b60006001600160a01b038316610d775760405163db5d879760e01b815260040160405180910390fd5b600080516020613a598339815191526000928352602090815260408084206001600160a01b0395909516845293905250205490565b60008181527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f56020526040812080546060927f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f4929091610e0b9061356c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e379061356c565b8015610e845780601f10610e5957610100808354040283529160200191610e84565b820191906000526020600020905b815481529060010190602001808311610e6757829003601f168201915b505050505090506000826000018054610e9c9061356c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec89061356c565b8015610f155780601f10610eea57610100808354040283529160200191610f15565b820191906000526020600020905b815481529060010190602001808311610ef857829003601f168201915b505050505090508051600003610f2d57509392505050565b815115610f60578082604051602001610f479291906135a6565b6040516020818303038152906040529350505050919050565b80610f6a86611b8c565b604051602001610f479291906135a6565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb6020526040812061040690611c94565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206104039083611c9e565b600182101561100a5760405163225c19bb60e11b815260040160405180910390fd5b6104c883838360405180602001604052806000815250611cc0565b60008281527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f56020526040902061105c828261361b565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8260405161108d9190612c14565b60405180910390a25050565b6110a7868686868686611d90565b6110b5868686868686611f39565b505050505050565b8483146110dd57604051634e98d26360e01b815260040160405180910390fd5b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d660005b868110156112e757600188888381811061111d5761111d613500565b9050602002013510156111435760405163225c19bb60e11b815260040160405180910390fd5b60008989898481811061115857611158613500565b9050602002013588888581811061117157611171613500565b905060200201356040516020016111a6939291906001600160a01b039390931683526020830191909152604082015260600190565b60405160208183030381529060405290506112178585848181106111cc576111cc613500565b90506020028101906111de91906136da565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525085925061205b915050565b6112628a8a8a8581811061122d5761122d613500565b9050602002013589898681811061124657611246613500565b9050602002013560405180602001604052806000815250611cc0565b86868381811061127457611274613500565b6001600160a01b038d16600090815260208781526040822092029390930135929091508b8b868181106112a9576112a9613500565b90506020020135815260200190815260200160002060008282546112cd9190613739565b909155508291506112df90508161374c565b915050611101565b50876001600160a01b03167f34b59152bfd6249b4e606f915024f944c88ccc9dfe0c2ee58cf094b5152b1a9d888888886040516113279493929190613797565b60405180910390a25050505050505050565b7f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f461081e828261361b565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb6020526040812060609161139d82611c94565b6001600160401b038111156113b4576113b4612ced565b6040519080825280602002602001820160405280156113dd578160200160208202803683370190505b50905060005b6113ec83611c94565b81101561142f576113fd8382612172565b82828151811061140f5761140f613500565b6001600160a01b03909216602092830291909101909101526001016113e3565b509392505050565b6001600160a01b03831661145e5760405163baa75df760e01b815260040160405180910390fd5b805182511461148057604051633e7e0b6d60e11b815260040160405180910390fd5b61149e3384600085856040518060200160405280600081525061217e565b600080516020613a5983398151915260005b83518110156115925760008482815181106114cd576114cd613500565b602002602001015190508260008281526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000205484838151811061151f5761151f613500565b6020026020010151111561154657604051634190713d60e01b815260040160405180910390fd5b83828151811061155857611558613500565b602090810291909101810151600092835284825260408084206001600160a01b038a168552909252912080549190910390556001016114b0565b5060006001600160a01b0316846001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516115e39291906137c9565b60405180910390a450505050565b60018310156116135760405163225c19bb60e11b815260040160405180910390fd5b604080516001600160a01b038616602082015280820185905260608082018590528251808303909101815260809091019091527f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d690611672838261205b565b61168d86868660405180602001604052806000815250611cc0565b6001600160a01b038616600090815260208381526040808320888452909152812080548692906116be908490613739565b90915550506040805160018082528183019092526000916020808301908036833701905050905085816000815181106116f9576116f9613500565b6020908102919091010152604080516001808252818301909252600091816020016020820280368337019050509050858160008151811061173c5761173c613500565b602002602001018181525050876001600160a01b03167f34b59152bfd6249b4e606f915024f944c88ccc9dfe0c2ee58cf094b5152b1a9d83836040516113279291906137c9565b6001600160a01b03811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec602052604081206060916117c682611c94565b6001600160401b038111156117dd576117dd612ced565b604051908082528060200260200182016040528015611806578160200160208202803683370190505b50905060005b61181583611c94565b81101561142f576118268382612172565b82828151811061183857611838613500565b602090810291909101015260010161180c565b6001600160a01b0383166118725760405163baa75df760e01b815260040160405180910390fd5b6118a0338460006118828661218c565b61188b8661218c565b6040518060200160405280600081525061217e565b6000828152600080516020613a59833981519152602090815260408083206001600160a01b038716845291829052909120548211156118f257604051634190713d60e01b815260040160405180910390fd5b6001600160a01b03841660008181526020838152604080832080548790039055805187815291820186905291929133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291016115e3565b61198983838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061133992505050565b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d7805460ff19169115159190911790555050565b8281146119dd57604051634e98d26360e01b815260040160405180910390fd5b6000805b84811015611a8a5760018686838181106119fd576119fd613500565b905060200201351015611a235760405163225c19bb60e11b815260040160405180910390fd5b611a5233878784818110611a3957611a39613500565b9050602002013586868581811061124657611246613500565b838382818110611a6457611a64613500565b9050602002013582611a769190613739565b915080611a828161374c565b9150506119e1565b5061058e600033836121d7565b6001611ad585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061238c92505050565b1015611af45760405163225c19bb60e11b815260040160405180910390fd5b61058e85858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920182905250604080516020810190915290815292506123e2915050565b611b7e868686868686612539565b6110b586868686868661264f565b606081600003611bb35750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611bdd5780611bc78161374c565b9150611bd69050600a8361380d565b9150611bb7565b6000816001600160401b03811115611bf757611bf7612ced565b6040519080825280601f01601f191660200182016040528015611c21576020820181803683370190505b5090505b8415611c8c57611c36600183613821565b9150611c43600a86613834565b611c4e906030613739565b60f81b818381518110611c6357611c63613500565b60200101906001600160f81b031916908160001a905350611c85600a8661380d565b9450611c25565b949350505050565b6000610406825490565b6001600160a01b03811660009081526001830160205260408120541515610403565b6001600160a01b038416611ce7576040516301c8efbf60e11b815260040160405180910390fd5b611d0633600086611cf78761218c565b611d008761218c565b8661217e565b6000838152600080516020613a59833981519152602090815260408083206001600160a01b038816845290915281208054849290611d45908490613739565b909155505060408051848152602081018490526001600160a01b0386169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291016115e3565b6001600160a01b038416611db75760405163f5cadad560e01b815260040160405180910390fd5b8151835114611dd957604051633e7e0b6d60e11b815260040160405180910390fd5b611de786868686868661217e565b600080516020613a5983398151915260005b8451811015611ed8576000858281518110611e1657611e16613500565b602002602001015190506000858381518110611e3457611e34613500565b602090810291909101810151600084815286835260408082206001600160a01b038e168352909352919091205490915080821115611e855760405163119ac6bb60e31b815260040160405180910390fd5b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a168152908120805460019590950194839290611ecb908490613739565b90915550611df992505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f289291906137c9565b60405180910390a450505050505050565b6001600160a01b0384163b156110b55760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611f7d9089908990889088908890600401613848565b6020604051808303816000875af1925050508015611fb8575060408051601f3d908101601f19168201909252611fb5918101906138a6565b60015b61202157611fc46138c3565b806308c379a0036120065750611fd86138df565b80611fe35750612008565b8060405162461bcd60e51b8152600401611ffd9190612c14565b60405180910390fd5b505b60405163380147a960e01b815260040160405180910390fd5b6001600160e01b0319811663bc197c8160e01b1461205257604051633744db2960e01b815260040160405180910390fd5b50505050505050565b7f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c09547f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c089060ff16156120c05760405163a2f902f160e01b815260040160405180910390fd5b6000836040516020016120d39190613968565b6040516020818303038152906040528051906020012090506000838051906020012060405160200161210791815260200190565b60405160208183030381529060405280519060200120905060006121308685600001548461270b565b90508061215057604051631006f83b60e31b815260040160405180910390fd5b50506000908152600290910160205260409020805460ff191660011790555050565b600061040383836127b0565b6110b58686868686866127fc565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106121c6576121c6613500565b602090810291909101015292915050565b7ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35886000818186600181111561220e5761220e61399e565b600181111561221f5761221f61399e565b81526020810191909152604001600020600481015490915060ff1661225757604051633137c0e960e11b815260040160405180910390fd5b6001600160a01b038416600090815260018201602052604090205483111561229257604051630f8a2c5f60e31b815260040160405180910390fd5b6001600160a01b0384166000908152600182016020526040812080548592906122bc908490613821565b90915550506001600160a01b038416600090815260208290526040812080548592906122e9908490613739565b92505081905550828160020160008282546123049190613739565b925050819055508281600301600082825461231f9190613821565b90915550506001600160a01b038416600081815260018301602090815260408083205491859052918290205491517f6526db8cb857c3bc972db45a7984e99efaed17f7a4e51afb85c64450133cb55c9261237d928a929091906139b4565b60405180910390a25050505050565b6000600019815b8351811015610a9a57818482815181106123af576123af613500565b602002602001015110156123da578381815181106123cf576123cf613500565b602002602001015191505b600101612393565b6001600160a01b038416612409576040516301c8efbf60e11b815260040160405180910390fd5b815183511461242b57604051633e7e0b6d60e11b815260040160405180910390fd5b61243a3360008686868661217e565b600080516020613a5983398151915260005b84518110156124d95783818151811061246757612467613500565b602002602001015182600087848151811061248457612484613500565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546124cc9190613739565b909155505060010161244c565b50846001600160a01b031660006001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161252a9291906137c9565b60405180910390a45050505050565b6001600160a01b0384166125605760405163f5cadad560e01b815260040160405180910390fd5b61256f868686611cf78761218c565b6000838152600080516020613a59833981519152602081815260408084206001600160a01b038a16855290915290912054808411156125c15760405163119ac6bb60e31b815260040160405180910390fd5b6000858152602083815260408083206001600160a01b038b81168552925280832093879003909355871681529081208054859290612600908490613739565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611f28565b6001600160a01b0384163b156110b55760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061269390899089908890889088906004016139ea565b6020604051808303816000875af19250505080156126ce575060408051601f3d908101601f191682019092526126cb918101906138a6565b60015b6126da57611fc46138c3565b6001600160e01b0319811663f23a6e6160e01b1461205257604051633744db2960e01b815260040160405180910390fd5b600081815b85518110156127a557600086828151811061272d5761272d613500565b6020026020010151905080831161276f57604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061279c565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50600101612710565b509092149392505050565b815460009082106127d45760405163e637bf3b60e01b815260040160405180910390fd5b8260000182815481106127e9576127e9613500565b9060005260206000200154905092915050565b6110b5868686868686836001600160a01b0316856001600160a01b0316146110b5576001600160a01b0385811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040808220928716825281207fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea927fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb929091905b87518110156129e45760008782815181106128c3576128c3613500565b6020026020010151905060008111156129db5760008983815181106128ea576128ea613500565b6020026020010151905060006001600160a01b03168c6001600160a01b031603612937576000818152602088905260408120805484929061292c908490613739565b9091555061296c9050565b816129428d83610d4e565b0361296c57600081815260208790526040902061295f908d6129f1565b5061296a8582612a06565b505b6001600160a01b038b166129a35760008181526020889052604081208054849290612998908490613821565b909155506129d99050565b6129ad8b82610d4e565b6000036129d95760008181526020879052604090206129cc908c612a12565b506129d78482612a27565b505b505b506001016128a6565b5050505050505050505050565b6000610403836001600160a01b038416612a33565b60006104038383612a33565b6000610403836001600160a01b038416612aed565b60006104038383612aed565b60008181526001830160205260408120548015610a9a57835460009085906000198101908110612a6557612a65613500565b9060005260206000200154905080856000016001840381548110612a8b57612a8b613500565b6000918252602080832090910192909255918252600186019052604090208190558354849080612abd57612abd613a22565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b6000818152600183016020526040812054610406575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b80356001600160a01b038116811461047157600080fd5b60008060408385031215612b5a57600080fd5b612b6383612b30565b946020939093013593505050565b6001600160e01b031981168114610b9757600080fd5b600060208284031215612b9957600080fd5b8135612ba481612b71565b9392505050565b600060208284031215612bbd57600080fd5b5035919050565b60005b83811015612bdf578181015183820152602001612bc7565b50506000910152565b60008151808452612c00816020860160208601612bc4565b601f01601f19169290920160200192915050565b6020815260006104036020830184612be8565b600080600060608486031215612c3c57600080fd5b612c4584612b30565b95602085013595506040909401359392505050565b60008083601f840112612c6c57600080fd5b5081356001600160401b03811115612c8357600080fd5b602083019150836020828501011115612c9b57600080fd5b9250929050565b600080600060408486031215612cb757600080fd5b8335925060208401356001600160401b03811115612cd457600080fd5b612ce086828701612c5a565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612d2857612d28612ced565b6040525050565b60006001600160401b03821115612d4857612d48612ced565b5060051b60200190565b600082601f830112612d6357600080fd5b81356020612d7082612d2f565b604051612d7d8282612d03565b83815260059390931b8501820192828101915086841115612d9d57600080fd5b8286015b84811015612db85780358352918301918301612da1565b509695505050505050565b600082601f830112612dd457600080fd5b81356001600160401b03811115612ded57612ded612ced565b604051612e04601f8301601f191660200182612d03565b818152846020838601011115612e1957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612e4e57600080fd5b612e5786612b30565b9450612e6560208701612b30565b935060408601356001600160401b0380821115612e8157600080fd5b612e8d89838a01612d52565b94506060880135915080821115612ea357600080fd5b612eaf89838a01612d52565b93506080880135915080821115612ec557600080fd5b50612ed288828901612dc3565b9150509295509295909350565b60008060408385031215612ef257600080fd5b82356001600160401b0380821115612f0957600080fd5b818501915085601f830112612f1d57600080fd5b81356020612f2a82612d2f565b604051612f378282612d03565b83815260059390931b8501820192828101915089841115612f5757600080fd5b948201945b83861015612f7c57612f6d86612b30565b82529482019490820190612f5c565b96505086013592505080821115612f9257600080fd5b50612f9f85828601612d52565b9150509250929050565b600081518084526020808501945080840160005b83811015612fd957815187529582019590820190600101612fbd565b509495945050505050565b6020815260006104036020830184612fa9565b60008083601f84011261300957600080fd5b5081356001600160401b0381111561302057600080fd5b6020830191508360208260051b8501011115612c9b57600080fd5b6000806000806000806060878903121561305457600080fd5b86356001600160401b038082111561306b57600080fd5b6130778a838b01612ff7565b9098509650602089013591508082111561309057600080fd5b61309c8a838b01612ff7565b909650945060408901359150808211156130b557600080fd5b506130c289828a01612ff7565b979a9699509497509295939492505050565b600080602083850312156130e757600080fd5b82356001600160401b038111156130fd57600080fd5b61310985828601612c5a565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156131565783516001600160a01b031683529284019291840191600101613131565b50909695505050505050565b6000806040838503121561317557600080fd5b82356001600160401b038082111561318c57600080fd5b61319886838701612d52565b93506020850135915080821115612f9257600080fd5b600080600080606085870312156131c457600080fd5b843593506020850135925060408501356001600160401b038111156131e857600080fd5b6131f487828801612ff7565b95989497509550505050565b60006020828403121561321257600080fd5b61040382612b30565b8035801515811461047157600080fd5b6000806040838503121561323e57600080fd5b61324783612b30565b91506132556020840161321b565b90509250929050565b6000806020838503121561327157600080fd5b82356001600160401b0381111561328757600080fd5b61310985828601612ff7565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156132e857603f198886030184526132d6858351612be8565b945092850192908501906001016132ba565b5092979650505050505050565b6000806040838503121561330857600080fd5b50508035926020909101359150565b60008060006040848603121561332c57600080fd5b83356001600160401b0381111561334257600080fd5b61334e86828701612c5a565b909450925061336190506020850161321b565b90509250925092565b6000806000806040858703121561338057600080fd5b84356001600160401b038082111561339757600080fd5b6133a388838901612ff7565b909650945060208701359150808211156133bc57600080fd5b506131f487828801612ff7565b6000806000806000606086880312156133e157600080fd5b6133ea86612b30565b945060208601356001600160401b038082111561340657600080fd5b61341289838a01612ff7565b9096509450604088013591508082111561342b57600080fd5b5061343888828901612ff7565b969995985093965092949392505050565b6000806040838503121561345c57600080fd5b61346583612b30565b915061325560208401612b30565b600080600080600060a0868803121561348b57600080fd5b61349486612b30565b94506134a260208701612b30565b9350604086013592506060860135915060808601356001600160401b038111156134cb57600080fd5b612ed288828901612dc3565b600082516134e9818460208701612bc4565b64173539b7b760d91b920191825250600501919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261352d57600080fd5b8301803591506001600160401b0382111561354757600080fd5b602001915036819003821315612c9b57600080fd5b8183823760009101908152919050565b600181811c9082168061358057607f821691505b6020821081036135a057634e487b7160e01b600052602260045260246000fd5b50919050565b600083516135b8818460208801612bc4565b8351908301906135cc818360208801612bc4565b01949350505050565b601f8211156104c857600081815260208120601f850160051c810160208610156135fc5750805b601f850160051c820191505b818110156110b557828155600101613608565b81516001600160401b0381111561363457613634612ced565b61364881613642845461356c565b846135d5565b602080601f83116001811461367d57600084156136655750858301515b600019600386901b1c1916600185901b1785556110b5565b600085815260208120601f198616915b828110156136ac5788860151825594840194600190910190840161368d565b50858210156136ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808335601e198436030181126136f157600080fd5b8301803591506001600160401b0382111561370b57600080fd5b6020019150600581901b3603821315612c9b57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561040657610406613723565b60006001820161375e5761375e613723565b5060010190565b81835260006001600160fb1b0383111561377e57600080fd5b8260051b80836020870137939093016020019392505050565b6040815260006137ab604083018688613765565b82810360208401526137be818587613765565b979650505050505050565b6040815260006137dc6040830185612fa9565b82810360208401526137ee8185612fa9565b95945050505050565b634e487b7160e01b600052601260045260246000fd5b60008261381c5761381c6137f7565b500490565b8181038181111561040657610406613723565b600082613843576138436137f7565b500690565b60006001600160a01b03808816835280871660208401525060a0604083015261387460a0830186612fa9565b82810360608401526138868186612fa9565b9050828103608084015261389a8185612be8565b98975050505050505050565b6000602082840312156138b857600080fd5b8151612ba481612b71565b600060033d11156138dc5760046000803e5060005160e01c5b90565b600060443d10156138ed5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561391c57505050505090565b82850191508151818111156139345750505050505090565b843d870101602082850101111561394e5750505050505090565b61395d60208286010187612d03565b509095945050505050565b815160009082906020808601845b8381101561399257815185529382019390820190600101613976565b50929695505050505050565b634e487b7160e01b600052602160045260246000fd5b60608101600285106139d657634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526137be60a0830184612be8565b634e487b7160e01b600052603160045260246000fdfef6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa721799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68ba2646970667358221220b1befb9f4a95af1d63dcd5b29e21c8b813616f16fd8dd1f2563b55ee9b49097e64736f6c63430008130033",
  "devdoc": {
    "details": "This contract handles the creation and management of items It uses ERC1155 tokens to represent items and provides methods to mint new items, claim items via Merkle tree or a whitelist, and set the base and URIs for the items. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.",
    "kind": "dev",
    "methods": {
      "accountsByToken(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "list of holder addresses"
        }
      },
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "burn(uint256,uint256)": {
        "params": {
          "amount": "The item amount to burn",
          "itemId": "The ID of the item to burn"
        }
      },
      "burnBatch(uint256[],uint256[])": {
        "params": {
          "amounts": "The item amounts to be minted",
          "itemIds": "The item ID burn"
        }
      },
      "claimMerkle(uint256,uint256,bytes32[])": {
        "params": {
          "amount": "The amount of the item to claim",
          "itemId": "The ID of the item to claim",
          "proof": "The Merkle proof for the item"
        }
      },
      "claimMerkleBatch(uint256[],uint256[],bytes32[][])": {
        "params": {
          "amounts": "The amounts of the items to claim",
          "itemsIds": "The IDs of the items to claim",
          "proofs": "The Merkle proofs for the items"
        }
      },
      "claimWhitelist(uint256[],uint256[])": {
        "params": {
          "amounts": "The amounts of the items to claim",
          "itemIds": "The IDs of the items to claim"
        }
      },
      "claimedAmount(address,uint256)": {
        "params": {
          "account": "the account to query",
          "itemId": "the item id to query"
        },
        "returns": {
          "amount": "returns the claimed amount given an account and an item id"
        }
      },
      "getInventoryAddress()": {
        "details": "Returns the current inventory address",
        "returns": {
          "_0": "The address of the inventory contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "migrateToIPFS(string,bool)": {
        "details": "Only the manager role can call this function",
        "params": {
          "migrate": "Should migrate to IPFS",
          "newBaseURI": "The new base URI"
        }
      },
      "mint(address,uint256,uint256)": {
        "params": {
          "amount": "The item amount to be minted",
          "itemId": "The ID of the item to mint",
          "to": "The address to mint the item to"
        }
      },
      "mintBatch(address,uint256[],uint256[])": {
        "params": {
          "amounts": "The items amounts to be minted",
          "itemIds": "An array of items IDs to be minted",
          "to": "The address to receive the minted items"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "array of function call data payloads"
        },
        "returns": {
          "results": "array of function call results"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "setBaseURI(string)": {
        "details": "Only the manager role can call this function",
        "params": {
          "baseURI": "The new base URI"
        }
      },
      "setInventoryAddress(address)": {
        "details": "Sets the inventory address",
        "params": {
          "inventoryAddress": "The new address of the inventory contract"
        }
      },
      "setTokenURI(uint256,string)": {
        "details": "Only the manager role can call this function",
        "params": {
          "tokenId": "The ID of the item to set the URI for",
          "tokenURI": "The new item URI"
        }
      },
      "tokensByAccount(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "list of token ids"
        }
      },
      "totalHolders(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "quantity of holders"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "token supply"
        }
      }
    },
    "title": "ItemsFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accountsByToken(uint256)": {
        "notice": "query holders of given token"
      },
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "burn(uint256,uint256)": {
        "notice": "Burn an amount of an item"
      },
      "burnBatch(uint256[],uint256[])": {
        "notice": "Burn amounts of items"
      },
      "claimMerkle(uint256,uint256,bytes32[])": {
        "notice": "Claims an item if present in the Merkle tree"
      },
      "claimMerkleBatch(uint256[],uint256[],bytes32[][])": {
        "notice": "Claims items if present in the Merkle tree"
      },
      "claimWhitelist(uint256[],uint256[])": {
        "notice": "Claims items from a whitelist"
      },
      "claimedAmount(address,uint256)": {
        "notice": "Amount claimed by an address of a specific item"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "migrateToIPFS(string,bool)": {
        "notice": "Set the base URI for all items metadata"
      },
      "mint(address,uint256,uint256)": {
        "notice": "Mints a new item. Only minter role account can mint"
      },
      "mintBatch(address,uint256[],uint256[])": {
        "notice": "Mint a batch of items to a specific address. Only minter role account can mint"
      },
      "multicall(bytes[])": {
        "notice": "batch function calls to the contract and return the results of each"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      },
      "setBaseURI(string)": {
        "notice": "Set the base URI for all items metadata"
      },
      "setTokenURI(uint256,string)": {
        "notice": "Set the URI for a specific item ID"
      },
      "tokensByAccount(address)": {
        "notice": "query tokens held by given address"
      },
      "totalHolders(uint256)": {
        "notice": "query total number of holders for given token"
      },
      "totalSupply(uint256)": {
        "notice": "query total minted supply of given token"
      },
      "uri(uint256)": {
        "notice": "Override ERC1155Metadata"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}