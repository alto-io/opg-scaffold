{
  "address": "0x9a0811002f659C4D078c2310c9A170B2458E6ccc",
  "abi": [
    {
      "inputs": [],
      "name": "ERC1155Base__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BurnExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BurnFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__ERC1155ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__ERC1155ReceiverRejected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__TransferExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_InputsLengthMistatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Merkle_AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Merkle_ClaimInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Merkle_ClaimStateAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Merkle_InvalidClaimAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Merkle_NotIncludedInMerkleTree",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ClaimInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ClaimStateAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ExceedsElegibleAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_InputDataMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ItemClaimedMerkle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalElegibleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimedAmount",
          "type": "uint256"
        }
      ],
      "name": "WhitelistBalanceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "accountsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMerkle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "itemsIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "proofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "claimMerkleBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "claimWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "claimedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interface",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tokensByAccount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x035b7ee16defd563039b59678c66619b1dcb013463c689e17fc38c99e8b2deee",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0x9a0811002f659C4D078c2310c9A170B2458E6ccc",
    "transactionIndex": 0,
    "gasUsed": "2820279",
    "logsBloom": "0x
    "blockHash": "0x7713917b9c762096d7b8fae782e0d86bbbde272754bc4b8c66b6d819b85c4a97",
    "transactionHash": "0x035b7ee16defd563039b59678c66619b1dcb013463c689e17fc38c99e8b2deee",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33932165,
        "transactionHash": "0x035b7ee16defd563039b59678c66619b1dcb013463c689e17fc38c99e8b2deee",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000190c926fbfa6d470000000000000000000000000000000000000000000000001c7db4975aaf05660000000000000000000000000000000000000000000005525618476868c213100000000000000000000000000000000000000000000000001aeceb705eb4981f00000000000000000000000000000000000000000000055257a9108f64bc8057",
        "logIndex": 0,
        "blockHash": "0x7713917b9c762096d7b8fae782e0d86bbbde272754bc4b8c66b6d819b85c4a97"
      }
    ],
    "blockNumber": 33932165,
    "cumulativeGasUsed": "2820279",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "e1d11ad5ee5467196d54810266d81cef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC1155Base__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BurnExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BurnFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__ERC1155ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__ERC1155ReceiverRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__TransferExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_InputsLengthMistatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Merkle_AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Merkle_ClaimInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Merkle_ClaimStateAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Merkle_InvalidClaimAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Merkle_NotIncludedInMerkleTree\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ClaimInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ClaimStateAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ExceedsElegibleAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_InputDataMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemClaimedMerkle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalElegibleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"}],\"name\":\"WhitelistBalanceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"accountsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimMerkle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"claimMerkleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interface\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokensByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract handles the creation and management of items It uses ERC1155 tokens to represent items and provides methods to mint new items, claim items via Merkle tree or a whitelist, and set the base and URIs for the items. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.\",\"kind\":\"dev\",\"methods\":{\"accountsByToken(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"list of holder addresses\"}},\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"claimMerkle(uint256,uint256,bytes32[])\":{\"params\":{\"amount\":\"The amount of the item to claim\",\"itemId\":\"The ID of the item to claim\",\"proof\":\"The Merkle proof for the item\"}},\"claimMerkleBatch(uint256[],uint256[],bytes32[][])\":{\"params\":{\"amounts\":\"The amounts of the items to claim\",\"itemsIds\":\"The IDs of the items to claim\",\"proofs\":\"The Merkle proofs for the items\"}},\"claimWhitelist(uint256[],uint256[])\":{\"params\":{\"amounts\":\"The amounts of the items to claim\",\"itemIds\":\"The IDs of the items to claim\"}},\"claimedAmount(address,uint256)\":{\"params\":{\"account\":\"the account to query\",\"itemId\":\"the item id to query\"},\"returns\":{\"amount\":\"returns the claimed amount given an account and an item id\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"mint(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of the items to mint\",\"id\":\"The ID of the item to mint\",\"to\":\"The address to mint the item to\"}},\"mintBatch(address,uint256[],uint256[])\":{\"details\":\"Only account with minter role can call this function\",\"params\":{\"amounts\":\"An array of corresponding amounts to be minted for each item ID\",\"ids\":\"An array of items IDs to be minted\",\"to\":\"The address to receive the minted items\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"array of function call data payloads\"},\"returns\":{\"results\":\"array of function call results\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"setBaseURI(string)\":{\"details\":\"Only the manager role can call this function\",\"params\":{\"baseURI\":\"The new base URI\"}},\"setTokenURI(uint256,string)\":{\"details\":\"Only the manager role can call this function\",\"params\":{\"tokenId\":\"The ID of the item to set the URI for\",\"tokenURI\":\"The new item URI\"}},\"tokensByAccount(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"list of token ids\"}},\"totalHolders(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"quantity of holders\"}},\"totalSupply(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"token supply\"}}},\"title\":\"ItemsFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountsByToken(uint256)\":{\"notice\":\"query holders of given token\"},\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"claimMerkle(uint256,uint256,bytes32[])\":{\"notice\":\"Claims an item if present in the Merkle tree\"},\"claimMerkleBatch(uint256[],uint256[],bytes32[][])\":{\"notice\":\"Claims items if present in the Merkle tree\"},\"claimWhitelist(uint256[],uint256[])\":{\"notice\":\"Claims items from a whitelist\"},\"claimedAmount(address,uint256)\":{\"notice\":\"Amount claimed by an address of a specific item\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"mint(address,uint256,uint256)\":{\"notice\":\"Mints a new item\"},\"mintBatch(address,uint256[],uint256[])\":{\"notice\":\"Mint a batch of items to a specific address\"},\"multicall(bytes[])\":{\"notice\":\"batch function calls to the contract and return the results of each\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"},\"setBaseURI(string)\":{\"notice\":\"Set the base URI for all items metadata\"},\"setTokenURI(uint256,string)\":{\"notice\":\"Set the URI for a specific item ID\"},\"tokensByAccount(address)\":{\"notice\":\"query tokens held by given address\"},\"totalHolders(uint256)\":{\"notice\":\"query total number of holders for given token\"},\"totalSupply(uint256)\":{\"notice\":\"query total minted supply of given token\"},\"uri(uint256)\":{\"notice\":\"inheritdoc IERC1155Metadata\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/items/ItemsFacet.sol\":\"ItemsFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Merkle tree verification utility\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @notice verify whether given leaf is contained within Merkle tree defined by given root\\n     * @param proof proof that Merkle tree contains given leaf\\n     * @param root Merkle tree root\\n     * @param leaf element whose presence in Merkle tree to prove\\n     * @return whether leaf is proven to be contained within Merkle tree defined by root\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            bytes32 computedHash = leaf;\\n\\n            for (uint256 i = 0; i < proof.length; i++) {\\n                bytes32 proofElement = proof[i];\\n\\n                if (computedHash <= proofElement) {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(computedHash, proofElement)\\n                    );\\n                } else {\\n                    computedHash = keccak256(\\n                        abi.encodePacked(proofElement, computedHash)\\n                    );\\n                }\\n            }\\n\\n            return computedHash == root;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3a6592d4e2c90f92ccae441401241b4a8837e95a15f3c3887abc544e85e362c\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8688f1b897b4ddde7ebd48ee5ce1063f56d8af8ea3aa80aa1df12ff669d133a4\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155 } from '../../../interfaces/IERC1155.sol';\\nimport { IERC1155Receiver } from '../../../interfaces/IERC1155Receiver.sol';\\nimport { IERC1155Base } from './IERC1155Base.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from './ERC1155BaseInternal.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155Base, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) public view virtual returns (uint256) {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                if (accounts[i] == address(0))\\n                    revert ERC1155Base__BalanceQueryZeroAddress();\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) public view virtual returns (bool) {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status) public virtual {\\n        if (msg.sender == operator) revert ERC1155Base__SelfApproval();\\n        ERC1155BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        if (from != msg.sender && !isApprovedForAll(from, msg.sender))\\n            revert ERC1155Base__NotOwnerOrApproved();\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        if (from != msg.sender && !isApprovedForAll(from, msg.sender))\\n            revert ERC1155Base__NotOwnerOrApproved();\\n        _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x3e36cb8094f6e5a890b8a599a76275a8d992f7e877a9021e8abd090a3dce2331\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155Receiver } from '../../../interfaces/IERC1155Receiver.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC1155BaseInternal } from './IERC1155BaseInternal.sol';\\nimport { ERC1155BaseStorage } from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155BaseInternal {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(\\n        address account,\\n        uint256 id\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0))\\n            revert ERC1155Base__BalanceQueryZeroAddress();\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__MintToZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        ERC1155BaseStorage.layout().balances[id][account] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__MintToZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            balances[ids[i]][account] += amounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__BurnFromZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            ''\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n\\n        unchecked {\\n            if (amount > balances[account])\\n                revert ERC1155Base__BurnExceedsBalance();\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__BurnFromZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                if (amounts[i] > balances[id][account])\\n                    revert ERC1155Base__BurnExceedsBalance();\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (recipient == address(0))\\n            revert ERC1155Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            sender,\\n            recipient,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            if (amount > senderBalance)\\n                revert ERC1155Base__TransferExceedsBalance();\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (recipient == address(0))\\n            revert ERC1155Base__TransferToZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n\\n                if (amount > senderBalance)\\n                    revert ERC1155Base__TransferExceedsBalance();\\n\\n                balances[token][sender] = senderBalance - amount;\\n\\n                i++;\\n            }\\n\\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(\\n        uint256 element\\n    ) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector)\\n                    revert ERC1155Base__ERC1155ReceiverRejected();\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert ERC1155Base__ERC1155ReceiverNotImplemented();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\\n                ) revert ERC1155Base__ERC1155ReceiverRejected();\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert ERC1155Base__ERC1155ReceiverNotImplemented();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x347e1d1bbff3001b09b0ac140f8d0ff8d526d34e310610c7fe31cdbf418059ed\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bc1fde9bab7b338312099733e21c7bbbc44597fd25970bd68187eb65e622ef1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/IERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155 } from '../../../interfaces/IERC1155.sol';\\nimport { IERC1155BaseInternal } from './IERC1155BaseInternal.sol';\\n\\n/**\\n * @title ERC1155 base interface\\n */\\ninterface IERC1155Base is IERC1155BaseInternal, IERC1155 {\\n\\n}\\n\",\"keccak256\":\"0x1031b70a5355e29a4f729ec602bbf6e1d074e4e1ab86bff29b486f31eb639ffe\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/IERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155Internal } from '../../../interfaces/IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 base interface\\n */\\ninterface IERC1155BaseInternal is IERC1155Internal {\\n    error ERC1155Base__ArrayLengthMismatch();\\n    error ERC1155Base__BalanceQueryZeroAddress();\\n    error ERC1155Base__NotOwnerOrApproved();\\n    error ERC1155Base__SelfApproval();\\n    error ERC1155Base__BurnExceedsBalance();\\n    error ERC1155Base__BurnFromZeroAddress();\\n    error ERC1155Base__ERC1155ReceiverRejected();\\n    error ERC1155Base__ERC1155ReceiverNotImplemented();\\n    error ERC1155Base__MintToZeroAddress();\\n    error ERC1155Base__TransferExceedsBalance();\\n    error ERC1155Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0xece161d9a4ab29e5b539b8b0f808660fcdd6b8c35bb1920dd99acdb5c576efbc\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC1155BaseInternal } from '../base/ERC1155BaseInternal.sol';\\nimport { IERC1155Enumerable } from './IERC1155Enumerable.sol';\\nimport { ERC1155EnumerableInternal, ERC1155EnumerableStorage } from './ERC1155EnumerableInternal.sol';\\n\\n/**\\n * @title ERC1155 implementation including enumerable and aggregate functions\\n */\\nabstract contract ERC1155Enumerable is\\n    IERC1155Enumerable,\\n    ERC1155EnumerableInternal\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalHolders(uint256 id) public view virtual returns (uint256) {\\n        return _totalHolders(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function accountsByToken(\\n        uint256 id\\n    ) public view virtual returns (address[] memory) {\\n        return _accountsByToken(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function tokensByAccount(\\n        address account\\n    ) public view virtual returns (uint256[] memory) {\\n        return _tokensByAccount(account);\\n    }\\n}\\n\",\"keccak256\":\"0x452201121747be0d0af28279da9e824d1e99a261a6cd34abd156c432b97f0338\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from '../base/ERC1155BaseInternal.sol';\\nimport { ERC1155EnumerableStorage } from './ERC1155EnumerableStorage.sol';\\n\\n/**\\n * @title ERC1155Enumerable internal functions\\n */\\nabstract contract ERC1155EnumerableInternal is ERC1155BaseInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function _totalSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155EnumerableStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function _totalHolders(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155EnumerableStorage.layout().accountsByToken[id].length();\\n    }\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function _accountsByToken(\\n        uint256 id\\n    ) internal view virtual returns (address[] memory) {\\n        EnumerableSet.AddressSet storage accounts = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[id];\\n\\n        address[] memory addresses = new address[](accounts.length());\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length(); i++) {\\n                addresses[i] = accounts.at(i);\\n            }\\n        }\\n\\n        return addresses;\\n    }\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function _tokensByAccount(\\n        address account\\n    ) internal view virtual returns (uint256[] memory) {\\n        EnumerableSet.UintSet storage tokens = ERC1155EnumerableStorage\\n            .layout()\\n            .tokensByAccount[account];\\n\\n        uint256[] memory ids = new uint256[](tokens.length());\\n\\n        unchecked {\\n            for (uint256 i; i < tokens.length(); i++) {\\n                ids[i] = tokens.at(i);\\n            }\\n        }\\n\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from != to) {\\n            ERC1155EnumerableStorage.Layout storage l = ERC1155EnumerableStorage\\n                .layout();\\n            mapping(uint256 => EnumerableSet.AddressSet)\\n                storage tokenAccounts = l.accountsByToken;\\n            EnumerableSet.UintSet storage fromTokens = l.tokensByAccount[from];\\n            EnumerableSet.UintSet storage toTokens = l.tokensByAccount[to];\\n\\n            for (uint256 i; i < ids.length; ) {\\n                uint256 amount = amounts[i];\\n\\n                if (amount > 0) {\\n                    uint256 id = ids[i];\\n\\n                    if (from == address(0)) {\\n                        l.totalSupply[id] += amount;\\n                    } else if (_balanceOf(from, id) == amount) {\\n                        tokenAccounts[id].remove(from);\\n                        fromTokens.remove(id);\\n                    }\\n\\n                    if (to == address(0)) {\\n                        l.totalSupply[id] -= amount;\\n                    } else if (_balanceOf(to, id) == 0) {\\n                        tokenAccounts[id].add(to);\\n                        toTokens.add(id);\\n                    }\\n                }\\n\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa60052b304f895a1893378f757223a3081f9d53044776ddc4bc283a51fd62388\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC1155EnumerableStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\n        mapping(address => EnumerableSet.UintSet) tokensByAccount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Enumerable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x89e73d6d5c7f19d54927dcbeb8b3bf782c8a9f51ad2f12e67b6491b3681a1549\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/IERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155BaseInternal } from '../base/IERC1155BaseInternal.sol';\\n\\n/**\\n * @title ERC1155 enumerable and aggregate function interface\\n */\\ninterface IERC1155Enumerable is IERC1155BaseInternal {\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function totalHolders(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function accountsByToken(\\n        uint256 id\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function tokensByAccount(\\n        address account\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x2e31e7a736871d52e5d24b0f0917a63bbdc25503bdc70ba6d8d001888aa0049f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { IERC1155Metadata } from './IERC1155Metadata.sol';\\nimport { ERC1155MetadataInternal } from './ERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @title ERC1155 metadata extensions\\n */\\nabstract contract ERC1155Metadata is IERC1155Metadata, ERC1155MetadataInternal {\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId) public view virtual returns (string memory) {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ea046fa006ec93948d00a4c93d0423d2cc3fa7f6bb5a4f4fa7dd59f8025404e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @title ERC1155Metadata internal functions\\n */\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataInternal {\\n    /**\\n     * @notice set base metadata URI\\n     * @dev base URI is a non-standard feature adapted from the ERC721 specification\\n     * @param baseURI base URI\\n     */\\n    function _setBaseURI(string memory baseURI) internal {\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @notice set per-token metadata URI\\n     * @param tokenId token whose metadata URI to set\\n     * @param tokenURI per-token URI\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xaf972740ad8d28ccc306fa49c5b0e581fc637f3706eb77fd5bb08d02b3b2a762\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC1155 metadata extensions\\n */\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Metadata');\\n\\n    struct Layout {\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e8228a4c843b8bb45252d360370ba12839e7bb53a3f6c97b1aee482d77d4ec\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata is IERC1155MetadataInternal {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x5996ccbe41ca8000926401f9172fe777853be594ca516bed5d56513f24b35798\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155Metadata interface needed by internal functions\\n */\\ninterface IERC1155MetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0x394093a86fbfebdcda356fe9407480d81434aa162afc6a3e8efbf72a4c05b98d\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Interface for the Multicall utility contract\\n */\\ninterface IMulticall {\\n    /**\\n     * @notice batch function calls to the contract and return the results of each\\n     * @param data array of function call data payloads\\n     * @return results array of function call results\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x39e630bc189607ae119c1208a632009fe418cc4eb2687b28e7fdbe78af7b79b0\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IMulticall } from './IMulticall.sol';\\n\\n/**\\n * @title Utility contract for supporting processing of multiple function calls in a single transaction\\n */\\nabstract contract Multicall is IMulticall {\\n    /**\\n     * @inheritdoc IMulticall\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        unchecked {\\n            for (uint256 i; i < data.length; i++) {\\n                (bool success, bytes memory returndata) = address(this)\\n                    .delegatecall(data[i]);\\n\\n                if (success) {\\n                    results[i] = returndata;\\n                } else {\\n                    assembly {\\n                        returndatacopy(0, 0, returndatasize())\\n                        revert(0, returndatasize())\\n                    }\\n                }\\n            }\\n        }\\n\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x762f15ac4c28be19d0d7fb303ade8dea6ba52ff558fb6fba36df84a839e216b3\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/items/ItemsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ERC1155Base } from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\\\";\\nimport { ERC1155BaseInternal } from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\\\";\\nimport { ERC1155Enumerable } from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\\\";\\nimport { ERC1155EnumerableInternal } from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\\\";\\nimport { ERC1155Metadata } from \\\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\\\";\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ItemsInternal } from \\\"./ItemsInternal.sol\\\";\\nimport { Multicall } from \\\"@solidstate/contracts/utils/Multicall.sol\\\";\\nimport { IERC1155 } from '@solidstate/contracts/interfaces/IERC1155.sol';\\n\\n/**\\n * @title ItemsFacet\\n * @dev This contract handles the creation and management of items\\n * It uses ERC1155 tokens to represent items and provides methods to mint new items,\\n * claim items via Merkle tree or a whitelist, and set the base and URIs for\\n * the items. It also uses the ReentrancyGuard and Multicall contracts for security\\n * and gas efficiency.\\n */\\ncontract ItemsFacet is ERC1155Base, ERC1155Enumerable, ERC1155Metadata, ReentrancyGuard, ItemsInternal, Multicall {\\n    \\n    /**\\n     * @notice Claims an item if present in the Merkle tree\\n     * @param itemId The ID of the item to claim\\n     * @param amount The amount of the item to claim\\n     * @param proof The Merkle proof for the item\\n     */\\n    function claimMerkle(uint itemId, uint amount, bytes32[] calldata proof)\\n        public nonReentrant\\n    {\\n        _claimMerkle(itemId, amount, proof);\\n    }\\n\\n    /**\\n     * @notice Claims items if present in the Merkle tree\\n     * @param itemsIds The IDs of the items to claim\\n     * @param amounts The amounts of the items to claim\\n     * @param proofs The Merkle proofs for the items\\n     */\\n    function claimMerkleBatch(uint256[] calldata itemsIds, uint[] calldata amounts, bytes32[][] calldata proofs) external nonReentrant {\\n        _claimMerkleBatch(itemsIds, amounts, proofs);\\n    }\\n\\n    /**\\n     * @notice Claims items from a whitelist\\n     * @param itemIds The IDs of the items to claim\\n     * @param amounts The amounts of the items to claim\\n     */\\n    function claimWhitelist(uint[] calldata itemIds, uint[] calldata amounts) external {\\n        _claimWhitelist(itemIds, amounts);\\n    }\\n\\n    /**\\n     * @notice Amount claimed by an address of a specific item\\n     * @param account the account to query\\n     * @param itemId the item id to query\\n     * @return amount returns the claimed amount given an account and an item id\\n     */\\n    function claimedAmount(address account, uint itemId) external view returns (uint amount) {\\n        return _claimedAmount(account, itemId);\\n    }\\n\\n    /**\\n     * @notice Mints a new item\\n     * @param to The address to mint the item to\\n     * @param id The ID of the item to mint\\n     * @param amount The amount of the items to mint\\n     */\\n    function mint(address to, uint256 id, uint256 amount)\\n        public onlyMinter\\n    {\\n        _mint(to, id, amount);\\n    }\\n\\n    /**\\n     * @notice Mint a batch of items to a specific address\\n     * @dev Only account with minter role can call this function\\n     * @param to The address to receive the minted items\\n     * @param ids An array of items IDs to be minted\\n     * @param amounts An array of corresponding amounts to be minted for each item ID\\n     */\\n    function mintBatch(address to, uint256[] calldata ids, uint256[] calldata amounts)\\n        public onlyMinter\\n    {\\n        _mintBatch(to, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice Set the base URI for all items metadata\\n     * @dev Only the manager role can call this function\\n     * @param baseURI The new base URI\\n     */\\n    function setBaseURI(string calldata baseURI) external onlyManager {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /**\\n     * @notice Set the URI for a specific item ID\\n     * @dev Only the manager role can call this function\\n     * @param tokenId The ID of the item to set the URI for\\n     * @param tokenURI The new item URI\\n     */\\n    function setTokenURI(uint tokenId, string calldata tokenURI) external onlyManager {\\n        _setTokenURI(tokenId, tokenURI);\\n    }\\n\\n\\n    // required overrides\\n    function supportsInterface(bytes4 _interface) external pure returns (bool) {\\n        return type(IERC1155).interfaceId == _interface;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override (ERC1155BaseInternal, ERC1155EnumerableInternal, ItemsInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\",\"keccak256\":\"0x5e74b94b2aaa83c3a505be94e0d1286cdbf05429f0122928095e498947477564\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/items/ItemsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ERC1155BaseInternal } from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\\\";\\nimport { ERC1155EnumerableInternal } from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\\\";\\nimport { ERC1155MetadataInternal } from \\\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\\\";\\nimport { ItemsStorage } from \\\"./ItemsStorage.sol\\\";\\nimport { MerkleInternal } from \\\"../merkle/MerkleInternal.sol\\\";\\nimport { WhitelistInternal } from \\\"../whitelist/WhitelistInternal.sol\\\";\\n\\ncontract ItemsInternal is MerkleInternal, WhitelistInternal, ERC1155BaseInternal, ERC1155EnumerableInternal, ERC1155MetadataInternal {\\n\\n    error Items_InputsLengthMistatch();\\n\\n    event ItemClaimedMerkle(address indexed to, uint256 indexed itemId, uint amount);\\n\\n    function _claimMerkle(uint itemId, uint amount, bytes32[] memory proof)\\n        internal\\n    {\\n        ItemsStorage.Layout storage itemsSL = ItemsStorage.layout();\\n\\n        bytes memory leaf = abi.encode(msg.sender, itemId, amount);\\n        _consumeLeaf(proof, leaf);\\n\\n        _mint(msg.sender, itemId, amount, '');\\n\\n        itemsSL.amountClaimed[msg.sender][itemId] += amount;\\n        emit ItemClaimedMerkle(msg.sender, itemId, amount);\\n    }\\n\\n    function _claimMerkleBatch(uint256[] calldata itemIds, uint[] calldata amounts, bytes32[][] calldata proofs) \\n        internal\\n    {\\n        if (itemIds.length != amounts.length) \\n            revert Items_InputsLengthMistatch();\\n        \\n        for (uint256 i = 0; i < itemIds.length; i++) {\\n            _claimMerkle(itemIds[i], amounts[i], proofs[i]);\\n        }\\n    }\\n    \\n    function _claimWhitelist(uint[] calldata itemIds, uint[] calldata amounts) internal {\\n        if (itemIds.length != amounts.length) \\n            revert Items_InputsLengthMistatch();\\n\\n        uint totalAmount = 0;\\n        for (uint i = 0; i < itemIds.length; i++) {\\n            _mint(msg.sender, itemIds[i], amounts[i], '');\\n            totalAmount += amounts[i];\\n        }\\n        _consumeWhitelist(msg.sender, totalAmount);\\n    }\\n\\n    function _claimedAmount(address account, uint itemId) internal view returns (uint) {\\n        return ItemsStorage.layout().amountClaimed[account][itemId];\\n    }\\n\\n    function _mint(address to, uint256 itemId, uint256 amount)\\n        internal\\n    {\\n        ERC1155BaseInternal._mint(to, itemId, amount, \\\"\\\");\\n    }\\n\\n    function _mintBatch(address to, uint256[] calldata ids, uint256[] calldata amounts)\\n        internal\\n    {\\n        ERC1155BaseInternal._mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n\\n    // required overrides\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override (ERC1155BaseInternal, ERC1155EnumerableInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\",\"keccak256\":\"0x5c2e67fb608b3db2f7bb3dc2c4b218c44e8e0b2a44d0d8c89c3aaf57f8d4441d\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/items/ItemsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary ItemsStorage {\\n\\n    bytes32 constant ITEMS_STORAGE_POSITION =\\n        keccak256(\\\"items.storage.position\\\");\\n\\n    struct Layout {\\n        // wallet address => token id => is claimed \\n        mapping(address => mapping(uint => uint)) amountClaimed;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ITEMS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xb70eeea059432ece8e1fc74c1e558a877a8ad42d4aab35dbb380f7a0a89bf771\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/merkle/MerkleInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { MerkleProof } from \\\"@solidstate/contracts/cryptography/MerkleProof.sol\\\";\\nimport { MerkleStorage } from \\\"./MerkleStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract MerkleInternal is RolesInternal {\\n\\n    error Merkle_AlreadyClaimed();\\n    error Merkle_InvalidClaimAmount();\\n    error Merkle_NotIncludedInMerkleTree();\\n    error Merkle_ClaimInactive();\\n    error Merkle_ClaimStateAlreadyUpdated();\\n\\n    function _merkleRoot() internal view returns (bytes32) {\\n        return MerkleStorage.layout().merkleRoot;\\n    }\\n\\n    function _updateMerkleRoot(bytes32 newMerkleRoot) internal {\\n        MerkleStorage.layout().merkleRoot = newMerkleRoot;\\n    }\\n\\n    function _isMerkleClaimActive() view internal returns (bool) {\\n        return !MerkleStorage.layout().claimInactive;\\n    }\\n\\n    function _setMerkleClaimActive() internal {\\n        MerkleStorage.Layout storage merkleSL = MerkleStorage.layout();\\n\\n        if (!merkleSL.claimInactive) revert Merkle_ClaimStateAlreadyUpdated();\\n        \\n        merkleSL.claimInactive = false;\\n    }\\n\\n    function _setMerkleClaimInactive() internal {\\n        MerkleStorage.Layout storage merkleSL = MerkleStorage.layout();\\n\\n        if (merkleSL.claimInactive) revert Merkle_ClaimStateAlreadyUpdated();\\n        \\n        merkleSL.claimInactive = true;\\n    }\\n\\n    // To create 'leaf' use abi.encode(leafProp1, leafProp2, ...)\\n    function _consumeLeaf(bytes32[] memory proof, bytes memory _leaf) internal {\\n        MerkleStorage.Layout storage merkleSL = MerkleStorage.layout();\\n\\n        if (merkleSL.claimInactive) revert Merkle_ClaimInactive();\\n\\n        bytes32 proofHash = keccak256(abi.encodePacked(proof));\\n        if (merkleSL.claimedProof[proofHash]) revert Merkle_AlreadyClaimed();\\n\\n        bytes32 leaf = keccak256(bytes.concat(keccak256(_leaf)));\\n        bool isValid = MerkleProof.verify(proof, merkleSL.merkleRoot, leaf);\\n        \\n        if (!isValid) revert Merkle_NotIncludedInMerkleTree();\\n        \\n        merkleSL.claimedProof[proofHash] = true;\\n    }\\n}\",\"keccak256\":\"0x1b3c96f12a78c63b4499bbf1fd6a873443fefece91b8cb76632d74a30fb48a88\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/merkle/MerkleStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary MerkleStorage {\\n\\n    bytes32 constant MERKLE_STORAGE_POSITION =\\n        keccak256(\\\"merkle.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 merkleRoot;\\n        bool claimInactive;\\n        mapping(bytes32 => bool) claimedProof;\\n        mapping(address => uint) amountClaimed;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = MERKLE_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x8c2635472a8cf2783744fbc487481dde4433bd474ba2e6fdc088aaf8efa6e15a\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(_defaultAdminRole());\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        _checkRole(_managerRole());\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        _checkRole(_minterRole());\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _minterRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().minterRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.minterRole = keccak256(\\\"minter.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n        _grantRole(_minterRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0xd3fa8bcc9380c117c2e22aeb6b4489ad01c31433b3c2d412742b681c94cf407d\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 minterRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x203cfbe268a1ac5fe32593c66ace04b576dfb2e25173e02654e504cf0de44d71\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { WhitelistStorage } from \\\"./WhitelistStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\ncontract WhitelistInternal is RolesInternal {\\n\\n    error Whitelist_ExceedsElegibleAmount();\\n    error Whitelist_InputDataMismatch();\\n    error Whitelist_ClaimStateAlreadyUpdated();\\n    error Whitelist_ClaimInactive();\\n\\n    event WhitelistBalanceChanged(address account, uint totalElegibleAmount, uint totalClaimedAmount);\\n\\n    function _claimedWhitelist(address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().claimed[account];\\n    }\\n\\n    function _totalClaimedWhitelist() internal view returns (uint) {\\n        return WhitelistStorage.layout().totalClaimed;\\n    }\\n\\n    function _totalElegibleWhitelist() internal view returns (uint) {\\n        return WhitelistStorage.layout().totalElegible;\\n    }\\n\\n    function _elegibleWhitelist(address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().elegible[account];\\n    }\\n\\n    function _consumeWhitelist(address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n\\n        if (whitelistSL.claimInactive) \\n            revert Whitelist_ClaimInactive();\\n            \\n        if (whitelistSL.elegible[account] < amount) \\n            revert Whitelist_ExceedsElegibleAmount();\\n\\n        whitelistSL.elegible[account] -= amount;\\n        whitelistSL.claimed[account] += amount;\\n        whitelistSL.totalClaimed += amount;\\n        whitelistSL.totalElegible -= amount;\\n\\n        emit WhitelistBalanceChanged(msg.sender, whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _increaseWhitelistElegible(address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        whitelistSL.elegible[account] += amount;\\n        whitelistSL.totalElegible += amount;\\n        \\n        emit WhitelistBalanceChanged(msg.sender, whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _increaseWhitelistElegibleBatch(address[] calldata accounts, uint[] calldata amounts) internal {\\n        if (accounts.length != amounts.length) revert Whitelist_InputDataMismatch();\\n\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n\\n        for (uint i = 0; i < accounts.length; i++) {\\n            whitelistSL.elegible[accounts[i]] += amounts[i];\\n            whitelistSL.totalElegible += amounts[i];\\n            emit WhitelistBalanceChanged(msg.sender, whitelistSL.elegible[accounts[i]], whitelistSL.claimed[accounts[i]]);\\n        }\\n    }\\n\\n    function _setWhitelistElegible(address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        whitelistSL.totalElegible += amount - whitelistSL.elegible[account];\\n        whitelistSL.elegible[account] += amount;\\n        emit WhitelistBalanceChanged(msg.sender, whitelistSL.elegible[account], whitelistSL.claimed[account]);\\n    }\\n\\n    function _setWhitelistElegibleBatch(address[] calldata accounts, uint[] calldata amounts) internal {\\n        if (accounts.length != amounts.length) revert Whitelist_InputDataMismatch();\\n\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n\\n        for (uint i = 0; i < accounts.length; i++) {\\n            whitelistSL.totalElegible += amounts[i] - whitelistSL.elegible[accounts[i]];\\n            whitelistSL.elegible[accounts[i]] = amounts[i];\\n            emit WhitelistBalanceChanged(msg.sender, whitelistSL.elegible[accounts[i]], whitelistSL.claimed[accounts[i]]);\\n        }\\n    }\\n\\n    function _isWhitelistClaimActive() view internal returns (bool) {\\n        return !WhitelistStorage.layout().claimInactive;\\n    }\\n\\n    function _setWhitelistClaimActive() internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n\\n        if (!whitelistSL.claimInactive) revert Whitelist_ClaimInactive();\\n        \\n        whitelistSL.claimInactive = false;\\n    }\\n\\n    function _setWhitelistClaimInactive() internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n\\n        if (whitelistSL.claimInactive) revert Whitelist_ClaimStateAlreadyUpdated();\\n        \\n        whitelistSL.claimInactive = true;\\n    }\\n}\",\"keccak256\":\"0xa95506abee2b3d2771409fe46bde335ece932dd12f68efac201107d81b633d21\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary WhitelistStorage {\\n\\n    bytes32 constant WHITELIST_STORAGE_POSITION =\\n        keccak256(\\\"whitelist.storage.position\\\");\\n\\n    struct Layout {\\n        mapping(address => uint) claimed;\\n        mapping(address => uint) elegible;\\n        uint totalClaimed;\\n        uint totalElegible;\\n        bool claimInactive;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = WHITELIST_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x8bed7d61825172b06144337fecf4363c753829dbeddfa65a2e612c84d7a2aaa7\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061320d806100206000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c806355f804b3116100b8578063ac9650d81161007c578063ac9650d8146102b5578063bd85b039146102d5578063ceb60ee6146102e8578063d81d0a15146102fb578063e985e9c51461030e578063f242432a1461032157600080fd5b806355f804b3146102495780636dcfd8411461025c57806384118c5d1461027c57806385bff2e71461028f578063a22cb465146102a257600080fd5b8063162094c4116100ff578063162094c4146101dd5780632eb2c2d6146101f05780634e1273f4146102035780634f7fb3321461022357806355b4b1a41461023657600080fd5b8062fdd58e1461013b57806301ffc9a7146101615780630e89341c1461019557806313ba55df146101b5578063156e29f6146101c8575b600080fd5b61014e6101493660046123ce565b610334565b6040519081526020015b60405180910390f35b61018561016f36600461240e565b6001600160e01b031916636cdb3d1360e11b1490565b6040519015158152602001610158565b6101a86101a336600461242b565b610349565b6040516101589190612494565b61014e6101c336600461242b565b610518565b6101db6101d63660046124a7565b610523565b005b6101db6101eb366004612522565b610563565b6101db6101fe3660046126b6565b6105ce565b61021661021136600461275f565b610620565b6040516101589190612864565b6101db6102313660046128bb565b61078a565b61014e6102443660046123ce565b6107eb565b6101db610257366004612954565b610833565b61026f61026a36600461242b565b6108a1565b6040516101589190612995565b6101db61028a3660046129e2565b6108ac565b61021661029d366004612a34565b610941565b6101db6102b0366004612a4f565b61094c565b6102c86102c3366004612a8b565b610a00565b6040516101589190612ac0565b61014e6102e336600461242b565b610b1a565b6101db6102f6366004612b22565b610b4d565b6101db610309366004612b81565b610b5f565b61018561031c366004612c01565b610b97565b6101db61032f366004612c34565b610be4565b60006103408383610c2f565b90505b92915050565b60008181527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f56020526040812080546060927f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f49290916103a890612c98565b80601f01602080910402602001604051908101604052809291908181526020018280546103d490612c98565b80156104215780601f106103f657610100808354040283529160200191610421565b820191906000526020600020905b81548152906001019060200180831161040457829003601f168201915b50505050509050600082600001805461043990612c98565b80601f016020809104026020016040519081016040528092919081815260200182805461046590612c98565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b5050505050905080516000036104ca57509392505050565b8151156104fd5780826040516020016104e4929190612cd2565b6040516020818303038152906040529350505050919050565b8061050786610c8d565b6040516020016104e4929190612cd2565b600061034382610d95565b61055361054e7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa735490565b610dcb565b61055e838383610dd8565b505050565b61058e61054e7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61055e8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610df392505050565b6001600160a01b03851633148015906105ee57506105ec8533610b97565b155b1561060b576040516212efed60e91b815260040160405180910390fd5b610619338686868686610e67565b5050505050565b6060815183511461064457604051633e7e0b6d60e11b815260040160405180910390fd5b82516000805160206131b8833981519152906000906001600160401b038111156106705761067061256d565b604051908082528060200260200182016040528015610699578160200160208202803683370190505b50905060005b85518110156107815760006001600160a01b03168682815181106106c5576106c5612d01565b60200260200101516001600160a01b0316036106f45760405163db5d879760e01b815260040160405180910390fd5b82600086838151811061070957610709612d01565b60200260200101518152602001908152602001600020600087838151811061073357610733612d01565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061076e5761076e612d01565b602090810291909101015260010161069f565b50949350505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036107cd57604051635db5c7cd60e11b815260040160405180910390fd5b600281556107df878787878787610e8b565b60019055505050505050565b6001600160a01b03821660009081527f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d660209081526040808320848452909152812054610340565b61085e61054e7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61089d82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f6192505050565b5050565b606061034382610f8c565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036108ef57604051635db5c7cd60e11b815260040160405180910390fd5b60028160000181905550610937858585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061105f92505050565b6001905550505050565b60606103438261113b565b6001600160a01b038216330361097557604051637b30a93360e11b815260040160405180910390fd5b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b03811115610a1a57610a1a61256d565b604051908082528060200260200182016040528015610a4d57816020015b6060815260200190600190039081610a385790505b50905060005b82811015610b135760008030868685818110610a7157610a71612d01565b9050602002810190610a839190612d17565b604051610a91929190612d5d565b600060405180830381855af49150503d8060008114610acc576040519150601f19603f3d011682016040523d82523d6000602084013e610ad1565b606091505b50915091508115610aff5780848481518110610aef57610aef612d01565b6020026020010181905250610b09565b3d6000803e3d6000fd5b5050600101610a53565b5092915050565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea6020526040812054610343565b610b5984848484611203565b50505050565b610b8a61054e7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa735490565b61061985858585856112bd565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b6001600160a01b0385163314801590610c045750610c028533610b97565b155b15610c21576040516212efed60e91b815260040160405180910390fd5b610619338686868686611339565b60006001600160a01b038316610c585760405163db5d879760e01b815260040160405180910390fd5b6000805160206131b88339815191526000928352602090815260408084206001600160a01b0395909516845293905250205490565b606081600003610cb45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610cde5780610cc881612d83565b9150610cd79050600a83612db2565b9150610cb8565b6000816001600160401b03811115610cf857610cf861256d565b6040519080825280601f01601f191660200182016040528015610d22576020820181803683370190505b5090505b8415610d8d57610d37600183612dc6565b9150610d44600a86612dd9565b610d4f906030612ded565b60f81b818381518110610d6457610d64612d01565b60200101906001600160f81b031916908160001a905350610d86600a86612db2565b9450610d26565b949350505050565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb6020526040812061034390611355565b610dd5813361135f565b50565b61055e838383604051806020016040528060008152506113ca565b60008281527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f560205260409020610e2a8282612e46565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051610e5b9190612494565b60405180910390a25050565b610e758686868686866114a3565b610e8386868686868661164c565b505050505050565b848314610eab57604051634e98d26360e01b815260040160405180910390fd5b60005b85811015610f5857610f46878783818110610ecb57610ecb612d01565b90506020020135868684818110610ee457610ee4612d01565b90506020020135858585818110610efd57610efd612d01565b9050602002810190610f0f9190612f05565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061105f92505050565b80610f5081612d83565b915050610eae565b50505050505050565b7f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f461089d8282612e46565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb60205260408120606091610fc582611355565b6001600160401b03811115610fdc57610fdc61256d565b604051908082528060200260200182016040528015611005578160200160208202803683370190505b50905060005b61101483611355565b81101561105757611025838261175c565b82828151811061103757611037612d01565b6001600160a01b039092166020928302919091019091015260010161100b565b509392505050565b6040805133602082015280820185905260608082018590528251808303909101815260809091019091527f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d6906110b58382611768565b6110d0338686604051806020016040528060008152506113ca565b33600090815260208381526040808320888452909152812080548692906110f8908490612ded565b9091555050604051848152859033907fd4307fb1338aefb2a030cf5ea0f582a10d28ffee99fe253e5d48946f9a74a59f9060200160405180910390a35050505050565b6001600160a01b03811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040812060609161117e82611355565b6001600160401b038111156111955761119561256d565b6040519080825280602002602001820160405280156111be578160200160208202803683370190505b50905060005b6111cd83611355565b811015611057576111de838261175c565b8282815181106111f0576111f0612d01565b60209081029190910101526001016111c4565b82811461122357604051634e98d26360e01b815260040160405180910390fd5b6000805b848110156112b25761127a3387878481811061124557611245612d01565b9050602002013586868581811061125e5761125e612d01565b90506020020135604051806020016040528060008152506113ca565b83838281811061128c5761128c612d01565b905060200201358261129e9190612ded565b9150806112aa81612d83565b915050611227565b5061061933826118b2565b6106198585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092018290525060408051602081019091529081529250611a4e915050565b611347868686868686611ba5565b610e83868686868686611cbb565b6000610343825490565b6113698282611d77565b61089d5761137f816001600160a01b0316611dae565b61138a836020611dc0565b60405160200161139b929190612f4e565b60408051601f198184030181529082905262461bcd60e51b82526113c191600401612494565b60405180910390fd5b6001600160a01b0384166113f1576040516301c8efbf60e11b815260040160405180910390fd5b6114103360008661140187611f12565b61140a87611f12565b86611f5d565b60008381526000805160206131b8833981519152602090815260408083206001600160a01b03881684529091528120805484929061144f908490612ded565b909155505060408051848152602081018490526001600160a01b0386169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b6001600160a01b0384166114ca5760405163f5cadad560e01b815260040160405180910390fd5b81518351146114ec57604051633e7e0b6d60e11b815260040160405180910390fd5b6114fa868686868686611f5d565b6000805160206131b883398151915260005b84518110156115eb57600085828151811061152957611529612d01565b60200260200101519050600085838151811061154757611547612d01565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150808211156115985760405163119ac6bb60e31b815260040160405180910390fd5b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a1681529081208054600195909501948392906115de908490612ded565b9091555061150c92505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161163b929190612fc3565b60405180910390a450505050505050565b6001600160a01b0384163b15610e835760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906116909089908990889088908890600401612ff1565b6020604051808303816000875af19250505080156116cb575060408051601f3d908101601f191682019092526116c89181019061304f565b60015b61172b576116d761306c565b806308c379a00361171057506116eb613088565b806116f65750611712565b8060405162461bcd60e51b81526004016113c19190612494565b505b60405163380147a960e01b815260040160405180910390fd5b6001600160e01b0319811663bc197c8160e01b14610f5857604051633744db2960e01b815260040160405180910390fd5b60006103408383611f6b565b7f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c09547f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c089060ff16156117cd5760405163a2f902f160e01b815260040160405180910390fd5b6000836040516020016117e09190613111565b60408051601f19818403018152918152815160209283012060008181526002860190935291205490915060ff161561182b5760405163dea0a45b60e01b815260040160405180910390fd5b6000838051906020012060405160200161184791815260200190565b604051602081830303815290604052805190602001209050600061187086856000015484611fb7565b90508061189057604051631006f83b60e31b815260040160405180910390fd5b50506000908152600290910160205260409020805460ff191660011790555050565b7ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb358c547ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35889060ff161561191757604051633137c0e960e11b815260040160405180910390fd5b6001600160a01b038316600090815260018201602052604090205482111561195257604051630f8a2c5f60e31b815260040160405180910390fd5b6001600160a01b03831660009081526001820160205260408120805484929061197c908490612dc6565b90915550506001600160a01b038316600090815260208290526040812080548492906119a9908490612ded565b92505081905550818160020160008282546119c49190612ded565b92505081905550818160030160008282546119df9190612dc6565b90915550506001600160a01b038316600090815260018201602090815260408083205484835292819020548151338152928301939093528101919091527fc7ba59c487358e9747ee9c691c213a9b2d30e01bb1b022a3e11d4b1984cd98459060600160405180910390a1505050565b6001600160a01b038416611a75576040516301c8efbf60e11b815260040160405180910390fd5b8151835114611a9757604051633e7e0b6d60e11b815260040160405180910390fd5b611aa633600086868686611f5d565b6000805160206131b883398151915260005b8451811015611b4557838181518110611ad357611ad3612d01565b6020026020010151826000878481518110611af057611af0612d01565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611b389190612ded565b9091555050600101611ab8565b50846001600160a01b031660006001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b96929190612fc3565b60405180910390a45050505050565b6001600160a01b038416611bcc5760405163f5cadad560e01b815260040160405180910390fd5b611bdb86868661140187611f12565b60008381526000805160206131b8833981519152602081815260408084206001600160a01b038a1685529091529091205480841115611c2d5760405163119ac6bb60e31b815260040160405180910390fd5b6000858152602083815260408083206001600160a01b038b81168552925280832093879003909355871681529081208054859290611c6c908490612ded565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910161163b565b6001600160a01b0384163b15610e835760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611cff9089908990889088908890600401613147565b6020604051808303816000875af1925050508015611d3a575060408051601f3d908101601f19168201909252611d379181019061304f565b60015b611d46576116d761306c565b6001600160e01b0319811663f23a6e6160e01b14610f5857604051633744db2960e01b815260040160405180910390fd5b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c62281160205260408120610340908361205c565b60606103436001600160a01b03831660145b60606000611dcf83600261318a565b611dda906002612ded565b6001600160401b03811115611df157611df161256d565b6040519080825280601f01601f191660200182016040528015611e1b576020820181803683370190505b509050600360fc1b81600081518110611e3657611e36612d01565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e6557611e65612d01565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115611ef2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611eb557611eb5612d01565b1a60f81b828281518110611ecb57611ecb612d01565b60200101906001600160f81b031916908160001a90535060049490941c9360001901611e84565b5083156103405760405163c913478560e01b815260040160405180910390fd5b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f4c57611f4c612d01565b602090810291909101015292915050565b610e8386868686868661207e565b81546000908210611f8f5760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110611fa457611fa4612d01565b9060005260206000200154905092915050565b600081815b8551811015612051576000868281518110611fd957611fd9612d01565b6020026020010151905080831161201b576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250612048565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50600101611fbc565b509092149392505050565b6001600160a01b03811660009081526001830160205260408120541515610340565b610e83868686868686836001600160a01b0316856001600160a01b031614610e83576001600160a01b0385811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040808220928716825281207fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea927fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb929091905b875181101561226657600087828151811061214557612145612d01565b60200260200101519050600081111561225d57600089838151811061216c5761216c612d01565b6020026020010151905060006001600160a01b03168c6001600160a01b0316036121b957600081815260208890526040812080548492906121ae908490612ded565b909155506121ee9050565b816121c48d83610c2f565b036121ee5760008181526020879052604090206121e1908d612273565b506121ec8582612288565b505b6001600160a01b038b16612225576000818152602088905260408120805484929061221a908490612dc6565b9091555061225b9050565b61222f8b82610c2f565b60000361225b57600081815260208790526040902061224e908c612294565b5061225984826122a9565b505b505b50600101612128565b5050505050505050505050565b6000610340836001600160a01b0384166122b5565b600061034083836122b5565b6000610340836001600160a01b03841661236f565b6000610340838361236f565b60008181526001830160205260408120548015610b13578354600090859060001981019081106122e7576122e7612d01565b906000526020600020015490508085600001600184038154811061230d5761230d612d01565b600091825260208083209091019290925591825260018601905260409020819055835484908061233f5761233f6131a1565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b6000818152600183016020526040812054610343575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b80356001600160a01b03811681146123c957600080fd5b919050565b600080604083850312156123e157600080fd5b6123ea836123b2565b946020939093013593505050565b6001600160e01b031981168114610dd557600080fd5b60006020828403121561242057600080fd5b8135610340816123f8565b60006020828403121561243d57600080fd5b5035919050565b60005b8381101561245f578181015183820152602001612447565b50506000910152565b60008151808452612480816020860160208601612444565b601f01601f19169290920160200192915050565b6020815260006103406020830184612468565b6000806000606084860312156124bc57600080fd5b6124c5846123b2565b95602085013595506040909401359392505050565b60008083601f8401126124ec57600080fd5b5081356001600160401b0381111561250357600080fd5b60208301915083602082850101111561251b57600080fd5b9250929050565b60008060006040848603121561253757600080fd5b8335925060208401356001600160401b0381111561255457600080fd5b612560868287016124da565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156125a8576125a861256d565b6040525050565b60006001600160401b038211156125c8576125c861256d565b5060051b60200190565b600082601f8301126125e357600080fd5b813560206125f0826125af565b6040516125fd8282612583565b83815260059390931b850182019282810191508684111561261d57600080fd5b8286015b848110156126385780358352918301918301612621565b509695505050505050565b600082601f83011261265457600080fd5b81356001600160401b0381111561266d5761266d61256d565b604051612684601f8301601f191660200182612583565b81815284602083860101111561269957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156126ce57600080fd5b6126d7866123b2565b94506126e5602087016123b2565b935060408601356001600160401b038082111561270157600080fd5b61270d89838a016125d2565b9450606088013591508082111561272357600080fd5b61272f89838a016125d2565b9350608088013591508082111561274557600080fd5b5061275288828901612643565b9150509295509295909350565b6000806040838503121561277257600080fd5b82356001600160401b038082111561278957600080fd5b818501915085601f83011261279d57600080fd5b813560206127aa826125af565b6040516127b78282612583565b83815260059390931b85018201928281019150898411156127d757600080fd5b948201945b838610156127fc576127ed866123b2565b825294820194908201906127dc565b9650508601359250508082111561281257600080fd5b5061281f858286016125d2565b9150509250929050565b600081518084526020808501945080840160005b838110156128595781518752958201959082019060010161283d565b509495945050505050565b6020815260006103406020830184612829565b60008083601f84011261288957600080fd5b5081356001600160401b038111156128a057600080fd5b6020830191508360208260051b850101111561251b57600080fd5b600080600080600080606087890312156128d457600080fd5b86356001600160401b03808211156128eb57600080fd5b6128f78a838b01612877565b9098509650602089013591508082111561291057600080fd5b61291c8a838b01612877565b9096509450604089013591508082111561293557600080fd5b5061294289828a01612877565b979a9699509497509295939492505050565b6000806020838503121561296757600080fd5b82356001600160401b0381111561297d57600080fd5b612989858286016124da565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156129d65783516001600160a01b0316835292840192918401916001016129b1565b50909695505050505050565b600080600080606085870312156129f857600080fd5b843593506020850135925060408501356001600160401b03811115612a1c57600080fd5b612a2887828801612877565b95989497509550505050565b600060208284031215612a4657600080fd5b610340826123b2565b60008060408385031215612a6257600080fd5b612a6b836123b2565b915060208301358015158114612a8057600080fd5b809150509250929050565b60008060208385031215612a9e57600080fd5b82356001600160401b03811115612ab457600080fd5b61298985828601612877565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612b1557603f19888603018452612b03858351612468565b94509285019290850190600101612ae7565b5092979650505050505050565b60008060008060408587031215612b3857600080fd5b84356001600160401b0380821115612b4f57600080fd5b612b5b88838901612877565b90965094506020870135915080821115612b7457600080fd5b50612a2887828801612877565b600080600080600060608688031215612b9957600080fd5b612ba2866123b2565b945060208601356001600160401b0380821115612bbe57600080fd5b612bca89838a01612877565b90965094506040880135915080821115612be357600080fd5b50612bf088828901612877565b969995985093965092949392505050565b60008060408385031215612c1457600080fd5b612c1d836123b2565b9150612c2b602084016123b2565b90509250929050565b600080600080600060a08688031215612c4c57600080fd5b612c55866123b2565b9450612c63602087016123b2565b9350604086013592506060860135915060808601356001600160401b03811115612c8c57600080fd5b61275288828901612643565b600181811c90821680612cac57607f821691505b602082108103612ccc57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351612ce4818460208801612444565b835190830190612cf8818360208801612444565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612d2e57600080fd5b8301803591506001600160401b03821115612d4857600080fd5b60200191503681900382131561251b57600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612d9557612d95612d6d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082612dc157612dc1612d9c565b500490565b8181038181111561034357610343612d6d565b600082612de857612de8612d9c565b500690565b8082018082111561034357610343612d6d565b601f82111561055e57600081815260208120601f850160051c81016020861015612e275750805b601f850160051c820191505b81811015610e8357828155600101612e33565b81516001600160401b03811115612e5f57612e5f61256d565b612e7381612e6d8454612c98565b84612e00565b602080601f831160018114612ea85760008415612e905750858301515b600019600386901b1c1916600185901b178555610e83565b600085815260208120601f198616915b82811015612ed757888601518255948401946001909101908401612eb8565b5085821015612ef55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808335601e19843603018112612f1c57600080fd5b8301803591506001600160401b03821115612f3657600080fd5b6020019150600581901b360382131561251b57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612f86816017850160208801612444565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612fb7816028840160208801612444565b01602801949350505050565b604081526000612fd66040830185612829565b8281036020840152612fe88185612829565b95945050505050565b60006001600160a01b03808816835280871660208401525060a0604083015261301d60a0830186612829565b828103606084015261302f8186612829565b905082810360808401526130438185612468565b98975050505050505050565b60006020828403121561306157600080fd5b8151610340816123f8565b600060033d11156130855760046000803e5060005160e01c5b90565b600060443d10156130965790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156130c557505050505090565b82850191508151818111156130dd5750505050505090565b843d87010160208285010111156130f75750505050505090565b61310660208286010187612583565b509095945050505050565b815160009082906020808601845b8381101561313b5781518552938201939082019060010161311f565b50929695505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261317f60a0830184612468565b979650505050505050565b808202811582820484141761034357610343612d6d565b634e487b7160e01b600052603160045260246000fdfe1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68ba2646970667358221220923b8857f29c87be33e09c604a45f143d661f0afdabf4dbc58fbd49fd458a8e764736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c806355f804b3116100b8578063ac9650d81161007c578063ac9650d8146102b5578063bd85b039146102d5578063ceb60ee6146102e8578063d81d0a15146102fb578063e985e9c51461030e578063f242432a1461032157600080fd5b806355f804b3146102495780636dcfd8411461025c57806384118c5d1461027c57806385bff2e71461028f578063a22cb465146102a257600080fd5b8063162094c4116100ff578063162094c4146101dd5780632eb2c2d6146101f05780634e1273f4146102035780634f7fb3321461022357806355b4b1a41461023657600080fd5b8062fdd58e1461013b57806301ffc9a7146101615780630e89341c1461019557806313ba55df146101b5578063156e29f6146101c8575b600080fd5b61014e6101493660046123ce565b610334565b6040519081526020015b60405180910390f35b61018561016f36600461240e565b6001600160e01b031916636cdb3d1360e11b1490565b6040519015158152602001610158565b6101a86101a336600461242b565b610349565b6040516101589190612494565b61014e6101c336600461242b565b610518565b6101db6101d63660046124a7565b610523565b005b6101db6101eb366004612522565b610563565b6101db6101fe3660046126b6565b6105ce565b61021661021136600461275f565b610620565b6040516101589190612864565b6101db6102313660046128bb565b61078a565b61014e6102443660046123ce565b6107eb565b6101db610257366004612954565b610833565b61026f61026a36600461242b565b6108a1565b6040516101589190612995565b6101db61028a3660046129e2565b6108ac565b61021661029d366004612a34565b610941565b6101db6102b0366004612a4f565b61094c565b6102c86102c3366004612a8b565b610a00565b6040516101589190612ac0565b61014e6102e336600461242b565b610b1a565b6101db6102f6366004612b22565b610b4d565b6101db610309366004612b81565b610b5f565b61018561031c366004612c01565b610b97565b6101db61032f366004612c34565b610be4565b60006103408383610c2f565b90505b92915050565b60008181527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f56020526040812080546060927f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f49290916103a890612c98565b80601f01602080910402602001604051908101604052809291908181526020018280546103d490612c98565b80156104215780601f106103f657610100808354040283529160200191610421565b820191906000526020600020905b81548152906001019060200180831161040457829003601f168201915b50505050509050600082600001805461043990612c98565b80601f016020809104026020016040519081016040528092919081815260200182805461046590612c98565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b5050505050905080516000036104ca57509392505050565b8151156104fd5780826040516020016104e4929190612cd2565b6040516020818303038152906040529350505050919050565b8061050786610c8d565b6040516020016104e4929190612cd2565b600061034382610d95565b61055361054e7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa735490565b610dcb565b61055e838383610dd8565b505050565b61058e61054e7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61055e8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610df392505050565b6001600160a01b03851633148015906105ee57506105ec8533610b97565b155b1561060b576040516212efed60e91b815260040160405180910390fd5b610619338686868686610e67565b5050505050565b6060815183511461064457604051633e7e0b6d60e11b815260040160405180910390fd5b82516000805160206131b8833981519152906000906001600160401b038111156106705761067061256d565b604051908082528060200260200182016040528015610699578160200160208202803683370190505b50905060005b85518110156107815760006001600160a01b03168682815181106106c5576106c5612d01565b60200260200101516001600160a01b0316036106f45760405163db5d879760e01b815260040160405180910390fd5b82600086838151811061070957610709612d01565b60200260200101518152602001908152602001600020600087838151811061073357610733612d01565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061076e5761076e612d01565b602090810291909101015260010161069f565b50949350505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036107cd57604051635db5c7cd60e11b815260040160405180910390fd5b600281556107df878787878787610e8b565b60019055505050505050565b6001600160a01b03821660009081527f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d660209081526040808320848452909152812054610340565b61085e61054e7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b61089d82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f6192505050565b5050565b606061034382610f8c565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036108ef57604051635db5c7cd60e11b815260040160405180910390fd5b60028160000181905550610937858585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061105f92505050565b6001905550505050565b60606103438261113b565b6001600160a01b038216330361097557604051637b30a93360e11b815260040160405180910390fd5b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b03811115610a1a57610a1a61256d565b604051908082528060200260200182016040528015610a4d57816020015b6060815260200190600190039081610a385790505b50905060005b82811015610b135760008030868685818110610a7157610a71612d01565b9050602002810190610a839190612d17565b604051610a91929190612d5d565b600060405180830381855af49150503d8060008114610acc576040519150601f19603f3d011682016040523d82523d6000602084013e610ad1565b606091505b50915091508115610aff5780848481518110610aef57610aef612d01565b6020026020010181905250610b09565b3d6000803e3d6000fd5b5050600101610a53565b5092915050565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea6020526040812054610343565b610b5984848484611203565b50505050565b610b8a61054e7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa735490565b61061985858585856112bd565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b6001600160a01b0385163314801590610c045750610c028533610b97565b155b15610c21576040516212efed60e91b815260040160405180910390fd5b610619338686868686611339565b60006001600160a01b038316610c585760405163db5d879760e01b815260040160405180910390fd5b6000805160206131b88339815191526000928352602090815260408084206001600160a01b0395909516845293905250205490565b606081600003610cb45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610cde5780610cc881612d83565b9150610cd79050600a83612db2565b9150610cb8565b6000816001600160401b03811115610cf857610cf861256d565b6040519080825280601f01601f191660200182016040528015610d22576020820181803683370190505b5090505b8415610d8d57610d37600183612dc6565b9150610d44600a86612dd9565b610d4f906030612ded565b60f81b818381518110610d6457610d64612d01565b60200101906001600160f81b031916908160001a905350610d86600a86612db2565b9450610d26565b949350505050565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb6020526040812061034390611355565b610dd5813361135f565b50565b61055e838383604051806020016040528060008152506113ca565b60008281527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f560205260409020610e2a8282612e46565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051610e5b9190612494565b60405180910390a25050565b610e758686868686866114a3565b610e8386868686868661164c565b505050505050565b848314610eab57604051634e98d26360e01b815260040160405180910390fd5b60005b85811015610f5857610f46878783818110610ecb57610ecb612d01565b90506020020135868684818110610ee457610ee4612d01565b90506020020135858585818110610efd57610efd612d01565b9050602002810190610f0f9190612f05565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061105f92505050565b80610f5081612d83565b915050610eae565b50505050505050565b7f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f461089d8282612e46565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb60205260408120606091610fc582611355565b6001600160401b03811115610fdc57610fdc61256d565b604051908082528060200260200182016040528015611005578160200160208202803683370190505b50905060005b61101483611355565b81101561105757611025838261175c565b82828151811061103757611037612d01565b6001600160a01b039092166020928302919091019091015260010161100b565b509392505050565b6040805133602082015280820185905260608082018590528251808303909101815260809091019091527f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d6906110b58382611768565b6110d0338686604051806020016040528060008152506113ca565b33600090815260208381526040808320888452909152812080548692906110f8908490612ded565b9091555050604051848152859033907fd4307fb1338aefb2a030cf5ea0f582a10d28ffee99fe253e5d48946f9a74a59f9060200160405180910390a35050505050565b6001600160a01b03811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040812060609161117e82611355565b6001600160401b038111156111955761119561256d565b6040519080825280602002602001820160405280156111be578160200160208202803683370190505b50905060005b6111cd83611355565b811015611057576111de838261175c565b8282815181106111f0576111f0612d01565b60209081029190910101526001016111c4565b82811461122357604051634e98d26360e01b815260040160405180910390fd5b6000805b848110156112b25761127a3387878481811061124557611245612d01565b9050602002013586868581811061125e5761125e612d01565b90506020020135604051806020016040528060008152506113ca565b83838281811061128c5761128c612d01565b905060200201358261129e9190612ded565b9150806112aa81612d83565b915050611227565b5061061933826118b2565b6106198585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092018290525060408051602081019091529081529250611a4e915050565b611347868686868686611ba5565b610e83868686868686611cbb565b6000610343825490565b6113698282611d77565b61089d5761137f816001600160a01b0316611dae565b61138a836020611dc0565b60405160200161139b929190612f4e565b60408051601f198184030181529082905262461bcd60e51b82526113c191600401612494565b60405180910390fd5b6001600160a01b0384166113f1576040516301c8efbf60e11b815260040160405180910390fd5b6114103360008661140187611f12565b61140a87611f12565b86611f5d565b60008381526000805160206131b8833981519152602090815260408083206001600160a01b03881684529091528120805484929061144f908490612ded565b909155505060408051848152602081018490526001600160a01b0386169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b6001600160a01b0384166114ca5760405163f5cadad560e01b815260040160405180910390fd5b81518351146114ec57604051633e7e0b6d60e11b815260040160405180910390fd5b6114fa868686868686611f5d565b6000805160206131b883398151915260005b84518110156115eb57600085828151811061152957611529612d01565b60200260200101519050600085838151811061154757611547612d01565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150808211156115985760405163119ac6bb60e31b815260040160405180910390fd5b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a1681529081208054600195909501948392906115de908490612ded565b9091555061150c92505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161163b929190612fc3565b60405180910390a450505050505050565b6001600160a01b0384163b15610e835760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906116909089908990889088908890600401612ff1565b6020604051808303816000875af19250505080156116cb575060408051601f3d908101601f191682019092526116c89181019061304f565b60015b61172b576116d761306c565b806308c379a00361171057506116eb613088565b806116f65750611712565b8060405162461bcd60e51b81526004016113c19190612494565b505b60405163380147a960e01b815260040160405180910390fd5b6001600160e01b0319811663bc197c8160e01b14610f5857604051633744db2960e01b815260040160405180910390fd5b60006103408383611f6b565b7f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c09547f7a07c093b55ad04e200605cb287859fe4640b7310d62fdbb044e26399da78c089060ff16156117cd5760405163a2f902f160e01b815260040160405180910390fd5b6000836040516020016117e09190613111565b60408051601f19818403018152918152815160209283012060008181526002860190935291205490915060ff161561182b5760405163dea0a45b60e01b815260040160405180910390fd5b6000838051906020012060405160200161184791815260200190565b604051602081830303815290604052805190602001209050600061187086856000015484611fb7565b90508061189057604051631006f83b60e31b815260040160405180910390fd5b50506000908152600290910160205260409020805460ff191660011790555050565b7ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb358c547ff38d3885e664c9638de25f02e645e1955ebebe901d7be2c2037db6a5bcbb35889060ff161561191757604051633137c0e960e11b815260040160405180910390fd5b6001600160a01b038316600090815260018201602052604090205482111561195257604051630f8a2c5f60e31b815260040160405180910390fd5b6001600160a01b03831660009081526001820160205260408120805484929061197c908490612dc6565b90915550506001600160a01b038316600090815260208290526040812080548492906119a9908490612ded565b92505081905550818160020160008282546119c49190612ded565b92505081905550818160030160008282546119df9190612dc6565b90915550506001600160a01b038316600090815260018201602090815260408083205484835292819020548151338152928301939093528101919091527fc7ba59c487358e9747ee9c691c213a9b2d30e01bb1b022a3e11d4b1984cd98459060600160405180910390a1505050565b6001600160a01b038416611a75576040516301c8efbf60e11b815260040160405180910390fd5b8151835114611a9757604051633e7e0b6d60e11b815260040160405180910390fd5b611aa633600086868686611f5d565b6000805160206131b883398151915260005b8451811015611b4557838181518110611ad357611ad3612d01565b6020026020010151826000878481518110611af057611af0612d01565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611b389190612ded565b9091555050600101611ab8565b50846001600160a01b031660006001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b96929190612fc3565b60405180910390a45050505050565b6001600160a01b038416611bcc5760405163f5cadad560e01b815260040160405180910390fd5b611bdb86868661140187611f12565b60008381526000805160206131b8833981519152602081815260408084206001600160a01b038a1685529091529091205480841115611c2d5760405163119ac6bb60e31b815260040160405180910390fd5b6000858152602083815260408083206001600160a01b038b81168552925280832093879003909355871681529081208054859290611c6c908490612ded565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910161163b565b6001600160a01b0384163b15610e835760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611cff9089908990889088908890600401613147565b6020604051808303816000875af1925050508015611d3a575060408051601f3d908101601f19168201909252611d379181019061304f565b60015b611d46576116d761306c565b6001600160e01b0319811663f23a6e6160e01b14610f5857604051633744db2960e01b815260040160405180910390fd5b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c62281160205260408120610340908361205c565b60606103436001600160a01b03831660145b60606000611dcf83600261318a565b611dda906002612ded565b6001600160401b03811115611df157611df161256d565b6040519080825280601f01601f191660200182016040528015611e1b576020820181803683370190505b509050600360fc1b81600081518110611e3657611e36612d01565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e6557611e65612d01565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115611ef2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611eb557611eb5612d01565b1a60f81b828281518110611ecb57611ecb612d01565b60200101906001600160f81b031916908160001a90535060049490941c9360001901611e84565b5083156103405760405163c913478560e01b815260040160405180910390fd5b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f4c57611f4c612d01565b602090810291909101015292915050565b610e8386868686868661207e565b81546000908210611f8f5760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110611fa457611fa4612d01565b9060005260206000200154905092915050565b600081815b8551811015612051576000868281518110611fd957611fd9612d01565b6020026020010151905080831161201b576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250612048565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50600101611fbc565b509092149392505050565b6001600160a01b03811660009081526001830160205260408120541515610340565b610e83868686868686836001600160a01b0316856001600160a01b031614610e83576001600160a01b0385811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040808220928716825281207fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea927fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb929091905b875181101561226657600087828151811061214557612145612d01565b60200260200101519050600081111561225d57600089838151811061216c5761216c612d01565b6020026020010151905060006001600160a01b03168c6001600160a01b0316036121b957600081815260208890526040812080548492906121ae908490612ded565b909155506121ee9050565b816121c48d83610c2f565b036121ee5760008181526020879052604090206121e1908d612273565b506121ec8582612288565b505b6001600160a01b038b16612225576000818152602088905260408120805484929061221a908490612dc6565b9091555061225b9050565b61222f8b82610c2f565b60000361225b57600081815260208790526040902061224e908c612294565b5061225984826122a9565b505b505b50600101612128565b5050505050505050505050565b6000610340836001600160a01b0384166122b5565b600061034083836122b5565b6000610340836001600160a01b03841661236f565b6000610340838361236f565b60008181526001830160205260408120548015610b13578354600090859060001981019081106122e7576122e7612d01565b906000526020600020015490508085600001600184038154811061230d5761230d612d01565b600091825260208083209091019290925591825260018601905260409020819055835484908061233f5761233f6131a1565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b6000818152600183016020526040812054610343575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b80356001600160a01b03811681146123c957600080fd5b919050565b600080604083850312156123e157600080fd5b6123ea836123b2565b946020939093013593505050565b6001600160e01b031981168114610dd557600080fd5b60006020828403121561242057600080fd5b8135610340816123f8565b60006020828403121561243d57600080fd5b5035919050565b60005b8381101561245f578181015183820152602001612447565b50506000910152565b60008151808452612480816020860160208601612444565b601f01601f19169290920160200192915050565b6020815260006103406020830184612468565b6000806000606084860312156124bc57600080fd5b6124c5846123b2565b95602085013595506040909401359392505050565b60008083601f8401126124ec57600080fd5b5081356001600160401b0381111561250357600080fd5b60208301915083602082850101111561251b57600080fd5b9250929050565b60008060006040848603121561253757600080fd5b8335925060208401356001600160401b0381111561255457600080fd5b612560868287016124da565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156125a8576125a861256d565b6040525050565b60006001600160401b038211156125c8576125c861256d565b5060051b60200190565b600082601f8301126125e357600080fd5b813560206125f0826125af565b6040516125fd8282612583565b83815260059390931b850182019282810191508684111561261d57600080fd5b8286015b848110156126385780358352918301918301612621565b509695505050505050565b600082601f83011261265457600080fd5b81356001600160401b0381111561266d5761266d61256d565b604051612684601f8301601f191660200182612583565b81815284602083860101111561269957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156126ce57600080fd5b6126d7866123b2565b94506126e5602087016123b2565b935060408601356001600160401b038082111561270157600080fd5b61270d89838a016125d2565b9450606088013591508082111561272357600080fd5b61272f89838a016125d2565b9350608088013591508082111561274557600080fd5b5061275288828901612643565b9150509295509295909350565b6000806040838503121561277257600080fd5b82356001600160401b038082111561278957600080fd5b818501915085601f83011261279d57600080fd5b813560206127aa826125af565b6040516127b78282612583565b83815260059390931b85018201928281019150898411156127d757600080fd5b948201945b838610156127fc576127ed866123b2565b825294820194908201906127dc565b9650508601359250508082111561281257600080fd5b5061281f858286016125d2565b9150509250929050565b600081518084526020808501945080840160005b838110156128595781518752958201959082019060010161283d565b509495945050505050565b6020815260006103406020830184612829565b60008083601f84011261288957600080fd5b5081356001600160401b038111156128a057600080fd5b6020830191508360208260051b850101111561251b57600080fd5b600080600080600080606087890312156128d457600080fd5b86356001600160401b03808211156128eb57600080fd5b6128f78a838b01612877565b9098509650602089013591508082111561291057600080fd5b61291c8a838b01612877565b9096509450604089013591508082111561293557600080fd5b5061294289828a01612877565b979a9699509497509295939492505050565b6000806020838503121561296757600080fd5b82356001600160401b0381111561297d57600080fd5b612989858286016124da565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156129d65783516001600160a01b0316835292840192918401916001016129b1565b50909695505050505050565b600080600080606085870312156129f857600080fd5b843593506020850135925060408501356001600160401b03811115612a1c57600080fd5b612a2887828801612877565b95989497509550505050565b600060208284031215612a4657600080fd5b610340826123b2565b60008060408385031215612a6257600080fd5b612a6b836123b2565b915060208301358015158114612a8057600080fd5b809150509250929050565b60008060208385031215612a9e57600080fd5b82356001600160401b03811115612ab457600080fd5b61298985828601612877565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612b1557603f19888603018452612b03858351612468565b94509285019290850190600101612ae7565b5092979650505050505050565b60008060008060408587031215612b3857600080fd5b84356001600160401b0380821115612b4f57600080fd5b612b5b88838901612877565b90965094506020870135915080821115612b7457600080fd5b50612a2887828801612877565b600080600080600060608688031215612b9957600080fd5b612ba2866123b2565b945060208601356001600160401b0380821115612bbe57600080fd5b612bca89838a01612877565b90965094506040880135915080821115612be357600080fd5b50612bf088828901612877565b969995985093965092949392505050565b60008060408385031215612c1457600080fd5b612c1d836123b2565b9150612c2b602084016123b2565b90509250929050565b600080600080600060a08688031215612c4c57600080fd5b612c55866123b2565b9450612c63602087016123b2565b9350604086013592506060860135915060808601356001600160401b03811115612c8c57600080fd5b61275288828901612643565b600181811c90821680612cac57607f821691505b602082108103612ccc57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351612ce4818460208801612444565b835190830190612cf8818360208801612444565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612d2e57600080fd5b8301803591506001600160401b03821115612d4857600080fd5b60200191503681900382131561251b57600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612d9557612d95612d6d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082612dc157612dc1612d9c565b500490565b8181038181111561034357610343612d6d565b600082612de857612de8612d9c565b500690565b8082018082111561034357610343612d6d565b601f82111561055e57600081815260208120601f850160051c81016020861015612e275750805b601f850160051c820191505b81811015610e8357828155600101612e33565b81516001600160401b03811115612e5f57612e5f61256d565b612e7381612e6d8454612c98565b84612e00565b602080601f831160018114612ea85760008415612e905750858301515b600019600386901b1c1916600185901b178555610e83565b600085815260208120601f198616915b82811015612ed757888601518255948401946001909101908401612eb8565b5085821015612ef55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808335601e19843603018112612f1c57600080fd5b8301803591506001600160401b03821115612f3657600080fd5b6020019150600581901b360382131561251b57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612f86816017850160208801612444565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612fb7816028840160208801612444565b01602801949350505050565b604081526000612fd66040830185612829565b8281036020840152612fe88185612829565b95945050505050565b60006001600160a01b03808816835280871660208401525060a0604083015261301d60a0830186612829565b828103606084015261302f8186612829565b905082810360808401526130438185612468565b98975050505050505050565b60006020828403121561306157600080fd5b8151610340816123f8565b600060033d11156130855760046000803e5060005160e01c5b90565b600060443d10156130965790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156130c557505050505090565b82850191508151818111156130dd5750505050505090565b843d87010160208285010111156130f75750505050505090565b61310660208286010187612583565b509095945050505050565b815160009082906020808601845b8381101561313b5781518552938201939082019060010161311f565b50929695505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261317f60a0830184612468565b979650505050505050565b808202811582820484141761034357610343612d6d565b634e487b7160e01b600052603160045260246000fdfe1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68ba2646970667358221220923b8857f29c87be33e09c604a45f143d661f0afdabf4dbc58fbd49fd458a8e764736f6c63430008130033",
  "devdoc": {
    "details": "This contract handles the creation and management of items It uses ERC1155 tokens to represent items and provides methods to mint new items, claim items via Merkle tree or a whitelist, and set the base and URIs for the items. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.",
    "kind": "dev",
    "methods": {
      "accountsByToken(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "list of holder addresses"
        }
      },
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "claimMerkle(uint256,uint256,bytes32[])": {
        "params": {
          "amount": "The amount of the item to claim",
          "itemId": "The ID of the item to claim",
          "proof": "The Merkle proof for the item"
        }
      },
      "claimMerkleBatch(uint256[],uint256[],bytes32[][])": {
        "params": {
          "amounts": "The amounts of the items to claim",
          "itemsIds": "The IDs of the items to claim",
          "proofs": "The Merkle proofs for the items"
        }
      },
      "claimWhitelist(uint256[],uint256[])": {
        "params": {
          "amounts": "The amounts of the items to claim",
          "itemIds": "The IDs of the items to claim"
        }
      },
      "claimedAmount(address,uint256)": {
        "params": {
          "account": "the account to query",
          "itemId": "the item id to query"
        },
        "returns": {
          "amount": "returns the claimed amount given an account and an item id"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "mint(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of the items to mint",
          "id": "The ID of the item to mint",
          "to": "The address to mint the item to"
        }
      },
      "mintBatch(address,uint256[],uint256[])": {
        "details": "Only account with minter role can call this function",
        "params": {
          "amounts": "An array of corresponding amounts to be minted for each item ID",
          "ids": "An array of items IDs to be minted",
          "to": "The address to receive the minted items"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "array of function call data payloads"
        },
        "returns": {
          "results": "array of function call results"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "setBaseURI(string)": {
        "details": "Only the manager role can call this function",
        "params": {
          "baseURI": "The new base URI"
        }
      },
      "setTokenURI(uint256,string)": {
        "details": "Only the manager role can call this function",
        "params": {
          "tokenId": "The ID of the item to set the URI for",
          "tokenURI": "The new item URI"
        }
      },
      "tokensByAccount(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "list of token ids"
        }
      },
      "totalHolders(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "quantity of holders"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "token supply"
        }
      }
    },
    "title": "ItemsFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accountsByToken(uint256)": {
        "notice": "query holders of given token"
      },
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "claimMerkle(uint256,uint256,bytes32[])": {
        "notice": "Claims an item if present in the Merkle tree"
      },
      "claimMerkleBatch(uint256[],uint256[],bytes32[][])": {
        "notice": "Claims items if present in the Merkle tree"
      },
      "claimWhitelist(uint256[],uint256[])": {
        "notice": "Claims items from a whitelist"
      },
      "claimedAmount(address,uint256)": {
        "notice": "Amount claimed by an address of a specific item"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "mint(address,uint256,uint256)": {
        "notice": "Mints a new item"
      },
      "mintBatch(address,uint256[],uint256[])": {
        "notice": "Mint a batch of items to a specific address"
      },
      "multicall(bytes[])": {
        "notice": "batch function calls to the contract and return the results of each"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      },
      "setBaseURI(string)": {
        "notice": "Set the base URI for all items metadata"
      },
      "setTokenURI(uint256,string)": {
        "notice": "Set the URI for a specific item ID"
      },
      "tokensByAccount(address)": {
        "notice": "query tokens held by given address"
      },
      "totalHolders(uint256)": {
        "notice": "query total number of holders for given token"
      },
      "totalSupply(uint256)": {
        "notice": "query total minted supply of given token"
      },
      "uri(uint256)": {
        "notice": "inheritdoc IERC1155Metadata"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}