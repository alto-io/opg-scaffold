{
  "address": "0x97ab340Dc38492897dc095EdbE8d8722315b1D58",
  "abi": [
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ArcadianNotUnique",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InputDataMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InsufficientItemBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InvalidERC1155Contract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InvalidSlotId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyAllowedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyDisallowedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyEquippedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemDoesNotHaveSlotAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NonBaseSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NotAllBaseSlotsEquipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NotArcadianOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_SlotAlreadyEquipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_SlotNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_TicketNeededToModifyBaseSlots",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingBaseSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingEmptySlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingPermanentSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldArcadiansAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newArcadiansAddress",
          "type": "address"
        }
      ],
      "name": "ArcadiansAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "ItemsAllowedInSlotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "permanent",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum InventoryStorage.SlotCategory",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "SlotCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "slotsIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "addBaseModifierTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "allowItemsInSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "allowedItem",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "allowedSlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        }
      ],
      "name": "arcadianToBaseItemHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "permanent",
          "type": "bool"
        },
        {
          "internalType": "enum InventoryStorage.SlotCategory",
          "name": "category",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "createSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "disallowItemsInSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "equip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "equipped",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slotId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryInternal.ItemInSlot",
          "name": "item",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        }
      ],
      "name": "equippedAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slotId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryInternal.ItemInSlot[]",
          "name": "equippedSlot",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "slotIds",
          "type": "uint256[]"
        }
      ],
      "name": "equippedBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slotId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryInternal.ItemInSlot[]",
          "name": "equippedSlot",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "getBaseModifierTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "isArcadianUnique",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "numAllowedItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSlots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "slot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "permanent",
              "type": "bool"
            },
            {
              "internalType": "enum InventoryStorage.SlotCategory",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct InventoryStorage.Slot",
          "name": "existentSlot",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotsAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "permanent",
              "type": "bool"
            },
            {
              "internalType": "enum InventoryStorage.SlotCategory",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct InventoryStorage.Slot[]",
          "name": "existentSlots",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "slotIds",
          "type": "uint256[]"
        }
      ],
      "name": "unequip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66403ef54e12df498fb9c1040d53af1f0bd63927662786c1b020d60c860b93c1",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0x97ab340Dc38492897dc095EdbE8d8722315b1D58",
    "transactionIndex": 0,
    "gasUsed": "2859348",
    "logsBloom": "0x
    "blockHash": "0x8b54d247b387ddd4a904294008071c685f6c312a2b52ca2fe55eef09a409bca5",
    "transactionHash": "0x66403ef54e12df498fb9c1040d53af1f0bd63927662786c1b020d60c860b93c1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 34776484,
        "transactionHash": "0x66403ef54e12df498fb9c1040d53af1f0bd63927662786c1b020d60c860b93c1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000196567966712ac00000000000000000000000000000000000000000000000003c81316157e614b7000000000000000000000000000000000000000000003059bc30647290d266f20000000000000000000000000000000000000000000000003aeadae7f174e9f7000000000000000000000000000000000000000000003059bdc6baebf74391b2",
        "logIndex": 0,
        "blockHash": "0x8b54d247b387ddd4a904294008071c685f6c312a2b52ca2fe55eef09a409bca5"
      }
    ],
    "blockNumber": 34776484,
    "cumulativeGasUsed": "2859348",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "1ba264ed86b96569495ccba9dfb3547c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ArcadianNotUnique\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InputDataMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InsufficientItemBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InvalidERC1155Contract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InvalidSlotId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyAllowedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyDisallowedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyEquippedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemDoesNotHaveSlotAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NonBaseSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NotAllBaseSlotsEquipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NotArcadianOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_SlotAlreadyEquipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_SlotNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_TicketNeededToModifyBaseSlots\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingBaseSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingEmptySlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingPermanentSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldArcadiansAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newArcadiansAddress\",\"type\":\"address\"}],\"name\":\"ArcadiansAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"ItemsAllowedInSlotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"SlotCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"slotsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addBaseModifierTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"allowItemsInSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"allowedItem\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"allowedSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"}],\"name\":\"arcadianToBaseItemHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"createSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"disallowItemsInSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"equipped\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryInternal.ItemInSlot\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"}],\"name\":\"equippedAll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryInternal.ItemInSlot[]\",\"name\":\"equippedSlot\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slotIds\",\"type\":\"uint256[]\"}],\"name\":\"equippedBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryInternal.ItemInSlot[]\",\"name\":\"equippedSlot\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"getBaseModifierTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"isArcadianUnique\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"numAllowedItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSlots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"slot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct InventoryStorage.Slot\",\"name\":\"existentSlot\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotsAll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct InventoryStorage.Slot[]\",\"name\":\"existentSlots\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slotIds\",\"type\":\"uint256[]\"}],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is responsible for managing the inventory system for the Arcadians using slots.  It defines the functionality to equip and unequip items to Arcadians, check if a combination of items  are unique, and retrieve the inventory slots and allowed items for a slot.  This contract also implements ERC1155Holder to handle ERC1155 token transfers This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.\",\"kind\":\"dev\",\"methods\":{\"addBaseModifierTickets(address,uint256[],uint256[])\":{\"params\":{\"account\":\"The account to increase the number of tickets\",\"amounts\":\"the amounts of tickets to increase\",\"slotsIds\":\"The slots ids to increase the number of tickets\"}},\"allowItemsInSlot(uint256,(address,uint256)[])\":{\"params\":{\"items\":\"The list of items to allow in the slot\",\"slotId\":\"The slot id\"}},\"allowedItem(uint256,uint256)\":{\"params\":{\"index\":\"The index of the item\",\"slotId\":\"The slot id to query\"},\"returns\":{\"_0\":\"A list of all the items that are allowed in the slot\"}},\"allowedSlot((address,uint256))\":{\"params\":{\"item\":\"The item to check\"},\"returns\":{\"_0\":\"The allowed slot id for the item. Slots are 1-indexed.\"}},\"createSlot(bool,uint8,(address,uint256)[])\":{\"details\":\"This function is only accessible to the manager roleSlots are 1-indexed\",\"params\":{\"category\":\"The category of the slot\",\"items\":\"The list of items to allow in the slot\",\"permanent\":\"Whether or not the slot can be unequipped once equipped\"}},\"disallowItemsInSlot(uint256,(address,uint256)[])\":{\"params\":{\"items\":\"The list of items to disallow in the slot\",\"slotId\":\"The ID of the inventory slot\"}},\"equip(uint256,(address,uint256)[])\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to equip the items for\",\"items\":\"An array of items to equip in the corresponding slots\"}},\"equipped(uint256,uint256)\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\",\"slotId\":\"The slot id to query\"}},\"equippedAll(uint256)\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\"}},\"equippedBatch(uint256,uint256[])\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\",\"slotIds\":\"The slots ids to query\"}},\"getBaseModifierTickets(address,uint256)\":{\"params\":{\"account\":\"The accounts to increase the number of tickets\"}},\"isArcadianUnique(uint256,(address,uint256)[])\":{\"details\":\"The uniqueness is calculated using the existent arcadian items and the input items as wellOnly items equipped in 'base' category slots are considered for uniqueness\",\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\",\"items\":\"An array of items to check for uniqueness after \\\"equipped\\\" over the existent arcadian items.\"}},\"numAllowedItems(uint256)\":{\"params\":{\"slotId\":\"The slot id to check\"},\"returns\":{\"_0\":\"A list of all the items that are allowed in the slot\"}},\"numSlots()\":{\"details\":\"Slots are 1-indexed\",\"returns\":{\"_0\":\"The number of inventory slots \"}},\"slot(uint256)\":{\"details\":\"Slots are 1-indexed\",\"params\":{\"slotId\":\"The ID of the inventory slot\"},\"returns\":{\"existentSlot\":\"The details of the inventory slot\"}},\"slotsAll()\":{\"details\":\"Slots are 1-indexed\",\"returns\":{\"existentSlots\":\"The details of all the inventory slots\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unequip(uint256,uint256[])\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to equip the item for\",\"slotIds\":\"The slots ids in which the items will be unequipped\"}}},\"title\":\"InventoryFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBaseModifierTickets(address,uint256[],uint256[])\":{\"notice\":\"Adds tickets to accounts that allow to modify the base traits\"},\"allowItemsInSlot(uint256,(address,uint256)[])\":{\"notice\":\"Adds items to the list of allowed items for an inventory slot\"},\"allowedItem(uint256,uint256)\":{\"notice\":\"Returns the allowed item for a given slot and the index\"},\"allowedSlot((address,uint256))\":{\"notice\":\"Returns the allowed slot for a given item\"},\"createSlot(bool,uint8,(address,uint256)[])\":{\"notice\":\"Creates a new inventory slot\"},\"disallowItemsInSlot(uint256,(address,uint256)[])\":{\"notice\":\"Removes items from the list of allowed items\"},\"equip(uint256,(address,uint256)[])\":{\"notice\":\"Equips multiple items to multiple slots for a specified Arcadian NFT\"},\"equipped(uint256,uint256)\":{\"notice\":\"Retrieves the equipped item in a slot for a specified Arcadian NFT\"},\"equippedAll(uint256)\":{\"notice\":\"Retrieves all the equipped items for a specified Arcadian NFT\"},\"equippedBatch(uint256,uint256[])\":{\"notice\":\"Retrieves the equipped items in the slot of an Arcadian NFT\"},\"getBaseModifierTickets(address,uint256)\":{\"notice\":\"Returns the number tickets avialable for an account that allow to modify the base traits\"},\"isArcadianUnique(uint256,(address,uint256)[])\":{\"notice\":\"Indicates if a list of items applied to an the arcadian is unique\"},\"numAllowedItems(uint256)\":{\"notice\":\"Returns the number of allowed items for a given slot\"},\"numSlots()\":{\"notice\":\"Returns the number of inventory slots\"},\"slot(uint256)\":{\"notice\":\"Returns the details of an inventory slot given its ID\"},\"slotsAll()\":{\"notice\":\"Returns the details of all the existent slots\"},\"unequip(uint256,uint256[])\":{\"notice\":\"Unequips the items equipped in multiple slots for a specified Arcadian NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/inventory/InventoryFacet.sol\":\"InventoryFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 minValue = bytes32(type(uint256).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(address[] memory array) internal pure returns (address) {\\n        address minValue = address(type(uint160).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 minValue = type(uint256).max;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 maxValue = bytes32(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(address[] memory array) internal pure returns (address) {\\n        address maxValue = address(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 maxValue = 0;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86a2953855b8df5a5ded23a79016f1584b6321ef2c04f44466ebfbb6d23e728c\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/inventory/InventoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Crated based in the following work:\\n * Authors: Moonstream DAO (engineering@moonstream.to)\\n * GitHub: https://github.com/G7DAO/contracts\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ERC1155Holder } from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { InventoryInternal } from \\\"./InventoryInternal.sol\\\";\\n\\n/**\\n * @title InventoryFacet\\n * @dev This contract is responsible for managing the inventory system for the Arcadians using slots. \\n * It defines the functionality to equip and unequip items to Arcadians, check if a combination of items \\n * are unique, and retrieve the inventory slots and allowed items for a slot. \\n * This contract also implements ERC1155Holder to handle ERC1155 token transfers\\n * This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard.\\n * It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.\\n */\\ncontract InventoryFacet is\\n    ERC1155Holder,\\n    ReentrancyGuard,\\n    InventoryInternal\\n{\\n\\n    /**\\n     * @notice Returns the number of inventory slots\\n     * @dev Slots are 1-indexed\\n     * @return The number of inventory slots \\n     */\\n    function numSlots() external view returns (uint) {\\n        return _numSlots();\\n    }\\n\\n    function arcadianToBaseItemHash(uint arcadianId) external view returns (bytes32) {\\n        return InventoryStorage.layout().arcadianToBaseItemHash[arcadianId];\\n    }\\n\\n    /**\\n     * @notice Returns the details of an inventory slot given its ID\\n     * @dev Slots are 1-indexed\\n     * @param slotId The ID of the inventory slot\\n     * @return existentSlot The details of the inventory slot\\n     */\\n    function slot(uint slotId) external view returns (InventoryStorage.Slot memory existentSlot) {\\n        return _slot(slotId);\\n    }\\n\\n    /**\\n     * @notice Returns the details of all the existent slots\\n     * @dev Slots are 1-indexed\\n     * @return existentSlots The details of all the inventory slots\\n     */\\n    function slotsAll() external view returns (InventoryStorage.Slot[] memory existentSlots) {\\n        return _slotsAll();\\n    }\\n\\n    /**\\n     * @notice Creates a new inventory slot\\n     * @dev This function is only accessible to the manager role\\n     * @dev Slots are 1-indexed\\n     * @param permanent Whether or not the slot can be unequipped once equipped\\n     * @param category The category of the slot\\n     * @param items The list of items to allow in the slot\\n     */\\n    function createSlot(\\n        bool permanent,\\n        InventoryStorage.SlotCategory category,\\n        InventoryStorage.Item[] calldata items\\n    ) external onlyManager {\\n        _createSlot(permanent, category, items);\\n    }\\n\\n    /**\\n     * @notice Returns the number tickets avialable for an account that allow to modify the base traits\\n     * @param account The accounts to increase the number of tickets\\n     */\\n    function getBaseModifierTickets(\\n        address account,\\n        uint slotId\\n    ) external view returns (uint) {\\n        return _getBaseModifierTickets(account, slotId);\\n    }\\n\\n    /**\\n     * @notice Adds tickets to accounts that allow to modify the base traits\\n     * @param account The account to increase the number of tickets\\n     * @param slotsIds The slots ids to increase the number of tickets\\n     * @param amounts the amounts of tickets to increase\\n     */\\n    function addBaseModifierTickets(\\n        address account,\\n        uint[] calldata slotsIds,\\n        uint[] calldata amounts\\n    ) external onlyManager {\\n        _addBaseModifierTickets(account, slotsIds, amounts);\\n    }\\n\\n    /**\\n     * @notice Adds items to the list of allowed items for an inventory slot\\n     * @param slotId The slot id\\n     * @param items The list of items to allow in the slot\\n     */\\n    function allowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) external onlyManager {\\n        _allowItemsInSlot(slotId, items);\\n    }\\n    \\n    /**\\n     * @notice Removes items from the list of allowed items\\n     * @param slotId The ID of the inventory slot\\n     * @param items The list of items to disallow in the slot\\n     */\\n    function disallowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) external onlyManager {\\n        _disallowItemsInSlot(slotId, items);\\n    }\\n\\n    /**\\n     * @notice Returns the allowed slot for a given item\\n     * @param item The item to check\\n     * @return The allowed slot id for the item. Slots are 1-indexed.\\n     */\\n    function allowedSlot(InventoryStorage.Item calldata item) external view returns (uint) {\\n        return _allowedSlot(item);\\n    }\\n\\n    /**\\n     * @notice Returns the allowed item for a given slot and the index\\n     * @param slotId The slot id to query\\n     * @param index The index of the item\\n     * @return A list of all the items that are allowed in the slot\\n     */\\n    function allowedItem(uint slotId, uint index) external view returns (InventoryStorage.Item memory) {\\n        return _allowedItem(slotId, index);\\n    }\\n\\n    /**\\n     * @notice Returns the number of allowed items for a given slot\\n     * @param slotId The slot id to check\\n     * @return A list of all the items that are allowed in the slot\\n     */\\n    function numAllowedItems(uint slotId) external view returns (uint) {\\n        return _numAllowedItems(slotId);\\n    }\\n\\n    /**\\n     * @notice Equips multiple items to multiple slots for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to equip the items for\\n     * @param items An array of items to equip in the corresponding slots\\n     */\\n    function equip(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items\\n    ) external nonReentrant {\\n        _equip(arcadianId, items, false);\\n    }\\n\\n    /**\\n     * @notice Unequips the items equipped in multiple slots for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to equip the item for\\n     * @param slotIds The slots ids in which the items will be unequipped\\n     */\\n    function unequip(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) external nonReentrant {\\n        _unequip(arcadianId, slotIds);\\n    }\\n\\n    /**\\n     * @notice Retrieves the equipped item in a slot for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     * @param slotId The slot id to query\\n     */\\n    function equipped(\\n        uint arcadianId,\\n        uint slotId\\n    ) external view returns (ItemInSlot memory item) {\\n        return _equipped(arcadianId, slotId);\\n    }\\n\\n    /**\\n     * @notice Retrieves the equipped items in the slot of an Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     * @param slotIds The slots ids to query\\n     */\\n    function equippedBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) external view returns (ItemInSlot[] memory equippedSlot) {\\n        return _equippedBatch(arcadianId, slotIds);\\n    }\\n\\n    /**\\n     * @notice Retrieves all the equipped items for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     */\\n    function equippedAll(\\n        uint arcadianId\\n    ) external view returns (ItemInSlot[] memory equippedSlot) {\\n        return _equippedAll(arcadianId);\\n    }\\n\\n    /**\\n     * @notice Indicates if a list of items applied to an the arcadian is unique\\n     * @dev The uniqueness is calculated using the existent arcadian items and the input items as well\\n     * @dev Only items equipped in 'base' category slots are considered for uniqueness\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     * @param items An array of items to check for uniqueness after \\\"equipped\\\" over the existent arcadian items.\\n     */\\n    function isArcadianUnique(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items\\n    ) external view returns (bool) {\\n        return _isArcadianUnique(arcadianId, items);\\n    }\\n}\",\"keccak256\":\"0x2a36d9ee73ab1a9304710a4043e27f06160f45e9d7fef9b0112b542ea8965f57\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { AddressUtils } from \\\"@solidstate/contracts/utils/AddressUtils.sol\\\";\\nimport { ArrayUtils } from \\\"@solidstate/contracts/utils/ArrayUtils.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { IERC1155 } from \\\"@solidstate/contracts/interfaces/IERC1155.sol\\\";\\n\\n\\ncontract InventoryInternal is\\n    ReentrancyGuard,\\n    RolesInternal\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using AddressUtils for address;\\n\\n    error Inventory_InvalidERC1155Contract();\\n    error Inventory_UnequippingPermanentSlot();\\n    error Inventory_InvalidSlotId();\\n    error Inventory_ItemDoesNotHaveSlotAssigned();\\n    error Inventory_InsufficientItemBalance();\\n    error Inventory_SlotAlreadyEquipped();\\n    error Inventory_UnequippingEmptySlot();\\n    error Inventory_UnequippingBaseSlot();\\n    error Inventory_SlotNotSpecified();\\n    error Inventory_ItemNotSpecified();\\n    error Inventory_NotArcadianOwner();\\n    error Inventory_ArcadianNotUnique();\\n    error Inventory_NotAllBaseSlotsEquipped();\\n    error Inventory_InputDataMismatch();\\n    error Inventory_ItemAlreadyEquippedInSlot();\\n    error Inventory_ItemAlreadyAllowedInSlot();\\n    error Inventory_ItemAlreadyDisallowedInSlot();\\n    error Inventory_TicketNeededToModifyBaseSlots();\\n    error Inventory_NonBaseSlot();\\n\\n    event ArcadiansAddressChanged(address indexed oldArcadiansAddress, address indexed newArcadiansAddress);\\n\\n    event ItemsAllowedInSlotUpdated(\\n        address indexed by,\\n        uint slotId\\n    );\\n\\n    event ItemsEquipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event ItemsUnequipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event SlotCreated(\\n        address indexed by,\\n        uint slotId,\\n        bool permanent,\\n        InventoryStorage.SlotCategory category\\n    );\\n\\n    // Helper struct only used in view functions\\n    struct ItemInSlot {\\n        uint slotId;\\n        address erc721Contract;\\n        uint itemId;\\n    }\\n\\n    modifier onlyValidSlot(uint slotId) {\\n        if (slotId == 0 || slotId > InventoryStorage.layout().numSlots) revert Inventory_InvalidSlotId();\\n        _;\\n    }\\n\\n    modifier onlyArcadianOwner(uint arcadianId) {\\n        IERC721 arcadiansContract = IERC721(address(this));\\n        if (msg.sender != arcadiansContract.ownerOf(arcadianId)) revert Inventory_NotArcadianOwner();\\n        _;\\n    }\\n\\n    function _numSlots() internal view returns (uint) {\\n        return InventoryStorage.layout().numSlots;\\n    }\\n\\n    function _equip(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items,\\n        bool freeBaseModifier\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        if (items.length == 0) \\n            revert Inventory_ItemNotSpecified();\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        bool containsBaseSlots;\\n        uint[] memory slotsIds = new uint[](items.length);\\n        for (uint i = 0; i < items.length; i++) {\\n            uint slotId = _equipSingleSlot(arcadianId, items[i], freeBaseModifier);\\n            containsBaseSlots = containsBaseSlots || inventorySL.slots[slotId].category == InventoryStorage.SlotCategory.Base;\\n            slotsIds[i] = slotId;\\n        }\\n\\n        if (!_baseSlotsEquipped(arcadianId)) \\n            revert Inventory_NotAllBaseSlotsEquipped();\\n\\n        if (containsBaseSlots && !_hashBaseItemsUnchecked(arcadianId)) \\n            revert Inventory_ArcadianNotUnique();\\n\\n        emit ItemsEquipped(msg.sender, arcadianId, slotsIds);\\n    }\\n\\n    function _equipSingleSlot(\\n        uint arcadianId,\\n        InventoryStorage.Item calldata item,\\n        bool freeBaseModifier\\n    ) internal returns (uint slotId) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        slotId = inventorySL.itemSlot[item.erc721Contract][item.id];\\n        \\n        if (slotId == 0 || slotId > InventoryStorage.layout().numSlots) \\n            revert Inventory_ItemDoesNotHaveSlotAssigned();\\n        \\n        if (!freeBaseModifier && inventorySL.slots[slotId].category == InventoryStorage.SlotCategory.Base) {\\n            if (inventorySL.baseModifierTicket[msg.sender][slotId] < 1)\\n                revert Inventory_TicketNeededToModifyBaseSlots();\\n\\n            inventorySL.baseModifierTicket[msg.sender][slotId]--;\\n        }\\n\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n        if (inventorySL.slots[slotId].permanent && existingItem.erc721Contract != address(0)) \\n            revert Inventory_UnequippingPermanentSlot();\\n        if (existingItem.erc721Contract == item.erc721Contract && existingItem.id == item.id)\\n            revert Inventory_ItemAlreadyEquippedInSlot();\\n\\n        if (inventorySL.equippedItems[arcadianId][slotId].erc721Contract != address(0))\\n            _unequipUnchecked(arcadianId, slotId);\\n\\n        IERC1155 erc1155Contract = IERC1155(item.erc721Contract);\\n        if (erc1155Contract.balanceOf(msg.sender, item.id) < 1)\\n            revert Inventory_InsufficientItemBalance();\\n\\n        erc1155Contract.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            item.id,\\n            1,\\n            ''\\n        );\\n\\n        inventorySL.equippedItems[arcadianId][slotId] = item;\\n    }\\n\\n    function _baseSlotsEquipped(uint arcadianId) internal view returns (bool) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n        for (uint i = 0; i < baseSlots.length(); i++) {\\n            if (inventorySL.equippedItems[arcadianId][baseSlots.at(i)].id == 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _unequipUnchecked(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n\\n        IERC1155 erc1155Contract = IERC1155(existingItem.erc721Contract);\\n        erc1155Contract.safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            existingItem.id,\\n            1,\\n            ''\\n        );\\n        delete inventorySL.equippedItems[arcadianId][slotId];\\n    }\\n\\n    function _unequipSingleSlot(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        if (inventorySL.slots[slotId].permanent) \\n            revert Inventory_UnequippingPermanentSlot();\\n\\n        if (inventorySL.equippedItems[arcadianId][slotId].erc721Contract == address(0)) \\n            revert Inventory_UnequippingEmptySlot();\\n        \\n        if (inventorySL.slots[slotId].category == InventoryStorage.SlotCategory.Base)\\n            revert Inventory_UnequippingBaseSlot();\\n\\n        _unequipUnchecked(arcadianId, slotId);\\n    }\\n\\n    function _unequip(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        if (slotIds.length == 0) \\n            revert Inventory_SlotNotSpecified();\\n\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            _unequipSingleSlot(arcadianId, slotIds[i]);\\n        }\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slotIds\\n        );\\n    }\\n\\n    function _equipped(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal view returns (ItemInSlot memory) {\\n        InventoryStorage.Item storage item = InventoryStorage.layout().equippedItems[arcadianId][slotId];\\n        return ItemInSlot(slotId, item.erc721Contract, item.id);\\n    }\\n\\n    function _equippedBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) internal view returns (ItemInSlot[] memory equippedSlots) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        equippedSlots = new ItemInSlot[](slotIds.length);\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotIds[i]];\\n            equippedSlots[i] = ItemInSlot(slotIds[i], equippedItem.erc721Contract, equippedItem.id);\\n        }\\n    }\\n\\n    function _equippedAll(\\n        uint arcadianId\\n    ) internal view returns (ItemInSlot[] memory equippedSlots) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        equippedSlots = new ItemInSlot[](numSlots);\\n        for (uint i = 0; i < numSlots; i++) {\\n            uint slot = i + 1;\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slot];\\n            equippedSlots[i] = ItemInSlot(slot, equippedItem.erc721Contract, equippedItem.id);\\n        }\\n    }\\n\\n    function _isArcadianUnique(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal view returns (bool) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n\\n        uint baseSlotsLength = baseSlots.length();\\n        uint[] memory baseSlotsIds = new uint[](baseSlotsLength);\\n        InventoryStorage.Item[] memory baseItems = new InventoryStorage.Item[](baseSlotsLength);\\n        uint numSlots = inventorySL.numSlots;\\n\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            baseSlotsIds[i] = slotId;\\n            baseItems[i] = inventorySL.equippedItems[arcadianId][slotId];\\n        }\\n\\n        for (uint i = 0; i < items.length; i++) {\\n            uint slotId = inventorySL.itemSlot[items[i].erc721Contract][items[i].id];\\n            if (slotId == 0 || slotId > InventoryStorage.layout().numSlots)\\n                revert Inventory_ItemDoesNotHaveSlotAssigned();\\n            \\n            if (slotId == 0 && slotId > numSlots)\\n                revert Inventory_InvalidSlotId();\\n\\n            if (!baseSlots.contains(slotId))\\n                continue;\\n\\n            baseSlotsIds[i] = slotId;\\n            baseItems[i] = items[i];\\n        }\\n\\n        bytes memory encodedItems;\\n        for (uint i = 0; i < baseSlotsIds.length; i++) {\\n            encodedItems = abi.encodePacked(encodedItems, baseSlotsIds[i], baseItems[i].erc721Contract, baseItems[i].id);\\n        }\\n\\n        return !inventorySL.baseItemsHashes.contains(keccak256(encodedItems));\\n    }\\n\\n    function _hashBaseItemsUnchecked(\\n        uint arcadianId\\n    ) internal returns (bool isUnique) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        // delete inventorySL.equippedItems[arcadianId][slotId];\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n        bytes memory encodedItems;\\n        uint baseSlotsLength = baseSlots.length();\\n\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotId];\\n            encodedItems = abi.encodePacked(encodedItems, slotId, equippedItem.erc721Contract, equippedItem.id);\\n        }\\n\\n        bytes32 baseItemsHash = keccak256(encodedItems);\\n        isUnique = !inventorySL.baseItemsHashes.contains(baseItemsHash) || baseSlotsLength == 0;\\n        inventorySL.baseItemsHashes.remove(inventorySL.arcadianToBaseItemHash[arcadianId]);\\n        inventorySL.baseItemsHashes.add(baseItemsHash);\\n        inventorySL.arcadianToBaseItemHash[arcadianId] = baseItemsHash;\\n    }\\n\\n    function _createSlot(\\n        bool permanent,\\n        InventoryStorage.SlotCategory category,\\n        InventoryStorage.Item[] calldata allowedItems\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        // slots are 1-index\\n        inventorySL.numSlots += 1;\\n        uint newSlot = inventorySL.numSlots;\\n        inventorySL.slots[newSlot].permanent = permanent;\\n        inventorySL.slots[newSlot].category = category;\\n        inventorySL.slots[newSlot].id = newSlot;\\n\\n        if (allowedItems.length > 0) {\\n            _allowItemsInSlot(newSlot, allowedItems);\\n        }\\n\\n        emit SlotCreated(msg.sender, newSlot, permanent, category);\\n    }\\n\\n    function _addBaseModifierTickets(\\n        address account,\\n        uint[] calldata slotIds,\\n        uint[] calldata amounts\\n    ) internal {\\n        if (slotIds.length != amounts.length)\\n            revert Inventory_InputDataMismatch();\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            if (slotIds[i] == 0 && slotIds[i] > numSlots) \\n                revert Inventory_InvalidSlotId();\\n            if (inventorySL.slots[slotIds[i]].category != InventoryStorage.SlotCategory.Base) {\\n                revert Inventory_NonBaseSlot();\\n            }\\n            InventoryStorage.layout().baseModifierTicket[account][slotIds[i]] += amounts[i];\\n        }\\n    }\\n\\n    function _getBaseModifierTickets(address account, uint slotId) internal view onlyValidSlot(slotId) returns (uint) {\\n        if (InventoryStorage.layout().slots[slotId].category != InventoryStorage.SlotCategory.Base) {\\n            revert Inventory_NonBaseSlot();\\n        }\\n        return InventoryStorage.layout().baseModifierTicket[account][slotId];\\n    }\\n\\n    function _allowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < items.length; i++) {\\n            if (!items[i].erc721Contract.isContract()) \\n                revert Inventory_InvalidERC1155Contract();\\n\\n            if (inventorySL.itemSlot[items[i].erc721Contract][items[i].id] > 0) {\\n\\n                if (inventorySL.itemSlot[items[i].erc721Contract][items[i].id] == slotId) \\n                    revert Inventory_ItemAlreadyAllowedInSlot();\\n\\n                _disallowItemInSlotUnchecked(slotId, items[i]);\\n            }\\n            inventorySL.allowedItems[slotId].push(items[i]);\\n            inventorySL.itemSlot[items[i].erc721Contract][items[i].id] = slotId;\\n        }\\n\\n        inventorySL.categoryToSlots[inventorySL.slots[slotId].category].add(slotId);\\n\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < items.length; i++) {\\n            \\n            if (inventorySL.itemSlot[items[i].erc721Contract][items[i].id] != slotId) \\n                revert Inventory_ItemAlreadyDisallowedInSlot();\\n                \\n            _disallowItemInSlotUnchecked(slotId, items[i]);\\n        }\\n\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemInSlotUnchecked(\\n        uint slotId,\\n        InventoryStorage.Item calldata item\\n    ) internal virtual {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        uint numAllowedSlots = inventorySL.allowedItems[slotId].length;\\n        for (uint i = 0; i < numAllowedSlots; i++) {\\n            if (inventorySL.allowedItems[slotId][i].id == item.id) {\\n                inventorySL.allowedItems[slotId][i] = inventorySL.allowedItems[slotId][numAllowedSlots-1];\\n                inventorySL.allowedItems[slotId].pop();\\n                break;\\n            }\\n        }\\n        \\n        delete inventorySL.itemSlot[item.erc721Contract][item.id];\\n    }\\n\\n    function _allowedSlot(InventoryStorage.Item calldata item) internal view returns (uint) {\\n        return InventoryStorage.layout().itemSlot[item.erc721Contract][item.id];\\n    }\\n\\n    function _allowedItem(uint slotId, uint index) internal view onlyValidSlot(slotId) returns (InventoryStorage.Item memory) {\\n        return InventoryStorage.layout().allowedItems[slotId][index];\\n    }\\n\\n    function _numAllowedItems(uint slotId) internal view onlyValidSlot(slotId) returns (uint) {\\n        return InventoryStorage.layout().allowedItems[slotId].length;\\n    }\\n\\n    function _slot(uint slotId) internal view returns (InventoryStorage.Slot storage slot) {\\n        return InventoryStorage.layout().slots[slotId];\\n    }\\n\\n    function _slotsAll() internal view returns (InventoryStorage.Slot[] memory slotsAll) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        uint numSlots = inventorySL.numSlots;\\n        slotsAll = new InventoryStorage.Slot[](numSlots);\\n\\n        for (uint i = 0; i < numSlots; i++) {\\n            uint slotId = i + 1;\\n            slotsAll[i] = inventorySL.slots[slotId];\\n        }\\n    }\\n}\",\"keccak256\":\"0xe02591008f7e0f390e0bfaf3c95b2cc7af7a1ae5a591443bffbd13e1dc8a1afc\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\n\\n/**\\nLibInventory defines the storage structure used by the Inventory contract as a facet for an EIP-2535 Diamond\\nproxy.\\n */\\nlibrary InventoryStorage {\\n    bytes32 constant INVENTORY_STORAGE_POSITION =\\n        keccak256(\\\"inventory.storage.position\\\");\\n\\n    uint constant ERC721_ITEM_TYPE = 721;\\n    uint constant ERC1155_ITEM_TYPE = 1155;\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum SlotCategory { Base, Equippment, Cosmetic }\\n\\n    // Holds the information needed to identify an ERC1155 item\\n    struct Item {\\n        address erc721Contract;\\n        uint id;\\n    }\\n\\n    // Holds the general information about a slot\\n    struct Slot {\\n        uint id;\\n        bool permanent;\\n        SlotCategory category;\\n    }\\n\\n    struct Layout {\\n        uint numSlots;\\n\\n        // Slot id => Slot\\n        mapping(uint => Slot) slots;\\n        // Slot category => List of slots\\n        mapping(SlotCategory => EnumerableSet.UintSet) categoryToSlots;\\n\\n        // arcadian id => slot id => Items equipped\\n        mapping(uint => mapping(uint => Item)) equippedItems;\\n\\n        // item address => item id => allowed slot id\\n        mapping(address => mapping(uint => uint)) itemSlot;\\n        // slot id => items\\n        mapping(uint => InventoryStorage.Item[]) allowedItems;\\n\\n        // List of all the existent hashes\\n        EnumerableSet.Bytes32Set baseItemsHashes;\\n        // arcadian id => base items hash\\n        mapping(uint => bytes32) arcadianToBaseItemHash;\\n\\n        // account => slotId => number of tickets to modify the base traits\\n        mapping(address => mapping(uint => uint)) baseModifierTicket;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage istore)\\n    {\\n        bytes32 position = INVENTORY_STORAGE_POSITION;\\n        assembly {\\n            istore.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x725d9b30eec741758f702ca1a166f6037f793b7e8b3f551719907c058ad40c9b\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(_defaultAdminRole());\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        _checkRole(_managerRole());\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        _checkRole(_minterRole());\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _minterRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().minterRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.minterRole = keccak256(\\\"minter.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n        _grantRole(_minterRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0xd3fa8bcc9380c117c2e22aeb6b4489ad01c31433b3c2d412742b681c94cf407d\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 minterRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x203cfbe268a1ac5fe32593c66ace04b576dfb2e25173e02654e504cf0de44d71\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506132c4806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80639621ff25116100b8578063bc197c811161007c578063bc197c81146102df578063c06ffe9014610317578063dc8832151461032a578063ef0bf7de1461033d578063f23a6e611461035d578063fc6116401461037c57600080fd5b80639621ff251461027c5780639e3ccb2a14610284578063b1b2fef414610297578063b2025e4f146102ac578063b9e6a412146102cc57600080fd5b8063603f40ec116100ff578063603f40ec146101cd578063633e2d5a1461020c5780637a8455a11461021f5780637f85db2d146102325780638e980d4d1461026957600080fd5b806301ffc9a71461013c5780630f58dcda146101645780632f8bd3c8146101845780634274a143146101a5578063473bdb98146101ba575b600080fd5b61014f61014a3660046128f4565b61038f565b60405190151581526020015b60405180910390f35b610177610172366004612969565b6103c6565b60405161015b91906129b4565b610197610192366004612a1f565b6103db565b60405190815260200161015b565b6101b86101b3366004612a7b565b6103e6565b005b6101b86101c8366004612a7b565b610406565b6101976101db366004612ab9565b60009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43e602052604090205490565b61019761021a366004612ab9565b61041c565b61014f61022d366004612a7b565b610427565b610245610240366004612ad2565b610434565b6040805182516001600160a01b03168152602092830151928101929092520161015b565b6101b8610277366004612a7b565b610459565b6101976104b6565b610177610292366004612ab9565b6104c5565b61029f6104d0565b60405161015b9190612b4e565b6102bf6102ba366004612ab9565b6104da565b60405161015b9190612b90565b6101b86102da366004612b9e565b61057f565b6102fe6102ed366004612d54565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161015b565b6101b8610325366004612969565b61059c565b6101b8610338366004612e01565b6105ee565b61035061034b366004612ad2565b61060d565b60405161015b9190612e83565b6102fe61036b366004612ead565b63f23a6e6160e01b95945050505050565b61019761038a366004612f15565b61061f565b60006001600160e01b03198216630271189760e51b14806103c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606103d384848461062b565b949350505050565b60006103c082610755565b6103f66103f16107c3565b6107ed565b6104018383836107fa565b505050565b6104116103f16107c3565b610401838383610958565b60006103c082610c80565b60006103d3848484610cef565b604080518082019091526000808252602082015261045283836110e6565b9392505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361049c57604051635db5c7cd60e11b815260040160405180910390fd5b600281556104ad84848460006111b0565b60019055505050565b60006104c06113fa565b905090565b60606103c082611410565b60606104c0611517565b6104fb60408051606081018252600080825260208201819052909182015290565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d437602052604090206040805160608101825282548152600183015460ff8082161515602084015291939284019161010090910416600281111561056557610565612af4565b600281111561057657610576612af4565b90525092915050565b61058a6103f16107c3565b61059684848484611651565b50505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036105df57604051635db5c7cd60e11b815260040160405180910390fd5b600281556104ad848484611739565b6105f96103f16107c3565b6106068585858585611885565b5050505050565b6106156128ca565b6104528383611a30565b60006104528383611a9d565b606060008051602061326f833981519152826001600160401b0381111561065457610654612c20565b60405190808252806020026020018201604052801561068d57816020015b61067a6128ca565b8152602001906001900390816106725790505b50915060005b8381101561074c5760008681526003830160205260408120818787858181106106be576106be612f41565b905060200201358152602001908152602001600020905060405180606001604052808787858181106106f2576106f2612f41565b6020908102929092013583525083546001600160a01b0316908201526001830154604090910152845185908490811061072d5761072d612f41565b602002602001018190525050808061074490612f6d565b915050610693565b50509392505050565b60007ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a816107866020850185612f86565b6001600160a01b03166001600160a01b03168152602001908152602001600020600083602001358152602001908152602001600020549050919050565b60007ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725b54919050565b6107f78133611b8a565b50565b82801580610816575060008051602061326f8339815191525481115b156108345760405163d751397d60e01b815260040160405180910390fd5b60008051602061326f83398151915260005b8381101561091b578582600401600087878581811061086757610867612f41565b61087d9260206040909202019081019150612f86565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008787858181106108b1576108b1612f41565b90506040020160200135815260200190815260200160002054146108e85760405163072f859160e31b815260040160405180910390fd5b610909868686848181106108fe576108fe612f41565b905060400201611bf9565b8061091381612f6d565b915050610846565b5060405185815233907ff69b53fa14ee16895edbe90d00c7b7af9214baf87c69bf5594126b114c9337ed9060200160405180910390a25050505050565b82801580610974575060008051602061326f8339815191525481115b156109925760405163d751397d60e01b815260040160405180910390fd5b60008051602061326f83398151915260005b83811015610c1a576109e68585838181106109c1576109c1612f41565b6109d79260206040909202019081019150612f86565b6001600160a01b03163b151590565b610a0357604051633c65e02b60e21b815260040160405180910390fd5b6000826004016000878785818110610a1d57610a1d612f41565b610a339260206040909202019081019150612f86565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610a6757610a67612f41565b905060400201602001358152602001908152602001600020541115610b365785826004016000878785818110610a9f57610a9f612f41565b610ab59260206040909202019081019150612f86565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610ae957610ae9612f41565b9050604002016020013581526020019081526020016000205403610b2057604051634ea88b8b60e01b815260040160405180910390fd5b610b36868686848181106108fe576108fe612f41565b60008681526005830160205260409020858583818110610b5857610b58612f41565b835460018101855560009485526020909420604090910292909201926002029091019050610b868282612fa3565b505085826004016000878785818110610ba157610ba1612f41565b610bb79260206040909202019081019150612f86565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610beb57610beb612f41565b905060400201602001358152602001908152602001600020819055508080610c1290612f6d565b9150506109a4565b506000858152600182810160205260408220015461091b91879160028086019291610100900460ff1690811115610c5357610c53612af4565b6002811115610c6457610c64612af4565b8152602001908152602001600020611dce90919063ffffffff16565b600081801580610c9e575060008051602061326f8339815191525481115b15610cbc5760405163d751397d60e01b815260040160405180910390fd5b505060009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b602052604090205490565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860205260008051602061326f8339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd982610d5282611dda565b90506000816001600160401b03811115610d6e57610d6e612c20565b604051908082528060200260200182016040528015610d97578160200160208202803683370190505b5090506000826001600160401b03811115610db457610db4612c20565b604051908082528060200260200182016040528015610df957816020015b6040805180820190915260008082526020820152815260200190600190039081610dd25790505b50855490915060005b84811015610ea6576000610e168783611de4565b905080858381518110610e2b57610e2b612f41565b60209081029190910181019190915260008d815260038a0182526040808220848352835290819020815180830190925280546001600160a01b0316825260010154918101919091528451859084908110610e8757610e87612f41565b6020026020010181905250508080610e9e90612f6d565b915050610e02565b5060005b888110156110235760008760040160008c8c85818110610ecc57610ecc612f41565b610ee29260206040909202019081019150612f86565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008c8c85818110610f1657610f16612f41565b9050604002016020013581526020019081526020016000205490508060001480610f4e575060008051602061326f8339815191525481115b15610f6c576040516363efa0e360e01b815260040160405180910390fd5b80158015610f7957508281115b15610f975760405163d751397d60e01b815260040160405180910390fd5b610fa18782611df0565b610fab5750611011565b80858381518110610fbe57610fbe612f41565b6020026020010181815250508a8a83818110610fdc57610fdc612f41565b905060400201803603810190610ff29190612fdd565b84838151811061100457611004612f41565b6020026020010181905250505b8061101b81612f6d565b915050610eaa565b50606060005b84518110156110c0578185828151811061104557611045612f41565b602002602001015185838151811061105f5761105f612f41565b60200260200101516000015186848151811061107d5761107d612f41565b60200260200101516020015160405160200161109c9493929190613058565b604051602081830303815290604052915080806110b890612f6d565b915050611029565b50805160208201206110d6906006890190611df0565b159b9a5050505050505050505050565b604080518082019091526000808252602082015282801580611116575060008051602061326f8339815191525481115b156111345760405163d751397d60e01b815260040160405180910390fd5b60008481527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b6020526040902080548490811061117357611173612f41565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181019190915291505b5092915050565b6040516331a9108f60e11b815260048101859052849030908190636352211e90602401602060405180830381865afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112149190613099565b6001600160a01b0316336001600160a01b0316146112455760405163aee05b5d60e01b815260040160405180910390fd5b60008490036112675760405163627652c960e11b815260040160405180910390fd5b60008051602061326f833981519152600080866001600160401b0381111561129157611291612c20565b6040519080825280602002602001820160405280156112ba578160200160208202803683370190505b50905060005b878110156113565760006112ec8b8b8b858181106112e0576112e0612f41565b9050604002018a611e08565b90508380611323575060008181526001868101602052604082200154610100900460ff16600281111561132157611321612af4565b145b93508083838151811061133857611338612f41565b6020908102919091010152508061134e81612f6d565b9150506112c0565b506113608961218a565b61137d5760405163a9614f1560e01b815260040160405180910390fd5b818015611390575061138e89612251565b155b156113ad5760405162ecf30560e51b815260040160405180910390fd5b88336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f18861836040516113e791906130b6565b60405180910390a3505050505050505050565b600060008051602061326f8339815191526107e7565b60008051602061326f833981519152805460609190806001600160401b0381111561143d5761143d612c20565b60405190808252806020026020018201604052801561147657816020015b6114636128ca565b81526020019060019003908161145b5790505b50925060005b8181101561150f5760006114918260016130ee565b60008781526003860160209081526040808320848452825291829020825160608101845284815281546001600160a01b031692810192909252600181015492820192909252875192935090918790859081106114ef576114ef612f41565b60200260200101819052505050808061150790612f6d565b91505061147c565b505050919050565b60008051602061326f833981519152805460609190806001600160401b0381111561154457611544612c20565b60405190808252806020026020018201604052801561159657816020015b61158360408051606081018252600080825260208201819052909182015290565b8152602001906001900390816115625790505b50925060005b8181101561164b5760006115b18260016130ee565b6000818152600180870160209081526040928390208351606081018552815481529281015460ff80821615159385019390935294955091939192840191610100900416600281111561160557611605612af4565b600281111561161657611616612af4565b8152505085838151811061162c5761162c612f41565b602002602001018190525050808061164390612f6d565b91505061159c565b50505090565b60008051602061326f833981519152805460019082906000906116759084906130ee565b9091555050805460008181526001808401602052604090912001805460ff198116881515908117835587929161ffff191661ff0019909116176101008360028111156116c3576116c3612af4565b02179055506000818152600183016020526040902081905582156116ec576116ec818585610958565b336001600160a01b03167fc1ea46ff33b3d61e148e5bff5dfe54ccae9db30b899a3e7645618fb1e3d9dc1182888860405161172993929190613101565b60405180910390a2505050505050565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa158015611779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179d9190613099565b6001600160a01b0316336001600160a01b0316146117ce5760405163aee05b5d60e01b815260040160405180910390fd5b60008390036117f057604051635740c67760e11b815260040160405180910390fd5b60005b8381101561182f5761181d8686868481811061181157611811612f41565b905060200201356123a1565b8061182781612f6d565b9150506117f3565b5061183985612251565b5084336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab63868660405161187692919061311d565b60405180910390a35050505050565b8281146118a5576040516303f7219d60e41b815260040160405180910390fd5b60008051602061326f833981519152805460005b85811015611a26578686828181106118d3576118d3612f41565b9050602002013560001480156119005750818787838181106118f7576118f7612f41565b90506020020135115b1561191e5760405163d751397d60e01b815260040160405180910390fd5b600083600101600089898581811061193857611938612f41565b90506020020135815260200190815260200160002060010160019054906101000a900460ff16600281111561196f5761196f612af4565b1461198d576040516332fa2abb60e01b815260040160405180910390fd5b84848281811061199f5761199f612f41565b905060200201356119bb60008051602061326f83398151915290565b6001600160a01b038a16600090815260099190910160205260408120908989858181106119ea576119ea612f41565b9050602002013581526020019081526020016000206000828254611a0e91906130ee565b90915550819050611a1e81612f6d565b9150506118b9565b5050505050505050565b611a386128ca565b5060009182527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43960209081526040808420838552825292839020835160608101855292835280546001600160a01b031691830191909152600101549181019190915290565b600081801580611abb575060008051602061326f8339815191525481115b15611ad95760405163d751397d60e01b815260040160405180910390fd5b60008381527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4376020526040812060010154610100900460ff166002811115611b2357611b23612af4565b14611b41576040516332fa2abb60e01b815260040160405180910390fd5b50506001600160a01b039190911660009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f60209081526040808320938352929052205490565b611b9482826124d3565b611bf557611baa816001600160a01b031661250a565b611bb583602061251c565b604051602001611bc6929190613156565b60408051601f198184030181529082905262461bcd60e51b8252611bec916004016131cb565b60405180910390fd5b5050565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b602052604081205460008051602061326f833981519152915b81811015611d7b5783602001358360050160008781526020019081526020016000208281548110611c6b57611c6b612f41565b90600052602060002090600202016001015403611d695760008581526005840160205260409020611c9d6001846131fe565b81548110611cad57611cad612f41565b90600052602060002090600202018360050160008781526020019081526020016000208281548110611ce157611ce1612f41565b60009182526020808320845460029093020180546001600160a01b0319166001600160a01b0390931692909217825560019384015493909101929092558681526005850190915260409020805480611d3b57611d3b613211565b60008281526020812060026000199093019283020180546001600160a01b0319168155600101559055611d7b565b80611d7381612f6d565b915050611c38565b50600482016000611d8f6020860186612f86565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846020013581526020019081526020016000206000905550505050565b6000610452838361266e565b60006103c0825490565b600061045283836126b1565b60008181526001830160205260408120541515610452565b600060008051602061326f8339815191527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a82611e486020870187612f86565b6001600160a01b03168152602080820192909252604090810160009081208784013582529092529020549150811580611e8f575060008051602061326f8339815191525482115b15611ead576040516363efa0e360e01b815260040160405180910390fd5b82158015611ee4575060008281526001828101602052604082200154610100900460ff166002811115611ee257611ee2612af4565b145b15611f5557336000908152600982016020908152604080832085845290915290205460011115611f275760405163d5bdfa5960e01b815260040160405180910390fd5b33600090815260098201602090815260408083208584529091528120805491611f4f83613227565b91905055505b60008581526003820160209081526040808320858452825280832060018086019093529220015460ff168015611f94575080546001600160a01b031615155b15611fb25760405163bd8a5e1560e01b815260040160405180910390fd5b611fbf6020860186612f86565b81546001600160a01b039081169116148015611fe2575084602001358160010154145b156120005760405163c80df0cb60e01b815260040160405180910390fd5b600086815260038301602090815260408083208684529091529020546001600160a01b0316156120345761203486846126fd565b60006120436020870187612f86565b604051627eeac760e11b8152336004820152602088013560248201529091506001906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015612095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b9919061323e565b10156120d8576040516335ba250d60e11b815260040160405180910390fd5b604051637921219560e11b8152336004820152306024820152602087013560448201526001606482015260a06084820152600060a48201526001600160a01b0382169063f242432a9060c401600060405180830381600087803b15801561213e57600080fd5b505af1158015612152573d6000803e3d6000fd5b50505060008881526003850160209081526040808320888452909152902087915061217d8282612fa3565b9050505050509392505050565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860205260008051602061326f8339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9825b6121ee82611dda565b8110156122465760008581526003840160205260408120906122108484611de4565b81526020019081526020016000206001015460000361223457506000949350505050565b8061223e81612f6d565b9150506121e5565b506001949350505050565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860205260008051602061326f8339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd96060836122b683611dda565b905060005b818110156123375760006122cf8583611de4565b60008981526003880160209081526040808320848452825291829020805460018201549351949550909361231193899387936001600160a01b03169201613058565b60405160208183030381529060405294505050808061232f90612f6d565b9150506122bb565b508151602083012061234c6006860182611df0565b1580612356575081155b60008881526008870160205260409020549096506123789060068701906127e2565b506123866006860182611dce565b50600096875260089094016020525050604090932055919050565b808015806123bd575060008051602061326f8339815191525481115b156123db5760405163d751397d60e01b815260040160405180910390fd5b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d437602052604090206001015460008051602061326f8339815191529060ff161561243d5760405163bd8a5e1560e01b815260040160405180910390fd5b600084815260038201602090815260408083208684529091529020546001600160a01b031661247f57604051632755285560e01b815260040160405180910390fd5b60008381526001828101602052604082200154610100900460ff1660028111156124ab576124ab612af4565b036124c95760405163abfc1e6160e01b815260040160405180910390fd5b61059684846126fd565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061045290836127ee565b60606103c06001600160a01b03831660145b6060600061252b836002613257565b6125369060026130ee565b6001600160401b0381111561254d5761254d612c20565b6040519080825280601f01601f191660200182016040528015612577576020820181803683370190505b509050600360fc1b8160008151811061259257612592612f41565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106125c1576125c1612f41565b60200101906001600160f81b031916908160001a905350600160028402015b600181111561264e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061261157612611612f41565b1a60f81b82828151811061262757612627612f41565b60200101906001600160f81b031916908160001a90535060049490941c93600019016125e0565b5083156104525760405163c913478560e01b815260040160405180910390fd5b60008181526001830160205260408120546103c0575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b815460009082106126d55760405163e637bf3b60e01b815260040160405180910390fd5b8260000182815481106126ea576126ea612f41565b9060005260206000200154905092915050565b600060008051602061326f8339815191526000848152600382016020908152604080832086845290915280822080546001808301549351637921219560e11b81523060048201523360248201526044810194909452606484015260a0608484015260a48301939093529293506001600160a01b0390911690819063f242432a9060c401600060405180830381600087803b15801561279a57600080fd5b505af11580156127ae573d6000803e3d6000fd5b505050600095865250505060030160209081526040808420928452919052812080546001600160a01b031916815560010155565b60006104528383612810565b6001600160a01b03811660009081526001830160205260408120541515610452565b600081815260018301602052604081205480156111a95783546000908590600019810190811061284257612842612f41565b906000526020600020015490508085600001600184038154811061286857612868612f41565b600091825260208083209091019290925591825260018601905260409020819055835484908061289a5761289a613211565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b60405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b60006020828403121561290657600080fd5b81356001600160e01b03198116811461045257600080fd5b60008083601f84011261293057600080fd5b5081356001600160401b0381111561294757600080fd5b6020830191508360208260051b850101111561296257600080fd5b9250929050565b60008060006040848603121561297e57600080fd5b8335925060208401356001600160401b0381111561299b57600080fd5b6129a78682870161291e565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015612a1357612a00838551805182526020808201516001600160a01b031690830152604090810151910152565b92840192606092909201916001016129d0565b50909695505050505050565b600060408284031215612a3157600080fd5b50919050565b60008083601f840112612a4957600080fd5b5081356001600160401b03811115612a6057600080fd5b6020830191508360208260061b850101111561296257600080fd5b600080600060408486031215612a9057600080fd5b8335925060208401356001600160401b03811115612aad57600080fd5b6129a786828701612a37565b600060208284031215612acb57600080fd5b5035919050565b60008060408385031215612ae557600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60038110612b2857634e487b7160e01b600052602160045260246000fd5b9052565b8051825260208101511515602083015260408101516104016040840182612b0a565b6020808252825182820181905260009190848201906040850190845b81811015612a1357612b7d838551612b2c565b9284019260609290920191600101612b6a565b606081016103c08284612b2c565b60008060008060608587031215612bb457600080fd5b84358015158114612bc457600080fd5b9350602085013560038110612bd857600080fd5b925060408501356001600160401b03811115612bf357600080fd5b612bff87828801612a37565b95989497509550505050565b6001600160a01b03811681146107f757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c5e57612c5e612c20565b604052919050565b600082601f830112612c7757600080fd5b813560206001600160401b03821115612c9257612c92612c20565b8160051b612ca1828201612c36565b9283528481018201928281019087851115612cbb57600080fd5b83870192505b84831015612cda57823582529183019190830190612cc1565b979650505050505050565b600082601f830112612cf657600080fd5b81356001600160401b03811115612d0f57612d0f612c20565b612d22601f8201601f1916602001612c36565b818152846020838601011115612d3757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612d6c57600080fd5b8535612d7781612c0b565b94506020860135612d8781612c0b565b935060408601356001600160401b0380821115612da357600080fd5b612daf89838a01612c66565b94506060880135915080821115612dc557600080fd5b612dd189838a01612c66565b93506080880135915080821115612de757600080fd5b50612df488828901612ce5565b9150509295509295909350565b600080600080600060608688031215612e1957600080fd5b8535612e2481612c0b565b945060208601356001600160401b0380821115612e4057600080fd5b612e4c89838a0161291e565b90965094506040880135915080821115612e6557600080fd5b50612e728882890161291e565b969995985093965092949392505050565b815181526020808301516001600160a01b03169082015260408083015190820152606081016103c0565b600080600080600060a08688031215612ec557600080fd5b8535612ed081612c0b565b94506020860135612ee081612c0b565b9350604086013592506060860135915060808601356001600160401b03811115612f0957600080fd5b612df488828901612ce5565b60008060408385031215612f2857600080fd5b8235612f3381612c0b565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612f7f57612f7f612f57565b5060010190565b600060208284031215612f9857600080fd5b813561045281612c0b565b8135612fae81612c0b565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b600060408284031215612fef57600080fd5b604051604081018181106001600160401b038211171561301157613011612c20565b604052823561301f81612c0b565b81526020928301359281019290925250919050565b60005b8381101561304f578181015183820152602001613037565b50506000910152565b6000855161306a818460208a01613034565b919091019384525060609190911b6bffffffffffffffffffffffff191660208301526034820152605401919050565b6000602082840312156130ab57600080fd5b815161045281612c0b565b6020808252825182820181905260009190848201906040850190845b81811015612a13578351835292840192918401916001016130d2565b808201808211156103c0576103c0612f57565b8381528215156020820152606081016103d36040830184612b0a565b6020808252810182905260006001600160fb1b0383111561313d57600080fd5b8260051b80856040850137919091016040019392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161318e816017850160208801613034565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131bf816028840160208801613034565b01602801949350505050565b60208152600082518060208401526131ea816040850160208701613034565b601f01601f19169190910160400192915050565b818103818111156103c0576103c0612f57565b634e487b7160e01b600052603160045260246000fd5b60008161323657613236612f57565b506000190190565b60006020828403121561325057600080fd5b5051919050565b80820281158282048414176103c0576103c0612f5756fef672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220c10142bcfd8266974d2351c3558fec9cd4d2b0eee3fae35de3799a6e3c53c59b64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80639621ff25116100b8578063bc197c811161007c578063bc197c81146102df578063c06ffe9014610317578063dc8832151461032a578063ef0bf7de1461033d578063f23a6e611461035d578063fc6116401461037c57600080fd5b80639621ff251461027c5780639e3ccb2a14610284578063b1b2fef414610297578063b2025e4f146102ac578063b9e6a412146102cc57600080fd5b8063603f40ec116100ff578063603f40ec146101cd578063633e2d5a1461020c5780637a8455a11461021f5780637f85db2d146102325780638e980d4d1461026957600080fd5b806301ffc9a71461013c5780630f58dcda146101645780632f8bd3c8146101845780634274a143146101a5578063473bdb98146101ba575b600080fd5b61014f61014a3660046128f4565b61038f565b60405190151581526020015b60405180910390f35b610177610172366004612969565b6103c6565b60405161015b91906129b4565b610197610192366004612a1f565b6103db565b60405190815260200161015b565b6101b86101b3366004612a7b565b6103e6565b005b6101b86101c8366004612a7b565b610406565b6101976101db366004612ab9565b60009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43e602052604090205490565b61019761021a366004612ab9565b61041c565b61014f61022d366004612a7b565b610427565b610245610240366004612ad2565b610434565b6040805182516001600160a01b03168152602092830151928101929092520161015b565b6101b8610277366004612a7b565b610459565b6101976104b6565b610177610292366004612ab9565b6104c5565b61029f6104d0565b60405161015b9190612b4e565b6102bf6102ba366004612ab9565b6104da565b60405161015b9190612b90565b6101b86102da366004612b9e565b61057f565b6102fe6102ed366004612d54565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161015b565b6101b8610325366004612969565b61059c565b6101b8610338366004612e01565b6105ee565b61035061034b366004612ad2565b61060d565b60405161015b9190612e83565b6102fe61036b366004612ead565b63f23a6e6160e01b95945050505050565b61019761038a366004612f15565b61061f565b60006001600160e01b03198216630271189760e51b14806103c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606103d384848461062b565b949350505050565b60006103c082610755565b6103f66103f16107c3565b6107ed565b6104018383836107fa565b505050565b6104116103f16107c3565b610401838383610958565b60006103c082610c80565b60006103d3848484610cef565b604080518082019091526000808252602082015261045283836110e6565b9392505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361049c57604051635db5c7cd60e11b815260040160405180910390fd5b600281556104ad84848460006111b0565b60019055505050565b60006104c06113fa565b905090565b60606103c082611410565b60606104c0611517565b6104fb60408051606081018252600080825260208201819052909182015290565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d437602052604090206040805160608101825282548152600183015460ff8082161515602084015291939284019161010090910416600281111561056557610565612af4565b600281111561057657610576612af4565b90525092915050565b61058a6103f16107c3565b61059684848484611651565b50505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036105df57604051635db5c7cd60e11b815260040160405180910390fd5b600281556104ad848484611739565b6105f96103f16107c3565b6106068585858585611885565b5050505050565b6106156128ca565b6104528383611a30565b60006104528383611a9d565b606060008051602061326f833981519152826001600160401b0381111561065457610654612c20565b60405190808252806020026020018201604052801561068d57816020015b61067a6128ca565b8152602001906001900390816106725790505b50915060005b8381101561074c5760008681526003830160205260408120818787858181106106be576106be612f41565b905060200201358152602001908152602001600020905060405180606001604052808787858181106106f2576106f2612f41565b6020908102929092013583525083546001600160a01b0316908201526001830154604090910152845185908490811061072d5761072d612f41565b602002602001018190525050808061074490612f6d565b915050610693565b50509392505050565b60007ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a816107866020850185612f86565b6001600160a01b03166001600160a01b03168152602001908152602001600020600083602001358152602001908152602001600020549050919050565b60007ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725b54919050565b6107f78133611b8a565b50565b82801580610816575060008051602061326f8339815191525481115b156108345760405163d751397d60e01b815260040160405180910390fd5b60008051602061326f83398151915260005b8381101561091b578582600401600087878581811061086757610867612f41565b61087d9260206040909202019081019150612f86565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008787858181106108b1576108b1612f41565b90506040020160200135815260200190815260200160002054146108e85760405163072f859160e31b815260040160405180910390fd5b610909868686848181106108fe576108fe612f41565b905060400201611bf9565b8061091381612f6d565b915050610846565b5060405185815233907ff69b53fa14ee16895edbe90d00c7b7af9214baf87c69bf5594126b114c9337ed9060200160405180910390a25050505050565b82801580610974575060008051602061326f8339815191525481115b156109925760405163d751397d60e01b815260040160405180910390fd5b60008051602061326f83398151915260005b83811015610c1a576109e68585838181106109c1576109c1612f41565b6109d79260206040909202019081019150612f86565b6001600160a01b03163b151590565b610a0357604051633c65e02b60e21b815260040160405180910390fd5b6000826004016000878785818110610a1d57610a1d612f41565b610a339260206040909202019081019150612f86565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610a6757610a67612f41565b905060400201602001358152602001908152602001600020541115610b365785826004016000878785818110610a9f57610a9f612f41565b610ab59260206040909202019081019150612f86565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610ae957610ae9612f41565b9050604002016020013581526020019081526020016000205403610b2057604051634ea88b8b60e01b815260040160405180910390fd5b610b36868686848181106108fe576108fe612f41565b60008681526005830160205260409020858583818110610b5857610b58612f41565b835460018101855560009485526020909420604090910292909201926002029091019050610b868282612fa3565b505085826004016000878785818110610ba157610ba1612f41565b610bb79260206040909202019081019150612f86565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610beb57610beb612f41565b905060400201602001358152602001908152602001600020819055508080610c1290612f6d565b9150506109a4565b506000858152600182810160205260408220015461091b91879160028086019291610100900460ff1690811115610c5357610c53612af4565b6002811115610c6457610c64612af4565b8152602001908152602001600020611dce90919063ffffffff16565b600081801580610c9e575060008051602061326f8339815191525481115b15610cbc5760405163d751397d60e01b815260040160405180910390fd5b505060009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b602052604090205490565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860205260008051602061326f8339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd982610d5282611dda565b90506000816001600160401b03811115610d6e57610d6e612c20565b604051908082528060200260200182016040528015610d97578160200160208202803683370190505b5090506000826001600160401b03811115610db457610db4612c20565b604051908082528060200260200182016040528015610df957816020015b6040805180820190915260008082526020820152815260200190600190039081610dd25790505b50855490915060005b84811015610ea6576000610e168783611de4565b905080858381518110610e2b57610e2b612f41565b60209081029190910181019190915260008d815260038a0182526040808220848352835290819020815180830190925280546001600160a01b0316825260010154918101919091528451859084908110610e8757610e87612f41565b6020026020010181905250508080610e9e90612f6d565b915050610e02565b5060005b888110156110235760008760040160008c8c85818110610ecc57610ecc612f41565b610ee29260206040909202019081019150612f86565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008c8c85818110610f1657610f16612f41565b9050604002016020013581526020019081526020016000205490508060001480610f4e575060008051602061326f8339815191525481115b15610f6c576040516363efa0e360e01b815260040160405180910390fd5b80158015610f7957508281115b15610f975760405163d751397d60e01b815260040160405180910390fd5b610fa18782611df0565b610fab5750611011565b80858381518110610fbe57610fbe612f41565b6020026020010181815250508a8a83818110610fdc57610fdc612f41565b905060400201803603810190610ff29190612fdd565b84838151811061100457611004612f41565b6020026020010181905250505b8061101b81612f6d565b915050610eaa565b50606060005b84518110156110c0578185828151811061104557611045612f41565b602002602001015185838151811061105f5761105f612f41565b60200260200101516000015186848151811061107d5761107d612f41565b60200260200101516020015160405160200161109c9493929190613058565b604051602081830303815290604052915080806110b890612f6d565b915050611029565b50805160208201206110d6906006890190611df0565b159b9a5050505050505050505050565b604080518082019091526000808252602082015282801580611116575060008051602061326f8339815191525481115b156111345760405163d751397d60e01b815260040160405180910390fd5b60008481527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b6020526040902080548490811061117357611173612f41565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181019190915291505b5092915050565b6040516331a9108f60e11b815260048101859052849030908190636352211e90602401602060405180830381865afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112149190613099565b6001600160a01b0316336001600160a01b0316146112455760405163aee05b5d60e01b815260040160405180910390fd5b60008490036112675760405163627652c960e11b815260040160405180910390fd5b60008051602061326f833981519152600080866001600160401b0381111561129157611291612c20565b6040519080825280602002602001820160405280156112ba578160200160208202803683370190505b50905060005b878110156113565760006112ec8b8b8b858181106112e0576112e0612f41565b9050604002018a611e08565b90508380611323575060008181526001868101602052604082200154610100900460ff16600281111561132157611321612af4565b145b93508083838151811061133857611338612f41565b6020908102919091010152508061134e81612f6d565b9150506112c0565b506113608961218a565b61137d5760405163a9614f1560e01b815260040160405180910390fd5b818015611390575061138e89612251565b155b156113ad5760405162ecf30560e51b815260040160405180910390fd5b88336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f18861836040516113e791906130b6565b60405180910390a3505050505050505050565b600060008051602061326f8339815191526107e7565b60008051602061326f833981519152805460609190806001600160401b0381111561143d5761143d612c20565b60405190808252806020026020018201604052801561147657816020015b6114636128ca565b81526020019060019003908161145b5790505b50925060005b8181101561150f5760006114918260016130ee565b60008781526003860160209081526040808320848452825291829020825160608101845284815281546001600160a01b031692810192909252600181015492820192909252875192935090918790859081106114ef576114ef612f41565b60200260200101819052505050808061150790612f6d565b91505061147c565b505050919050565b60008051602061326f833981519152805460609190806001600160401b0381111561154457611544612c20565b60405190808252806020026020018201604052801561159657816020015b61158360408051606081018252600080825260208201819052909182015290565b8152602001906001900390816115625790505b50925060005b8181101561164b5760006115b18260016130ee565b6000818152600180870160209081526040928390208351606081018552815481529281015460ff80821615159385019390935294955091939192840191610100900416600281111561160557611605612af4565b600281111561161657611616612af4565b8152505085838151811061162c5761162c612f41565b602002602001018190525050808061164390612f6d565b91505061159c565b50505090565b60008051602061326f833981519152805460019082906000906116759084906130ee565b9091555050805460008181526001808401602052604090912001805460ff198116881515908117835587929161ffff191661ff0019909116176101008360028111156116c3576116c3612af4565b02179055506000818152600183016020526040902081905582156116ec576116ec818585610958565b336001600160a01b03167fc1ea46ff33b3d61e148e5bff5dfe54ccae9db30b899a3e7645618fb1e3d9dc1182888860405161172993929190613101565b60405180910390a2505050505050565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa158015611779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179d9190613099565b6001600160a01b0316336001600160a01b0316146117ce5760405163aee05b5d60e01b815260040160405180910390fd5b60008390036117f057604051635740c67760e11b815260040160405180910390fd5b60005b8381101561182f5761181d8686868481811061181157611811612f41565b905060200201356123a1565b8061182781612f6d565b9150506117f3565b5061183985612251565b5084336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab63868660405161187692919061311d565b60405180910390a35050505050565b8281146118a5576040516303f7219d60e41b815260040160405180910390fd5b60008051602061326f833981519152805460005b85811015611a26578686828181106118d3576118d3612f41565b9050602002013560001480156119005750818787838181106118f7576118f7612f41565b90506020020135115b1561191e5760405163d751397d60e01b815260040160405180910390fd5b600083600101600089898581811061193857611938612f41565b90506020020135815260200190815260200160002060010160019054906101000a900460ff16600281111561196f5761196f612af4565b1461198d576040516332fa2abb60e01b815260040160405180910390fd5b84848281811061199f5761199f612f41565b905060200201356119bb60008051602061326f83398151915290565b6001600160a01b038a16600090815260099190910160205260408120908989858181106119ea576119ea612f41565b9050602002013581526020019081526020016000206000828254611a0e91906130ee565b90915550819050611a1e81612f6d565b9150506118b9565b5050505050505050565b611a386128ca565b5060009182527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43960209081526040808420838552825292839020835160608101855292835280546001600160a01b031691830191909152600101549181019190915290565b600081801580611abb575060008051602061326f8339815191525481115b15611ad95760405163d751397d60e01b815260040160405180910390fd5b60008381527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4376020526040812060010154610100900460ff166002811115611b2357611b23612af4565b14611b41576040516332fa2abb60e01b815260040160405180910390fd5b50506001600160a01b039190911660009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f60209081526040808320938352929052205490565b611b9482826124d3565b611bf557611baa816001600160a01b031661250a565b611bb583602061251c565b604051602001611bc6929190613156565b60408051601f198184030181529082905262461bcd60e51b8252611bec916004016131cb565b60405180910390fd5b5050565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b602052604081205460008051602061326f833981519152915b81811015611d7b5783602001358360050160008781526020019081526020016000208281548110611c6b57611c6b612f41565b90600052602060002090600202016001015403611d695760008581526005840160205260409020611c9d6001846131fe565b81548110611cad57611cad612f41565b90600052602060002090600202018360050160008781526020019081526020016000208281548110611ce157611ce1612f41565b60009182526020808320845460029093020180546001600160a01b0319166001600160a01b0390931692909217825560019384015493909101929092558681526005850190915260409020805480611d3b57611d3b613211565b60008281526020812060026000199093019283020180546001600160a01b0319168155600101559055611d7b565b80611d7381612f6d565b915050611c38565b50600482016000611d8f6020860186612f86565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846020013581526020019081526020016000206000905550505050565b6000610452838361266e565b60006103c0825490565b600061045283836126b1565b60008181526001830160205260408120541515610452565b600060008051602061326f8339815191527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a82611e486020870187612f86565b6001600160a01b03168152602080820192909252604090810160009081208784013582529092529020549150811580611e8f575060008051602061326f8339815191525482115b15611ead576040516363efa0e360e01b815260040160405180910390fd5b82158015611ee4575060008281526001828101602052604082200154610100900460ff166002811115611ee257611ee2612af4565b145b15611f5557336000908152600982016020908152604080832085845290915290205460011115611f275760405163d5bdfa5960e01b815260040160405180910390fd5b33600090815260098201602090815260408083208584529091528120805491611f4f83613227565b91905055505b60008581526003820160209081526040808320858452825280832060018086019093529220015460ff168015611f94575080546001600160a01b031615155b15611fb25760405163bd8a5e1560e01b815260040160405180910390fd5b611fbf6020860186612f86565b81546001600160a01b039081169116148015611fe2575084602001358160010154145b156120005760405163c80df0cb60e01b815260040160405180910390fd5b600086815260038301602090815260408083208684529091529020546001600160a01b0316156120345761203486846126fd565b60006120436020870187612f86565b604051627eeac760e11b8152336004820152602088013560248201529091506001906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015612095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b9919061323e565b10156120d8576040516335ba250d60e11b815260040160405180910390fd5b604051637921219560e11b8152336004820152306024820152602087013560448201526001606482015260a06084820152600060a48201526001600160a01b0382169063f242432a9060c401600060405180830381600087803b15801561213e57600080fd5b505af1158015612152573d6000803e3d6000fd5b50505060008881526003850160209081526040808320888452909152902087915061217d8282612fa3565b9050505050509392505050565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860205260008051602061326f8339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9825b6121ee82611dda565b8110156122465760008581526003840160205260408120906122108484611de4565b81526020019081526020016000206001015460000361223457506000949350505050565b8061223e81612f6d565b9150506121e5565b506001949350505050565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860205260008051602061326f8339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd96060836122b683611dda565b905060005b818110156123375760006122cf8583611de4565b60008981526003880160209081526040808320848452825291829020805460018201549351949550909361231193899387936001600160a01b03169201613058565b60405160208183030381529060405294505050808061232f90612f6d565b9150506122bb565b508151602083012061234c6006860182611df0565b1580612356575081155b60008881526008870160205260409020549096506123789060068701906127e2565b506123866006860182611dce565b50600096875260089094016020525050604090932055919050565b808015806123bd575060008051602061326f8339815191525481115b156123db5760405163d751397d60e01b815260040160405180910390fd5b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d437602052604090206001015460008051602061326f8339815191529060ff161561243d5760405163bd8a5e1560e01b815260040160405180910390fd5b600084815260038201602090815260408083208684529091529020546001600160a01b031661247f57604051632755285560e01b815260040160405180910390fd5b60008381526001828101602052604082200154610100900460ff1660028111156124ab576124ab612af4565b036124c95760405163abfc1e6160e01b815260040160405180910390fd5b61059684846126fd565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061045290836127ee565b60606103c06001600160a01b03831660145b6060600061252b836002613257565b6125369060026130ee565b6001600160401b0381111561254d5761254d612c20565b6040519080825280601f01601f191660200182016040528015612577576020820181803683370190505b509050600360fc1b8160008151811061259257612592612f41565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106125c1576125c1612f41565b60200101906001600160f81b031916908160001a905350600160028402015b600181111561264e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061261157612611612f41565b1a60f81b82828151811061262757612627612f41565b60200101906001600160f81b031916908160001a90535060049490941c93600019016125e0565b5083156104525760405163c913478560e01b815260040160405180910390fd5b60008181526001830160205260408120546103c0575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b815460009082106126d55760405163e637bf3b60e01b815260040160405180910390fd5b8260000182815481106126ea576126ea612f41565b9060005260206000200154905092915050565b600060008051602061326f8339815191526000848152600382016020908152604080832086845290915280822080546001808301549351637921219560e11b81523060048201523360248201526044810194909452606484015260a0608484015260a48301939093529293506001600160a01b0390911690819063f242432a9060c401600060405180830381600087803b15801561279a57600080fd5b505af11580156127ae573d6000803e3d6000fd5b505050600095865250505060030160209081526040808420928452919052812080546001600160a01b031916815560010155565b60006104528383612810565b6001600160a01b03811660009081526001830160205260408120541515610452565b600081815260018301602052604081205480156111a95783546000908590600019810190811061284257612842612f41565b906000526020600020015490508085600001600184038154811061286857612868612f41565b600091825260208083209091019290925591825260018601905260409020819055835484908061289a5761289a613211565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b60405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b60006020828403121561290657600080fd5b81356001600160e01b03198116811461045257600080fd5b60008083601f84011261293057600080fd5b5081356001600160401b0381111561294757600080fd5b6020830191508360208260051b850101111561296257600080fd5b9250929050565b60008060006040848603121561297e57600080fd5b8335925060208401356001600160401b0381111561299b57600080fd5b6129a78682870161291e565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015612a1357612a00838551805182526020808201516001600160a01b031690830152604090810151910152565b92840192606092909201916001016129d0565b50909695505050505050565b600060408284031215612a3157600080fd5b50919050565b60008083601f840112612a4957600080fd5b5081356001600160401b03811115612a6057600080fd5b6020830191508360208260061b850101111561296257600080fd5b600080600060408486031215612a9057600080fd5b8335925060208401356001600160401b03811115612aad57600080fd5b6129a786828701612a37565b600060208284031215612acb57600080fd5b5035919050565b60008060408385031215612ae557600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60038110612b2857634e487b7160e01b600052602160045260246000fd5b9052565b8051825260208101511515602083015260408101516104016040840182612b0a565b6020808252825182820181905260009190848201906040850190845b81811015612a1357612b7d838551612b2c565b9284019260609290920191600101612b6a565b606081016103c08284612b2c565b60008060008060608587031215612bb457600080fd5b84358015158114612bc457600080fd5b9350602085013560038110612bd857600080fd5b925060408501356001600160401b03811115612bf357600080fd5b612bff87828801612a37565b95989497509550505050565b6001600160a01b03811681146107f757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c5e57612c5e612c20565b604052919050565b600082601f830112612c7757600080fd5b813560206001600160401b03821115612c9257612c92612c20565b8160051b612ca1828201612c36565b9283528481018201928281019087851115612cbb57600080fd5b83870192505b84831015612cda57823582529183019190830190612cc1565b979650505050505050565b600082601f830112612cf657600080fd5b81356001600160401b03811115612d0f57612d0f612c20565b612d22601f8201601f1916602001612c36565b818152846020838601011115612d3757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612d6c57600080fd5b8535612d7781612c0b565b94506020860135612d8781612c0b565b935060408601356001600160401b0380821115612da357600080fd5b612daf89838a01612c66565b94506060880135915080821115612dc557600080fd5b612dd189838a01612c66565b93506080880135915080821115612de757600080fd5b50612df488828901612ce5565b9150509295509295909350565b600080600080600060608688031215612e1957600080fd5b8535612e2481612c0b565b945060208601356001600160401b0380821115612e4057600080fd5b612e4c89838a0161291e565b90965094506040880135915080821115612e6557600080fd5b50612e728882890161291e565b969995985093965092949392505050565b815181526020808301516001600160a01b03169082015260408083015190820152606081016103c0565b600080600080600060a08688031215612ec557600080fd5b8535612ed081612c0b565b94506020860135612ee081612c0b565b9350604086013592506060860135915060808601356001600160401b03811115612f0957600080fd5b612df488828901612ce5565b60008060408385031215612f2857600080fd5b8235612f3381612c0b565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612f7f57612f7f612f57565b5060010190565b600060208284031215612f9857600080fd5b813561045281612c0b565b8135612fae81612c0b565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b600060408284031215612fef57600080fd5b604051604081018181106001600160401b038211171561301157613011612c20565b604052823561301f81612c0b565b81526020928301359281019290925250919050565b60005b8381101561304f578181015183820152602001613037565b50506000910152565b6000855161306a818460208a01613034565b919091019384525060609190911b6bffffffffffffffffffffffff191660208301526034820152605401919050565b6000602082840312156130ab57600080fd5b815161045281612c0b565b6020808252825182820181905260009190848201906040850190845b81811015612a13578351835292840192918401916001016130d2565b808201808211156103c0576103c0612f57565b8381528215156020820152606081016103d36040830184612b0a565b6020808252810182905260006001600160fb1b0383111561313d57600080fd5b8260051b80856040850137919091016040019392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161318e816017850160208801613034565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131bf816028840160208801613034565b01602801949350505050565b60208152600082518060208401526131ea816040850160208701613034565b601f01601f19169190910160400192915050565b818103818111156103c0576103c0612f57565b634e487b7160e01b600052603160045260246000fd5b60008161323657613236612f57565b506000190190565b60006020828403121561325057600080fd5b5051919050565b80820281158282048414176103c0576103c0612f5756fef672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220c10142bcfd8266974d2351c3558fec9cd4d2b0eee3fae35de3799a6e3c53c59b64736f6c63430008130033",
  "devdoc": {
    "details": "This contract is responsible for managing the inventory system for the Arcadians using slots.  It defines the functionality to equip and unequip items to Arcadians, check if a combination of items  are unique, and retrieve the inventory slots and allowed items for a slot.  This contract also implements ERC1155Holder to handle ERC1155 token transfers This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.",
    "kind": "dev",
    "methods": {
      "addBaseModifierTickets(address,uint256[],uint256[])": {
        "params": {
          "account": "The account to increase the number of tickets",
          "amounts": "the amounts of tickets to increase",
          "slotsIds": "The slots ids to increase the number of tickets"
        }
      },
      "allowItemsInSlot(uint256,(address,uint256)[])": {
        "params": {
          "items": "The list of items to allow in the slot",
          "slotId": "The slot id"
        }
      },
      "allowedItem(uint256,uint256)": {
        "params": {
          "index": "The index of the item",
          "slotId": "The slot id to query"
        },
        "returns": {
          "_0": "A list of all the items that are allowed in the slot"
        }
      },
      "allowedSlot((address,uint256))": {
        "params": {
          "item": "The item to check"
        },
        "returns": {
          "_0": "The allowed slot id for the item. Slots are 1-indexed."
        }
      },
      "createSlot(bool,uint8,(address,uint256)[])": {
        "details": "This function is only accessible to the manager roleSlots are 1-indexed",
        "params": {
          "category": "The category of the slot",
          "items": "The list of items to allow in the slot",
          "permanent": "Whether or not the slot can be unequipped once equipped"
        }
      },
      "disallowItemsInSlot(uint256,(address,uint256)[])": {
        "params": {
          "items": "The list of items to disallow in the slot",
          "slotId": "The ID of the inventory slot"
        }
      },
      "equip(uint256,(address,uint256)[])": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to equip the items for",
          "items": "An array of items to equip in the corresponding slots"
        }
      },
      "equipped(uint256,uint256)": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query",
          "slotId": "The slot id to query"
        }
      },
      "equippedAll(uint256)": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query"
        }
      },
      "equippedBatch(uint256,uint256[])": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query",
          "slotIds": "The slots ids to query"
        }
      },
      "getBaseModifierTickets(address,uint256)": {
        "params": {
          "account": "The accounts to increase the number of tickets"
        }
      },
      "isArcadianUnique(uint256,(address,uint256)[])": {
        "details": "The uniqueness is calculated using the existent arcadian items and the input items as wellOnly items equipped in 'base' category slots are considered for uniqueness",
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query",
          "items": "An array of items to check for uniqueness after \"equipped\" over the existent arcadian items."
        }
      },
      "numAllowedItems(uint256)": {
        "params": {
          "slotId": "The slot id to check"
        },
        "returns": {
          "_0": "A list of all the items that are allowed in the slot"
        }
      },
      "numSlots()": {
        "details": "Slots are 1-indexed",
        "returns": {
          "_0": "The number of inventory slots "
        }
      },
      "slot(uint256)": {
        "details": "Slots are 1-indexed",
        "params": {
          "slotId": "The ID of the inventory slot"
        },
        "returns": {
          "existentSlot": "The details of the inventory slot"
        }
      },
      "slotsAll()": {
        "details": "Slots are 1-indexed",
        "returns": {
          "existentSlots": "The details of all the inventory slots"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unequip(uint256,uint256[])": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to equip the item for",
          "slotIds": "The slots ids in which the items will be unequipped"
        }
      }
    },
    "title": "InventoryFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBaseModifierTickets(address,uint256[],uint256[])": {
        "notice": "Adds tickets to accounts that allow to modify the base traits"
      },
      "allowItemsInSlot(uint256,(address,uint256)[])": {
        "notice": "Adds items to the list of allowed items for an inventory slot"
      },
      "allowedItem(uint256,uint256)": {
        "notice": "Returns the allowed item for a given slot and the index"
      },
      "allowedSlot((address,uint256))": {
        "notice": "Returns the allowed slot for a given item"
      },
      "createSlot(bool,uint8,(address,uint256)[])": {
        "notice": "Creates a new inventory slot"
      },
      "disallowItemsInSlot(uint256,(address,uint256)[])": {
        "notice": "Removes items from the list of allowed items"
      },
      "equip(uint256,(address,uint256)[])": {
        "notice": "Equips multiple items to multiple slots for a specified Arcadian NFT"
      },
      "equipped(uint256,uint256)": {
        "notice": "Retrieves the equipped item in a slot for a specified Arcadian NFT"
      },
      "equippedAll(uint256)": {
        "notice": "Retrieves all the equipped items for a specified Arcadian NFT"
      },
      "equippedBatch(uint256,uint256[])": {
        "notice": "Retrieves the equipped items in the slot of an Arcadian NFT"
      },
      "getBaseModifierTickets(address,uint256)": {
        "notice": "Returns the number tickets avialable for an account that allow to modify the base traits"
      },
      "isArcadianUnique(uint256,(address,uint256)[])": {
        "notice": "Indicates if a list of items applied to an the arcadian is unique"
      },
      "numAllowedItems(uint256)": {
        "notice": "Returns the number of allowed items for a given slot"
      },
      "numSlots()": {
        "notice": "Returns the number of inventory slots"
      },
      "slot(uint256)": {
        "notice": "Returns the details of an inventory slot given its ID"
      },
      "slotsAll()": {
        "notice": "Returns the details of all the existent slots"
      },
      "unequip(uint256,uint256[])": {
        "notice": "Unequips the items equipped in multiple slots for a specified Arcadian NFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}