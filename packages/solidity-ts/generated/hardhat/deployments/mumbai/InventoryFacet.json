{
  "address": "0x249f7C8562A31410031434b3c7e2983280c0161B",
  "abi": [
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ArcadianNotUnique",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InputDataMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InsufficientItemBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InvalidERC1155Contract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InvalidSlotId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyAllowedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyDisallowedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyEquippedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemNotElegibleForSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NotArcadianOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_SlotAlreadyEquipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_SlotNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingEmptySlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingPermanentSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldArcadiansAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newArcadiansAddress",
          "type": "address"
        }
      ],
      "name": "ArcadiansAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "ItemsAllowedInSlotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "permanent",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum InventoryStorage.SlotCategory",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "SlotCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "allowItemsInSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "allowedItem",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "allowedSlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "permanent",
          "type": "bool"
        },
        {
          "internalType": "enum InventoryStorage.SlotCategory",
          "name": "category",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "createSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "disallowItemsInSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "equip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "slotsIds",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "equipBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "equipped",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slotId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryInternal.ItemInSlot",
          "name": "item",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        }
      ],
      "name": "equippedAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "slotId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryInternal.ItemInSlot[]",
          "name": "equippedSlot",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "slotsIds",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "isArcadianUnique",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "numAllowedItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSlots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "slot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "permanent",
              "type": "bool"
            },
            {
              "internalType": "enum InventoryStorage.SlotCategory",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct InventoryStorage.Slot",
          "name": "existentSlot",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotsAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "permanent",
              "type": "bool"
            },
            {
              "internalType": "enum InventoryStorage.SlotCategory",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct InventoryStorage.Slot[]",
          "name": "existentSlots",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "unequip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "slotIds",
          "type": "uint256[]"
        }
      ],
      "name": "unequipBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x15ccafeb5e9539948d3c8e628dffb2436587f6e60fe7bc122b682c8eb11cef28",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0x249f7C8562A31410031434b3c7e2983280c0161B",
    "transactionIndex": 2,
    "gasUsed": "2842357",
    "logsBloom": "0x
    "blockHash": "0x9070df4e98978919ab0f9a2a258706c3283e463620869057bf21e2167ff8052f",
    "transactionHash": "0x15ccafeb5e9539948d3c8e628dffb2436587f6e60fe7bc122b682c8eb11cef28",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 33932428,
        "transactionHash": "0x15ccafeb5e9539948d3c8e628dffb2436587f6e60fe7bc122b682c8eb11cef28",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000193ec5861da3fa500000000000000000000000000000000000000000000000016cc28626e44c5660000000000000000000000000000000000000000000005526850528eb8788b6900000000000000000000000000000000000000000000000015383c0a0c6a85c100000000000000000000000000000000000000000000055269e43ee71a52cb0e",
        "logIndex": 10,
        "blockHash": "0x9070df4e98978919ab0f9a2a258706c3283e463620869057bf21e2167ff8052f"
      }
    ],
    "blockNumber": 33932428,
    "cumulativeGasUsed": "3237728",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "769e5ab6dc92426c40d23bbacd734a6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ArcadianNotUnique\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InputDataMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InsufficientItemBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InvalidERC1155Contract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InvalidSlotId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyAllowedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyDisallowedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyEquippedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemNotElegibleForSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NotArcadianOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_SlotAlreadyEquipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_SlotNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingEmptySlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingPermanentSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldArcadiansAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newArcadiansAddress\",\"type\":\"address\"}],\"name\":\"ArcadiansAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"ItemsAllowedInSlotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"SlotCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"allowItemsInSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"allowedItem\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"allowedSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"createSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"disallowItemsInSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slotsIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"equipBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"equipped\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryInternal.ItemInSlot\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"}],\"name\":\"equippedAll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryInternal.ItemInSlot[]\",\"name\":\"equippedSlot\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slotsIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"isArcadianUnique\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"numAllowedItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSlots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"slot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct InventoryStorage.Slot\",\"name\":\"existentSlot\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotsAll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct InventoryStorage.Slot[]\",\"name\":\"existentSlots\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slotIds\",\"type\":\"uint256[]\"}],\"name\":\"unequipBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is responsible for managing the inventory system for the Arcadians using slots.  It defines the functionality to equip and unequip items to Arcadians, check if a combination of items  are unique, and retrieve the inventory slots and allowed items for a slot.  This contract also implements ERC1155Holder to handle ERC1155 token transfers This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.\",\"kind\":\"dev\",\"methods\":{\"allowItemsInSlot(uint256,(address,uint256)[])\":{\"params\":{\"items\":\"The list of items to allow in the slot\",\"slotId\":\"The slot id\"}},\"allowedItem(uint256,uint256)\":{\"params\":{\"index\":\"The index of the item\",\"slotId\":\"The slot id to query\"},\"returns\":{\"_0\":\"A list of all the items that are allowed in the slot\"}},\"allowedSlot((address,uint256))\":{\"params\":{\"item\":\"The item to check\"},\"returns\":{\"_0\":\"The allowed slot id for the item. Slots are 1-indexed.\"}},\"createSlot(bool,uint8,(address,uint256)[])\":{\"details\":\"This function is only accessible to the manager roleSlots are 1-indexed\",\"params\":{\"category\":\"The category of the slot\",\"items\":\"The list of items to allow in the slot\",\"permanent\":\"Whether or not the slot can be unequipped once equipped\"}},\"disallowItemsInSlot(uint256,(address,uint256)[])\":{\"params\":{\"items\":\"The list of items to disallow in the slot\",\"slotId\":\"The ID of the inventory slot\"}},\"equip(uint256,uint256,(address,uint256))\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to equip the item for\",\"item\":\"The item to equip in the slot\",\"slotId\":\"The slot id in which the items will be equipped\"}},\"equipBatch(uint256,uint256[],(address,uint256)[])\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to equip the items for\",\"items\":\"An array of items to equip in the corresponding slots\",\"slotsIds\":\"An array of slot ids to equip the items\"}},\"equipped(uint256,uint256)\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\",\"slotId\":\"The slot id to query\"}},\"equippedAll(uint256)\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\"}},\"isArcadianUnique(uint256,uint256[],(address,uint256)[])\":{\"details\":\"The uniqueness is calculated using the existent arcadian items and the input items as wellOnly items equipped in 'base' category slots are considered for uniqueness\",\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\",\"items\":\"An array of items to check for uniqueness after \\\"equipped\\\" over the existent arcadian items.\",\"slotsIds\":\"An array of slot ids\"}},\"numAllowedItems(uint256)\":{\"params\":{\"slotId\":\"The slot id to check\"},\"returns\":{\"_0\":\"A list of all the items that are allowed in the slot\"}},\"numSlots()\":{\"details\":\"Slots are 1-indexed\",\"returns\":{\"_0\":\"The number of inventory slots \"}},\"slot(uint256)\":{\"details\":\"Slots are 1-indexed\",\"params\":{\"slotId\":\"The ID of the inventory slot\"},\"returns\":{\"existentSlot\":\"The details of the inventory slot\"}},\"slotsAll()\":{\"details\":\"Slots are 1-indexed\",\"returns\":{\"existentSlots\":\"The details of all the inventory slots\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unequip(uint256,uint256)\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to equip the item for\",\"slotId\":\"The slot id in which the item will be unequipped\"}},\"unequipBatch(uint256,uint256[])\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to equip the item for\",\"slotIds\":\"The slots ids in which the items will be unequipped\"}}},\"title\":\"InventoryFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowItemsInSlot(uint256,(address,uint256)[])\":{\"notice\":\"Adds items to the list of allowed items for an inventory slot\"},\"allowedItem(uint256,uint256)\":{\"notice\":\"Returns the allowed item for a given slot and the index\"},\"allowedSlot((address,uint256))\":{\"notice\":\"Returns the allowed slot for a given item\"},\"createSlot(bool,uint8,(address,uint256)[])\":{\"notice\":\"Creates a new inventory slot\"},\"disallowItemsInSlot(uint256,(address,uint256)[])\":{\"notice\":\"Removes items from the list of allowed items\"},\"equip(uint256,uint256,(address,uint256))\":{\"notice\":\"Equips a single item to a given slot for a specified Arcadian NFT\"},\"equipBatch(uint256,uint256[],(address,uint256)[])\":{\"notice\":\"Equips multiple items to multiple slots for a specified Arcadian NFT\"},\"equipped(uint256,uint256)\":{\"notice\":\"Retrieves the equipped item in a slot for a specified Arcadian NFT\"},\"equippedAll(uint256)\":{\"notice\":\"Retrieves all the equipped items for a specified Arcadian NFT\"},\"isArcadianUnique(uint256,uint256[],(address,uint256)[])\":{\"notice\":\"Indicates if a list of items applied to an the arcadian is unique\"},\"numAllowedItems(uint256)\":{\"notice\":\"Returns the number of allowed items for a given slot\"},\"numSlots()\":{\"notice\":\"Returns the number of inventory slots\"},\"slot(uint256)\":{\"notice\":\"Returns the details of an inventory slot given its ID\"},\"slotsAll()\":{\"notice\":\"Returns the details of all the existent slots\"},\"unequip(uint256,uint256)\":{\"notice\":\"Unequips the item equipped in a given slot for a specified Arcadian NFT\"},\"unequipBatch(uint256,uint256[])\":{\"notice\":\"Unequips the items equipped in multiple slots for a specified Arcadian NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/inventory/InventoryFacet.sol\":\"InventoryFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 minValue = bytes32(type(uint256).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(address[] memory array) internal pure returns (address) {\\n        address minValue = address(type(uint160).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 minValue = type(uint256).max;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 maxValue = bytes32(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(address[] memory array) internal pure returns (address) {\\n        address maxValue = address(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 maxValue = 0;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86a2953855b8df5a5ded23a79016f1584b6321ef2c04f44466ebfbb6d23e728c\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/inventory/InventoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Crated based in the following work:\\n * Authors: Moonstream DAO (engineering@moonstream.to)\\n * GitHub: https://github.com/G7DAO/contracts\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ERC1155Holder } from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { InventoryInternal } from \\\"./InventoryInternal.sol\\\";\\n\\n/**\\n * @title InventoryFacet\\n * @dev This contract is responsible for managing the inventory system for the Arcadians using slots. \\n * It defines the functionality to equip and unequip items to Arcadians, check if a combination of items \\n * are unique, and retrieve the inventory slots and allowed items for a slot. \\n * This contract also implements ERC1155Holder to handle ERC1155 token transfers\\n * This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard.\\n * It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.\\n */\\ncontract InventoryFacet is\\n    ERC1155Holder,\\n    ReentrancyGuard,\\n    InventoryInternal\\n{\\n\\n    /**\\n     * @notice Returns the number of inventory slots\\n     * @dev Slots are 1-indexed\\n     * @return The number of inventory slots \\n     */\\n    function numSlots() external view returns (uint) {\\n        return _numSlots();\\n    }\\n\\n    /**\\n     * @notice Returns the details of an inventory slot given its ID\\n     * @dev Slots are 1-indexed\\n     * @param slotId The ID of the inventory slot\\n     * @return existentSlot The details of the inventory slot\\n     */\\n    function slot(uint slotId) external view returns (InventoryStorage.Slot memory existentSlot) {\\n        return _slot(slotId);\\n    }\\n\\n    /**\\n     * @notice Returns the details of all the existent slots\\n     * @dev Slots are 1-indexed\\n     * @return existentSlots The details of all the inventory slots\\n     */\\n    function slotsAll() external view returns (InventoryStorage.Slot[] memory existentSlots) {\\n        return _slotsAll();\\n    }\\n\\n    /**\\n     * @notice Creates a new inventory slot\\n     * @dev This function is only accessible to the manager role\\n     * @dev Slots are 1-indexed\\n     * @param permanent Whether or not the slot can be unequipped once equipped\\n     * @param category The category of the slot\\n     * @param items The list of items to allow in the slot\\n     */\\n    function createSlot(\\n        bool permanent,\\n        InventoryStorage.SlotCategory category,\\n        InventoryStorage.Item[] calldata items\\n    ) external onlyManager {\\n        _createSlot(permanent, category, items);\\n    }\\n\\n    /**\\n     * @notice Adds items to the list of allowed items for an inventory slot\\n     * @param slotId The slot id\\n     * @param items The list of items to allow in the slot\\n     */\\n    function allowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) external onlyManager {\\n        _allowItemsInSlot(slotId, items);\\n    }\\n    \\n    /**\\n     * @notice Removes items from the list of allowed items\\n     * @param slotId The ID of the inventory slot\\n     * @param items The list of items to disallow in the slot\\n     */\\n    function disallowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) external onlyManager {\\n        _disallowItemsInSlot(slotId, items);\\n    }\\n\\n    /**\\n     * @notice Returns the allowed slot for a given item\\n     * @param item The item to check\\n     * @return The allowed slot id for the item. Slots are 1-indexed.\\n     */\\n    function allowedSlot(InventoryStorage.Item calldata item) external view returns (uint) {\\n        return _allowedSlot(item);\\n    }\\n\\n    /**\\n     * @notice Returns the allowed item for a given slot and the index\\n     * @param slotId The slot id to query\\n     * @param index The index of the item\\n     * @return A list of all the items that are allowed in the slot\\n     */\\n    function allowedItem(uint slotId, uint index) external view returns (InventoryStorage.Item memory) {\\n        return _allowedItem(slotId, index);\\n    }\\n\\n    /**\\n     * @notice Returns the number of allowed items for a given slot\\n     * @param slotId The slot id to check\\n     * @return A list of all the items that are allowed in the slot\\n     */\\n    function numAllowedItems(uint slotId) external view returns (uint) {\\n        return _numAllowedItems(slotId);\\n    }\\n\\n    /**\\n     * @notice Equips a single item to a given slot for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to equip the item for\\n     * @param slotId The slot id in which the items will be equipped\\n     * @param item The item to equip in the slot\\n     */\\n    function equip(\\n        uint arcadianId,\\n        uint slotId,\\n        InventoryStorage.Item calldata item\\n    ) external nonReentrant {\\n        _equip(arcadianId, slotId, item);\\n    }\\n\\n    /**\\n     * @notice Equips multiple items to multiple slots for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to equip the items for\\n     * @param slotsIds An array of slot ids to equip the items\\n     * @param items An array of items to equip in the corresponding slots\\n     */\\n    function equipBatch(\\n        uint arcadianId,\\n        uint[] calldata slotsIds,\\n        InventoryStorage.Item[] calldata items\\n    ) external nonReentrant {\\n        _equipBatch(arcadianId, slotsIds, items);\\n    }\\n\\n    /**\\n     * @notice Unequips the item equipped in a given slot for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to equip the item for\\n     * @param slotId The slot id in which the item will be unequipped\\n     */\\n    function unequip(\\n        uint arcadianId,\\n        uint slotId\\n    ) external nonReentrant {\\n        _unequip(arcadianId, slotId);\\n    }\\n\\n    /**\\n     * @notice Unequips the items equipped in multiple slots for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to equip the item for\\n     * @param slotIds The slots ids in which the items will be unequipped\\n     */\\n    function unequipBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) external nonReentrant {\\n        _unequipBatch(arcadianId, slotIds);\\n    }\\n\\n    /**\\n     * @notice Retrieves the equipped item in a slot for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     * @param slotId The slot id to query\\n     */\\n    function equipped(\\n        uint arcadianId,\\n        uint slotId\\n    ) external view returns (ItemInSlot memory item) {\\n        return _equipped(arcadianId, slotId);\\n    }\\n\\n    /**\\n     * @notice Retrieves all the equipped items for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     */\\n    function equippedAll(\\n        uint arcadianId\\n    ) external view returns (ItemInSlot[] memory equippedSlot) {\\n        return _equippedAll(arcadianId);\\n    }\\n\\n    /**\\n     * @notice Indicates if a list of items applied to an the arcadian is unique\\n     * @dev The uniqueness is calculated using the existent arcadian items and the input items as well\\n     * @dev Only items equipped in 'base' category slots are considered for uniqueness\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     * @param slotsIds An array of slot ids\\n     * @param items An array of items to check for uniqueness after \\\"equipped\\\" over the existent arcadian items.\\n     */\\n    function isArcadianUnique(\\n        uint arcadianId,\\n        uint[] calldata slotsIds,\\n        InventoryStorage.Item[] calldata items\\n    ) external view returns (bool) {\\n        return _isArcadianUnique(arcadianId, slotsIds, items);\\n    }\\n}\",\"keccak256\":\"0xfe9ea667c71546bbc1cab58e50c883b2bb148c1ccfca721faf1a9e8d2d47b37e\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { AddressUtils } from \\\"@solidstate/contracts/utils/AddressUtils.sol\\\";\\nimport { ArrayUtils } from \\\"@solidstate/contracts/utils/ArrayUtils.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { IERC1155 } from \\\"@solidstate/contracts/interfaces/IERC1155.sol\\\";\\n\\ncontract InventoryInternal is\\n    ReentrancyGuard,\\n    RolesInternal\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using AddressUtils for address;\\n\\n    error Inventory_InvalidERC1155Contract();\\n    error Inventory_UnequippingPermanentSlot();\\n    error Inventory_InvalidSlotId();\\n    error Inventory_ItemNotElegibleForSlot();\\n    error Inventory_InsufficientItemBalance();\\n    error Inventory_SlotAlreadyEquipped();\\n    error Inventory_UnequippingEmptySlot();\\n    error Inventory_SlotNotSpecified();\\n    error Inventory_NotArcadianOwner();\\n    error Inventory_ArcadianNotUnique();\\n    error Inventory_InputDataMismatch();\\n    error Inventory_ItemAlreadyEquippedInSlot();\\n    error Inventory_ItemAlreadyAllowedInSlot();\\n    error Inventory_ItemAlreadyDisallowedInSlot();\\n\\n    event ArcadiansAddressChanged(address indexed oldArcadiansAddress, address indexed newArcadiansAddress);\\n\\n    event ItemsAllowedInSlotUpdated(\\n        address indexed by,\\n        uint slotId\\n    );\\n\\n    event ItemsEquipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event ItemsUnequipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event SlotCreated(\\n        address indexed by,\\n        uint slotId,\\n        bool permanent,\\n        InventoryStorage.SlotCategory category\\n    );\\n\\n    modifier onlyValidSlot(uint slotId) {\\n        if (slotId == 0 || slotId > InventoryStorage.layout().numSlots) revert Inventory_InvalidSlotId();\\n        _;\\n    }\\n\\n    modifier onlyArcadianOwner(uint arcadianId) {\\n        IERC721 arcadiansContract = IERC721(address(this));\\n        if (msg.sender != arcadiansContract.ownerOf(arcadianId)) revert Inventory_NotArcadianOwner();\\n        _;\\n    }\\n\\n    function _numSlots() internal view returns (uint) {\\n        return InventoryStorage.layout().numSlots;\\n    }\\n\\n    // Helper struct only used in view functions\\n    struct ItemInSlot {\\n        uint slotId;\\n        address erc721Contract;\\n        uint itemId;\\n    }\\n\\n    function _equip(\\n        uint arcadianId,\\n        uint slotId,\\n        InventoryStorage.Item calldata item\\n    ) internal onlyArcadianOwner(arcadianId) onlyValidSlot(slotId) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        if (inventorySL.itemSlot[item.erc721Contract][item.id] != slotId) \\n            revert Inventory_ItemNotElegibleForSlot();\\n\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n        if (inventorySL.slots[slotId].permanent && existingItem.erc721Contract != address(0)) \\n            revert Inventory_UnequippingPermanentSlot();\\n\\n        _unequipUnchecked(arcadianId, slotId);\\n\\n        IERC1155 erc1155Contract = IERC1155(item.erc721Contract);\\n        if (erc1155Contract.balanceOf(msg.sender, item.id) < 1)\\n            revert Inventory_InsufficientItemBalance();\\n\\n        if (existingItem.erc721Contract == item.erc721Contract && existingItem.id == item.id)\\n            revert Inventory_ItemAlreadyEquippedInSlot();\\n\\n        erc1155Contract.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            item.id,\\n            1,\\n            ''\\n        );\\n\\n        inventorySL.equippedItems[arcadianId][slotId] = item;\\n\\n        if (!_hashBaseItemsUnchecked(arcadianId)) \\n            revert Inventory_ArcadianNotUnique();\\n\\n        uint[] memory slotsIds = new uint[](1);\\n        slotsIds[0] = slotId;\\n        emit ItemsEquipped(\\n            msg.sender,\\n            arcadianId,\\n            slotsIds\\n        );\\n    }\\n\\n    function _equipBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds,\\n        InventoryStorage.Item[] calldata items\\n    ) internal {\\n\\n        if (slotIds.length == 0) revert Inventory_SlotNotSpecified();\\n\\n        if (slotIds.length != items.length) revert Inventory_InputDataMismatch();\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            uint slotId = slotIds[i];\\n\\n            if (slotId == 0 && slotId > numSlots) \\n                revert Inventory_InvalidSlotId();\\n            \\n            if (inventorySL.itemSlot[items[i].erc721Contract][items[i].id] != slotId) \\n                revert Inventory_ItemNotElegibleForSlot();\\n\\n            InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n\\n            if (existingItem.erc721Contract == items[i].erc721Contract && existingItem.id == items[i].id)\\n                revert Inventory_ItemAlreadyEquippedInSlot();\\n\\n            if (inventorySL.slots[slotId].permanent && existingItem.erc721Contract != address(0)) \\n                revert Inventory_UnequippingPermanentSlot();\\n\\n            _unequipUnchecked(arcadianId, slotId);\\n\\n            inventorySL.equippedItems[arcadianId][slotId] = items[i];\\n\\n            IERC1155 erc1155Contract = IERC1155(items[i].erc721Contract);\\n            if (erc1155Contract.balanceOf(msg.sender, items[i].id) < 1) \\n                revert Inventory_InsufficientItemBalance();\\n\\n            erc1155Contract.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                items[i].id,\\n                1,\\n                ''\\n            );\\n        }\\n\\n        if (!_hashBaseItemsUnchecked(arcadianId)) \\n            revert Inventory_ArcadianNotUnique();\\n\\n        emit ItemsEquipped(\\n            msg.sender,\\n            arcadianId,\\n            slotIds\\n        );\\n    }\\n\\n    function _unequipUnchecked(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n        IERC1155 erc1155Contract = IERC1155(existingItem.erc721Contract);\\n\\n        if (existingItem.erc721Contract == address(0)) \\n            return;\\n\\n        erc1155Contract.safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            existingItem.id,\\n            1,\\n            ''\\n        );\\n        delete inventorySL.equippedItems[arcadianId][slotId];\\n    }\\n\\n    function _unequip(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal onlyArcadianOwner(arcadianId) onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        if (inventorySL.slots[slotId].permanent) \\n            revert Inventory_UnequippingPermanentSlot();\\n\\n        if (inventorySL.equippedItems[arcadianId][slotId].erc721Contract == address(0)) \\n            revert Inventory_UnequippingEmptySlot();\\n        \\n        _unequipUnchecked(arcadianId, slotId);\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n\\n        uint[] memory slots = new uint[](1);\\n        slots[0] = slotId;\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slots\\n        );\\n    }\\n\\n    function _unequipBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        if (slotIds.length == 0) revert Inventory_SlotNotSpecified();\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            uint slotId = slotIds[i];\\n\\n            if (slotId == 0 || slotId > numSlots) \\n                revert Inventory_InvalidSlotId();\\n\\n            if (inventorySL.slots[slotId].permanent) \\n                revert Inventory_UnequippingPermanentSlot();\\n\\n            if (inventorySL.equippedItems[arcadianId][slotId].erc721Contract == address(0)) \\n                revert Inventory_UnequippingEmptySlot();\\n            \\n            _unequipUnchecked(arcadianId, slotId);\\n        }\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slotIds\\n        );\\n    }\\n\\n    function _equipped(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal view returns (ItemInSlot memory) {\\n        InventoryStorage.Item storage item = InventoryStorage.layout().equippedItems[arcadianId][slotId];\\n        return ItemInSlot(slotId, item.erc721Contract, item.id);\\n    }\\n\\n    function _equippedAll(\\n        uint arcadianId\\n    ) internal view returns (ItemInSlot[] memory equippedSlots) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        equippedSlots = new ItemInSlot[](numSlots);\\n        for (uint i = 0; i < numSlots; i++) {\\n            uint slot = i + 1;\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slot];\\n            equippedSlots[i] = ItemInSlot(slot, equippedItem.erc721Contract, equippedItem.id);\\n        }\\n    }\\n\\n    function _isArcadianUnique(\\n        uint arcadianId,\\n        uint[] calldata slotsIds,\\n        InventoryStorage.Item[] calldata items\\n    ) internal view returns (bool) {\\n        if (slotsIds.length != items.length) \\n            revert Inventory_InputDataMismatch();\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n\\n        uint baseSlotsLength = baseSlots.length();\\n        uint[] memory baseSlotsIds = new uint[](baseSlotsLength);\\n        InventoryStorage.Item[] memory baseItems = new InventoryStorage.Item[](baseSlotsLength);\\n        uint numSlots = inventorySL.numSlots;\\n\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            baseSlotsIds[i] = slotId;\\n            baseItems[i] = inventorySL.equippedItems[arcadianId][slotId];\\n        }\\n\\n        for (uint i = 0; i < slotsIds.length; i++) {\\n            uint slotId = slotsIds[i];\\n            \\n            if (slotId == 0 && slotId > numSlots) \\n                revert Inventory_InvalidSlotId();\\n\\n            if (!baseSlots.contains(slotId)) continue;\\n\\n            baseSlotsIds[i] = slotId;\\n            baseItems[i] = items[i];\\n        }\\n\\n        bytes memory encodedItems;\\n        for (uint i = 0; i < baseSlotsIds.length; i++) {\\n            encodedItems = abi.encodePacked(encodedItems, baseSlotsIds[i], baseItems[i].erc721Contract, baseItems[i].id);\\n        }\\n\\n        return !inventorySL.baseItemsHashes.contains(keccak256(encodedItems));\\n    }\\n\\n    function _hashBaseItemsUnchecked(\\n        uint arcadianId\\n    ) internal returns (bool isUnique) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n        bytes memory encodedItems;\\n        uint baseSlotsLength = baseSlots.length();\\n\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotId];\\n            encodedItems = abi.encodePacked(encodedItems, slotId, equippedItem.erc721Contract, equippedItem.id);\\n        }\\n\\n        bytes32 baseItemsHash = keccak256(encodedItems);\\n        isUnique = !inventorySL.baseItemsHashes.contains(baseItemsHash);\\n        inventorySL.baseItemsHashes.remove(inventorySL.arcadianToBaseItemHash[arcadianId]);\\n        inventorySL.baseItemsHashes.add(baseItemsHash);\\n        inventorySL.arcadianToBaseItemHash[arcadianId] = baseItemsHash;\\n    }\\n\\n    function _createSlot(\\n        bool permanent,\\n        InventoryStorage.SlotCategory category,\\n        InventoryStorage.Item[] calldata allowedItems\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        // slots are 1-index\\n        inventorySL.numSlots += 1;\\n        uint newSlot = inventorySL.numSlots;\\n        inventorySL.slots[newSlot].permanent = permanent;\\n        inventorySL.slots[newSlot].category = category;\\n        inventorySL.slots[newSlot].id = newSlot;\\n\\n        if (allowedItems.length > 0) {\\n            _allowItemsInSlot(newSlot, allowedItems);\\n        }\\n\\n        emit SlotCreated(msg.sender, newSlot, permanent, category);\\n    }\\n\\n    function _allowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < items.length; i++) {\\n            if (!items[i].erc721Contract.isContract()) \\n                revert Inventory_InvalidERC1155Contract();\\n\\n            if (inventorySL.itemSlot[items[i].erc721Contract][items[i].id] > 0) {\\n\\n                if (inventorySL.itemSlot[items[i].erc721Contract][items[i].id] == slotId) \\n                    revert Inventory_ItemAlreadyAllowedInSlot();\\n\\n                _disallowItemInSlotUnchecked(slotId, items[i]);\\n            }\\n            inventorySL.allowedItems[slotId].push(items[i]);\\n            inventorySL.itemSlot[items[i].erc721Contract][items[i].id] = slotId;\\n        }\\n\\n        inventorySL.categoryToSlots[inventorySL.slots[slotId].category].add(slotId);\\n\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < items.length; i++) {\\n            \\n            if (inventorySL.itemSlot[items[i].erc721Contract][items[i].id] != slotId) \\n                revert Inventory_ItemAlreadyDisallowedInSlot();\\n                \\n            _disallowItemInSlotUnchecked(slotId, items[i]);\\n        }\\n\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemInSlotUnchecked(\\n        uint slotId,\\n        InventoryStorage.Item calldata item\\n    ) internal virtual {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        for (uint i = 0; i < inventorySL.allowedItems[slotId].length; i++) {\\n            if (inventorySL.allowedItems[slotId][i].id == item.id) {\\n                inventorySL.allowedItems[slotId][i] = inventorySL.allowedItems[slotId][inventorySL.allowedItems[slotId].length-1];\\n                inventorySL.allowedItems[slotId].pop();\\n                break;\\n            }\\n        }\\n        \\n        delete inventorySL.itemSlot[item.erc721Contract][item.id];\\n    }\\n\\n    function _allowedSlot(InventoryStorage.Item calldata item) internal view returns (uint) {\\n        return InventoryStorage.layout().itemSlot[item.erc721Contract][item.id];\\n    }\\n\\n    function _allowedItem(uint slotId, uint index) internal view onlyValidSlot(slotId) returns (InventoryStorage.Item memory) {\\n        return InventoryStorage.layout().allowedItems[slotId][index];\\n    }\\n\\n    function _numAllowedItems(uint slotId) internal view onlyValidSlot(slotId) returns (uint) {\\n        return InventoryStorage.layout().allowedItems[slotId].length;\\n    }\\n\\n    function _slot(uint slotId) internal view returns (InventoryStorage.Slot storage slot) {\\n        return InventoryStorage.layout().slots[slotId];\\n    }\\n\\n    function _slotsAll() internal view returns (InventoryStorage.Slot[] memory slotsAll) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        uint numSlots = inventorySL.numSlots;\\n        slotsAll = new InventoryStorage.Slot[](numSlots);\\n\\n        for (uint i = 0; i < numSlots; i++) {\\n            uint slotId = i + 1;\\n            slotsAll[i] = inventorySL.slots[slotId];\\n        }\\n    }\\n}\",\"keccak256\":\"0xcd7e670e06f97f30236d137890561c623398a2ec38f951909328aeb456f7838f\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\n\\n/**\\nLibInventory defines the storage structure used by the Inventory contract as a facet for an EIP-2535 Diamond\\nproxy.\\n */\\nlibrary InventoryStorage {\\n    bytes32 constant INVENTORY_STORAGE_POSITION =\\n        keccak256(\\\"inventory.storage.position\\\");\\n\\n    uint constant ERC721_ITEM_TYPE = 721;\\n    uint constant ERC1155_ITEM_TYPE = 1155;\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum SlotCategory { Base, Equippment, Cosmetic }\\n\\n    // Holds the information needed to identify an ERC1155 item\\n    struct Item {\\n        address erc721Contract;\\n        uint id;\\n    }\\n\\n    // Holds the general information about a slot\\n    struct Slot {\\n        uint id;\\n        bool permanent;\\n        SlotCategory category;\\n    }\\n\\n    struct Layout {\\n        uint numSlots;\\n\\n        // Slot id => Slot\\n        mapping(uint => Slot) slots;\\n        // Slot category => List of slots\\n        mapping(SlotCategory => EnumerableSet.UintSet) categoryToSlots;\\n\\n        // arcadian id => slot id => Items equipped\\n        mapping(uint => mapping(uint => Item)) equippedItems;\\n\\n        // item address => item id => allowed slot id\\n        mapping(address => mapping(uint => uint)) itemSlot;\\n        // slot id => items\\n        mapping(uint => InventoryStorage.Item[]) allowedItems;\\n\\n        // List of all the existent hashes\\n        EnumerableSet.Bytes32Set baseItemsHashes;\\n        // arcadian id => base items hash\\n        mapping(uint => bytes32) arcadianToBaseItemHash;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage istore)\\n    {\\n        bytes32 position = INVENTORY_STORAGE_POSITION;\\n        assembly {\\n            istore.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x0bdb9adf4cff0c43f5424dd59fb95c2e667f16aaa7b27920584028ca34515be1\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(_defaultAdminRole());\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        _checkRole(_managerRole());\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        _checkRole(_minterRole());\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _minterRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().minterRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.minterRole = keccak256(\\\"minter.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n        _grantRole(_minterRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0xd3fa8bcc9380c117c2e22aeb6b4489ad01c31433b3c2d412742b681c94cf407d\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 minterRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x203cfbe268a1ac5fe32593c66ace04b576dfb2e25173e02654e504cf0de44d71\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613275806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80639e3ccb2a116100ad578063b9518c8d11610071578063b9518c8d1461028a578063b9e6a4121461029d578063bc197c81146102b0578063ef0bf7de146102e8578063f23a6e611461030857600080fd5b80639e3ccb2a1461020f578063a667d9d31461022f578063b1b2fef414610242578063b2025e4f14610257578063b512cffe1461027757600080fd5b8063633e2d5a116100f4578063633e2d5a1461019757806376356aad146101aa5780637f85db2d146101bd5780638aa5d1f7146101f45780639621ff251461020757600080fd5b806301ffc9a7146101265780632f8bd3c81461014e5780634274a1431461016f578063473bdb9814610184575b600080fd5b61013961013436600461285f565b610327565b60405190151581526020015b60405180910390f35b61016161015c3660046128a1565b61035e565b604051908152602001610145565b61018261017d366004612908565b610369565b005b610182610192366004612908565b610389565b6101616101a5366004612953565b61039f565b6101826101b836600461296c565b6103aa565b6101d06101cb3660046129a2565b610405565b6040805182516001600160a01b031681526020928301519281019290925201610145565b610182610202366004612a08565b61042a565b610161610489565b61022261021d366004612953565b610498565b6040516101459190612a81565b61013961023d366004612a08565b6104a3565b61024a6104bc565b6040516101459190612b46565b61026a610265366004612953565b6104c6565b6040516101459190612b88565b6101826102853660046129a2565b61056b565b610182610298366004612b96565b6105c4565b6101826102ab366004612bd4565b610616565b6102cf6102be366004612d8a565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610145565b6102fb6102f63660046129a2565b610633565b6040516101459190612e37565b6102cf610316366004612e61565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061035857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006103588261066a565b6103796103746106d8565b610702565b61038483838361070f565b505050565b6103946103746106d8565b61038483838361086d565b600061035882610b95565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036103ed57604051635db5c7cd60e11b815260040160405180910390fd5b600281556103fc848484610c04565b60019055505050565b60408051808201909152600080825260208201526104238383611008565b9392505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361046d57604051635db5c7cd60e11b815260040160405180910390fd5b6002815561047e86868686866110d2565b600190555050505050565b600061049361153b565b905090565b606061035882611551565b60006104b2868686868661167d565b9695505050505050565b60606104936119fe565b6104e760408051606081018252600080825260208201819052909182015290565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d437602052604090206040805160608101825282548152600183015460ff8082161515602084015291939284019161010090910416600281111561055157610551612aec565b600281111561056257610562612aec565b90525092915050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036105ae57604051635db5c7cd60e11b815260040160405180910390fd5b600281556105bc8383611b38565b600190555050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361060757604051635db5c7cd60e11b815260040160405180910390fd5b600281556103fc848484611d3b565b6106216103746106d8565b61062d84848484611f32565b50505050565b61066060405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b610423838361201a565b60007ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a8161069b6020850185612ec9565b6001600160a01b03166001600160a01b03168152602001908152602001600020600083602001358152602001908152602001600020549050919050565b60007ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725b54919050565b61070c81336120ac565b50565b8280158061072b57506000805160206132208339815191525481115b156107495760405163d751397d60e01b815260040160405180910390fd5b60008051602061322083398151915260005b83811015610830578582600401600087878581811061077c5761077c612ee6565b6107929260206040909202019081019150612ec9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008787858181106107c6576107c6612ee6565b90506040020160200135815260200190815260200160002054146107fd5760405163072f859160e31b815260040160405180910390fd5b61081e8686868481811061081357610813612ee6565b90506040020161211b565b8061082881612f12565b91505061075b565b5060405185815233907ff69b53fa14ee16895edbe90d00c7b7af9214baf87c69bf5594126b114c9337ed9060200160405180910390a25050505050565b8280158061088957506000805160206132208339815191525481115b156108a75760405163d751397d60e01b815260040160405180910390fd5b60008051602061322083398151915260005b83811015610b2f576108fb8585838181106108d6576108d6612ee6565b6108ec9260206040909202019081019150612ec9565b6001600160a01b03163b151590565b61091857604051633c65e02b60e21b815260040160405180910390fd5b600082600401600087878581811061093257610932612ee6565b6109489260206040909202019081019150612ec9565b6001600160a01b03166001600160a01b03168152602001908152602001600020600087878581811061097c5761097c612ee6565b905060400201602001358152602001908152602001600020541115610a4b57858260040160008787858181106109b4576109b4612ee6565b6109ca9260206040909202019081019150612ec9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008787858181106109fe576109fe612ee6565b9050604002016020013581526020019081526020016000205403610a3557604051634ea88b8b60e01b815260040160405180910390fd5b610a4b8686868481811061081357610813612ee6565b60008681526005830160205260409020858583818110610a6d57610a6d612ee6565b835460018101855560009485526020909420604090910292909201926002029091019050610a9b8282612f2b565b505085826004016000878785818110610ab657610ab6612ee6565b610acc9260206040909202019081019150612ec9565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610b0057610b00612ee6565b905060400201602001358152602001908152602001600020819055508080610b2790612f12565b9150506108b9565b506000858152600182810160205260408220015461083091879160028086019291610100900460ff1690811115610b6857610b68612aec565b6002811115610b7957610b79612aec565b81526020019081526020016000206122d590919063ffffffff16565b600081801580610bb357506000805160206132208339815191525481115b15610bd15760405163d751397d60e01b815260040160405180910390fd5b505060009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b602052604090205490565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c689190612f65565b6001600160a01b0316336001600160a01b031614610c995760405163aee05b5d60e01b815260040160405180910390fd5b83801580610cb557506000805160206132208339815191525481115b15610cd35760405163d751397d60e01b815260040160405180910390fd5b600080516020613220833981519152857ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a6000610d136020890189612ec9565b6001600160a01b03166001600160a01b031681526020019081526020016000206000876020013581526020019081526020016000205414610d675760405163711f88b160e11b815260040160405180910390fd5b60008781526003820160209081526040808320898452825280832060018086019093529220015460ff168015610da6575080546001600160a01b031615155b15610dc45760405163bd8a5e1560e01b815260040160405180910390fd5b610dce88886122e1565b6000610ddd6020880188612ec9565b604051627eeac760e11b8152336004820152602089013560248201529091506001906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e539190612f82565b1015610e72576040516335ba250d60e11b815260040160405180910390fd5b610e7f6020880188612ec9565b82546001600160a01b039081169116148015610ea2575086602001358260010154145b15610ec05760405163c80df0cb60e01b815260040160405180910390fd5b604051637921219560e11b81526001600160a01b0382169063f242432a90610ef7903390309060208d013590600190600401612f9b565b600060405180830381600087803b158015610f1157600080fd5b505af1158015610f25573d6000803e3d6000fd5b50505060008a815260038501602090815260408083208c84529091529020889150610f508282612f2b565b905050610f5c896123d8565b610f785760405162ecf30560e51b815260040160405180910390fd5b604080516001808252818301909252600091602080830190803683370190505090508881600081518110610fae57610fae612ee6565b60200260200101818152505089336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f1886183604051610ff49190612fd3565b60405180910390a350505050505050505050565b60408051808201909152600080825260208201528280158061103857506000805160206132208339815191525481115b156110565760405163d751397d60e01b815260040160405180910390fd5b60008481527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b6020526040902080548490811061109557611095612ee6565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181019190915291505b5092915050565b60008390036110f457604051635740c67760e11b815260040160405180910390fd5b828114611114576040516303f7219d60e41b815260040160405180910390fd5b600080516020613220833981519152805460005b858110156114c857600087878381811061114457611144612ee6565b90506020020135905080600014801561115c57508281115b1561117a5760405163d751397d60e01b815260040160405180910390fd5b8084600401600088888681811061119357611193612ee6565b6111a99260206040909202019081019150612ec9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008888868181106111dd576111dd612ee6565b90506040020160200135815260200190815260200160002054146112145760405163711f88b160e11b815260040160405180910390fd5b60008981526003850160209081526040808320848452909152902086868481811061124157611241612ee6565b6112579260206040909202019081019150612ec9565b81546001600160a01b039081169116148015611291575086868481811061128057611280612ee6565b905060400201602001358160010154145b156112af5760405163c80df0cb60e01b815260040160405180910390fd5b600082815260018087016020526040909120015460ff1680156112db575080546001600160a01b031615155b156112f95760405163bd8a5e1560e01b815260040160405180910390fd5b6113038a836122e1565b86868481811061131557611315612ee6565b60008d81526003890160209081526040808320888452909152908190209102929092019190506113458282612f2b565b905050600087878581811061135c5761135c612ee6565b6113729260206040909202019081019150612ec9565b90506001816001600160a01b031662fdd58e338b8b8981811061139757611397612ee6565b905060400201602001356040518363ffffffff1660e01b81526004016113d29291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114139190612f82565b1015611432576040516335ba250d60e11b815260040160405180910390fd5b806001600160a01b031663f242432a33308b8b8981811061145557611455612ee6565b9050604002016020013560016040518563ffffffff1660e01b81526004016114809493929190612f9b565b600060405180830381600087803b15801561149a57600080fd5b505af11580156114ae573d6000803e3d6000fd5b5050505050505080806114c090612f12565b915050611128565b506114d2876123d8565b6114ee5760405162ecf30560e51b815260040160405180910390fd5b86336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f18861888860405161152a92919061300b565b60405180910390a350505050505050565b60006000805160206132208339815191526106fc565b600080516020613220833981519152805460609190806001600160401b0381111561157e5761157e612c56565b6040519080825280602002602001820160405280156115dc57816020015b6115c960405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b81526020019060019003908161159c5790505b50925060005b818110156116755760006115f7826001613044565b60008781526003860160209081526040808320848452825291829020825160608101845284815281546001600160a01b0316928101929092526001810154928201929092528751929350909187908590811061165557611655612ee6565b60200260200101819052505050808061166d90612f12565b9150506115e2565b505050919050565b600083821461169f576040516303f7219d60e41b815260040160405180910390fd5b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d438602052600080516020613220833981519152907f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9906117038261251f565b90506000816001600160401b0381111561171f5761171f612c56565b604051908082528060200260200182016040528015611748578160200160208202803683370190505b5090506000826001600160401b0381111561176557611765612c56565b6040519080825280602002602001820160405280156117aa57816020015b60408051808201909152600080825260208201528152602001906001900390816117835790505b50855490915060005b848110156118575760006117c78783612529565b9050808583815181106117dc576117dc612ee6565b60209081029190910181019190915260008f815260038a0182526040808220848352835290819020815180830190925280546001600160a01b031682526001015491810191909152845185908490811061183857611838612ee6565b602002602001018190525050808061184f90612f12565b9150506117b3565b5060005b8a8110156119395760008c8c8381811061187757611877612ee6565b90506020020135905080600014801561188f57508281115b156118ad5760405163d751397d60e01b815260040160405180910390fd5b6118b78782612535565b6118c15750611927565b808583815181106118d4576118d4612ee6565b6020026020010181815250508a8a838181106118f2576118f2612ee6565b9050604002018036038101906119089190613057565b84838151811061191a5761191a612ee6565b6020026020010181905250505b8061193181612f12565b91505061185b565b50606060005b84518110156119d6578185828151811061195b5761195b612ee6565b602002602001015185838151811061197557611975612ee6565b60200260200101516000015186848151811061199357611993612ee6565b6020026020010151602001516040516020016119b294939291906130d2565b604051602081830303815290604052915080806119ce90612f12565b91505061193f565b50805160208201206119ec906006890190612535565b159d9c50505050505050505050505050565b600080516020613220833981519152805460609190806001600160401b03811115611a2b57611a2b612c56565b604051908082528060200260200182016040528015611a7d57816020015b611a6a60408051606081018252600080825260208201819052909182015290565b815260200190600190039081611a495790505b50925060005b81811015611b32576000611a98826001613044565b6000818152600180870160209081526040928390208351606081018552815481529281015460ff808216151593850193909352949550919391928401916101009004166002811115611aec57611aec612aec565b6002811115611afd57611afd612aec565b81525050858381518110611b1357611b13612ee6565b6020026020010181905250508080611b2a90612f12565b915050611a83565b50505090565b6040516331a9108f60e11b815260048101839052829030908190636352211e90602401602060405180830381865afa158015611b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9c9190612f65565b6001600160a01b0316336001600160a01b031614611bcd5760405163aee05b5d60e01b815260040160405180910390fd5b82801580611be957506000805160206132208339815191525481115b15611c075760405163d751397d60e01b815260040160405180910390fd5b60008481527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43760205260409020600101546000805160206132208339815191529060ff1615611c695760405163bd8a5e1560e01b815260040160405180910390fd5b600086815260038201602090815260408083208884529091529020546001600160a01b0316611cab57604051632755285560e01b815260040160405180910390fd5b611cb586866122e1565b611cbe866123d8565b50604080516001808252818301909252600091602080830190803683370190505090508581600081518110611cf557611cf5612ee6565b60200260200101818152505086336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab638360405161152a9190612fd3565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f9190612f65565b6001600160a01b0316336001600160a01b031614611dd05760405163aee05b5d60e01b815260040160405180910390fd5b6000839003611df257604051635740c67760e11b815260040160405180910390fd5b600080516020613220833981519152805460005b85811015611eeb576000878783818110611e2257611e22612ee6565b9050602002013590508060001480611e3957508281115b15611e575760405163d751397d60e01b815260040160405180910390fd5b600081815260018086016020526040909120015460ff1615611e8c5760405163bd8a5e1560e01b815260040160405180910390fd5b600089815260038501602090815260408083208484529091529020546001600160a01b0316611ece57604051632755285560e01b815260040160405180910390fd5b611ed889826122e1565b5080611ee381612f12565b915050611e06565b50611ef5876123d8565b5086336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab63888860405161152a92919061300b565b60008051602061322083398151915280546001908290600090611f56908490613044565b9091555050805460008181526001808401602052604090912001805460ff198116881515908117835587929161ffff191661ff001990911617610100836002811115611fa457611fa4612aec565b0217905550600081815260018301602052604090208190558215611fcd57611fcd81858561086d565b336001600160a01b03167fc1ea46ff33b3d61e148e5bff5dfe54ccae9db30b899a3e7645618fb1e3d9dc1182888860405161200a93929190613113565b60405180910390a2505050505050565b61204760405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b5060009182527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43960209081526040808420838552825292839020835160608101855292835280546001600160a01b031691830191909152600101549181019190915290565b6120b6828261254d565b612117576120cc816001600160a01b0316612584565b6120d7836020612596565b6040516020016120e8929190613137565b60408051601f198184030181529082905262461bcd60e51b825261210e916004016131ac565b60405180910390fd5b5050565b60008051602061322083398151915260005b6000848152600583016020526040902054811015612283578260200135826005016000868152602001908152602001600020828154811061217057612170612ee6565b90600052602060002090600202016001015403612271576000848152600583016020526040902080546121a5906001906131df565b815481106121b5576121b5612ee6565b906000526020600020906002020182600501600086815260200190815260200160002082815481106121e9576121e9612ee6565b60009182526020808320845460029093020180546001600160a01b0319166001600160a01b0390931692909217825560019384015493909101929092558581526005840190915260409020805480612243576122436131f2565b60008281526020812060026000199093019283020180546001600160a01b0319168155600101559055612283565b8061227b81612f12565b91505061212d565b506004810160006122976020850185612ec9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008360200135815260200190815260200160002060009055505050565b600061042383836126e8565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d439602090815260408083208484529091529020805460008051602061322083398151915291906001600160a01b031680612341575050505050565b600180830154604051637921219560e11b81526001600160a01b0384169263f242432a92612376923092339291600401612f9b565b600060405180830381600087803b15801561239057600080fd5b505af11580156123a4573d6000803e3d6000fd5b505050600095865250505060030160209081526040808420928452919052812080546001600160a01b031916815560010155565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020526000805160206132208339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd960608361243d8361251f565b905060005b818110156124be5760006124568583612529565b60008981526003880160209081526040808320848452825291829020805460018201549351949550909361249893899387936001600160a01b031692016130d2565b6040516020818303038152906040529450505080806124b690612f12565b915050612442565b50815160208301206124d36006860182612535565b6000888152600887016020526040902054901596506124f690600687019061272b565b5061250460068601826122d5565b50600096875260089094016020525050604090932055919050565b6000610358825490565b60006104238383612737565b60008181526001830160205260408120541515610423565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206104239083612783565b60606103586001600160a01b03831660145b606060006125a5836002613208565b6125b0906002613044565b6001600160401b038111156125c7576125c7612c56565b6040519080825280601f01601f1916602001820160405280156125f1576020820181803683370190505b509050600360fc1b8160008151811061260c5761260c612ee6565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061263b5761263b612ee6565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156126c8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061268b5761268b612ee6565b1a60f81b8282815181106126a1576126a1612ee6565b60200101906001600160f81b031916908160001a90535060049490941c936000190161265a565b5083156104235760405163c913478560e01b815260040160405180910390fd5b6000818152600183016020526040812054610358575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b600061042383836127a5565b8154600090821061275b5760405163e637bf3b60e01b815260040160405180910390fd5b82600001828154811061277057612770612ee6565b9060005260206000200154905092915050565b6001600160a01b03811660009081526001830160205260408120541515610423565b600081815260018301602052604081205480156110cb578354600090859060001981019081106127d7576127d7612ee6565b90600052602060002001549050808560000160018403815481106127fd576127fd612ee6565b600091825260208083209091019290925591825260018601905260409020819055835484908061282f5761282f6131f2565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b60006020828403121561287157600080fd5b81356001600160e01b03198116811461042357600080fd5b60006040828403121561289b57600080fd5b50919050565b6000604082840312156128b357600080fd5b6104238383612889565b60008083601f8401126128cf57600080fd5b5081356001600160401b038111156128e657600080fd5b6020830191508360208260061b850101111561290157600080fd5b9250929050565b60008060006040848603121561291d57600080fd5b8335925060208401356001600160401b0381111561293a57600080fd5b612946868287016128bd565b9497909650939450505050565b60006020828403121561296557600080fd5b5035919050565b60008060006080848603121561298157600080fd5b83359250602084013591506129998560408601612889565b90509250925092565b600080604083850312156129b557600080fd5b50508035926020909101359150565b60008083601f8401126129d657600080fd5b5081356001600160401b038111156129ed57600080fd5b6020830191508360208260051b850101111561290157600080fd5b600080600080600060608688031215612a2057600080fd5b8535945060208601356001600160401b0380821115612a3e57600080fd5b612a4a89838a016129c4565b90965094506040880135915080821115612a6357600080fd5b50612a70888289016128bd565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b81811015612ae057612acd838551805182526020808201516001600160a01b031690830152604090810151910152565b9284019260609290920191600101612a9d565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b60038110612b2057634e487b7160e01b600052602160045260246000fd5b9052565b8051825260208101511515602083015260408101516103846040840182612b02565b6020808252825182820181905260009190848201906040850190845b81811015612ae057612b75838551612b24565b9284019260609290920191600101612b62565b606081016103588284612b24565b600080600060408486031215612bab57600080fd5b8335925060208401356001600160401b03811115612bc857600080fd5b612946868287016129c4565b60008060008060608587031215612bea57600080fd5b84358015158114612bfa57600080fd5b9350602085013560038110612c0e57600080fd5b925060408501356001600160401b03811115612c2957600080fd5b612c35878288016128bd565b95989497509550505050565b6001600160a01b038116811461070c57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c9457612c94612c56565b604052919050565b600082601f830112612cad57600080fd5b813560206001600160401b03821115612cc857612cc8612c56565b8160051b612cd7828201612c6c565b9283528481018201928281019087851115612cf157600080fd5b83870192505b84831015612d1057823582529183019190830190612cf7565b979650505050505050565b600082601f830112612d2c57600080fd5b81356001600160401b03811115612d4557612d45612c56565b612d58601f8201601f1916602001612c6c565b818152846020838601011115612d6d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612da257600080fd5b8535612dad81612c41565b94506020860135612dbd81612c41565b935060408601356001600160401b0380821115612dd957600080fd5b612de589838a01612c9c565b94506060880135915080821115612dfb57600080fd5b612e0789838a01612c9c565b93506080880135915080821115612e1d57600080fd5b50612e2a88828901612d1b565b9150509295509295909350565b815181526020808301516001600160a01b0316908201526040808301519082015260608101610358565b600080600080600060a08688031215612e7957600080fd5b8535612e8481612c41565b94506020860135612e9481612c41565b9350604086013592506060860135915060808601356001600160401b03811115612ebd57600080fd5b612e2a88828901612d1b565b600060208284031215612edb57600080fd5b813561042381612c41565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612f2457612f24612efc565b5060010190565b8135612f3681612c41565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b600060208284031215612f7757600080fd5b815161042381612c41565b600060208284031215612f9457600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6020808252825182820181905260009190848201906040850190845b81811015612ae057835183529284019291840191600101612fef565b6020808252810182905260006001600160fb1b0383111561302b57600080fd5b8260051b80856040850137919091016040019392505050565b8082018082111561035857610358612efc565b60006040828403121561306957600080fd5b604051604081018181106001600160401b038211171561308b5761308b612c56565b604052823561309981612c41565b81526020928301359281019290925250919050565b60005b838110156130c95781810151838201526020016130b1565b50506000910152565b600085516130e4818460208a016130ae565b919091019384525060609190911b6bffffffffffffffffffffffff191660208301526034820152605401919050565b83815282151560208201526060810161312f6040830184612b02565b949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161316f8160178501602088016130ae565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131a08160288401602088016130ae565b01602801949350505050565b60208152600082518060208401526131cb8160408501602087016130ae565b601f01601f19169190910160400192915050565b8181038181111561035857610358612efc565b634e487b7160e01b600052603160045260246000fd5b808202811582820484141761035857610358612efc56fef672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220f1e75d851b7e2048e626312901c39ad8e7925931938fdc5b3b500e3ce9aa200f64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80639e3ccb2a116100ad578063b9518c8d11610071578063b9518c8d1461028a578063b9e6a4121461029d578063bc197c81146102b0578063ef0bf7de146102e8578063f23a6e611461030857600080fd5b80639e3ccb2a1461020f578063a667d9d31461022f578063b1b2fef414610242578063b2025e4f14610257578063b512cffe1461027757600080fd5b8063633e2d5a116100f4578063633e2d5a1461019757806376356aad146101aa5780637f85db2d146101bd5780638aa5d1f7146101f45780639621ff251461020757600080fd5b806301ffc9a7146101265780632f8bd3c81461014e5780634274a1431461016f578063473bdb9814610184575b600080fd5b61013961013436600461285f565b610327565b60405190151581526020015b60405180910390f35b61016161015c3660046128a1565b61035e565b604051908152602001610145565b61018261017d366004612908565b610369565b005b610182610192366004612908565b610389565b6101616101a5366004612953565b61039f565b6101826101b836600461296c565b6103aa565b6101d06101cb3660046129a2565b610405565b6040805182516001600160a01b031681526020928301519281019290925201610145565b610182610202366004612a08565b61042a565b610161610489565b61022261021d366004612953565b610498565b6040516101459190612a81565b61013961023d366004612a08565b6104a3565b61024a6104bc565b6040516101459190612b46565b61026a610265366004612953565b6104c6565b6040516101459190612b88565b6101826102853660046129a2565b61056b565b610182610298366004612b96565b6105c4565b6101826102ab366004612bd4565b610616565b6102cf6102be366004612d8a565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610145565b6102fb6102f63660046129a2565b610633565b6040516101459190612e37565b6102cf610316366004612e61565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061035857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006103588261066a565b6103796103746106d8565b610702565b61038483838361070f565b505050565b6103946103746106d8565b61038483838361086d565b600061035882610b95565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036103ed57604051635db5c7cd60e11b815260040160405180910390fd5b600281556103fc848484610c04565b60019055505050565b60408051808201909152600080825260208201526104238383611008565b9392505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361046d57604051635db5c7cd60e11b815260040160405180910390fd5b6002815561047e86868686866110d2565b600190555050505050565b600061049361153b565b905090565b606061035882611551565b60006104b2868686868661167d565b9695505050505050565b60606104936119fe565b6104e760408051606081018252600080825260208201819052909182015290565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d437602052604090206040805160608101825282548152600183015460ff8082161515602084015291939284019161010090910416600281111561055157610551612aec565b600281111561056257610562612aec565b90525092915050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036105ae57604051635db5c7cd60e11b815260040160405180910390fd5b600281556105bc8383611b38565b600190555050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361060757604051635db5c7cd60e11b815260040160405180910390fd5b600281556103fc848484611d3b565b6106216103746106d8565b61062d84848484611f32565b50505050565b61066060405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b610423838361201a565b60007ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a8161069b6020850185612ec9565b6001600160a01b03166001600160a01b03168152602001908152602001600020600083602001358152602001908152602001600020549050919050565b60007ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725b54919050565b61070c81336120ac565b50565b8280158061072b57506000805160206132208339815191525481115b156107495760405163d751397d60e01b815260040160405180910390fd5b60008051602061322083398151915260005b83811015610830578582600401600087878581811061077c5761077c612ee6565b6107929260206040909202019081019150612ec9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008787858181106107c6576107c6612ee6565b90506040020160200135815260200190815260200160002054146107fd5760405163072f859160e31b815260040160405180910390fd5b61081e8686868481811061081357610813612ee6565b90506040020161211b565b8061082881612f12565b91505061075b565b5060405185815233907ff69b53fa14ee16895edbe90d00c7b7af9214baf87c69bf5594126b114c9337ed9060200160405180910390a25050505050565b8280158061088957506000805160206132208339815191525481115b156108a75760405163d751397d60e01b815260040160405180910390fd5b60008051602061322083398151915260005b83811015610b2f576108fb8585838181106108d6576108d6612ee6565b6108ec9260206040909202019081019150612ec9565b6001600160a01b03163b151590565b61091857604051633c65e02b60e21b815260040160405180910390fd5b600082600401600087878581811061093257610932612ee6565b6109489260206040909202019081019150612ec9565b6001600160a01b03166001600160a01b03168152602001908152602001600020600087878581811061097c5761097c612ee6565b905060400201602001358152602001908152602001600020541115610a4b57858260040160008787858181106109b4576109b4612ee6565b6109ca9260206040909202019081019150612ec9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008787858181106109fe576109fe612ee6565b9050604002016020013581526020019081526020016000205403610a3557604051634ea88b8b60e01b815260040160405180910390fd5b610a4b8686868481811061081357610813612ee6565b60008681526005830160205260409020858583818110610a6d57610a6d612ee6565b835460018101855560009485526020909420604090910292909201926002029091019050610a9b8282612f2b565b505085826004016000878785818110610ab657610ab6612ee6565b610acc9260206040909202019081019150612ec9565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610b0057610b00612ee6565b905060400201602001358152602001908152602001600020819055508080610b2790612f12565b9150506108b9565b506000858152600182810160205260408220015461083091879160028086019291610100900460ff1690811115610b6857610b68612aec565b6002811115610b7957610b79612aec565b81526020019081526020016000206122d590919063ffffffff16565b600081801580610bb357506000805160206132208339815191525481115b15610bd15760405163d751397d60e01b815260040160405180910390fd5b505060009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b602052604090205490565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c689190612f65565b6001600160a01b0316336001600160a01b031614610c995760405163aee05b5d60e01b815260040160405180910390fd5b83801580610cb557506000805160206132208339815191525481115b15610cd35760405163d751397d60e01b815260040160405180910390fd5b600080516020613220833981519152857ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a6000610d136020890189612ec9565b6001600160a01b03166001600160a01b031681526020019081526020016000206000876020013581526020019081526020016000205414610d675760405163711f88b160e11b815260040160405180910390fd5b60008781526003820160209081526040808320898452825280832060018086019093529220015460ff168015610da6575080546001600160a01b031615155b15610dc45760405163bd8a5e1560e01b815260040160405180910390fd5b610dce88886122e1565b6000610ddd6020880188612ec9565b604051627eeac760e11b8152336004820152602089013560248201529091506001906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e539190612f82565b1015610e72576040516335ba250d60e11b815260040160405180910390fd5b610e7f6020880188612ec9565b82546001600160a01b039081169116148015610ea2575086602001358260010154145b15610ec05760405163c80df0cb60e01b815260040160405180910390fd5b604051637921219560e11b81526001600160a01b0382169063f242432a90610ef7903390309060208d013590600190600401612f9b565b600060405180830381600087803b158015610f1157600080fd5b505af1158015610f25573d6000803e3d6000fd5b50505060008a815260038501602090815260408083208c84529091529020889150610f508282612f2b565b905050610f5c896123d8565b610f785760405162ecf30560e51b815260040160405180910390fd5b604080516001808252818301909252600091602080830190803683370190505090508881600081518110610fae57610fae612ee6565b60200260200101818152505089336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f1886183604051610ff49190612fd3565b60405180910390a350505050505050505050565b60408051808201909152600080825260208201528280158061103857506000805160206132208339815191525481115b156110565760405163d751397d60e01b815260040160405180910390fd5b60008481527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b6020526040902080548490811061109557611095612ee6565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181019190915291505b5092915050565b60008390036110f457604051635740c67760e11b815260040160405180910390fd5b828114611114576040516303f7219d60e41b815260040160405180910390fd5b600080516020613220833981519152805460005b858110156114c857600087878381811061114457611144612ee6565b90506020020135905080600014801561115c57508281115b1561117a5760405163d751397d60e01b815260040160405180910390fd5b8084600401600088888681811061119357611193612ee6565b6111a99260206040909202019081019150612ec9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008888868181106111dd576111dd612ee6565b90506040020160200135815260200190815260200160002054146112145760405163711f88b160e11b815260040160405180910390fd5b60008981526003850160209081526040808320848452909152902086868481811061124157611241612ee6565b6112579260206040909202019081019150612ec9565b81546001600160a01b039081169116148015611291575086868481811061128057611280612ee6565b905060400201602001358160010154145b156112af5760405163c80df0cb60e01b815260040160405180910390fd5b600082815260018087016020526040909120015460ff1680156112db575080546001600160a01b031615155b156112f95760405163bd8a5e1560e01b815260040160405180910390fd5b6113038a836122e1565b86868481811061131557611315612ee6565b60008d81526003890160209081526040808320888452909152908190209102929092019190506113458282612f2b565b905050600087878581811061135c5761135c612ee6565b6113729260206040909202019081019150612ec9565b90506001816001600160a01b031662fdd58e338b8b8981811061139757611397612ee6565b905060400201602001356040518363ffffffff1660e01b81526004016113d29291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114139190612f82565b1015611432576040516335ba250d60e11b815260040160405180910390fd5b806001600160a01b031663f242432a33308b8b8981811061145557611455612ee6565b9050604002016020013560016040518563ffffffff1660e01b81526004016114809493929190612f9b565b600060405180830381600087803b15801561149a57600080fd5b505af11580156114ae573d6000803e3d6000fd5b5050505050505080806114c090612f12565b915050611128565b506114d2876123d8565b6114ee5760405162ecf30560e51b815260040160405180910390fd5b86336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f18861888860405161152a92919061300b565b60405180910390a350505050505050565b60006000805160206132208339815191526106fc565b600080516020613220833981519152805460609190806001600160401b0381111561157e5761157e612c56565b6040519080825280602002602001820160405280156115dc57816020015b6115c960405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b81526020019060019003908161159c5790505b50925060005b818110156116755760006115f7826001613044565b60008781526003860160209081526040808320848452825291829020825160608101845284815281546001600160a01b0316928101929092526001810154928201929092528751929350909187908590811061165557611655612ee6565b60200260200101819052505050808061166d90612f12565b9150506115e2565b505050919050565b600083821461169f576040516303f7219d60e41b815260040160405180910390fd5b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d438602052600080516020613220833981519152907f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9906117038261251f565b90506000816001600160401b0381111561171f5761171f612c56565b604051908082528060200260200182016040528015611748578160200160208202803683370190505b5090506000826001600160401b0381111561176557611765612c56565b6040519080825280602002602001820160405280156117aa57816020015b60408051808201909152600080825260208201528152602001906001900390816117835790505b50855490915060005b848110156118575760006117c78783612529565b9050808583815181106117dc576117dc612ee6565b60209081029190910181019190915260008f815260038a0182526040808220848352835290819020815180830190925280546001600160a01b031682526001015491810191909152845185908490811061183857611838612ee6565b602002602001018190525050808061184f90612f12565b9150506117b3565b5060005b8a8110156119395760008c8c8381811061187757611877612ee6565b90506020020135905080600014801561188f57508281115b156118ad5760405163d751397d60e01b815260040160405180910390fd5b6118b78782612535565b6118c15750611927565b808583815181106118d4576118d4612ee6565b6020026020010181815250508a8a838181106118f2576118f2612ee6565b9050604002018036038101906119089190613057565b84838151811061191a5761191a612ee6565b6020026020010181905250505b8061193181612f12565b91505061185b565b50606060005b84518110156119d6578185828151811061195b5761195b612ee6565b602002602001015185838151811061197557611975612ee6565b60200260200101516000015186848151811061199357611993612ee6565b6020026020010151602001516040516020016119b294939291906130d2565b604051602081830303815290604052915080806119ce90612f12565b91505061193f565b50805160208201206119ec906006890190612535565b159d9c50505050505050505050505050565b600080516020613220833981519152805460609190806001600160401b03811115611a2b57611a2b612c56565b604051908082528060200260200182016040528015611a7d57816020015b611a6a60408051606081018252600080825260208201819052909182015290565b815260200190600190039081611a495790505b50925060005b81811015611b32576000611a98826001613044565b6000818152600180870160209081526040928390208351606081018552815481529281015460ff808216151593850193909352949550919391928401916101009004166002811115611aec57611aec612aec565b6002811115611afd57611afd612aec565b81525050858381518110611b1357611b13612ee6565b6020026020010181905250508080611b2a90612f12565b915050611a83565b50505090565b6040516331a9108f60e11b815260048101839052829030908190636352211e90602401602060405180830381865afa158015611b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9c9190612f65565b6001600160a01b0316336001600160a01b031614611bcd5760405163aee05b5d60e01b815260040160405180910390fd5b82801580611be957506000805160206132208339815191525481115b15611c075760405163d751397d60e01b815260040160405180910390fd5b60008481527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43760205260409020600101546000805160206132208339815191529060ff1615611c695760405163bd8a5e1560e01b815260040160405180910390fd5b600086815260038201602090815260408083208884529091529020546001600160a01b0316611cab57604051632755285560e01b815260040160405180910390fd5b611cb586866122e1565b611cbe866123d8565b50604080516001808252818301909252600091602080830190803683370190505090508581600081518110611cf557611cf5612ee6565b60200260200101818152505086336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab638360405161152a9190612fd3565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f9190612f65565b6001600160a01b0316336001600160a01b031614611dd05760405163aee05b5d60e01b815260040160405180910390fd5b6000839003611df257604051635740c67760e11b815260040160405180910390fd5b600080516020613220833981519152805460005b85811015611eeb576000878783818110611e2257611e22612ee6565b9050602002013590508060001480611e3957508281115b15611e575760405163d751397d60e01b815260040160405180910390fd5b600081815260018086016020526040909120015460ff1615611e8c5760405163bd8a5e1560e01b815260040160405180910390fd5b600089815260038501602090815260408083208484529091529020546001600160a01b0316611ece57604051632755285560e01b815260040160405180910390fd5b611ed889826122e1565b5080611ee381612f12565b915050611e06565b50611ef5876123d8565b5086336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab63888860405161152a92919061300b565b60008051602061322083398151915280546001908290600090611f56908490613044565b9091555050805460008181526001808401602052604090912001805460ff198116881515908117835587929161ffff191661ff001990911617610100836002811115611fa457611fa4612aec565b0217905550600081815260018301602052604090208190558215611fcd57611fcd81858561086d565b336001600160a01b03167fc1ea46ff33b3d61e148e5bff5dfe54ccae9db30b899a3e7645618fb1e3d9dc1182888860405161200a93929190613113565b60405180910390a2505050505050565b61204760405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b5060009182527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43960209081526040808420838552825292839020835160608101855292835280546001600160a01b031691830191909152600101549181019190915290565b6120b6828261254d565b612117576120cc816001600160a01b0316612584565b6120d7836020612596565b6040516020016120e8929190613137565b60408051601f198184030181529082905262461bcd60e51b825261210e916004016131ac565b60405180910390fd5b5050565b60008051602061322083398151915260005b6000848152600583016020526040902054811015612283578260200135826005016000868152602001908152602001600020828154811061217057612170612ee6565b90600052602060002090600202016001015403612271576000848152600583016020526040902080546121a5906001906131df565b815481106121b5576121b5612ee6565b906000526020600020906002020182600501600086815260200190815260200160002082815481106121e9576121e9612ee6565b60009182526020808320845460029093020180546001600160a01b0319166001600160a01b0390931692909217825560019384015493909101929092558581526005840190915260409020805480612243576122436131f2565b60008281526020812060026000199093019283020180546001600160a01b0319168155600101559055612283565b8061227b81612f12565b91505061212d565b506004810160006122976020850185612ec9565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008360200135815260200190815260200160002060009055505050565b600061042383836126e8565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d439602090815260408083208484529091529020805460008051602061322083398151915291906001600160a01b031680612341575050505050565b600180830154604051637921219560e11b81526001600160a01b0384169263f242432a92612376923092339291600401612f9b565b600060405180830381600087803b15801561239057600080fd5b505af11580156123a4573d6000803e3d6000fd5b505050600095865250505060030160209081526040808420928452919052812080546001600160a01b031916815560010155565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020526000805160206132208339815191527f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd960608361243d8361251f565b905060005b818110156124be5760006124568583612529565b60008981526003880160209081526040808320848452825291829020805460018201549351949550909361249893899387936001600160a01b031692016130d2565b6040516020818303038152906040529450505080806124b690612f12565b915050612442565b50815160208301206124d36006860182612535565b6000888152600887016020526040902054901596506124f690600687019061272b565b5061250460068601826122d5565b50600096875260089094016020525050604090932055919050565b6000610358825490565b60006104238383612737565b60008181526001830160205260408120541515610423565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206104239083612783565b60606103586001600160a01b03831660145b606060006125a5836002613208565b6125b0906002613044565b6001600160401b038111156125c7576125c7612c56565b6040519080825280601f01601f1916602001820160405280156125f1576020820181803683370190505b509050600360fc1b8160008151811061260c5761260c612ee6565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061263b5761263b612ee6565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156126c8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061268b5761268b612ee6565b1a60f81b8282815181106126a1576126a1612ee6565b60200101906001600160f81b031916908160001a90535060049490941c936000190161265a565b5083156104235760405163c913478560e01b815260040160405180910390fd5b6000818152600183016020526040812054610358575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b600061042383836127a5565b8154600090821061275b5760405163e637bf3b60e01b815260040160405180910390fd5b82600001828154811061277057612770612ee6565b9060005260206000200154905092915050565b6001600160a01b03811660009081526001830160205260408120541515610423565b600081815260018301602052604081205480156110cb578354600090859060001981019081106127d7576127d7612ee6565b90600052602060002001549050808560000160018403815481106127fd576127fd612ee6565b600091825260208083209091019290925591825260018601905260409020819055835484908061282f5761282f6131f2565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b60006020828403121561287157600080fd5b81356001600160e01b03198116811461042357600080fd5b60006040828403121561289b57600080fd5b50919050565b6000604082840312156128b357600080fd5b6104238383612889565b60008083601f8401126128cf57600080fd5b5081356001600160401b038111156128e657600080fd5b6020830191508360208260061b850101111561290157600080fd5b9250929050565b60008060006040848603121561291d57600080fd5b8335925060208401356001600160401b0381111561293a57600080fd5b612946868287016128bd565b9497909650939450505050565b60006020828403121561296557600080fd5b5035919050565b60008060006080848603121561298157600080fd5b83359250602084013591506129998560408601612889565b90509250925092565b600080604083850312156129b557600080fd5b50508035926020909101359150565b60008083601f8401126129d657600080fd5b5081356001600160401b038111156129ed57600080fd5b6020830191508360208260051b850101111561290157600080fd5b600080600080600060608688031215612a2057600080fd5b8535945060208601356001600160401b0380821115612a3e57600080fd5b612a4a89838a016129c4565b90965094506040880135915080821115612a6357600080fd5b50612a70888289016128bd565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b81811015612ae057612acd838551805182526020808201516001600160a01b031690830152604090810151910152565b9284019260609290920191600101612a9d565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b60038110612b2057634e487b7160e01b600052602160045260246000fd5b9052565b8051825260208101511515602083015260408101516103846040840182612b02565b6020808252825182820181905260009190848201906040850190845b81811015612ae057612b75838551612b24565b9284019260609290920191600101612b62565b606081016103588284612b24565b600080600060408486031215612bab57600080fd5b8335925060208401356001600160401b03811115612bc857600080fd5b612946868287016129c4565b60008060008060608587031215612bea57600080fd5b84358015158114612bfa57600080fd5b9350602085013560038110612c0e57600080fd5b925060408501356001600160401b03811115612c2957600080fd5b612c35878288016128bd565b95989497509550505050565b6001600160a01b038116811461070c57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c9457612c94612c56565b604052919050565b600082601f830112612cad57600080fd5b813560206001600160401b03821115612cc857612cc8612c56565b8160051b612cd7828201612c6c565b9283528481018201928281019087851115612cf157600080fd5b83870192505b84831015612d1057823582529183019190830190612cf7565b979650505050505050565b600082601f830112612d2c57600080fd5b81356001600160401b03811115612d4557612d45612c56565b612d58601f8201601f1916602001612c6c565b818152846020838601011115612d6d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612da257600080fd5b8535612dad81612c41565b94506020860135612dbd81612c41565b935060408601356001600160401b0380821115612dd957600080fd5b612de589838a01612c9c565b94506060880135915080821115612dfb57600080fd5b612e0789838a01612c9c565b93506080880135915080821115612e1d57600080fd5b50612e2a88828901612d1b565b9150509295509295909350565b815181526020808301516001600160a01b0316908201526040808301519082015260608101610358565b600080600080600060a08688031215612e7957600080fd5b8535612e8481612c41565b94506020860135612e9481612c41565b9350604086013592506060860135915060808601356001600160401b03811115612ebd57600080fd5b612e2a88828901612d1b565b600060208284031215612edb57600080fd5b813561042381612c41565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612f2457612f24612efc565b5060010190565b8135612f3681612c41565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b600060208284031215612f7757600080fd5b815161042381612c41565b600060208284031215612f9457600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6020808252825182820181905260009190848201906040850190845b81811015612ae057835183529284019291840191600101612fef565b6020808252810182905260006001600160fb1b0383111561302b57600080fd5b8260051b80856040850137919091016040019392505050565b8082018082111561035857610358612efc565b60006040828403121561306957600080fd5b604051604081018181106001600160401b038211171561308b5761308b612c56565b604052823561309981612c41565b81526020928301359281019290925250919050565b60005b838110156130c95781810151838201526020016130b1565b50506000910152565b600085516130e4818460208a016130ae565b919091019384525060609190911b6bffffffffffffffffffffffff191660208301526034820152605401919050565b83815282151560208201526060810161312f6040830184612b02565b949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161316f8160178501602088016130ae565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131a08160288401602088016130ae565b01602801949350505050565b60208152600082518060208401526131cb8160408501602087016130ae565b601f01601f19169190910160400192915050565b8181038181111561035857610358612efc565b634e487b7160e01b600052603160045260246000fd5b808202811582820484141761035857610358612efc56fef672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220f1e75d851b7e2048e626312901c39ad8e7925931938fdc5b3b500e3ce9aa200f64736f6c63430008130033",
  "devdoc": {
    "details": "This contract is responsible for managing the inventory system for the Arcadians using slots.  It defines the functionality to equip and unequip items to Arcadians, check if a combination of items  are unique, and retrieve the inventory slots and allowed items for a slot.  This contract also implements ERC1155Holder to handle ERC1155 token transfers This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.",
    "kind": "dev",
    "methods": {
      "allowItemsInSlot(uint256,(address,uint256)[])": {
        "params": {
          "items": "The list of items to allow in the slot",
          "slotId": "The slot id"
        }
      },
      "allowedItem(uint256,uint256)": {
        "params": {
          "index": "The index of the item",
          "slotId": "The slot id to query"
        },
        "returns": {
          "_0": "A list of all the items that are allowed in the slot"
        }
      },
      "allowedSlot((address,uint256))": {
        "params": {
          "item": "The item to check"
        },
        "returns": {
          "_0": "The allowed slot id for the item. Slots are 1-indexed."
        }
      },
      "createSlot(bool,uint8,(address,uint256)[])": {
        "details": "This function is only accessible to the manager roleSlots are 1-indexed",
        "params": {
          "category": "The category of the slot",
          "items": "The list of items to allow in the slot",
          "permanent": "Whether or not the slot can be unequipped once equipped"
        }
      },
      "disallowItemsInSlot(uint256,(address,uint256)[])": {
        "params": {
          "items": "The list of items to disallow in the slot",
          "slotId": "The ID of the inventory slot"
        }
      },
      "equip(uint256,uint256,(address,uint256))": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to equip the item for",
          "item": "The item to equip in the slot",
          "slotId": "The slot id in which the items will be equipped"
        }
      },
      "equipBatch(uint256,uint256[],(address,uint256)[])": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to equip the items for",
          "items": "An array of items to equip in the corresponding slots",
          "slotsIds": "An array of slot ids to equip the items"
        }
      },
      "equipped(uint256,uint256)": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query",
          "slotId": "The slot id to query"
        }
      },
      "equippedAll(uint256)": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query"
        }
      },
      "isArcadianUnique(uint256,uint256[],(address,uint256)[])": {
        "details": "The uniqueness is calculated using the existent arcadian items and the input items as wellOnly items equipped in 'base' category slots are considered for uniqueness",
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query",
          "items": "An array of items to check for uniqueness after \"equipped\" over the existent arcadian items.",
          "slotsIds": "An array of slot ids"
        }
      },
      "numAllowedItems(uint256)": {
        "params": {
          "slotId": "The slot id to check"
        },
        "returns": {
          "_0": "A list of all the items that are allowed in the slot"
        }
      },
      "numSlots()": {
        "details": "Slots are 1-indexed",
        "returns": {
          "_0": "The number of inventory slots "
        }
      },
      "slot(uint256)": {
        "details": "Slots are 1-indexed",
        "params": {
          "slotId": "The ID of the inventory slot"
        },
        "returns": {
          "existentSlot": "The details of the inventory slot"
        }
      },
      "slotsAll()": {
        "details": "Slots are 1-indexed",
        "returns": {
          "existentSlots": "The details of all the inventory slots"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unequip(uint256,uint256)": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to equip the item for",
          "slotId": "The slot id in which the item will be unequipped"
        }
      },
      "unequipBatch(uint256,uint256[])": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to equip the item for",
          "slotIds": "The slots ids in which the items will be unequipped"
        }
      }
    },
    "title": "InventoryFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowItemsInSlot(uint256,(address,uint256)[])": {
        "notice": "Adds items to the list of allowed items for an inventory slot"
      },
      "allowedItem(uint256,uint256)": {
        "notice": "Returns the allowed item for a given slot and the index"
      },
      "allowedSlot((address,uint256))": {
        "notice": "Returns the allowed slot for a given item"
      },
      "createSlot(bool,uint8,(address,uint256)[])": {
        "notice": "Creates a new inventory slot"
      },
      "disallowItemsInSlot(uint256,(address,uint256)[])": {
        "notice": "Removes items from the list of allowed items"
      },
      "equip(uint256,uint256,(address,uint256))": {
        "notice": "Equips a single item to a given slot for a specified Arcadian NFT"
      },
      "equipBatch(uint256,uint256[],(address,uint256)[])": {
        "notice": "Equips multiple items to multiple slots for a specified Arcadian NFT"
      },
      "equipped(uint256,uint256)": {
        "notice": "Retrieves the equipped item in a slot for a specified Arcadian NFT"
      },
      "equippedAll(uint256)": {
        "notice": "Retrieves all the equipped items for a specified Arcadian NFT"
      },
      "isArcadianUnique(uint256,uint256[],(address,uint256)[])": {
        "notice": "Indicates if a list of items applied to an the arcadian is unique"
      },
      "numAllowedItems(uint256)": {
        "notice": "Returns the number of allowed items for a given slot"
      },
      "numSlots()": {
        "notice": "Returns the number of inventory slots"
      },
      "slot(uint256)": {
        "notice": "Returns the details of an inventory slot given its ID"
      },
      "slotsAll()": {
        "notice": "Returns the details of all the existent slots"
      },
      "unequip(uint256,uint256)": {
        "notice": "Unequips the item equipped in a given slot for a specified Arcadian NFT"
      },
      "unequipBatch(uint256,uint256[])": {
        "notice": "Unequips the items equipped in multiple slots for a specified Arcadian NFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}