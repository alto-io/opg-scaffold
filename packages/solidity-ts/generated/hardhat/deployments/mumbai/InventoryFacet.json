{
  "address": "0xcC7C4E24a02268e0DD01f3140c6E41a4DEbd9a89",
  "abi": [
    {
      "inputs": [],
      "name": "ERC1155Base__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BurnExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BurnFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__ERC1155ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__ERC1155ReceiverRejected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__TransferExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldArcadiansAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newArcadiansAddress",
          "type": "address"
        }
      ],
      "name": "ArcadiansAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "ItemAllowedInSlot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "ItemEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ItemUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "unequippable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "SlotCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "allowItemInSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "allowedItemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unequippable",
          "type": "bool"
        }
      ],
      "name": "createSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "equip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "equipBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "equipped",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "itemAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.EquippedItem",
          "name": "item",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        }
      ],
      "name": "equippedAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "itemAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.EquippedItem[]",
          "name": "item",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArcadiansAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "getItemAllowedSlots",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "getSlot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "capacity",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isUnequippable",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "allowedItemsIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct InventoryStorage.Slot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSlots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newArcadiansAddress",
          "type": "address"
        }
      ],
      "name": "setArcadiansAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unequipAll",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unequip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        }
      ],
      "name": "unequipAllItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "unequipAll",
          "type": "bool[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "unequipBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9dd36dcd98a3757018f0eb749a33f990993fa07991ffe0d15a2bf31c2fb042e6",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0xcC7C4E24a02268e0DD01f3140c6E41a4DEbd9a89",
    "transactionIndex": 1,
    "gasUsed": "2898602",
    "logsBloom": "0x00000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000200000000000100000000004000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100040000000000000000000000000000000000000000001000000000000000000000000100000",
    "blockHash": "0x2db77665f5cafdaf30255fbfcaacbe54987369a15b912bec30135c56a697d6e0",
    "transactionHash": "0x9dd36dcd98a3757018f0eb749a33f990993fa07991ffe0d15a2bf31c2fb042e6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 33471081,
        "transactionHash": "0x9dd36dcd98a3757018f0eb749a33f990993fa07991ffe0d15a2bf31c2fb042e6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000019bea86c2c10ab800000000000000000000000000000000000000000000000012efe1a2b3579d11000000000000000000000000000000000000000000002f045e00f2c20628c8150000000000000000000000000000000000000000000000001153f71bf0969259000000000000000000000000000000000000000000002f045f9cdd48c8e9d2cd",
        "logIndex": 2,
        "blockHash": "0x2db77665f5cafdaf30255fbfcaacbe54987369a15b912bec30135c56a697d6e0"
      }
    ],
    "blockNumber": 33471081,
    "cumulativeGasUsed": "3051748",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "c21516edc60155c906660e263915c827",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC1155Base__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BurnExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BurnFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__ERC1155ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__ERC1155ReceiverRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__TransferExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldArcadiansAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newArcadiansAddress\",\"type\":\"address\"}],\"name\":\"ArcadiansAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"ItemAllowedInSlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"ItemEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unequippable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"SlotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"allowItemInSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"allowedItemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unequippable\",\"type\":\"bool\"}],\"name\":\"createSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"equipBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"equipped\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.EquippedItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"}],\"name\":\"equippedAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.EquippedItem[]\",\"name\":\"item\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArcadiansAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getItemAllowedSlots\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"getSlot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnequippable\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"allowedItemsIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct InventoryStorage.Slot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSlots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newArcadiansAddress\",\"type\":\"address\"}],\"name\":\"setArcadiansAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unequipAll\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"}],\"name\":\"unequipAllItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"unequipAll\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"unequipBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/inventory/InventoryFacet.sol\":\"InventoryFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8688f1b897b4ddde7ebd48ee5ce1063f56d8af8ea3aa80aa1df12ff669d133a4\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155Receiver } from '../../../interfaces/IERC1155Receiver.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC1155BaseInternal } from './IERC1155BaseInternal.sol';\\nimport { ERC1155BaseStorage } from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155BaseInternal {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(\\n        address account,\\n        uint256 id\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0))\\n            revert ERC1155Base__BalanceQueryZeroAddress();\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__MintToZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        ERC1155BaseStorage.layout().balances[id][account] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__MintToZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            balances[ids[i]][account] += amounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__BurnFromZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            ''\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n\\n        unchecked {\\n            if (amount > balances[account])\\n                revert ERC1155Base__BurnExceedsBalance();\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__BurnFromZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                if (amounts[i] > balances[id][account])\\n                    revert ERC1155Base__BurnExceedsBalance();\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (recipient == address(0))\\n            revert ERC1155Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            sender,\\n            recipient,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            if (amount > senderBalance)\\n                revert ERC1155Base__TransferExceedsBalance();\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (recipient == address(0))\\n            revert ERC1155Base__TransferToZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n\\n                if (amount > senderBalance)\\n                    revert ERC1155Base__TransferExceedsBalance();\\n\\n                balances[token][sender] = senderBalance - amount;\\n\\n                i++;\\n            }\\n\\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(\\n        uint256 element\\n    ) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector)\\n                    revert ERC1155Base__ERC1155ReceiverRejected();\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert ERC1155Base__ERC1155ReceiverNotImplemented();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\\n                ) revert ERC1155Base__ERC1155ReceiverRejected();\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert ERC1155Base__ERC1155ReceiverNotImplemented();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x347e1d1bbff3001b09b0ac140f8d0ff8d526d34e310610c7fe31cdbf418059ed\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bc1fde9bab7b338312099733e21c7bbbc44597fd25970bd68187eb65e622ef1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/IERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155Internal } from '../../../interfaces/IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 base interface\\n */\\ninterface IERC1155BaseInternal is IERC1155Internal {\\n    error ERC1155Base__ArrayLengthMismatch();\\n    error ERC1155Base__BalanceQueryZeroAddress();\\n    error ERC1155Base__NotOwnerOrApproved();\\n    error ERC1155Base__SelfApproval();\\n    error ERC1155Base__BurnExceedsBalance();\\n    error ERC1155Base__BurnFromZeroAddress();\\n    error ERC1155Base__ERC1155ReceiverRejected();\\n    error ERC1155Base__ERC1155ReceiverNotImplemented();\\n    error ERC1155Base__MintToZeroAddress();\\n    error ERC1155Base__TransferExceedsBalance();\\n    error ERC1155Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0xece161d9a4ab29e5b539b8b0f808660fcdd6b8c35bb1920dd99acdb5c576efbc\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/inventory/InventoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Crated based in the following work:\\n * Authors: Moonstream DAO (engineering@moonstream.to)\\n * GitHub: https://github.com/G7DAO/contracts\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ERC1155Holder } from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport { ERC721Holder } from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { InventoryInternal } from \\\"./InventoryInternal.sol\\\";\\n\\ncontract InventoryFacet is\\n    ERC721Holder,\\n    ERC1155Holder,\\n    ReentrancyGuard,\\n    InventoryInternal\\n{\\n\\n    function setArcadiansAddress(address newArcadiansAddress) public onlyManager {\\n        _setArcadiansAddress(newArcadiansAddress);\\n    }\\n\\n    function getArcadiansAddress() external view returns (address) {\\n        return _getArcadiansAddress();\\n    }\\n\\n    function numSlots() external view returns (uint) {\\n        return _numSlots();\\n    }\\n\\n    function getSlot(uint slot) external view returns (InventoryStorage.Slot memory) {\\n        return _getSlot(slot);\\n    }\\n\\n    function createSlot(\\n        address itemAddress,\\n        uint[] calldata allowedItemIds,\\n        uint capacity,\\n        bool unequippable\\n    ) external onlyManager {\\n        _createSlot(itemAddress, allowedItemIds, capacity, unequippable);\\n    }\\n\\n    function allowItemInSlot(\\n        address itemAddress,\\n        uint itemId,\\n        uint slot\\n    ) external {\\n        _allowItemInSlot(itemAddress, itemId, slot);\\n    }\\n\\n    function getItemAllowedSlots(address itemAddress, uint itemId) external view returns (uint[] memory) {\\n        return _getItemAllowedSlots(itemAddress, itemId);\\n    }\\n\\n    function equip(\\n        uint arcadianId,\\n        address itemAddress,\\n        uint itemId,\\n        uint amount,\\n        uint slot\\n    ) external nonReentrant {\\n        _equip(arcadianId, itemAddress, itemId, amount, slot);\\n    }\\n\\n    function equipBatch(\\n        uint arcadianId,\\n        address itemAddress,\\n        uint[] calldata itemIds,\\n        uint[] calldata amounts,\\n        uint[] calldata slots\\n    ) external nonReentrant {\\n        _equipBatch(arcadianId, itemAddress, itemIds, amounts, slots);\\n    }\\n\\n    function unequip(\\n        uint arcadianId,\\n        uint slot,\\n        bool unequipAll,\\n        uint amount\\n    ) external nonReentrant {\\n        _unequip(arcadianId, slot, unequipAll, amount);\\n    }\\n\\n    function unequipBatch(\\n        uint arcadianId,\\n        uint[] calldata slots,\\n        bool[] calldata unequipAll,\\n        uint[] calldata amounts\\n    ) external {\\n        _unequipBatch(arcadianId, slots, unequipAll, amounts);\\n    }\\n\\n    function unequipAllItems(\\n        uint arcadianId\\n    ) external {\\n        _unequipAllItems(arcadianId);\\n    }\\n\\n    function equipped(\\n        uint arcadianId,\\n        uint slot\\n    ) external view returns (InventoryStorage.EquippedItem memory item) {\\n        return _equipped(arcadianId, slot);\\n    }\\n\\n    function equippedAll(\\n        uint arcadianId\\n    ) external view returns (InventoryStorage.EquippedItem[] memory item) {\\n        return _equippedAll(arcadianId);\\n    }\\n}\",\"keccak256\":\"0x312c34f3cde8ad5b300b0f5e8c8f68043893346b2170be26797736284f398b19\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { ERC1155BaseInternal } from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\\\";\\nimport { AddressUtils } from \\\"@solidstate/contracts/utils/AddressUtils.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\n\\ncontract InventoryInternal is\\n    ReentrancyGuard,\\n    RolesInternal,\\n    ERC1155BaseInternal\\n{\\n\\n    event ArcadiansAddressChanged(address indexed oldArcadiansAddress, address indexed newArcadiansAddress);\\n\\n    event ItemAllowedInSlot(\\n        address indexed by, \\n        address itemAddress, \\n        uint itemId,\\n        uint slot\\n    );\\n\\n    event ItemEquipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        address indexed itemAddress,\\n        uint itemId,\\n        uint amount,\\n        uint slot\\n    );\\n\\n    event ItemUnequipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint slot,\\n        uint amount\\n    );\\n\\n    event SlotCreated(\\n        address indexed by, \\n        uint capacity,\\n        bool unequippable,\\n        uint slot\\n    );\\n\\n    using AddressUtils for address;\\n\\n    modifier onlyValidSlot(uint slot) {\\n        require(slot != 0, \\\"InventoryFacet: Slot id can't be zero\\\");\\n        require(slot <= InventoryStorage.layout().numSlots, \\\"InventoryFacet: Inexistent slot id\\\");\\n        _;\\n    }\\n\\n    modifier onlyArcadianOwner(uint arcadianId) {\\n        IERC721 arcadiansContract = IERC721(InventoryStorage.layout().arcadiansAddress);\\n        require(\\n            msg.sender == arcadiansContract.ownerOf(arcadianId),\\n            \\\"InventoryFacet: Message sender is not owner of the arcadian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyValidAddress(address _address) {\\n        require(_address != address(0), \\\"Invalid Address\\\");\\n        _;\\n    }\\n\\n    modifier onlyContract(address _address) {\\n        require(_address.isContract(), \\\"InventoryFacet: Address given is not a contract\\\");\\n        _;\\n    }\\n\\n    function _setArcadiansAddress(address newArcadiansAddress) internal onlyManager onlyValidAddress(newArcadiansAddress) {\\n        InventoryStorage.Layout storage itemsSL = InventoryStorage.layout();\\n        if (newArcadiansAddress != itemsSL.arcadiansAddress) {\\n            emit ArcadiansAddressChanged(itemsSL.arcadiansAddress, newArcadiansAddress);\\n            itemsSL.arcadiansAddress = newArcadiansAddress;\\n        }\\n    }\\n\\n    function _getArcadiansAddress() internal view returns (address) {\\n        return InventoryStorage.layout().arcadiansAddress;\\n    }\\n\\n    function _numSlots() internal view returns (uint) {\\n        return InventoryStorage.layout().numSlots;\\n    }\\n\\n    function _unequip(\\n        uint arcadianId,\\n        uint slot,\\n        bool unequipAll,\\n        uint amount\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        \\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        require(\\n            !inventorySL.slots[slot].isUnequippable,\\n            \\\"InventoryFacet._unequip: Slot is not unequippable\\\"\\n        );\\n\\n        InventoryStorage.EquippedItem storage existingItem = inventorySL.equippedItems[arcadianId][slot];\\n\\n        if (unequipAll) {\\n            amount = existingItem.amount;\\n        } else {\\n            require(\\n                amount <= existingItem.amount,\\n                \\\"InventoryFacet._unequip: Attempting to unequip too many items from the slot\\\"\\n            );\\n        }\\n\\n        _safeTransfer(\\n            msg.sender,\\n            existingItem.itemAddress,\\n            msg.sender,\\n            existingItem.id,\\n            amount,\\n            \\\"\\\"\\n        );\\n\\n        emit ItemUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slot,\\n            amount\\n        );\\n\\n        existingItem.amount -= amount;\\n        if (existingItem.amount == 0) {\\n            delete inventorySL.equippedItems[arcadianId][slot];\\n        }\\n    }\\n\\n    function _unequipBatch(\\n        uint arcadianId,\\n        uint[] calldata slots,\\n        bool[] calldata unequipAll,\\n        uint[] calldata amounts\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < slots.length; i++) {\\n\\n            uint amountToUnequip = amounts[i];\\n            uint slot = slots[i];\\n\\n            require(\\n                !inventorySL.slots[slot].isUnequippable,\\n                \\\"InventoryFacet._unequipBatch: Slot is not unequippable\\\"\\n            );\\n\\n            InventoryStorage.EquippedItem storage existingItem = inventorySL.equippedItems[arcadianId][slot];\\n\\n            if (unequipAll[i]) {\\n                amountToUnequip = existingItem.amount;\\n            } else {\\n                require(\\n                    amountToUnequip <= existingItem.amount,\\n                    \\\"InventoryFacet._unequipBatch: Attempting to unequip too many items from the slot\\\"\\n                );\\n            }\\n\\n            if (existingItem.amount == amountToUnequip) {\\n                delete inventorySL.equippedItems[arcadianId][slot];\\n            } else {\\n                existingItem.amount -= amountToUnequip;\\n            }\\n\\n            _safeTransfer(\\n                msg.sender,\\n                address(this),\\n                msg.sender,\\n                slot,\\n                amountToUnequip,\\n                \\\"\\\"\\n            );\\n\\n            emit ItemUnequipped(\\n                msg.sender,\\n                arcadianId,\\n                slot,\\n                amountToUnequip\\n            );\\n        }\\n    }\\n\\n    function _unequipAllItems(\\n        uint arcadianId\\n    ) internal {\\n\\n        IERC721 arcadiansContract = IERC721(InventoryStorage.layout().arcadiansAddress);\\n        address arcadianOwner = arcadiansContract.ownerOf(arcadianId);\\n        require(\\n            msg.sender == arcadianOwner ||\\n            msg.sender == InventoryStorage.layout().arcadiansAddress,\\n            \\\"InventoryFacet._unequipAllItems: Caller not Arcadians contract neither or the arcadian owner\\\"\\n        );\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < inventorySL.numSlots; i++) {\\n            uint slot = i + 1;\\n\\n            InventoryStorage.EquippedItem storage existingItem = inventorySL.equippedItems[arcadianId][slot];\\n\\n            // TODO: evaluate if unequippable items should also be unequiped in case of arcadian transfer\\n            if (!inventorySL.slots[slot].isUnequippable && existingItem.amount > 0) {\\n                _safeTransfer(\\n                    msg.sender,\\n                    address(this),\\n                    arcadianOwner,\\n                    existingItem.id,\\n                    existingItem.amount,\\n                    \\\"\\\"\\n                );\\n\\n                emit ItemUnequipped(\\n                    arcadianOwner,\\n                    arcadianId,\\n                    slot,\\n                    existingItem.amount\\n                );\\n                \\n                delete inventorySL.equippedItems[arcadianId][slot];\\n            }\\n        }\\n    }\\n\\n    function _validateItemForSlot(uint slot, uint itemId, uint amount) internal view {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint[] storage allowedItemsIds = inventorySL.slots[slot].allowedItemsIds;\\n        for (uint i = 0; i < allowedItemsIds.length; i++) {\\n            if (allowedItemsIds[i] == itemId) {\\n                require(amount <= inventorySL.slots[slot].capacity, \\\"InventoryFacet._validateItemForSlot: Amount exceeds slot capacity\\\");\\n                return;\\n            }\\n        }\\n        revert(\\\"Item not elegible for slot\\\");\\n    }\\n\\n    function _equip(\\n        uint arcadianId,\\n        address itemAddress,\\n        uint itemId,\\n        uint amount,\\n        uint slot\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        require(inventorySL.isItemAllowed[slot][itemAddress][itemId], \\\"InventoryFacet.equip: Item not elegible for slot\\\");\\n        require(inventorySL.slots[slot].capacity >= amount, \\\"InventoryFacet.equip: Item amount exceeds slot capacity\\\");\\n\\n        if (inventorySL.equippedItems[arcadianId][slot].amount != 0) {\\n            _unequip(arcadianId, slot, true, 0);\\n        }\\n        \\n        require(\\n            _balanceOf(msg.sender, itemId) >= amount,\\n            \\\"InventoryFacet.equip: Message sender does not own enough of that item to equip\\\"\\n        );\\n    \\n        _safeTransfer(\\n            msg.sender,\\n            msg.sender,\\n            itemAddress,\\n            itemId,\\n            amount,\\n            \\\"\\\"\\n        );\\n\\n        emit ItemEquipped(\\n            msg.sender,\\n            arcadianId,\\n            itemAddress,\\n            itemId,\\n            amount,\\n            slot\\n        );\\n\\n        inventorySL.equippedItems[arcadianId][slot] = InventoryStorage.EquippedItem({\\n            itemAddress: itemAddress,\\n            id: itemId,\\n            amount: amount\\n        });\\n    }\\n\\n    function _equipBatch(\\n        uint arcadianId,\\n        address itemAddress,\\n        uint[] calldata itemsIds,\\n        uint[] calldata amounts,\\n        uint[] calldata slots\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        require(slots.length == itemsIds.length && itemsIds.length == amounts.length, \\\"InventoryFacet._equipBatch: Input data length mismatch\\\");\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < itemsIds.length; i++) {\\n\\n            require(inventorySL.isItemAllowed[slots[i]][itemAddress][itemsIds[i]], \\\"InventoryFacet._equipBatch: Item not elegible for slot\\\");\\n            require(inventorySL.slots[slots[i]].capacity >= amounts[i], \\\"InventoryFacet._equipBatch: Item amount exceeds slot capacity\\\");\\n\\n            require(\\n                _balanceOf(msg.sender, itemsIds[i]) >= amounts[i],\\n                \\\"InventoryFacet.equip: Sender has insufficient item balance\\\"\\n            );\\n\\n            _unequip(arcadianId, slots[i], true, amounts[i]);\\n\\n            emit ItemEquipped(\\n                msg.sender,\\n                arcadianId,\\n                itemAddress,\\n                itemsIds[i],\\n                amounts[i],\\n                slots[i]\\n            );\\n\\n            inventorySL.equippedItems[arcadianId][slots[i]] = InventoryStorage.EquippedItem({\\n                itemAddress: itemAddress,\\n                id: itemsIds[i],\\n                amount: amounts[i]\\n            });\\n        }\\n\\n        _safeTransferBatch(\\n            msg.sender,\\n            msg.sender,\\n            address(this),\\n            itemsIds,\\n            amounts,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    function _equipped(\\n        uint arcadianId,\\n        uint slot\\n    ) internal view returns (InventoryStorage.EquippedItem memory item) {\\n        return InventoryStorage.layout().equippedItems[arcadianId][slot];\\n    }\\n\\n    function _equippedAll(\\n        uint arcadianId\\n    ) internal view returns (InventoryStorage.EquippedItem[] memory item) {\\n        uint numSlots = InventoryStorage.layout().numSlots;\\n        InventoryStorage.EquippedItem[] memory items = new InventoryStorage.EquippedItem[](numSlots);\\n        for (uint i = 0; i < numSlots; i++) {\\n            items[i] = _equipped(arcadianId, i+1);\\n        }\\n        return items;\\n    }\\n\\n    function _createSlot(\\n        address itemAddress,\\n        uint[] calldata allowedItemsIds,\\n        uint capacity,\\n        bool unequippable\\n    ) internal onlyContract(itemAddress) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        // slots are 1-index\\n        inventorySL.numSlots += 1;\\n        uint newSlot = inventorySL.numSlots;\\n        inventorySL.slots[newSlot].isUnequippable = unequippable;\\n        inventorySL.slots[newSlot].capacity = capacity;\\n\\n        if (allowedItemsIds.length > 0) {\\n            _allowItemsInSlot(itemAddress, allowedItemsIds, newSlot);\\n        }\\n\\n        emit SlotCreated(msg.sender, capacity, unequippable, newSlot);\\n    }\\n\\n    function _allowItemInSlot(\\n        address itemAddress,\\n        uint itemId,\\n        uint slot\\n    ) internal onlyValidSlot(slot) onlyValidAddress(itemAddress) {\\n        _allowItemInSlotUnchecked(itemAddress, itemId, slot);\\n    }\\n\\n    function _allowItemsInSlot(\\n        address itemAddress,\\n        uint[] calldata itemsIds,\\n        uint slot\\n    ) internal virtual onlyValidSlot(slot) onlyValidAddress(itemAddress) {\\n        for (uint i = 0; i < itemsIds.length; i++) {\\n            _allowItemInSlotUnchecked(itemAddress, itemsIds[i], slot);\\n        }\\n    }\\n\\n    function _allowItemInSlotUnchecked(\\n        address itemAddress,\\n        uint itemId,\\n        uint slot\\n    ) internal virtual {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        inventorySL.slots[slot].allowedItemsIds.push(itemId);\\n        inventorySL.itemAllowedSlots[itemAddress][itemId].push(slot);\\n        inventorySL.isItemAllowed[slot][itemAddress][itemId] = true;\\n        emit ItemAllowedInSlot(msg.sender, itemAddress, itemId, slot);\\n    }\\n\\n    function _getItemAllowedSlots(address itemAddress, uint itemId) internal view returns (uint[] storage) {\\n        return InventoryStorage.layout().itemAllowedSlots[itemAddress][itemId];\\n    }\\n\\n    function _getSlot(uint slot) internal view returns (InventoryStorage.Slot storage) {\\n        return InventoryStorage.layout().slots[slot];\\n    }\\n}\",\"keccak256\":\"0xef88974cac28d795e0f6647d1a5926c1682c604c2dd5c5dd711f474c6d5cf2de\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\n\\n/**\\nLibInventory defines the storage structure used by the Inventory contract as a facet for an EIP-2535 Diamond\\nproxy.\\n */\\nlibrary InventoryStorage {\\n    bytes32 constant INVENTORY_STORAGE_POSITION =\\n        keccak256(\\\"inventory.storage.position\\\");\\n\\n    uint constant ERC721_ITEM_TYPE = 721;\\n    uint constant ERC1155_ITEM_TYPE = 1155;\\n\\n    // EquippedItem: holds the information of the currently equipped item for a specific slot in an arcadian\\n    struct EquippedItem {\\n        address itemAddress;\\n        uint id;\\n        uint amount;\\n    }\\n    // Slot: Holds the general information for a slot\\n    struct Slot {\\n        uint capacity;\\n        bool isUnequippable;\\n        uint[] allowedItemsIds;\\n    }\\n\\n    struct Layout {\\n        address arcadiansAddress;\\n        uint numSlots;\\n        // Slot id => Slot\\n        mapping(uint => Slot) slots;\\n\\n        // arcadian token ID => slot id => EquippedItem\\n        mapping(uint => mapping(uint => EquippedItem)) equippedItems;\\n\\n        // Slot id => item id => is allowed to be equipped\\n        mapping(uint => mapping(address => mapping(uint => bool))) isItemAllowed;\\n\\n        // item address => item id => allowed slots list\\n        mapping(address => mapping(uint => uint[])) itemAllowedSlots;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage istore)\\n    {\\n        bytes32 position = INVENTORY_STORAGE_POSITION;\\n        assembly {\\n            istore.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x00ca09473da3203f6e9adaacaf8ffc938f1b50a2d1b37ca57abb6187ede41bef\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(_getDefaultAdminRole());\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        _checkRole(_getManagerRole());\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        _checkRole(_getMinterRole());\\n        _;\\n    }\\n\\n    function _getDefaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _getManagerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _getMinterRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().minterRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.minterRole = keccak256(\\\"minter.role\\\");\\n\\n        _grantRole(_getDefaultAdminRole(), msg.sender);\\n        _grantRole(_getManagerRole(), msg.sender);\\n        _grantRole(_getMinterRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0x43a83b4e0383d0fb5c977b6c1119e4c7671e575964f0c8f7b4bb66242af716e4\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 minterRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x203cfbe268a1ac5fe32593c66ace04b576dfb2e25173e02654e504cf0de44d71\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613378806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80637eba7ba6116100a2578063c45aabf611610071578063c45aabf614610290578063ca461d95146102a3578063dd7ef3eb146102b6578063ef0bf7de146102c9578063f23a6e61146102e957600080fd5b80637eba7ba61461021b5780639621ff251461023b5780639e3ccb2a14610251578063bc197c811461027157600080fd5b806325380151116100e957806325380151146101a257806325472687146101c25780634b46daef146101d55780634ccb61c1146101e857806352dc63ac146101fb57600080fd5b806301ffc9a71461011b57806303a8fe4b146101435780631002105614610158578063150b7a021461016b575b600080fd5b61012e610129366004612764565b610308565b60405190151581526020015b60405180910390f35b6101566101513660046127e2565b61033f565b005b6101566101663660046128ad565b6103a4565b6101896101793660046129d4565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161013a565b6101aa6103e8565b6040516001600160a01b03909116815260200161013a565b6101566101d0366004612a40565b61040e565b6101566101e3366004612a75565b61041e565b6101566101f6366004612abd565b61047d565b61020e610209366004612ada565b6104b4565b60405161013a9190612b41565b61022e610229366004612b54565b610548565b60405161013a9190612b6d565b610243610613565b60405190815260200161013a565b61026461025f366004612b54565b61062b565b60405161013a9190612bd5565b61018961027f366004612cb6565b63bc197c8160e01b95945050505050565b61015661029e366004612b54565b610636565b6101566102b1366004612d64565b61063f565b6101566102c4366004612da1565b61069c565b6102dc6102d7366004612e45565b6106b4565b60405161013a9190612e67565b6101896102f7366004612e91565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061033957506301ffc9a760e01b6001600160e01b03198316145b92915050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361038257604051635db5c7cd60e11b815260040160405180910390fd5b6002815561039689898989898989896106f2565b600190555050505050505050565b6103d46103cf7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b610cfa565b6103e18585858585610d04565b5050505050565b6000610409600080516020613323833981519152546001600160a01b031690565b905090565b610419838383610e34565b505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361046157604051635db5c7cd60e11b815260040160405180910390fd5b600281556104728686868686610ed8565b600190555050505050565b6104a86103cf7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b6104b18161126c565b50565b6001600160a01b03821660009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b6020908152604080832084845282529182902080548351818402810184019094528084526060939283018282801561053b57602002820191906000526020600020905b815481526020019060010190808311610527575b5050505050905092915050565b604080516060808201835260008083526020830152918101919091526105988260009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020526040902090565b6040805160608101825282548152600183015460ff16151560208083019190915260028401805484518184028101840186528181529395948601939283018282801561060357602002820191906000526020600020905b8154815260200190600101908083116105ef575b5050505050815250509050919050565b60006104096000805160206133038339815191525490565b60606103398261135b565b6104b181611441565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361068257604051635db5c7cd60e11b815260040160405180910390fd5b60028155610692858585856116bc565b6001905550505050565b6106ab878787878787876119a5565b50505050505050565b6106e1604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6106eb8383611ced565b9392505050565b876000600080516020613323833981519152546040516331a9108f60e11b8152600481018490526001600160a01b0390911691508190636352211e90602401602060405180830381865afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190612efa565b6001600160a01b0316336001600160a01b0316146107ab5760405162461bcd60e51b81526004016107a290612f17565b60405180910390fd5b82871480156107b957508685145b61082b5760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a20496e707560448201527f742064617461206c656e677468206d69736d617463680000000000000000000060648201526084016107a2565b60008051602061332383398151915260005b88811015610c5d5781600401600087878481811061085d5761085d612f74565b90506020020135815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008b8b848181106108a9576108a9612f74565b602090810292909201358352508101919091526040016000205460ff166109385760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a204974656d60448201527f206e6f7420656c656769626c6520666f7220736c6f740000000000000000000060648201526084016107a2565b87878281811061094a5761094a612f74565b9050602002013582600201600088888581811061096957610969612f74565b9050602002013581526020019081526020016000206000015410156109f65760405162461bcd60e51b815260206004820152603d60248201527f496e76656e746f727946616365742e5f657175697042617463683a204974656d60448201527f20616d6f756e74206578636565647320736c6f7420636170616369747900000060648201526084016107a2565b878782818110610a0857610a08612f74565b90506020020135610a31338c8c85818110610a2557610a25612f74565b90506020020135611d81565b1015610aa55760405162461bcd60e51b815260206004820152603a60248201527f496e76656e746f727946616365742e65717569703a2053656e6465722068617360448201527f20696e73756666696369656e74206974656d2062616c616e636500000000000060648201526084016107a2565b610ae28c878784818110610abb57610abb612f74565b9050602002013560018b8b86818110610ad657610ad6612f74565b905060200201356116bc565b6001600160a01b038b168c337fca5f4ab066342b47da5386168ff3e83e4adf2fac5830bc49703b70908525ab468d8d86818110610b2157610b21612f74565b905060200201358c8c87818110610b3a57610b3a612f74565b905060200201358b8b88818110610b5357610b53612f74565b90506020020135604051610b7a939291909283526020830191909152604082015260600190565b60405180910390a460405180606001604052808c6001600160a01b031681526020018b8b84818110610bae57610bae612f74565b905060200201358152602001898984818110610bcc57610bcc612f74565b905060200201358152508260030160008e81526020019081526020016000206000888885818110610bff57610bff612f74565b60209081029290920135835250818101929092526040908101600020835181546001600160a01b0319166001600160a01b03909116178155918301516001830155919091015160029091015580610c5581612fa0565b91505061083d565b50610ced3333308c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060408051602081019091529081529250611df1915050565b5050505050505050505050565b6104b18133611e15565b846001600160a01b0381163b610d745760405162461bcd60e51b815260206004820152602f60248201527f496e76656e746f727946616365743a204164647265737320676976656e20697360448201526e081b9bdd08184818dbdb9d1c9858dd608a1b60648201526084016107a2565b600080516020613303833981519152805460008051602061332383398151915291600191600090610da6908490612fb9565b909155505060018181015460008181526002840160205260409020918201805460ff1916861515179055908590558515610de657610de688888884611e7b565b60408051868152851515602082015290810182905233907fa28f3b4b2c47e1665e89d0bf14b7d48fb80b040942c93ab375bfb714e12e9bf99060600160405180910390a25050505050505050565b8080600003610e555760405162461bcd60e51b81526004016107a290612fcc565b60008051602061330383398151915254811115610e845760405162461bcd60e51b81526004016107a290613011565b836001600160a01b038116610ecd5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b60448201526064016107a2565b6103e1858585611f54565b846000600080516020613323833981519152546040516331a9108f60e11b8152600481018490526001600160a01b0390911691508190636352211e90602401602060405180830381865afa158015610f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f589190612efa565b6001600160a01b0316336001600160a01b031614610f885760405162461bcd60e51b81526004016107a290612f17565b60008381527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a602090815260408083206001600160a01b038a16845282528083208884529091529020546000805160206133238339815191529060ff1661104a5760405162461bcd60e51b815260206004820152603060248201527f496e76656e746f727946616365742e65717569703a204974656d206e6f74206560448201526f1b1959da589b1948199bdc881cdb1bdd60821b60648201526084016107a2565b60008481526002820160205260409020548511156110d05760405162461bcd60e51b815260206004820152603760248201527f496e76656e746f727946616365742e65717569703a204974656d20616d6f756e60448201527f74206578636565647320736c6f7420636170616369747900000000000000000060648201526084016107a2565b6000888152600382016020908152604080832087845290915290206002015415611102576111028885600160006116bc565b8461110d3388611d81565b10156111985760405162461bcd60e51b815260206004820152604e60248201527f496e76656e746f727946616365742e65717569703a204d65737361676520736560448201527f6e64657220646f6573206e6f74206f776e20656e6f756768206f66207468617460648201526d0206974656d20746f2065717569760941b608482015260a4016107a2565b6111b533338989896040518060200160405280600081525061207f565b60408051878152602081018790529081018590526001600160a01b03881690899033907fca5f4ab066342b47da5386168ff3e83e4adf2fac5830bc49703b70908525ab469060600160405180910390a4604080516060810182526001600160a01b039889168152602080820198895281830197885260009a8b526003939093018352818a20958a5294909152909620915182546001600160a01b031916951694909417815591516001830155516002909101555050565b6112976103cf7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b806001600160a01b0381166112e05760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b60448201526064016107a2565b60008051602061332383398151915280546001600160a01b038481169116146104195780546040516001600160a01b038086169216907eed81eff0ba83420a43348ef3da96ac4ab548b89a0c78453591ba715019703390600090a380546001600160a01b0384166001600160a01b0319909116178155505050565b6000805160206133038339815191525460609060008167ffffffffffffffff8111156113895761138961291d565b6040519080825280602002602001820160405280156113e757816020015b6113d4604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816113a75790505b50905060005b828110156114395761140985611404836001612fb9565b611ced565b82828151811061141b5761141b612f74565b6020026020010181905250808061143190612fa0565b9150506113ed565b509392505050565b6000600080516020613323833981519152546040516331a9108f60e11b8152600481018490526001600160a01b0390911691506000908290636352211e90602401602060405180830381865afa15801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c39190612efa565b9050336001600160a01b03821614806114f35750600080516020613323833981519152546001600160a01b031633145b61158b5760405162461bcd60e51b815260206004820152605c60248201527f496e76656e746f727946616365742e5f756e6571756970416c6c4974656d733a60448201527f2043616c6c6572206e6f7420417263616469616e7320636f6e7472616374206e60648201527f656974686572206f722074686520617263616469616e206f776e657200000000608482015260a4016107a2565b60008051602061332383398151915260005b81600101548110156103e15760006115b6826001612fb9565b60008781526003850160209081526040808320848452825280832060028801909252909120600101549192509060ff161580156115f7575060008160020154115b156116a757611621333087846001015485600201546040518060200160405280600081525061207f565b86856001600160a01b03167faac45c254099c6998eb1c782987885f75442801e720e4387e6c4ade122529b7084846002015460405161166a929190918252602082015260400190565b60405180910390a360008781526003850160209081526040808320858452909152812080546001600160a01b031916815560018101829055600201555b505080806116b490612fa0565b91505061159d565b836000600080516020613323833981519152546040516331a9108f60e11b8152600481018490526001600160a01b0390911691508190636352211e90602401602060405180830381865afa158015611718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173c9190612efa565b6001600160a01b0316336001600160a01b03161461176c5760405162461bcd60e51b81526004016107a290612f17565b60008581527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860205260409020600101546000805160206133238339815191529060ff16156118175760405162461bcd60e51b815260206004820152603160248201527f496e76656e746f727946616365742e5f756e65717569703a20536c6f74206973604482015270206e6f7420756e65717569707061626c6560781b60648201526084016107a2565b600087815260038201602090815260408083208984529091529020851561184457806002015494506118d2565b80600201548511156118d25760405162461bcd60e51b815260206004820152604b60248201527f496e76656e746f727946616365742e5f756e65717569703a20417474656d707460448201527f696e6720746f20756e657175697020746f6f206d616e79206974656d7320667260648201526a1bdb481d1a19481cdb1bdd60aa1b608482015260a4016107a2565b805460018201546040805160208101909152600081526119049233926001600160a01b03909116918391908a9061207f565b6040805188815260208101879052899133917faac45c254099c6998eb1c782987885f75442801e720e4387e6c4ade122529b70910160405180910390a3848160020160008282546119559190613053565b9091555050600281015460000361199b57600088815260038301602090815260408083208a8452909152812080546001600160a01b031916815560018101829055600201555b5050505050505050565b866000600080516020613323833981519152546040516331a9108f60e11b8152600481018490526001600160a01b0390911691508190636352211e90602401602060405180830381865afa158015611a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a259190612efa565b6001600160a01b0316336001600160a01b031614611a555760405162461bcd60e51b81526004016107a290612f17565b60008051602061332383398151915260005b88811015610ced576000868683818110611a8357611a83612f74565b90506020020135905060008b8b84818110611aa057611aa0612f74565b602090810292909201356000818152600288019093526040909220600101549192505060ff1615611b395760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f756e657175697042617463683a20536c60448201527f6f74206973206e6f7420756e65717569707061626c650000000000000000000060648201526084016107a2565b60008d8152600385016020908152604080832084845290915290208a8a85818110611b6657611b66612f74565b9050602002016020810190611b7b9190613066565b15611b8c5780600201549250611c1f565b8060020154831115611c1f5760405162461bcd60e51b815260206004820152605060248201527f496e76656e746f727946616365742e5f756e657175697042617463683a20417460448201527f74656d7074696e6720746f20756e657175697020746f6f206d616e792069746560648201526f1b5cc8199c9bdb481d1a19481cdb1bdd60821b608482015260a4016107a2565b82816002015403611c635760008e81526003860160209081526040808320858452909152812080546001600160a01b03191681556001810182905560020155611c7d565b82816002016000828254611c779190613053565b90915550505b611c9a33303385876040518060200160405280600081525061207f565b60408051838152602081018590528f9133917faac45c254099c6998eb1c782987885f75442801e720e4387e6c4ade122529b70910160405180910390a35050508080611ce590612fa0565b915050611a67565b611d1a604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b5060009182527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4396020908152604080842092845291815291819020815160608101835281546001600160a01b03168152600182015493810193909352600201549082015290565b60006001600160a01b038316611daa5760405163db5d879760e01b815260040160405180910390fd5b7f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b6000928352602090815260408084206001600160a01b0395909516845293905250205490565b611dff86868686868661209b565b611e0d868686868686612248565b505050505050565b611e1f8282612358565b611e7757611e35816001600160a01b031661238f565b611e408360206123a1565b604051602001611e519291906130a5565b60408051601f198184030181529082905262461bcd60e51b82526107a291600401613146565b5050565b8080600003611e9c5760405162461bcd60e51b81526004016107a290612fcc565b60008051602061330383398151915254811115611ecb5760405162461bcd60e51b81526004016107a290613011565b846001600160a01b038116611f145760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b60448201526064016107a2565b60005b848110156106ab57611f4287878784818110611f3557611f35612f74565b9050602002013586611f54565b80611f4c81612fa0565b915050611f17565b60008181527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860209081526040808320600201805460018082018355918552838520018690556001600160a01b0387168085527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b8452828520878652845282852080548084018255908652848620018690558585527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a84528285208186528452828520878652845293829020805460ff191690911790558051928352908201849052818101839052516000805160206133238339815191529133917f06a91fc4263d54ad68fef9c0c9e5396bdf5c7bf36ca80c14dcacee462847a5b39181900360600190a250505050565b61208d8686868686866124f4565b611e0d868686868686612625565b6001600160a01b0384166120c25760405163f5cadad560e01b815260040160405180910390fd5b81518351146120e457604051633e7e0b6d60e11b815260040160405180910390fd5b7f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b60005b84518110156121e757600085828151811061212557612125612f74565b60200260200101519050600085838151811061214357612143612f74565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150808211156121945760405163119ac6bb60e31b815260040160405180910390fd5b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a1681529081208054600195909501948392906121da908490612fb9565b9091555061210892505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612237929190613159565b60405180910390a450505050505050565b6001600160a01b0384163b15611e0d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061228c9089908990889088908890600401613187565b6020604051808303816000875af19250505080156122c7575060408051601f3d908101601f191682019092526122c4918101906131e5565b60015b612327576122d3613202565b806308c379a00361230c57506122e761321e565b806122f2575061230e565b8060405162461bcd60e51b81526004016107a29190613146565b505b60405163380147a960e01b815260040160405180910390fd5b6001600160e01b0319811663bc197c8160e01b146106ab57604051633744db2960e01b815260040160405180910390fd5b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206106eb90836126e1565b60606103396001600160a01b03831660145b606060006123b08360026132a8565b6123bb906002612fb9565b67ffffffffffffffff8111156123d3576123d361291d565b6040519080825280601f01601f1916602001820160405280156123fd576020820181803683370190505b509050600360fc1b8160008151811061241857612418612f74565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061244757612447612f74565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156124d4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061249757612497612f74565b1a60f81b8282815181106124ad576124ad612f74565b60200101906001600160f81b031916908160001a90535060049490941c9360001901612466565b5083156106eb5760405163c913478560e01b815260040160405180910390fd5b6001600160a01b03841661251b5760405163f5cadad560e01b815260040160405180910390fd5b61253386868661252a87612703565b6103e187612703565b60008381527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b602081815260408084206001600160a01b038a16855290915290912054808411156125975760405163119ac6bb60e31b815260040160405180910390fd5b6000858152602083815260408083206001600160a01b038b811685529252808320938790039093558716815290812080548592906125d6908490612fb9565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101612237565b6001600160a01b0384163b15611e0d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061266990899089908890889088906004016132bf565b6020604051808303816000875af19250505080156126a4575060408051601f3d908101601f191682019092526126a1918101906131e5565b60015b6126b0576122d3613202565b6001600160e01b0319811663f23a6e6160e01b146106ab57604051633744db2960e01b815260040160405180910390fd5b6001600160a01b038116600090815260018301602052604081205415156106eb565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061273d5761273d612f74565b602090810291909101015292915050565b6001600160e01b0319811681146104b157600080fd5b60006020828403121561277657600080fd5b81356106eb8161274e565b6001600160a01b03811681146104b157600080fd5b60008083601f8401126127a857600080fd5b50813567ffffffffffffffff8111156127c057600080fd5b6020830191508360208260051b85010111156127db57600080fd5b9250929050565b60008060008060008060008060a0898b0312156127fe57600080fd5b88359750602089013561281081612781565b9650604089013567ffffffffffffffff8082111561282d57600080fd5b6128398c838d01612796565b909850965060608b013591508082111561285257600080fd5b61285e8c838d01612796565b909650945060808b013591508082111561287757600080fd5b506128848b828c01612796565b999c989b5096995094979396929594505050565b803580151581146128a857600080fd5b919050565b6000806000806000608086880312156128c557600080fd5b85356128d081612781565b9450602086013567ffffffffffffffff8111156128ec57600080fd5b6128f888828901612796565b9095509350506040860135915061291160608701612898565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156129595761295961291d565b6040525050565b600082601f83011261297157600080fd5b813567ffffffffffffffff81111561298b5761298b61291d565b6040516129a2601f8301601f191660200182612933565b8181528460208386010111156129b757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156129ea57600080fd5b84356129f581612781565b93506020850135612a0581612781565b925060408501359150606085013567ffffffffffffffff811115612a2857600080fd5b612a3487828801612960565b91505092959194509250565b600080600060608486031215612a5557600080fd5b8335612a6081612781565b95602085013595506040909401359392505050565b600080600080600060a08688031215612a8d57600080fd5b853594506020860135612a9f81612781565b94979496505050506040830135926060810135926080909101359150565b600060208284031215612acf57600080fd5b81356106eb81612781565b60008060408385031215612aed57600080fd5b8235612af881612781565b946020939093013593505050565b600081518084526020808501945080840160005b83811015612b3657815187529582019590820190600101612b1a565b509495945050505050565b6020815260006106eb6020830184612b06565b600060208284031215612b6657600080fd5b5035919050565b60006020808352608083018451828501528185015115156040850152604085015160608086015281815180845260a0870191508483019350600092505b80831015612bca5783518252928401926001929092019190840190612baa565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612c3457612c2183855180516001600160a01b0316825260208082015190830152604090810151910152565b9284019260609290920191600101612bf1565b50909695505050505050565b600082601f830112612c5157600080fd5b8135602067ffffffffffffffff821115612c6d57612c6d61291d565b8160051b604051612c8083830182612933565b92835284810182019282810187851115612c9957600080fd5b83870192505b84831015612bca5782358152918301918301612c9f565b600080600080600060a08688031215612cce57600080fd5b8535612cd981612781565b94506020860135612ce981612781565b9350604086013567ffffffffffffffff80821115612d0657600080fd5b612d1289838a01612c40565b94506060880135915080821115612d2857600080fd5b612d3489838a01612c40565b93506080880135915080821115612d4a57600080fd5b50612d5788828901612960565b9150509295509295909350565b60008060008060808587031215612d7a57600080fd5b8435935060208501359250612d9160408601612898565b9396929550929360600135925050565b60008060008060008060006080888a031215612dbc57600080fd5b87359650602088013567ffffffffffffffff80821115612ddb57600080fd5b612de78b838c01612796565b909850965060408a0135915080821115612e0057600080fd5b612e0c8b838c01612796565b909650945060608a0135915080821115612e2557600080fd5b50612e328a828b01612796565b989b979a50959850939692959293505050565b60008060408385031215612e5857600080fd5b50508035926020909101359150565b81516001600160a01b03168152602080830151908201526040808301519082015260608101610339565b600080600080600060a08688031215612ea957600080fd5b8535612eb481612781565b94506020860135612ec481612781565b93506040860135925060608601359150608086013567ffffffffffffffff811115612eee57600080fd5b612d5788828901612960565b600060208284031215612f0c57600080fd5b81516106eb81612781565b6020808252603b908201527f496e76656e746f727946616365743a204d6573736167652073656e646572206960408201527f73206e6f74206f776e6572206f662074686520617263616469616e0000000000606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612fb257612fb2612f8a565b5060010190565b8082018082111561033957610339612f8a565b60208082526025908201527f496e76656e746f727946616365743a20536c6f742069642063616e2774206265604082015264207a65726f60d81b606082015260800190565b60208082526022908201527f496e76656e746f727946616365743a20496e6578697374656e7420736c6f74206040820152611a5960f21b606082015260800190565b8181038181111561033957610339612f8a565b60006020828403121561307857600080fd5b6106eb82612898565b60005b8381101561309c578181015183820152602001613084565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516130dd816017850160208801613081565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161310e816028840160208801613081565b01602801949350505050565b60008151808452613132816020860160208601613081565b601f01601f19169290920160200192915050565b6020815260006106eb602083018461311a565b60408152600061316c6040830185612b06565b828103602084015261317e8185612b06565b95945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526131b360a0830186612b06565b82810360608401526131c58186612b06565b905082810360808401526131d9818561311a565b98975050505050505050565b6000602082840312156131f757600080fd5b81516106eb8161274e565b600060033d111561321b5760046000803e5060005160e01c5b90565b600060443d101561322c5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561325c57505050505090565b82850191508151818111156132745750505050505090565b843d870101602082850101111561328e5750505050505090565b61329d60208286010187612933565b509095945050505050565b808202811582820484141761033957610339612f8a565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526132f760a083018461311a565b97965050505050505056fef672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d437f672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220e2e202b15b5e91bdecabaf94e5fb38dee815adbda24432635e81a50542f197e364736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80637eba7ba6116100a2578063c45aabf611610071578063c45aabf614610290578063ca461d95146102a3578063dd7ef3eb146102b6578063ef0bf7de146102c9578063f23a6e61146102e957600080fd5b80637eba7ba61461021b5780639621ff251461023b5780639e3ccb2a14610251578063bc197c811461027157600080fd5b806325380151116100e957806325380151146101a257806325472687146101c25780634b46daef146101d55780634ccb61c1146101e857806352dc63ac146101fb57600080fd5b806301ffc9a71461011b57806303a8fe4b146101435780631002105614610158578063150b7a021461016b575b600080fd5b61012e610129366004612764565b610308565b60405190151581526020015b60405180910390f35b6101566101513660046127e2565b61033f565b005b6101566101663660046128ad565b6103a4565b6101896101793660046129d4565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161013a565b6101aa6103e8565b6040516001600160a01b03909116815260200161013a565b6101566101d0366004612a40565b61040e565b6101566101e3366004612a75565b61041e565b6101566101f6366004612abd565b61047d565b61020e610209366004612ada565b6104b4565b60405161013a9190612b41565b61022e610229366004612b54565b610548565b60405161013a9190612b6d565b610243610613565b60405190815260200161013a565b61026461025f366004612b54565b61062b565b60405161013a9190612bd5565b61018961027f366004612cb6565b63bc197c8160e01b95945050505050565b61015661029e366004612b54565b610636565b6101566102b1366004612d64565b61063f565b6101566102c4366004612da1565b61069c565b6102dc6102d7366004612e45565b6106b4565b60405161013a9190612e67565b6101896102f7366004612e91565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061033957506301ffc9a760e01b6001600160e01b03198316145b92915050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361038257604051635db5c7cd60e11b815260040160405180910390fd5b6002815561039689898989898989896106f2565b600190555050505050505050565b6103d46103cf7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b610cfa565b6103e18585858585610d04565b5050505050565b6000610409600080516020613323833981519152546001600160a01b031690565b905090565b610419838383610e34565b505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361046157604051635db5c7cd60e11b815260040160405180910390fd5b600281556104728686868686610ed8565b600190555050505050565b6104a86103cf7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b6104b18161126c565b50565b6001600160a01b03821660009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b6020908152604080832084845282529182902080548351818402810184019094528084526060939283018282801561053b57602002820191906000526020600020905b815481526020019060010190808311610527575b5050505050905092915050565b604080516060808201835260008083526020830152918101919091526105988260009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020526040902090565b6040805160608101825282548152600183015460ff16151560208083019190915260028401805484518184028101840186528181529395948601939283018282801561060357602002820191906000526020600020905b8154815260200190600101908083116105ef575b5050505050815250509050919050565b60006104096000805160206133038339815191525490565b60606103398261135b565b6104b181611441565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361068257604051635db5c7cd60e11b815260040160405180910390fd5b60028155610692858585856116bc565b6001905550505050565b6106ab878787878787876119a5565b50505050505050565b6106e1604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6106eb8383611ced565b9392505050565b876000600080516020613323833981519152546040516331a9108f60e11b8152600481018490526001600160a01b0390911691508190636352211e90602401602060405180830381865afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190612efa565b6001600160a01b0316336001600160a01b0316146107ab5760405162461bcd60e51b81526004016107a290612f17565b60405180910390fd5b82871480156107b957508685145b61082b5760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a20496e707560448201527f742064617461206c656e677468206d69736d617463680000000000000000000060648201526084016107a2565b60008051602061332383398151915260005b88811015610c5d5781600401600087878481811061085d5761085d612f74565b90506020020135815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008b8b848181106108a9576108a9612f74565b602090810292909201358352508101919091526040016000205460ff166109385760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a204974656d60448201527f206e6f7420656c656769626c6520666f7220736c6f740000000000000000000060648201526084016107a2565b87878281811061094a5761094a612f74565b9050602002013582600201600088888581811061096957610969612f74565b9050602002013581526020019081526020016000206000015410156109f65760405162461bcd60e51b815260206004820152603d60248201527f496e76656e746f727946616365742e5f657175697042617463683a204974656d60448201527f20616d6f756e74206578636565647320736c6f7420636170616369747900000060648201526084016107a2565b878782818110610a0857610a08612f74565b90506020020135610a31338c8c85818110610a2557610a25612f74565b90506020020135611d81565b1015610aa55760405162461bcd60e51b815260206004820152603a60248201527f496e76656e746f727946616365742e65717569703a2053656e6465722068617360448201527f20696e73756666696369656e74206974656d2062616c616e636500000000000060648201526084016107a2565b610ae28c878784818110610abb57610abb612f74565b9050602002013560018b8b86818110610ad657610ad6612f74565b905060200201356116bc565b6001600160a01b038b168c337fca5f4ab066342b47da5386168ff3e83e4adf2fac5830bc49703b70908525ab468d8d86818110610b2157610b21612f74565b905060200201358c8c87818110610b3a57610b3a612f74565b905060200201358b8b88818110610b5357610b53612f74565b90506020020135604051610b7a939291909283526020830191909152604082015260600190565b60405180910390a460405180606001604052808c6001600160a01b031681526020018b8b84818110610bae57610bae612f74565b905060200201358152602001898984818110610bcc57610bcc612f74565b905060200201358152508260030160008e81526020019081526020016000206000888885818110610bff57610bff612f74565b60209081029290920135835250818101929092526040908101600020835181546001600160a01b0319166001600160a01b03909116178155918301516001830155919091015160029091015580610c5581612fa0565b91505061083d565b50610ced3333308c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060408051602081019091529081529250611df1915050565b5050505050505050505050565b6104b18133611e15565b846001600160a01b0381163b610d745760405162461bcd60e51b815260206004820152602f60248201527f496e76656e746f727946616365743a204164647265737320676976656e20697360448201526e081b9bdd08184818dbdb9d1c9858dd608a1b60648201526084016107a2565b600080516020613303833981519152805460008051602061332383398151915291600191600090610da6908490612fb9565b909155505060018181015460008181526002840160205260409020918201805460ff1916861515179055908590558515610de657610de688888884611e7b565b60408051868152851515602082015290810182905233907fa28f3b4b2c47e1665e89d0bf14b7d48fb80b040942c93ab375bfb714e12e9bf99060600160405180910390a25050505050505050565b8080600003610e555760405162461bcd60e51b81526004016107a290612fcc565b60008051602061330383398151915254811115610e845760405162461bcd60e51b81526004016107a290613011565b836001600160a01b038116610ecd5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b60448201526064016107a2565b6103e1858585611f54565b846000600080516020613323833981519152546040516331a9108f60e11b8152600481018490526001600160a01b0390911691508190636352211e90602401602060405180830381865afa158015610f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f589190612efa565b6001600160a01b0316336001600160a01b031614610f885760405162461bcd60e51b81526004016107a290612f17565b60008381527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a602090815260408083206001600160a01b038a16845282528083208884529091529020546000805160206133238339815191529060ff1661104a5760405162461bcd60e51b815260206004820152603060248201527f496e76656e746f727946616365742e65717569703a204974656d206e6f74206560448201526f1b1959da589b1948199bdc881cdb1bdd60821b60648201526084016107a2565b60008481526002820160205260409020548511156110d05760405162461bcd60e51b815260206004820152603760248201527f496e76656e746f727946616365742e65717569703a204974656d20616d6f756e60448201527f74206578636565647320736c6f7420636170616369747900000000000000000060648201526084016107a2565b6000888152600382016020908152604080832087845290915290206002015415611102576111028885600160006116bc565b8461110d3388611d81565b10156111985760405162461bcd60e51b815260206004820152604e60248201527f496e76656e746f727946616365742e65717569703a204d65737361676520736560448201527f6e64657220646f6573206e6f74206f776e20656e6f756768206f66207468617460648201526d0206974656d20746f2065717569760941b608482015260a4016107a2565b6111b533338989896040518060200160405280600081525061207f565b60408051878152602081018790529081018590526001600160a01b03881690899033907fca5f4ab066342b47da5386168ff3e83e4adf2fac5830bc49703b70908525ab469060600160405180910390a4604080516060810182526001600160a01b039889168152602080820198895281830197885260009a8b526003939093018352818a20958a5294909152909620915182546001600160a01b031916951694909417815591516001830155516002909101555050565b6112976103cf7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa725490565b806001600160a01b0381166112e05760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b60448201526064016107a2565b60008051602061332383398151915280546001600160a01b038481169116146104195780546040516001600160a01b038086169216907eed81eff0ba83420a43348ef3da96ac4ab548b89a0c78453591ba715019703390600090a380546001600160a01b0384166001600160a01b0319909116178155505050565b6000805160206133038339815191525460609060008167ffffffffffffffff8111156113895761138961291d565b6040519080825280602002602001820160405280156113e757816020015b6113d4604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816113a75790505b50905060005b828110156114395761140985611404836001612fb9565b611ced565b82828151811061141b5761141b612f74565b6020026020010181905250808061143190612fa0565b9150506113ed565b509392505050565b6000600080516020613323833981519152546040516331a9108f60e11b8152600481018490526001600160a01b0390911691506000908290636352211e90602401602060405180830381865afa15801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c39190612efa565b9050336001600160a01b03821614806114f35750600080516020613323833981519152546001600160a01b031633145b61158b5760405162461bcd60e51b815260206004820152605c60248201527f496e76656e746f727946616365742e5f756e6571756970416c6c4974656d733a60448201527f2043616c6c6572206e6f7420417263616469616e7320636f6e7472616374206e60648201527f656974686572206f722074686520617263616469616e206f776e657200000000608482015260a4016107a2565b60008051602061332383398151915260005b81600101548110156103e15760006115b6826001612fb9565b60008781526003850160209081526040808320848452825280832060028801909252909120600101549192509060ff161580156115f7575060008160020154115b156116a757611621333087846001015485600201546040518060200160405280600081525061207f565b86856001600160a01b03167faac45c254099c6998eb1c782987885f75442801e720e4387e6c4ade122529b7084846002015460405161166a929190918252602082015260400190565b60405180910390a360008781526003850160209081526040808320858452909152812080546001600160a01b031916815560018101829055600201555b505080806116b490612fa0565b91505061159d565b836000600080516020613323833981519152546040516331a9108f60e11b8152600481018490526001600160a01b0390911691508190636352211e90602401602060405180830381865afa158015611718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173c9190612efa565b6001600160a01b0316336001600160a01b03161461176c5760405162461bcd60e51b81526004016107a290612f17565b60008581527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860205260409020600101546000805160206133238339815191529060ff16156118175760405162461bcd60e51b815260206004820152603160248201527f496e76656e746f727946616365742e5f756e65717569703a20536c6f74206973604482015270206e6f7420756e65717569707061626c6560781b60648201526084016107a2565b600087815260038201602090815260408083208984529091529020851561184457806002015494506118d2565b80600201548511156118d25760405162461bcd60e51b815260206004820152604b60248201527f496e76656e746f727946616365742e5f756e65717569703a20417474656d707460448201527f696e6720746f20756e657175697020746f6f206d616e79206974656d7320667260648201526a1bdb481d1a19481cdb1bdd60aa1b608482015260a4016107a2565b805460018201546040805160208101909152600081526119049233926001600160a01b03909116918391908a9061207f565b6040805188815260208101879052899133917faac45c254099c6998eb1c782987885f75442801e720e4387e6c4ade122529b70910160405180910390a3848160020160008282546119559190613053565b9091555050600281015460000361199b57600088815260038301602090815260408083208a8452909152812080546001600160a01b031916815560018101829055600201555b5050505050505050565b866000600080516020613323833981519152546040516331a9108f60e11b8152600481018490526001600160a01b0390911691508190636352211e90602401602060405180830381865afa158015611a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a259190612efa565b6001600160a01b0316336001600160a01b031614611a555760405162461bcd60e51b81526004016107a290612f17565b60008051602061332383398151915260005b88811015610ced576000868683818110611a8357611a83612f74565b90506020020135905060008b8b84818110611aa057611aa0612f74565b602090810292909201356000818152600288019093526040909220600101549192505060ff1615611b395760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f756e657175697042617463683a20536c60448201527f6f74206973206e6f7420756e65717569707061626c650000000000000000000060648201526084016107a2565b60008d8152600385016020908152604080832084845290915290208a8a85818110611b6657611b66612f74565b9050602002016020810190611b7b9190613066565b15611b8c5780600201549250611c1f565b8060020154831115611c1f5760405162461bcd60e51b815260206004820152605060248201527f496e76656e746f727946616365742e5f756e657175697042617463683a20417460448201527f74656d7074696e6720746f20756e657175697020746f6f206d616e792069746560648201526f1b5cc8199c9bdb481d1a19481cdb1bdd60821b608482015260a4016107a2565b82816002015403611c635760008e81526003860160209081526040808320858452909152812080546001600160a01b03191681556001810182905560020155611c7d565b82816002016000828254611c779190613053565b90915550505b611c9a33303385876040518060200160405280600081525061207f565b60408051838152602081018590528f9133917faac45c254099c6998eb1c782987885f75442801e720e4387e6c4ade122529b70910160405180910390a35050508080611ce590612fa0565b915050611a67565b611d1a604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b5060009182527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4396020908152604080842092845291815291819020815160608101835281546001600160a01b03168152600182015493810193909352600201549082015290565b60006001600160a01b038316611daa5760405163db5d879760e01b815260040160405180910390fd5b7f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b6000928352602090815260408084206001600160a01b0395909516845293905250205490565b611dff86868686868661209b565b611e0d868686868686612248565b505050505050565b611e1f8282612358565b611e7757611e35816001600160a01b031661238f565b611e408360206123a1565b604051602001611e519291906130a5565b60408051601f198184030181529082905262461bcd60e51b82526107a291600401613146565b5050565b8080600003611e9c5760405162461bcd60e51b81526004016107a290612fcc565b60008051602061330383398151915254811115611ecb5760405162461bcd60e51b81526004016107a290613011565b846001600160a01b038116611f145760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b60448201526064016107a2565b60005b848110156106ab57611f4287878784818110611f3557611f35612f74565b9050602002013586611f54565b80611f4c81612fa0565b915050611f17565b60008181527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860209081526040808320600201805460018082018355918552838520018690556001600160a01b0387168085527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b8452828520878652845282852080548084018255908652848620018690558585527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a84528285208186528452828520878652845293829020805460ff191690911790558051928352908201849052818101839052516000805160206133238339815191529133917f06a91fc4263d54ad68fef9c0c9e5396bdf5c7bf36ca80c14dcacee462847a5b39181900360600190a250505050565b61208d8686868686866124f4565b611e0d868686868686612625565b6001600160a01b0384166120c25760405163f5cadad560e01b815260040160405180910390fd5b81518351146120e457604051633e7e0b6d60e11b815260040160405180910390fd5b7f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b60005b84518110156121e757600085828151811061212557612125612f74565b60200260200101519050600085838151811061214357612143612f74565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150808211156121945760405163119ac6bb60e31b815260040160405180910390fd5b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a1681529081208054600195909501948392906121da908490612fb9565b9091555061210892505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612237929190613159565b60405180910390a450505050505050565b6001600160a01b0384163b15611e0d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061228c9089908990889088908890600401613187565b6020604051808303816000875af19250505080156122c7575060408051601f3d908101601f191682019092526122c4918101906131e5565b60015b612327576122d3613202565b806308c379a00361230c57506122e761321e565b806122f2575061230e565b8060405162461bcd60e51b81526004016107a29190613146565b505b60405163380147a960e01b815260040160405180910390fd5b6001600160e01b0319811663bc197c8160e01b146106ab57604051633744db2960e01b815260040160405180910390fd5b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206106eb90836126e1565b60606103396001600160a01b03831660145b606060006123b08360026132a8565b6123bb906002612fb9565b67ffffffffffffffff8111156123d3576123d361291d565b6040519080825280601f01601f1916602001820160405280156123fd576020820181803683370190505b509050600360fc1b8160008151811061241857612418612f74565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061244757612447612f74565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156124d4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061249757612497612f74565b1a60f81b8282815181106124ad576124ad612f74565b60200101906001600160f81b031916908160001a90535060049490941c9360001901612466565b5083156106eb5760405163c913478560e01b815260040160405180910390fd5b6001600160a01b03841661251b5760405163f5cadad560e01b815260040160405180910390fd5b61253386868661252a87612703565b6103e187612703565b60008381527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b602081815260408084206001600160a01b038a16855290915290912054808411156125975760405163119ac6bb60e31b815260040160405180910390fd5b6000858152602083815260408083206001600160a01b038b811685529252808320938790039093558716815290812080548592906125d6908490612fb9565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101612237565b6001600160a01b0384163b15611e0d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061266990899089908890889088906004016132bf565b6020604051808303816000875af19250505080156126a4575060408051601f3d908101601f191682019092526126a1918101906131e5565b60015b6126b0576122d3613202565b6001600160e01b0319811663f23a6e6160e01b146106ab57604051633744db2960e01b815260040160405180910390fd5b6001600160a01b038116600090815260018301602052604081205415156106eb565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061273d5761273d612f74565b602090810291909101015292915050565b6001600160e01b0319811681146104b157600080fd5b60006020828403121561277657600080fd5b81356106eb8161274e565b6001600160a01b03811681146104b157600080fd5b60008083601f8401126127a857600080fd5b50813567ffffffffffffffff8111156127c057600080fd5b6020830191508360208260051b85010111156127db57600080fd5b9250929050565b60008060008060008060008060a0898b0312156127fe57600080fd5b88359750602089013561281081612781565b9650604089013567ffffffffffffffff8082111561282d57600080fd5b6128398c838d01612796565b909850965060608b013591508082111561285257600080fd5b61285e8c838d01612796565b909650945060808b013591508082111561287757600080fd5b506128848b828c01612796565b999c989b5096995094979396929594505050565b803580151581146128a857600080fd5b919050565b6000806000806000608086880312156128c557600080fd5b85356128d081612781565b9450602086013567ffffffffffffffff8111156128ec57600080fd5b6128f888828901612796565b9095509350506040860135915061291160608701612898565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156129595761295961291d565b6040525050565b600082601f83011261297157600080fd5b813567ffffffffffffffff81111561298b5761298b61291d565b6040516129a2601f8301601f191660200182612933565b8181528460208386010111156129b757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156129ea57600080fd5b84356129f581612781565b93506020850135612a0581612781565b925060408501359150606085013567ffffffffffffffff811115612a2857600080fd5b612a3487828801612960565b91505092959194509250565b600080600060608486031215612a5557600080fd5b8335612a6081612781565b95602085013595506040909401359392505050565b600080600080600060a08688031215612a8d57600080fd5b853594506020860135612a9f81612781565b94979496505050506040830135926060810135926080909101359150565b600060208284031215612acf57600080fd5b81356106eb81612781565b60008060408385031215612aed57600080fd5b8235612af881612781565b946020939093013593505050565b600081518084526020808501945080840160005b83811015612b3657815187529582019590820190600101612b1a565b509495945050505050565b6020815260006106eb6020830184612b06565b600060208284031215612b6657600080fd5b5035919050565b60006020808352608083018451828501528185015115156040850152604085015160608086015281815180845260a0870191508483019350600092505b80831015612bca5783518252928401926001929092019190840190612baa565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612c3457612c2183855180516001600160a01b0316825260208082015190830152604090810151910152565b9284019260609290920191600101612bf1565b50909695505050505050565b600082601f830112612c5157600080fd5b8135602067ffffffffffffffff821115612c6d57612c6d61291d565b8160051b604051612c8083830182612933565b92835284810182019282810187851115612c9957600080fd5b83870192505b84831015612bca5782358152918301918301612c9f565b600080600080600060a08688031215612cce57600080fd5b8535612cd981612781565b94506020860135612ce981612781565b9350604086013567ffffffffffffffff80821115612d0657600080fd5b612d1289838a01612c40565b94506060880135915080821115612d2857600080fd5b612d3489838a01612c40565b93506080880135915080821115612d4a57600080fd5b50612d5788828901612960565b9150509295509295909350565b60008060008060808587031215612d7a57600080fd5b8435935060208501359250612d9160408601612898565b9396929550929360600135925050565b60008060008060008060006080888a031215612dbc57600080fd5b87359650602088013567ffffffffffffffff80821115612ddb57600080fd5b612de78b838c01612796565b909850965060408a0135915080821115612e0057600080fd5b612e0c8b838c01612796565b909650945060608a0135915080821115612e2557600080fd5b50612e328a828b01612796565b989b979a50959850939692959293505050565b60008060408385031215612e5857600080fd5b50508035926020909101359150565b81516001600160a01b03168152602080830151908201526040808301519082015260608101610339565b600080600080600060a08688031215612ea957600080fd5b8535612eb481612781565b94506020860135612ec481612781565b93506040860135925060608601359150608086013567ffffffffffffffff811115612eee57600080fd5b612d5788828901612960565b600060208284031215612f0c57600080fd5b81516106eb81612781565b6020808252603b908201527f496e76656e746f727946616365743a204d6573736167652073656e646572206960408201527f73206e6f74206f776e6572206f662074686520617263616469616e0000000000606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612fb257612fb2612f8a565b5060010190565b8082018082111561033957610339612f8a565b60208082526025908201527f496e76656e746f727946616365743a20536c6f742069642063616e2774206265604082015264207a65726f60d81b606082015260800190565b60208082526022908201527f496e76656e746f727946616365743a20496e6578697374656e7420736c6f74206040820152611a5960f21b606082015260800190565b8181038181111561033957610339612f8a565b60006020828403121561307857600080fd5b6106eb82612898565b60005b8381101561309c578181015183820152602001613084565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516130dd816017850160208801613081565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161310e816028840160208801613081565b01602801949350505050565b60008151808452613132816020860160208601613081565b601f01601f19169290920160200192915050565b6020815260006106eb602083018461311a565b60408152600061316c6040830185612b06565b828103602084015261317e8185612b06565b95945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526131b360a0830186612b06565b82810360608401526131c58186612b06565b905082810360808401526131d9818561311a565b98975050505050505050565b6000602082840312156131f757600080fd5b81516106eb8161274e565b600060033d111561321b5760046000803e5060005160e01c5b90565b600060443d101561322c5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561325c57505050505090565b82850191508151818111156132745750505050505090565b843d870101602082850101111561328e5750505050505090565b61329d60208286010187612933565b509095945050505050565b808202811582820484141761033957610339612f8a565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526132f760a083018461311a565b97965050505050505056fef672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d437f672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220e2e202b15b5e91bdecabaf94e5fb38dee815adbda24432635e81a50542f197e364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}