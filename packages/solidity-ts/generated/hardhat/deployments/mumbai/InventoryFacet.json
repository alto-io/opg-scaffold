{
  "address": "0xBB47df2ff47B0E2663309b998338D146fDE295A8",
  "abi": [
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldArcadiansAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newArcadiansAddress",
          "type": "address"
        }
      ],
      "name": "ArcadiansAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "ItemsAllowedInSlotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "ItemsUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "unequippable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum InventoryStorage.SlotCategory",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "SlotCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "allowItemsInSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "allowedItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "allowedSlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "unequippable",
          "type": "bool"
        },
        {
          "internalType": "enum InventoryStorage.SlotCategory",
          "name": "category",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "createSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "disallowItemsInSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item",
          "name": "itemsToEquip",
          "type": "tuple"
        }
      ],
      "name": "equip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "itemsToEquip",
          "type": "tuple[]"
        }
      ],
      "name": "equipBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "equipped",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item",
          "name": "item",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        }
      ],
      "name": "equippedAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "item",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "isArcadianUnique",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSlots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "slot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "unequippable",
              "type": "bool"
            },
            {
              "internalType": "enum InventoryStorage.SlotCategory",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct InventoryStorage.Slot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "unequip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "slots",
          "type": "uint256[]"
        }
      ],
      "name": "unequipBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xad909a8a54206d48f7afd095c28bb8213db713ba6307308a560549ccad20862f",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0xBB47df2ff47B0E2663309b998338D146fDE295A8",
    "transactionIndex": 0,
    "gasUsed": "3130055",
    "logsBloom": "0x
    "blockHash": "0xe6fd24de3bc1f1b611998521e4b3661f6a4c131d4701aa79b266d7fec3dc05de",
    "transactionHash": "0xad909a8a54206d48f7afd095c28bb8213db713ba6307308a560549ccad20862f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33693601,
        "transactionHash": "0xad909a8a54206d48f7afd095c28bb8213db713ba6307308a560549ccad20862f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001bccebccd1cc3900000000000000000000000000000000000000000000000001c6d99ced672e8510000000000000000000000000000000000000000000004e96cdfd11493b4d60f0000000000000000000000000000000000000000000000001ab0cb12095624c10000000000000000000000000000000000000000000004e96e9c9fd160d1999f",
        "logIndex": 0,
        "blockHash": "0xe6fd24de3bc1f1b611998521e4b3661f6a4c131d4701aa79b266d7fec3dc05de"
      }
    ],
    "blockNumber": 33693601,
    "cumulativeGasUsed": "3130055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "f1e3877b8f8ef72bb892491c6379771c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldArcadiansAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newArcadiansAddress\",\"type\":\"address\"}],\"name\":\"ArcadiansAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"ItemsAllowedInSlotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unequippable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"SlotCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"allowItemsInSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"allowedItems\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"allowedSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"unequippable\",\"type\":\"bool\"},{\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"createSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"disallowItemsInSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item\",\"name\":\"itemsToEquip\",\"type\":\"tuple\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"itemsToEquip\",\"type\":\"tuple[]\"}],\"name\":\"equipBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"equipped\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"}],\"name\":\"equippedAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"item\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"isArcadianUnique\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSlots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"slot\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"unequippable\",\"type\":\"bool\"},{\"internalType\":\"enum InventoryStorage.SlotCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct InventoryStorage.Slot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slots\",\"type\":\"uint256[]\"}],\"name\":\"unequipBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/inventory/InventoryFacet.sol\":\"InventoryFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 minValue = bytes32(type(uint256).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(address[] memory array) internal pure returns (address) {\\n        address minValue = address(type(uint160).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 minValue = type(uint256).max;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 maxValue = bytes32(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(address[] memory array) internal pure returns (address) {\\n        address maxValue = address(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 maxValue = 0;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86a2953855b8df5a5ded23a79016f1584b6321ef2c04f44466ebfbb6d23e728c\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/inventory/InventoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Crated based in the following work:\\n * Authors: Moonstream DAO (engineering@moonstream.to)\\n * GitHub: https://github.com/G7DAO/contracts\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ERC1155Holder } from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport { ERC721Holder } from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { InventoryInternal } from \\\"./InventoryInternal.sol\\\";\\n\\ncontract InventoryFacet is\\n    ERC721Holder,\\n    ERC1155Holder,\\n    ReentrancyGuard,\\n    InventoryInternal\\n{\\n\\n    function numSlots() external view returns (uint) {\\n        return _numSlots();\\n    }\\n\\n    function slot(uint slotId) external view returns (InventoryStorage.Slot memory) {\\n        return _slot(slotId);\\n    }\\n\\n    function createSlot(\\n        bool unequippable,\\n        InventoryStorage.SlotCategory category,\\n        InventoryStorage.Item[] calldata items\\n    ) external onlyManager {\\n        _createSlot(unequippable, category, items);\\n    }\\n\\n    function allowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) external {\\n        _allowItemsInSlot(slotId, items);\\n    }\\n\\n    function disallowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) external {\\n        _disallowItemsInSlot(slotId, items);\\n    }\\n\\n    function allowedSlot(InventoryStorage.Item calldata item) external view returns (uint) {\\n        return _allowedSlot(item);\\n    }\\n\\n    function allowedItems(uint slotId) external view returns (InventoryStorage.Item[] memory) {\\n        return _allowedItems(slotId);\\n    }\\n\\n    function equip(\\n        uint arcadianId,\\n        uint slotId,\\n        InventoryStorage.Item calldata itemsToEquip\\n    ) external nonReentrant {\\n        _equip(arcadianId, slotId, itemsToEquip);\\n    }\\n\\n    function equipBatch(\\n        uint arcadianId,\\n        uint[] calldata slots,\\n        InventoryStorage.Item[] calldata itemsToEquip\\n    ) external nonReentrant {\\n        _equipBatch(arcadianId, slots, itemsToEquip);\\n    }\\n\\n    function unequip(\\n        uint arcadianId,\\n        uint slotId\\n    ) external nonReentrant {\\n        _unequip(arcadianId, slotId);\\n    }\\n\\n    function unequipBatch(\\n        uint arcadianId,\\n        uint[] calldata slots\\n    ) external nonReentrant {\\n        _unequipBatch(arcadianId, slots);\\n    }\\n\\n    function equipped(\\n        uint arcadianId,\\n        uint slotId\\n    ) external view returns (InventoryStorage.Item memory item) {\\n        return _equipped(arcadianId, slotId);\\n    }\\n\\n    function equippedAll(\\n        uint arcadianId\\n    ) external view returns (InventoryStorage.Item[] memory item) {\\n        return _equippedAll(arcadianId);\\n    }\\n\\n    function isArcadianUnique(\\n        uint arcadianId,\\n        uint[] calldata slots,\\n        InventoryStorage.Item[] calldata items\\n    ) external view returns (bool) {\\n        return _isArcadianUnique(arcadianId, slots, items);\\n    }\\n}\",\"keccak256\":\"0x19c08af779094eedfd8494738d7b5d085fec91ca014f786f8c399c56b84af7ef\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { AddressUtils } from \\\"@solidstate/contracts/utils/AddressUtils.sol\\\";\\nimport { ArrayUtils } from \\\"@solidstate/contracts/utils/ArrayUtils.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { IERC1155 } from \\\"@solidstate/contracts/interfaces/IERC1155.sol\\\";\\n\\ncontract InventoryInternal is\\n    ReentrancyGuard,\\n    RolesInternal\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using AddressUtils for address;\\n\\n    event ArcadiansAddressChanged(address indexed oldArcadiansAddress, address indexed newArcadiansAddress);\\n\\n    event ItemsAllowedInSlotUpdated(\\n        address indexed by,\\n        uint slotId\\n    );\\n\\n    event ItemsEquipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event ItemsUnequipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint[] slots\\n    );\\n\\n    event SlotCreated(\\n        address indexed by,\\n        uint slotId,\\n        bool unequippable,\\n        InventoryStorage.SlotCategory category\\n    );\\n\\n    modifier onlyValidSlot(uint slotId) {\\n        require(slotId != 0, \\\"InventoryFacet: Slot id can't be zero\\\");\\n        require(slotId <= InventoryStorage.layout().numSlots, \\\"InventoryFacet: Invalid slot\\\");\\n        _;\\n    }\\n\\n    modifier onlyArcadianOwner(uint arcadianId) {\\n        IERC721 arcadiansContract = IERC721(address(this));\\n        require(\\n            msg.sender == arcadiansContract.ownerOf(arcadianId),\\n            \\\"InventoryFacet: Message sender is not owner of the arcadian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyValidAddress(address _address) {\\n        require(_address != address(0), \\\"Invalid Address\\\");\\n        _;\\n    }\\n\\n    modifier onlyContract(address _address) {\\n        require(_address.isContract(), \\\"InventoryFacet: Address given is not a contract\\\");\\n        _;\\n    }\\n\\n    function _numSlots() internal view returns (uint) {\\n        return InventoryStorage.layout().numSlots;\\n    }\\n\\n    function _equip(\\n        uint arcadianId,\\n        uint slotId,\\n        InventoryStorage.Item calldata itemToEquip\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        require(inventorySL.itemSlot[itemToEquip.contractAddress][itemToEquip.id] == slotId, \\\"InventoryFacet.equip: Item not elegible for slot\\\");\\n        require(!inventorySL.slots[slotId].unequippable || inventorySL.equippedItems[arcadianId][slotId].contractAddress == address(0), \\\"InventoryFacet.equip: Unequippable slots already has an item\\\");\\n        _unequipUnchecked(arcadianId, slotId);\\n\\n        IERC1155 erc1155Contract = IERC1155(itemToEquip.contractAddress);\\n        require(\\n            erc1155Contract.balanceOf(msg.sender, itemToEquip.id) > 0,\\n            \\\"InventoryFacet.equip: Message sender does not own enough of that item to equip\\\"\\n        );\\n\\n        erc1155Contract.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            itemToEquip.id,\\n            1,\\n            ''\\n        );\\n\\n        uint[] memory slotsIds = new uint[](1);\\n        slotsIds[0] = slotId;\\n        emit ItemsEquipped(\\n            msg.sender,\\n            arcadianId,\\n            slotsIds\\n        );\\n\\n        inventorySL.equippedItems[arcadianId][slotId] = itemToEquip;\\n        require(_hashBaseItemsUnchecked(arcadianId), \\\"InventoryFacet._equip: Base items are not unique\\\");\\n    }\\n\\n    function _equipBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds,\\n        InventoryStorage.Item[] calldata itemsToEquip\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        // current: 1954977\\n        require(slotIds.length > 0, \\\"InventoryFacet._unequip: Should specify at least one slot\\\");\\n        require(slotIds.length == itemsToEquip.length, \\\"InventoryFacet._equipBatch: Input data length mismatch\\\");\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            uint slotId = slotIds[i];\\n            require(\\n                slotId > 0 && slotId <= numSlots, \\n                \\\"InventoryFacet._equipBatch: Invalid slot\\\"\\n            );\\n            require(\\n                inventorySL.itemSlot[itemsToEquip[i].contractAddress][itemsToEquip[i].id] == slotId, \\n                \\\"InventoryFacet._equipBatch: Item not elegible for slot\\\"\\n            );\\n\\n            IERC1155 erc1155Contract = IERC1155(itemsToEquip[i].contractAddress);\\n            require(\\n                erc1155Contract.balanceOf(msg.sender, itemsToEquip[i].id) > 0,\\n                \\\"InventoryFacet.equip: Sender has insufficient item balance\\\"\\n            );\\n\\n            InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n            require(\\n                !inventorySL.slots[slotId].unequippable || existingItem.contractAddress == address(0), \\n                \\\"InventoryFacet.equip: Unequippable slots already has an item\\\"\\n            );\\n\\n            if (existingItem.contractAddress == itemsToEquip[i].contractAddress && existingItem.id == itemsToEquip[i].id) {\\n                continue;\\n            }\\n\\n            if (existingItem.contractAddress != address(0)) {\\n                erc1155Contract.safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    existingItem.id,\\n                    1,\\n                    ''\\n                );\\n            }\\n\\n            inventorySL.equippedItems[arcadianId][slotId] = itemsToEquip[i];\\n\\n            erc1155Contract.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                itemsToEquip[i].id,\\n                1,\\n                ''\\n            );\\n        }\\n\\n        emit ItemsEquipped(\\n            msg.sender,\\n            arcadianId,\\n            slotIds\\n        );\\n\\n        require(_hashBaseItemsUnchecked(arcadianId), \\\"InventoryFacet._equipBatch: Base items are not unique\\\");\\n    }\\n\\n    function _unequipUnchecked(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n        IERC1155 erc1155Contract = IERC1155(existingItem.contractAddress);\\n        if (existingItem.contractAddress != address(0)) {\\n            erc1155Contract.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                existingItem.id,\\n                1,\\n                ''\\n            );\\n            delete inventorySL.equippedItems[arcadianId][slotId];\\n        }\\n    }\\n\\n    function _unequip(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal onlyArcadianOwner(arcadianId) onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        require(!inventorySL.slots[slotId].unequippable, \\\"InventoryFacet._unequip: Slot is unequippable\\\");\\n        require(inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0), \\\"InventoryFacet._unequip: Slot not equipped\\\");\\n        \\n        _unequipUnchecked(arcadianId, slotId);\\n\\n        uint[] memory slots = new uint[](1);\\n        slots[0] = slotId;\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slots\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _unequipBatch(\\n        uint arcadianId,\\n        uint[] calldata slotIds\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        require(slotIds.length > 0, \\\"InventoryFacet._unequip: Should specify at least one slot\\\");\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < slotIds.length; i++) {\\n            uint slotId = slotIds[i];\\n            require(slotId > 0 && slotId <= inventorySL.numSlots, \\\"InventoryFacet._unequip: Invalid slot\\\");\\n            require(!inventorySL.slots[slotId].unequippable, \\\"InventoryFacet._unequip: Slot is unequippable\\\");\\n            require(inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0), \\\"InventoryFacet._unequip: Slot not equipped\\\");\\n            \\n            _unequipUnchecked(arcadianId, slotId);\\n        }\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slotIds\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _unequipAllUnchecked(\\n        uint arcadianId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        uint numUnequippableSlots;\\n        for (uint slotId = 1; slotId <= numSlots; slotId++) {\\n            if (!inventorySL.slots[slotId].unequippable && inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0)) {\\n                numUnequippableSlots++;\\n            }\\n        }\\n\\n        uint[] memory unequippedSlots = new uint[](numUnequippableSlots);\\n        uint counter;\\n        for (uint slotId = 1; slotId <= numSlots; slotId++) {\\n            if (!inventorySL.slots[slotId].unequippable && inventorySL.equippedItems[arcadianId][slotId].contractAddress != address(0)) {\\n                _unequipUnchecked(arcadianId, slotId);\\n                unequippedSlots[counter] = slotId;\\n                counter++;\\n            }\\n        }\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            unequippedSlots\\n        );\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n    }\\n\\n    function _equipped(\\n        uint arcadianId,\\n        uint slotId\\n    ) internal view returns (InventoryStorage.Item memory) {\\n        return InventoryStorage.layout().equippedItems[arcadianId][slotId];\\n    }\\n\\n    function _equippedAll(\\n        uint arcadianId\\n    ) internal view returns (InventoryStorage.Item[] memory) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint numSlots = inventorySL.numSlots;\\n        InventoryStorage.Item[] memory items = new InventoryStorage.Item[](numSlots);\\n        for (uint i = 0; i < numSlots; i++) {\\n            items[i] = inventorySL.equippedItems[arcadianId][i+1];\\n        }\\n        return items;\\n    }\\n\\n    function _isArcadianUnique(\\n        uint arcadianId,\\n        uint[] calldata slotsIds,\\n        InventoryStorage.Item[] calldata items\\n    ) internal view returns (bool) {\\n        require(slotsIds.length == items.length, \\\"InventoryFacet._isArcadianUnique: Input data length mismatch\\\");\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n\\n        uint baseSlotsLength = baseSlots.length();\\n        uint[] memory baseSlotsIds = new uint[](baseSlotsLength);\\n        InventoryStorage.Item[] memory baseItems = new InventoryStorage.Item[](baseSlotsLength);\\n        uint numSlots = inventorySL.numSlots;\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            require(slotId > 0 && slotId <= numSlots, \\\"InventoryFacet._isArcadianUnique: Invalid slot\\\");\\n            baseSlotsIds[i] = slotId;\\n            baseItems[i] = inventorySL.equippedItems[arcadianId][slotId];\\n        }\\n\\n        for (uint i = 0; i < slotsIds.length; i++) {\\n            if (!baseSlots.contains(slotsIds[i])) continue;\\n            baseSlotsIds[i] = slotsIds[i];\\n            baseItems[i].contractAddress = items[i].contractAddress;\\n            baseItems[i].id = items[i].id;\\n        }\\n\\n        bytes memory encodedItems;\\n        for (uint i = 0; i < baseSlotsIds.length; i++) {\\n            encodedItems = abi.encodePacked(encodedItems, baseSlotsIds[i], baseItems[i].contractAddress, baseItems[i].id);\\n        }\\n\\n        return !inventorySL.baseItemsHashesSet.contains(keccak256(encodedItems));\\n    }\\n\\n    function _hashBaseItemsUnchecked(\\n        uint arcadianId\\n    ) internal returns (bool isUnique) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        bytes memory encodedItems;\\n        EnumerableSet.UintSet storage baseSlots = inventorySL.categoryToSlots[InventoryStorage.SlotCategory.Base];\\n        uint baseSlotsLength = baseSlots.length();\\n        for (uint i = 0; i < baseSlotsLength; i++) {\\n            uint slotId = baseSlots.at(i);\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotId];\\n            encodedItems = abi.encodePacked(encodedItems, slotId, equippedItem.contractAddress, equippedItem.id);\\n        }\\n        bytes32 baseItemsHash = keccak256(encodedItems);\\n        isUnique = !inventorySL.baseItemsHashesSet.contains(baseItemsHash);\\n        inventorySL.baseItemsHashesSet.remove(inventorySL.arcadiansBaseItemsHashes[arcadianId]);\\n        inventorySL.baseItemsHashesSet.add(baseItemsHash);\\n        inventorySL.arcadiansBaseItemsHashes[arcadianId] = baseItemsHash;\\n    }\\n\\n    function _createSlot(\\n        bool unequippable,\\n        InventoryStorage.SlotCategory category,\\n        InventoryStorage.Item[] calldata allowedItems\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        // slots are 1-index\\n        inventorySL.numSlots += 1;\\n        uint newSlot = inventorySL.numSlots;\\n        inventorySL.slots[newSlot].unequippable = unequippable;\\n        inventorySL.slots[newSlot].category = category;\\n\\n        if (allowedItems.length > 0) {\\n            _allowItemsInSlot(newSlot, allowedItems);\\n        }\\n\\n        emit SlotCreated(msg.sender, newSlot, unequippable, category);\\n    }\\n\\n    function _allowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < items.length; i++) {\\n            require(items[i].contractAddress.isContract(), \\\"InventoryFacet._allowItemsInSlot: Invalid items contract address\\\");\\n            require(inventorySL.itemSlot[items[i].contractAddress][items[i].id] != slotId, \\\"InventoryFacet._allowItemsInSlot: Item already allowed in the slot\\\");\\n\\n            if (inventorySL.itemSlot[items[i].contractAddress][items[i].id] > 0) {\\n                _disallowItemInSlotUnchecked(slotId, items[i]);\\n            }\\n            inventorySL.allowedItems[slotId].push(items[i]);\\n            inventorySL.itemSlot[items[i].contractAddress][items[i].id] = slotId;\\n        }\\n        inventorySL.categoryToSlots[inventorySL.slots[slotId].category].add(slotId);\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemsInSlot(\\n        uint slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < items.length; i++) {\\n            require(inventorySL.itemSlot[items[i].contractAddress][items[i].id] == slotId, \\\"InventoryFacet._disallowItemsInSlot: Item already not allowed in the slot\\\");\\n            _disallowItemInSlotUnchecked(slotId, items[i]);\\n        }\\n        emit ItemsAllowedInSlotUpdated(msg.sender, slotId);\\n    }\\n\\n    function _disallowItemInSlotUnchecked(\\n        uint slotId,\\n        InventoryStorage.Item calldata item\\n    ) internal virtual {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        for (uint i = 0; i < inventorySL.allowedItems[slotId].length; i++) {\\n            if (inventorySL.allowedItems[slotId][i].id == item.id) {\\n                inventorySL.allowedItems[slotId][i] = inventorySL.allowedItems[slotId][inventorySL.allowedItems[slotId].length-1];\\n                delete inventorySL.allowedItems[slotId][inventorySL.allowedItems[slotId].length-1];\\n                inventorySL.allowedItems[slotId].pop();\\n                break;\\n            }\\n        }\\n        \\n        delete inventorySL.itemSlot[item.contractAddress][item.id];\\n    }\\n\\n    function _allowedSlot(InventoryStorage.Item calldata item) internal view returns (uint) {\\n        return InventoryStorage.layout().itemSlot[item.contractAddress][item.id];\\n    }\\n\\n    function _allowedItems(uint slotId) internal view onlyValidSlot(slotId) returns (InventoryStorage.Item[] memory) {\\n        return InventoryStorage.layout().allowedItems[slotId];\\n    }\\n\\n    function _slot(uint slotId) internal view returns (InventoryStorage.Slot storage) {\\n        return InventoryStorage.layout().slots[slotId];\\n    }\\n}\",\"keccak256\":\"0x496e6792469521e73a73ed8c8388a6b0a699d21b3af672086e69841f048ae555\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/inventory/InventoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\n\\n/**\\nLibInventory defines the storage structure used by the Inventory contract as a facet for an EIP-2535 Diamond\\nproxy.\\n */\\nlibrary InventoryStorage {\\n    bytes32 constant INVENTORY_STORAGE_POSITION =\\n        keccak256(\\\"inventory.storage.position\\\");\\n\\n    uint constant ERC721_ITEM_TYPE = 721;\\n    uint constant ERC1155_ITEM_TYPE = 1155;\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum SlotCategory { Base, Equippment, Cosmetic }\\n\\n    // EquippedItem: holds the information of the currently equipped item for a specific slot in an arcadian\\n    struct Item {\\n        address contractAddress;\\n        uint id;\\n    }\\n\\n    // Slot: Holds the general information for a slot\\n    struct Slot {\\n        bool unequippable;\\n        SlotCategory category;\\n    }\\n\\n    struct Layout {\\n        uint numSlots;\\n\\n        // Slot id => Slot\\n        mapping(uint => Slot) slots;\\n\\n        mapping(SlotCategory => EnumerableSet.UintSet) categoryToSlots;\\n\\n        // arcadian id => slot id => EquippedItem\\n        mapping(uint => mapping(uint => Item)) equippedItems;\\n\\n        // Slot id => item address => items allowed\\n        mapping(uint => InventoryStorage.Item[]) allowedItems;\\n        // item address => item id => allowed slot\\n        mapping(address => mapping(uint => uint)) itemSlot;\\n\\n        // base items hash => arcadian id\\n        EnumerableSet.Bytes32Set baseItemsHashesSet;\\n        mapping(uint => bytes32) arcadiansBaseItemsHashes;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage istore)\\n    {\\n        bytes32 position = INVENTORY_STORAGE_POSITION;\\n        assembly {\\n            istore.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xa3ef2362d82e4f7f58c73f0f3c0c939ae5e348a2219b1d6a9732ce77a1b37393\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(_defaultAdminRole());\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        _checkRole(_managerRole());\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        _checkRole(_minterRole());\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _minterRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().minterRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.minterRole = keccak256(\\\"minter.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n        _grantRole(_minterRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0xd3fa8bcc9380c117c2e22aeb6b4489ad01c31433b3c2d412742b681c94cf407d\",\"license\":\"UNLICENSED\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 minterRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x203cfbe268a1ac5fe32593c66ace04b576dfb2e25173e02654e504cf0de44d71\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506137aa806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80639e3ccb2a116100a2578063b9518c8d11610071578063b9518c8d1461025f578063b9e6a41214610272578063bc197c8114610285578063ef0bf7de146102a4578063f23a6e61146102c457600080fd5b80639e3ccb2a14610206578063a667d9d314610219578063b2025e4f1461022c578063b512cffe1461024c57600080fd5b80634274a143116100e95780634274a143146101b0578063473bdb98146101c557806376356aad146101d85780638aa5d1f7146101eb5780639621ff25146101fe57600080fd5b806301ffc9a71461011b578063150b7a02146101435780632e6e91aa1461016f5780632f8bd3c81461018f575b600080fd5b61012e610129366004612bbc565b6102e3565b60405190151581526020015b60405180910390f35b610156610151366004612cb0565b61031a565b6040516001600160e01b0319909116815260200161013a565b61018261017d366004612d1b565b61032b565b60405161013a9190612d34565b6101a261019d366004612dac565b610336565b60405190815260200161013a565b6101c36101be366004612e13565b610341565b005b6101c36101d3366004612e13565b610351565b6101c36101e6366004612e5e565b61035c565b6101c36101f9366004612ed8565b6103b7565b6101a2610416565b610182610214366004612d1b565b610425565b61012e610227366004612ed8565b610430565b61023f61023a366004612d1b565b610449565b60405161013a9190612f89565b6101c361025a366004612fa6565b6104d8565b6101c361026d366004612fc8565b610531565b6101c3610280366004613006565b610583565b6101566102933660046130f2565b63bc197c8160e01b95945050505050565b6102b76102b2366004612fa6565b6105a5565b60405161013a919061319f565b6101566102d23660046131bf565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061031457506301ffc9a760e01b6001600160e01b03198316145b92915050565b630a85bd0160e11b5b949350505050565b606061031482610622565b600061031482610719565b61034c838383610787565b505050565b61034c838383610962565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361039f57604051635db5c7cd60e11b815260040160405180910390fd5b600281556103ae848484610d55565b60019055505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036103fa57604051635db5c7cd60e11b815260040160405180910390fd5b6002815561040b86868686866111e1565b600190555050505050565b60006104206118bf565b905090565b6060610314826118d7565b600061043f86868686866119e3565b9695505050505050565b604080518082019091526000808252602082015260008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4376020526040902060408051808201909152815460ff80821615158352919291602084019161010090041660028111156104be576104be612f51565b60028111156104cf576104cf612f51565b90525092915050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361051b57604051635db5c7cd60e11b815260040160405180910390fd5b600281556105298383611e60565b600190555050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361057457604051635db5c7cd60e11b815260040160405180910390fd5b600281556103ae84848461207a565b61059361058e6122b3565b6122db565b61059f848484846122e8565b50505050565b604080518082018252600080825260208083018290528351808501855282815281018290528582527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4398152838220858352815290839020835180850190945280546001600160a01b031684526001015490830152905b9392505050565b6060818060000361064e5760405162461bcd60e51b815260040161064590613227565b60405180910390fd5b6000805160206137558339815191525481111561067d5760405162461bcd60e51b81526004016106459061326c565b60008381527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a6020908152604080832080548251818502810185019093528083529193909284015b8282101561070d576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016106c5565b50505050915050919050565b60007ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b8161074a60208501856132a3565b6001600160a01b03166001600160a01b03168152602001908152602001600020600083602001358152602001908152602001600020549050919050565b82806000036107a85760405162461bcd60e51b815260040161064590613227565b600080516020613755833981519152548111156107d75760405162461bcd60e51b81526004016106459061326c565b60008051602061375583398151915260005b83811015610925578582600501600087878581811061080a5761080a6132c0565b61082092602060409092020190810191506132a3565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610854576108546132c0565b90506040020160200135815260200190815260200160002054146108f25760405162461bcd60e51b815260206004820152604960248201527f496e76656e746f727946616365742e5f646973616c6c6f774974656d73496e5360448201527f6c6f743a204974656d20616c7265616479206e6f7420616c6c6f77656420696e606482015268081d1a19481cdb1bdd60ba1b608482015260a401610645565b61091386868684818110610908576109086132c0565b9050604002016123ba565b8061091d816132ec565b9150506107e9565b5060405185815233907ff69b53fa14ee16895edbe90d00c7b7af9214baf87c69bf5594126b114c9337ed9060200160405180910390a25050505050565b82806000036109835760405162461bcd60e51b815260040161064590613227565b600080516020613755833981519152548111156109b25760405162461bcd60e51b81526004016106459061326c565b60008051602061375583398151915260005b83811015610cf157610a068585838181106109e1576109e16132c0565b6109f792602060409092020190810191506132a3565b6001600160a01b03163b151590565b610a7a576040805162461bcd60e51b81526020600482015260248101919091527f496e76656e746f727946616365742e5f616c6c6f774974656d73496e536c6f7460448201527f3a20496e76616c6964206974656d7320636f6e747261637420616464726573736064820152608401610645565b85826005016000878785818110610a9357610a936132c0565b610aa992602060409092020190810191506132a3565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610add57610add6132c0565b9050604002016020013581526020019081526020016000205403610b745760405162461bcd60e51b815260206004820152604260248201527f496e76656e746f727946616365742e5f616c6c6f774974656d73496e536c6f7460448201527f3a204974656d20616c726561647920616c6c6f77656420696e2074686520736c6064820152611bdd60f21b608482015260a401610645565b6000826005016000878785818110610b8e57610b8e6132c0565b610ba492602060409092020190810191506132a3565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610bd857610bd86132c0565b905060400201602001358152602001908152602001600020541115610c0d57610c0d86868684818110610908576109086132c0565b60008681526004830160205260409020858583818110610c2f57610c2f6132c0565b835460018101855560009485526020909420604090910292909201926002029091019050610c5d8282613305565b505085826005016000878785818110610c7857610c786132c0565b610c8e92602060409092020190810191506132a3565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610cc257610cc26132c0565b905060400201602001358152602001908152602001600020819055508080610ce9906132ec565b9150506109c4565b50600085815260018201602052604081205461092591879160028086019291610100900460ff1690811115610d2857610d28612f51565b6002811115610d3957610d39612f51565b81526020019081526020016000206125c290919063ffffffff16565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa158015610d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db9919061333f565b6001600160a01b0316336001600160a01b031614610de95760405162461bcd60e51b81526004016106459061335c565b600080516020613755833981519152847ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b6000610e2960208801886132a3565b6001600160a01b03166001600160a01b031681526020019081526020016000206000866020013581526020019081526020016000205414610ec55760405162461bcd60e51b815260206004820152603060248201527f496e76656e746f727946616365742e65717569703a204974656d206e6f74206560448201526f1b1959da589b1948199bdc881cdb1bdd60821b6064820152608401610645565b600085815260018201602052604090205460ff161580610f075750600086815260038201602090815260408083208884529091529020546001600160a01b0316155b610f235760405162461bcd60e51b8152600401610645906133b9565b610f2d86866125ce565b6000610f3c60208601866132a3565b604051627eeac760e11b8152336004820152602087013560248201529091506000906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb29190613416565b1161103c5760405162461bcd60e51b815260206004820152604e60248201527f496e76656e746f727946616365742e65717569703a204d65737361676520736560448201527f6e64657220646f6573206e6f74206f776e20656e6f756768206f66207468617460648201526d0206974656d20746f2065717569760941b608482015260a401610645565b604051637921219560e11b81526001600160a01b0382169063f242432a90611073903390309060208b01359060019060040161342f565b600060405180830381600087803b15801561108d57600080fd5b505af11580156110a1573d6000803e3d6000fd5b5060009250600191506110b19050565b6040519080825280602002602001820160405280156110da578160200160208202803683370190505b50905086816000815181106110f1576110f16132c0565b60200260200101818152505087336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f18861836040516111379190613467565b60405180910390a3600088815260038401602090815260408083208a8452909152902086906111668282613305565b905050611172886126c4565b6111d75760405162461bcd60e51b815260206004820152603060248201527f496e76656e746f727946616365742e5f65717569703a2042617365206974656d60448201526f7320617265206e6f7420756e6971756560801b6064820152608401610645565b5050505050505050565b6040516331a9108f60e11b815260048101869052859030908190636352211e90602401602060405180830381865afa158015611221573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611245919061333f565b6001600160a01b0316336001600160a01b0316146112755760405162461bcd60e51b81526004016106459061335c565b846112925760405162461bcd60e51b8152600401610645906134ab565b8483146113075760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a20496e707560448201527f742064617461206c656e677468206d69736d61746368000000000000000000006064820152608401610645565b600080516020613755833981519152805460005b878110156117fc576000898983818110611337576113376132c0565b9050602002013590506000811180156113505750828111155b6113ad5760405162461bcd60e51b815260206004820152602860248201527f496e76656e746f727946616365742e5f657175697042617463683a20496e76616044820152671b1a59081cdb1bdd60c21b6064820152608401610645565b808460050160008a8a868181106113c6576113c66132c0565b6113dc92602060409092020190810191506132a3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a86818110611410576114106132c0565b905060400201602001358152602001908152602001600020541461149c5760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a204974656d60448201527f206e6f7420656c656769626c6520666f7220736c6f74000000000000000000006064820152608401610645565b60008888848181106114b0576114b06132c0565b6114c692602060409092020190810191506132a3565b90506000816001600160a01b031662fdd58e338c8c888181106114eb576114eb6132c0565b905060400201602001356040518363ffffffff1660e01b81526004016115269291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115679190613416565b116115da5760405162461bcd60e51b815260206004820152603a60248201527f496e76656e746f727946616365742e65717569703a2053656e6465722068617360448201527f20696e73756666696369656e74206974656d2062616c616e63650000000000006064820152608401610645565b60008c815260038601602090815260408083208584528252808320600189019092529091205460ff161580611617575080546001600160a01b0316155b6116335760405162461bcd60e51b8152600401610645906133b9565b898985818110611645576116456132c0565b61165b92602060409092020190810191506132a3565b81546001600160a01b0390811691161480156116955750898985818110611684576116846132c0565b905060400201602001358160010154145b156116a2575050506117ea565b80546001600160a01b03161561171a57600180820154604051637921219560e11b81526001600160a01b0385169263f242432a926116e792309233929160040161342f565b600060405180830381600087803b15801561170157600080fd5b505af1158015611715573d6000803e3d6000fd5b505050505b89898581811061172c5761172c6132c0565b9050604002018660030160008f8152602001908152602001600020600085815260200190815260200160002081816117649190613305565b50506001600160a01b03821663f242432a33308d8d89818110611789576117896132c0565b9050604002016020013560016040518563ffffffff1660e01b81526004016117b4949392919061342f565b600060405180830381600087803b1580156117ce57600080fd5b505af11580156117e2573d6000803e3d6000fd5b505050505050505b806117f4816132ec565b91505061131b565b5088336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f188618a8a604051611839929190613508565b60405180910390a361184a896126c4565b6118b45760405162461bcd60e51b815260206004820152603560248201527f496e76656e746f727946616365742e5f657175697042617463683a2042617365604482015274206974656d7320617265206e6f7420756e6971756560581b6064820152608401610645565b505050505050505050565b60006000805160206137558339815191525b54919050565b6000805160206137558339815191528054606091906000816001600160401b0381111561190657611906612bfb565b60405190808252806020026020018201604052801561194b57816020015b60408051808201909152600080825260208201528152602001906001900390816119245790505b50905060005b828110156119da576000868152600385016020526040812090611975836001613541565b81526020808201929092526040908101600020815180830190925280546001600160a01b03168252600101549181019190915282518390839081106119bc576119bc6132c0565b602002602001018190525080806119d2906132ec565b915050611951565b50949350505050565b6000838214611a5a5760405162461bcd60e51b815260206004820152603c60248201527f496e76656e746f727946616365742e5f6973417263616469616e556e6971756560448201527f3a20496e7075742064617461206c656e677468206d69736d61746368000000006064820152608401610645565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d438602052600080516020613755833981519152907f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd990611abe8261280b565b90506000816001600160401b03811115611ada57611ada612bfb565b604051908082528060200260200182016040528015611b03578160200160208202803683370190505b5090506000826001600160401b03811115611b2057611b20612bfb565b604051908082528060200260200182016040528015611b6557816020015b6040805180820190915260008082526020820152815260200190600190039081611b3e5790505b50855490915060005b84811015611c85576000611b828783612815565b9050600081118015611b945750828111155b611bf75760405162461bcd60e51b815260206004820152602e60248201527f496e76656e746f727946616365742e5f6973417263616469616e556e6971756560448201526d0e88125b9d985b1a59081cdb1bdd60921b6064820152608401610645565b80858381518110611c0a57611c0a6132c0565b60209081029190910181019190915260008f815260038a0182526040808220848352835290819020815180830190925280546001600160a01b0316825260010154918101919091528451859084908110611c6657611c666132c0565b6020026020010181905250508080611c7d906132ec565b915050611b6e565b5060005b8a811015611d9b57611cbc8c8c83818110611ca657611ca66132c0565b905060200201358761282190919063ffffffff16565b15611d89578b8b82818110611cd357611cd36132c0565b90506020020135848281518110611cec57611cec6132c0565b602002602001018181525050898982818110611d0a57611d0a6132c0565b611d2092602060409092020190810191506132a3565b838281518110611d3257611d326132c0565b60209081029190910101516001600160a01b039091169052898982818110611d5c57611d5c6132c0565b90506040020160200135838281518110611d7857611d786132c0565b602002602001015160200181815250505b80611d93816132ec565b915050611c89565b50606060005b8451811015611e385781858281518110611dbd57611dbd6132c0565b6020026020010151858381518110611dd757611dd76132c0565b602002602001015160000151868481518110611df557611df56132c0565b602002602001015160200151604051602001611e149493929190613578565b60405160208183030381529060405291508080611e30906132ec565b915050611da1565b5080516020820120611e4e906006890190612821565b159d9c50505050505050505050505050565b6040516331a9108f60e11b815260048101839052829030908190636352211e90602401602060405180830381865afa158015611ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec4919061333f565b6001600160a01b0316336001600160a01b031614611ef45760405162461bcd60e51b81526004016106459061335c565b8280600003611f155760405162461bcd60e51b815260040161064590613227565b60008051602061375583398151915254811115611f445760405162461bcd60e51b81526004016106459061326c565b60008481527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43760205260409020546000805160206137558339815191529060ff1615611fa25760405162461bcd60e51b8152600401610645906135b9565b600086815260038201602090815260408083208884529091529020546001600160a01b0316611fe35760405162461bcd60e51b815260040161064590613606565b611fed86866125ce565b604080516001808252818301909252600091602080830190803683370190505090508581600081518110612023576120236132c0565b60200260200101818152505086336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab63836040516120699190613467565b60405180910390a36111d7876126c4565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa1580156120ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120de919061333f565b6001600160a01b0316336001600160a01b03161461210e5760405162461bcd60e51b81526004016106459061335c565b8261212b5760405162461bcd60e51b8152600401610645906134ab565b60008051602061375583398151915260005b8481101561225c576000868683818110612159576121596132c0565b905060200201359050600081118015612173575082548111155b6121cd5760405162461bcd60e51b815260206004820152602560248201527f496e76656e746f727946616365742e5f756e65717569703a20496e76616c6964604482015264081cdb1bdd60da1b6064820152608401610645565b600081815260018401602052604090205460ff16156121fe5760405162461bcd60e51b8152600401610645906135b9565b600088815260038401602090815260408083208484529091529020546001600160a01b031661223f5760405162461bcd60e51b815260040161064590613606565b61224988826125ce565b5080612254816132ec565b91505061213d565b5085336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab638787604051612299929190613508565b60405180910390a36122aa866126c4565b50505050505050565b60007ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa726118d1565b6122e58133612839565b50565b6000805160206137558339815191528054600190829060009061230c908490613541565b9091555050805460008181526001830160205260409020805460ff198116881515908117835587929161ffff191661ff00199091161761010083600281111561235757612357612f51565b0217905550821561236d5761236d818585610962565b336001600160a01b03167fc1ea46ff33b3d61e148e5bff5dfe54ccae9db30b899a3e7645618fb1e3d9dc118288886040516123aa93929190613650565b60405180910390a2505050505050565b60008051602061375583398151915260005b6000848152600483016020526040902054811015612570578260200135826004016000868152602001908152602001600020828154811061240f5761240f6132c0565b9060005260206000209060020201600101540361255e576000848152600483016020526040902080546124449060019061366c565b81548110612454576124546132c0565b90600052602060002090600202018260040160008681526020019081526020016000208281548110612488576124886132c0565b60009182526020808320845460029093020180546001600160a01b0319166001600160a01b039093169290921782556001938401549184019190915586825260048501905260409020805490916124de9161366c565b815481106124ee576124ee6132c0565b60009182526020808320600290920290910180546001600160a01b0319168155600101829055858252600484019052604090208054806125305761253061367f565b60008281526020812060026000199093019283020180546001600160a01b0319168155600101559055612570565b80612568816132ec565b9150506123cc565b5060058101600061258460208501856132a3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008360200135815260200190815260200160002060009055505050565b600061061b838361289f565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d439602090815260408083208484529091529020805460008051602061375583398151915291906001600160a01b031680156126bd57600180830154604051637921219560e11b81526001600160a01b0384169263f242432a9261265d92309233929160040161342f565b600060405180830381600087803b15801561267757600080fd5b505af115801561268b573d6000803e3d6000fd5b50505060008681526003850160209081526040808320888452909152812080546001600160a01b031916815560010155505b5050505050565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860205260008051602061375583398151915260607f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9836127298261280b565b905060005b818110156127aa5760006127428483612815565b600089815260038801602090815260408083208484528252918290208054600182015493519495509093612784938a9387936001600160a01b03169201613578565b6040516020818303038152906040529550505080806127a2906132ec565b91505061272e565b50825160208401206127bf6006860182612821565b6000888152600887016020526040902054901596506127e29060068701906128e2565b506127f060068601826125c2565b50600096875260089094016020525050604090932055919050565b6000610314825490565b600061061b83836128ee565b6000818152600183016020526040812054151561061b565b612843828261293a565b61289b57612859816001600160a01b0316612971565b612864836020612983565b604051602001612875929190613695565b60408051601f198184030181529082905262461bcd60e51b82526106459160040161370a565b5050565b6000818152600183016020526040812054610314575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b600061061b8383612ad5565b815460009082106129125760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110612927576129276132c0565b9060005260206000200154905092915050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061061b9083612b9a565b60606103146001600160a01b03831660145b6060600061299283600261373d565b61299d906002613541565b6001600160401b038111156129b4576129b4612bfb565b6040519080825280601f01601f1916602001820160405280156129de576020820181803683370190505b509050600360fc1b816000815181106129f9576129f96132c0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612a2857612a286132c0565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115612ab5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a7857612a786132c0565b1a60f81b828281518110612a8e57612a8e6132c0565b60200101906001600160f81b031916908160001a90535060049490941c9360001901612a47565b50831561061b5760405163c913478560e01b815260040160405180910390fd5b60008181526001830160205260408120548015612b9357835460009085906000198101908110612b0757612b076132c0565b9060005260206000200154905080856000016001840381548110612b2d57612b2d6132c0565b6000918252602080832090910192909255918252600186019052604090208190558354849080612b5f57612b5f61367f565b6001900381819060005260206000200160009055905583600101600084815260200190815260200160002060009055600191505b5092915050565b6001600160a01b0381166000908152600183016020526040812054151561061b565b600060208284031215612bce57600080fd5b81356001600160e01b03198116811461061b57600080fd5b6001600160a01b03811681146122e557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c3957612c39612bfb565b604052919050565b600082601f830112612c5257600080fd5b81356001600160401b03811115612c6b57612c6b612bfb565b612c7e601f8201601f1916602001612c11565b818152846020838601011115612c9357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612cc657600080fd5b8435612cd181612be6565b93506020850135612ce181612be6565b92506040850135915060608501356001600160401b03811115612d0357600080fd5b612d0f87828801612c41565b91505092959194509250565b600060208284031215612d2d57600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b82811015612d8757612d7784835180516001600160a01b03168252602090810151910152565b9284019290850190600101612d51565b5091979650505050505050565b600060408284031215612da657600080fd5b50919050565b600060408284031215612dbe57600080fd5b61061b8383612d94565b60008083601f840112612dda57600080fd5b5081356001600160401b03811115612df157600080fd5b6020830191508360208260061b8501011115612e0c57600080fd5b9250929050565b600080600060408486031215612e2857600080fd5b8335925060208401356001600160401b03811115612e4557600080fd5b612e5186828701612dc8565b9497909650939450505050565b600080600060808486031215612e7357600080fd5b8335925060208401359150612e8b8560408601612d94565b90509250925092565b60008083601f840112612ea657600080fd5b5081356001600160401b03811115612ebd57600080fd5b6020830191508360208260051b8501011115612e0c57600080fd5b600080600080600060608688031215612ef057600080fd5b8535945060208601356001600160401b0380821115612f0e57600080fd5b612f1a89838a01612e94565b90965094506040880135915080821115612f3357600080fd5b50612f4088828901612dc8565b969995985093965092949392505050565b634e487b7160e01b600052602160045260246000fd5b60038110612f8557634e487b7160e01b600052602160045260246000fd5b9052565b8151151581526020808301516040830191612b9390840182612f67565b60008060408385031215612fb957600080fd5b50508035926020909101359150565b600080600060408486031215612fdd57600080fd5b8335925060208401356001600160401b03811115612ffa57600080fd5b612e5186828701612e94565b6000806000806060858703121561301c57600080fd5b8435801515811461302c57600080fd5b935060208501356003811061304057600080fd5b925060408501356001600160401b0381111561305b57600080fd5b61306787828801612dc8565b95989497509550505050565b600082601f83011261308457600080fd5b813560206001600160401b0382111561309f5761309f612bfb565b8160051b6130ae828201612c11565b92835284810182019282810190878511156130c857600080fd5b83870192505b848310156130e7578235825291830191908301906130ce565b979650505050505050565b600080600080600060a0868803121561310a57600080fd5b853561311581612be6565b9450602086013561312581612be6565b935060408601356001600160401b038082111561314157600080fd5b61314d89838a01613073565b9450606088013591508082111561316357600080fd5b61316f89838a01613073565b9350608088013591508082111561318557600080fd5b5061319288828901612c41565b9150509295509295909350565b81516001600160a01b031681526020808301519082015260408101610314565b600080600080600060a086880312156131d757600080fd5b85356131e281612be6565b945060208601356131f281612be6565b9350604086013592506060860135915060808601356001600160401b0381111561321b57600080fd5b61319288828901612c41565b60208082526025908201527f496e76656e746f727946616365743a20536c6f742069642063616e2774206265604082015264207a65726f60d81b606082015260800190565b6020808252601c908201527f496e76656e746f727946616365743a20496e76616c696420736c6f7400000000604082015260600190565b6000602082840312156132b557600080fd5b813561061b81612be6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016132fe576132fe6132d6565b5060010190565b813561331081612be6565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b60006020828403121561335157600080fd5b815161061b81612be6565b6020808252603b908201527f496e76656e746f727946616365743a204d6573736167652073656e646572206960408201527f73206e6f74206f776e6572206f662074686520617263616469616e0000000000606082015260800190565b6020808252603c908201527f496e76656e746f727946616365742e65717569703a20556e657175697070616260408201527f6c6520736c6f747320616c72656164792068617320616e206974656d00000000606082015260800190565b60006020828403121561342857600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6020808252825182820181905260009190848201906040850190845b8181101561349f57835183529284019291840191600101613483565b50909695505050505050565b60208082526039908201527f496e76656e746f727946616365742e5f756e65717569703a2053686f756c642060408201527f73706563696679206174206c65617374206f6e6520736c6f7400000000000000606082015260800190565b6020808252810182905260006001600160fb1b0383111561352857600080fd5b8260051b80856040850137919091016040019392505050565b80820180821115610314576103146132d6565b60005b8381101561356f578181015183820152602001613557565b50506000910152565b6000855161358a818460208a01613554565b919091019384525060609190911b6bffffffffffffffffffffffff191660208301526034820152605401919050565b6020808252602d908201527f496e76656e746f727946616365742e5f756e65717569703a20536c6f7420697360408201526c20756e65717569707061626c6560981b606082015260800190565b6020808252602a908201527f496e76656e746f727946616365742e5f756e65717569703a20536c6f74206e6f6040820152691d08195c5d5a5c1c195960b21b606082015260800190565b8381528215156020820152606081016103236040830184612f67565b81810381811115610314576103146132d6565b634e487b7160e01b600052603160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516136cd816017850160208801613554565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516136fe816028840160208801613554565b01602801949350505050565b6020815260008251806020840152613729816040850160208701613554565b601f01601f19169190910160400192915050565b8082028115828204841417610314576103146132d656fef672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a264697066735822122067c213a93cc77e78ae82aca41ad1eb02ef506eafb17f03e3533eee7770ca9cf664736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80639e3ccb2a116100a2578063b9518c8d11610071578063b9518c8d1461025f578063b9e6a41214610272578063bc197c8114610285578063ef0bf7de146102a4578063f23a6e61146102c457600080fd5b80639e3ccb2a14610206578063a667d9d314610219578063b2025e4f1461022c578063b512cffe1461024c57600080fd5b80634274a143116100e95780634274a143146101b0578063473bdb98146101c557806376356aad146101d85780638aa5d1f7146101eb5780639621ff25146101fe57600080fd5b806301ffc9a71461011b578063150b7a02146101435780632e6e91aa1461016f5780632f8bd3c81461018f575b600080fd5b61012e610129366004612bbc565b6102e3565b60405190151581526020015b60405180910390f35b610156610151366004612cb0565b61031a565b6040516001600160e01b0319909116815260200161013a565b61018261017d366004612d1b565b61032b565b60405161013a9190612d34565b6101a261019d366004612dac565b610336565b60405190815260200161013a565b6101c36101be366004612e13565b610341565b005b6101c36101d3366004612e13565b610351565b6101c36101e6366004612e5e565b61035c565b6101c36101f9366004612ed8565b6103b7565b6101a2610416565b610182610214366004612d1b565b610425565b61012e610227366004612ed8565b610430565b61023f61023a366004612d1b565b610449565b60405161013a9190612f89565b6101c361025a366004612fa6565b6104d8565b6101c361026d366004612fc8565b610531565b6101c3610280366004613006565b610583565b6101566102933660046130f2565b63bc197c8160e01b95945050505050565b6102b76102b2366004612fa6565b6105a5565b60405161013a919061319f565b6101566102d23660046131bf565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061031457506301ffc9a760e01b6001600160e01b03198316145b92915050565b630a85bd0160e11b5b949350505050565b606061031482610622565b600061031482610719565b61034c838383610787565b505050565b61034c838383610962565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361039f57604051635db5c7cd60e11b815260040160405180910390fd5b600281556103ae848484610d55565b60019055505050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036103fa57604051635db5c7cd60e11b815260040160405180910390fd5b6002815561040b86868686866111e1565b600190555050505050565b60006104206118bf565b905090565b6060610314826118d7565b600061043f86868686866119e3565b9695505050505050565b604080518082019091526000808252602082015260008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4376020526040902060408051808201909152815460ff80821615158352919291602084019161010090041660028111156104be576104be612f51565b60028111156104cf576104cf612f51565b90525092915050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361051b57604051635db5c7cd60e11b815260040160405180910390fd5b600281556105298383611e60565b600190555050565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361057457604051635db5c7cd60e11b815260040160405180910390fd5b600281556103ae84848461207a565b61059361058e6122b3565b6122db565b61059f848484846122e8565b50505050565b604080518082018252600080825260208083018290528351808501855282815281018290528582527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4398152838220858352815290839020835180850190945280546001600160a01b031684526001015490830152905b9392505050565b6060818060000361064e5760405162461bcd60e51b815260040161064590613227565b60405180910390fd5b6000805160206137558339815191525481111561067d5760405162461bcd60e51b81526004016106459061326c565b60008381527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a6020908152604080832080548251818502810185019093528083529193909284015b8282101561070d576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016106c5565b50505050915050919050565b60007ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b8161074a60208501856132a3565b6001600160a01b03166001600160a01b03168152602001908152602001600020600083602001358152602001908152602001600020549050919050565b82806000036107a85760405162461bcd60e51b815260040161064590613227565b600080516020613755833981519152548111156107d75760405162461bcd60e51b81526004016106459061326c565b60008051602061375583398151915260005b83811015610925578582600501600087878581811061080a5761080a6132c0565b61082092602060409092020190810191506132a3565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610854576108546132c0565b90506040020160200135815260200190815260200160002054146108f25760405162461bcd60e51b815260206004820152604960248201527f496e76656e746f727946616365742e5f646973616c6c6f774974656d73496e5360448201527f6c6f743a204974656d20616c7265616479206e6f7420616c6c6f77656420696e606482015268081d1a19481cdb1bdd60ba1b608482015260a401610645565b61091386868684818110610908576109086132c0565b9050604002016123ba565b8061091d816132ec565b9150506107e9565b5060405185815233907ff69b53fa14ee16895edbe90d00c7b7af9214baf87c69bf5594126b114c9337ed9060200160405180910390a25050505050565b82806000036109835760405162461bcd60e51b815260040161064590613227565b600080516020613755833981519152548111156109b25760405162461bcd60e51b81526004016106459061326c565b60008051602061375583398151915260005b83811015610cf157610a068585838181106109e1576109e16132c0565b6109f792602060409092020190810191506132a3565b6001600160a01b03163b151590565b610a7a576040805162461bcd60e51b81526020600482015260248101919091527f496e76656e746f727946616365742e5f616c6c6f774974656d73496e536c6f7460448201527f3a20496e76616c6964206974656d7320636f6e747261637420616464726573736064820152608401610645565b85826005016000878785818110610a9357610a936132c0565b610aa992602060409092020190810191506132a3565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610add57610add6132c0565b9050604002016020013581526020019081526020016000205403610b745760405162461bcd60e51b815260206004820152604260248201527f496e76656e746f727946616365742e5f616c6c6f774974656d73496e536c6f7460448201527f3a204974656d20616c726561647920616c6c6f77656420696e2074686520736c6064820152611bdd60f21b608482015260a401610645565b6000826005016000878785818110610b8e57610b8e6132c0565b610ba492602060409092020190810191506132a3565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610bd857610bd86132c0565b905060400201602001358152602001908152602001600020541115610c0d57610c0d86868684818110610908576109086132c0565b60008681526004830160205260409020858583818110610c2f57610c2f6132c0565b835460018101855560009485526020909420604090910292909201926002029091019050610c5d8282613305565b505085826005016000878785818110610c7857610c786132c0565b610c8e92602060409092020190810191506132a3565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610cc257610cc26132c0565b905060400201602001358152602001908152602001600020819055508080610ce9906132ec565b9150506109c4565b50600085815260018201602052604081205461092591879160028086019291610100900460ff1690811115610d2857610d28612f51565b6002811115610d3957610d39612f51565b81526020019081526020016000206125c290919063ffffffff16565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa158015610d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db9919061333f565b6001600160a01b0316336001600160a01b031614610de95760405162461bcd60e51b81526004016106459061335c565b600080516020613755833981519152847ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43b6000610e2960208801886132a3565b6001600160a01b03166001600160a01b031681526020019081526020016000206000866020013581526020019081526020016000205414610ec55760405162461bcd60e51b815260206004820152603060248201527f496e76656e746f727946616365742e65717569703a204974656d206e6f74206560448201526f1b1959da589b1948199bdc881cdb1bdd60821b6064820152608401610645565b600085815260018201602052604090205460ff161580610f075750600086815260038201602090815260408083208884529091529020546001600160a01b0316155b610f235760405162461bcd60e51b8152600401610645906133b9565b610f2d86866125ce565b6000610f3c60208601866132a3565b604051627eeac760e11b8152336004820152602087013560248201529091506000906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb29190613416565b1161103c5760405162461bcd60e51b815260206004820152604e60248201527f496e76656e746f727946616365742e65717569703a204d65737361676520736560448201527f6e64657220646f6573206e6f74206f776e20656e6f756768206f66207468617460648201526d0206974656d20746f2065717569760941b608482015260a401610645565b604051637921219560e11b81526001600160a01b0382169063f242432a90611073903390309060208b01359060019060040161342f565b600060405180830381600087803b15801561108d57600080fd5b505af11580156110a1573d6000803e3d6000fd5b5060009250600191506110b19050565b6040519080825280602002602001820160405280156110da578160200160208202803683370190505b50905086816000815181106110f1576110f16132c0565b60200260200101818152505087336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f18861836040516111379190613467565b60405180910390a3600088815260038401602090815260408083208a8452909152902086906111668282613305565b905050611172886126c4565b6111d75760405162461bcd60e51b815260206004820152603060248201527f496e76656e746f727946616365742e5f65717569703a2042617365206974656d60448201526f7320617265206e6f7420756e6971756560801b6064820152608401610645565b5050505050505050565b6040516331a9108f60e11b815260048101869052859030908190636352211e90602401602060405180830381865afa158015611221573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611245919061333f565b6001600160a01b0316336001600160a01b0316146112755760405162461bcd60e51b81526004016106459061335c565b846112925760405162461bcd60e51b8152600401610645906134ab565b8483146113075760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a20496e707560448201527f742064617461206c656e677468206d69736d61746368000000000000000000006064820152608401610645565b600080516020613755833981519152805460005b878110156117fc576000898983818110611337576113376132c0565b9050602002013590506000811180156113505750828111155b6113ad5760405162461bcd60e51b815260206004820152602860248201527f496e76656e746f727946616365742e5f657175697042617463683a20496e76616044820152671b1a59081cdb1bdd60c21b6064820152608401610645565b808460050160008a8a868181106113c6576113c66132c0565b6113dc92602060409092020190810191506132a3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a86818110611410576114106132c0565b905060400201602001358152602001908152602001600020541461149c5760405162461bcd60e51b815260206004820152603660248201527f496e76656e746f727946616365742e5f657175697042617463683a204974656d60448201527f206e6f7420656c656769626c6520666f7220736c6f74000000000000000000006064820152608401610645565b60008888848181106114b0576114b06132c0565b6114c692602060409092020190810191506132a3565b90506000816001600160a01b031662fdd58e338c8c888181106114eb576114eb6132c0565b905060400201602001356040518363ffffffff1660e01b81526004016115269291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115679190613416565b116115da5760405162461bcd60e51b815260206004820152603a60248201527f496e76656e746f727946616365742e65717569703a2053656e6465722068617360448201527f20696e73756666696369656e74206974656d2062616c616e63650000000000006064820152608401610645565b60008c815260038601602090815260408083208584528252808320600189019092529091205460ff161580611617575080546001600160a01b0316155b6116335760405162461bcd60e51b8152600401610645906133b9565b898985818110611645576116456132c0565b61165b92602060409092020190810191506132a3565b81546001600160a01b0390811691161480156116955750898985818110611684576116846132c0565b905060400201602001358160010154145b156116a2575050506117ea565b80546001600160a01b03161561171a57600180820154604051637921219560e11b81526001600160a01b0385169263f242432a926116e792309233929160040161342f565b600060405180830381600087803b15801561170157600080fd5b505af1158015611715573d6000803e3d6000fd5b505050505b89898581811061172c5761172c6132c0565b9050604002018660030160008f8152602001908152602001600020600085815260200190815260200160002081816117649190613305565b50506001600160a01b03821663f242432a33308d8d89818110611789576117896132c0565b9050604002016020013560016040518563ffffffff1660e01b81526004016117b4949392919061342f565b600060405180830381600087803b1580156117ce57600080fd5b505af11580156117e2573d6000803e3d6000fd5b505050505050505b806117f4816132ec565b91505061131b565b5088336001600160a01b03167f557dc03f902756383ba5a748ab63ec6ec44b2880dba84ad33dc6ffe670f188618a8a604051611839929190613508565b60405180910390a361184a896126c4565b6118b45760405162461bcd60e51b815260206004820152603560248201527f496e76656e746f727946616365742e5f657175697042617463683a2042617365604482015274206974656d7320617265206e6f7420756e6971756560581b6064820152608401610645565b505050505050505050565b60006000805160206137558339815191525b54919050565b6000805160206137558339815191528054606091906000816001600160401b0381111561190657611906612bfb565b60405190808252806020026020018201604052801561194b57816020015b60408051808201909152600080825260208201528152602001906001900390816119245790505b50905060005b828110156119da576000868152600385016020526040812090611975836001613541565b81526020808201929092526040908101600020815180830190925280546001600160a01b03168252600101549181019190915282518390839081106119bc576119bc6132c0565b602002602001018190525080806119d2906132ec565b915050611951565b50949350505050565b6000838214611a5a5760405162461bcd60e51b815260206004820152603c60248201527f496e76656e746f727946616365742e5f6973417263616469616e556e6971756560448201527f3a20496e7075742064617461206c656e677468206d69736d61746368000000006064820152608401610645565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d438602052600080516020613755833981519152907f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd990611abe8261280b565b90506000816001600160401b03811115611ada57611ada612bfb565b604051908082528060200260200182016040528015611b03578160200160208202803683370190505b5090506000826001600160401b03811115611b2057611b20612bfb565b604051908082528060200260200182016040528015611b6557816020015b6040805180820190915260008082526020820152815260200190600190039081611b3e5790505b50855490915060005b84811015611c85576000611b828783612815565b9050600081118015611b945750828111155b611bf75760405162461bcd60e51b815260206004820152602e60248201527f496e76656e746f727946616365742e5f6973417263616469616e556e6971756560448201526d0e88125b9d985b1a59081cdb1bdd60921b6064820152608401610645565b80858381518110611c0a57611c0a6132c0565b60209081029190910181019190915260008f815260038a0182526040808220848352835290819020815180830190925280546001600160a01b0316825260010154918101919091528451859084908110611c6657611c666132c0565b6020026020010181905250508080611c7d906132ec565b915050611b6e565b5060005b8a811015611d9b57611cbc8c8c83818110611ca657611ca66132c0565b905060200201358761282190919063ffffffff16565b15611d89578b8b82818110611cd357611cd36132c0565b90506020020135848281518110611cec57611cec6132c0565b602002602001018181525050898982818110611d0a57611d0a6132c0565b611d2092602060409092020190810191506132a3565b838281518110611d3257611d326132c0565b60209081029190910101516001600160a01b039091169052898982818110611d5c57611d5c6132c0565b90506040020160200135838281518110611d7857611d786132c0565b602002602001015160200181815250505b80611d93816132ec565b915050611c89565b50606060005b8451811015611e385781858281518110611dbd57611dbd6132c0565b6020026020010151858381518110611dd757611dd76132c0565b602002602001015160000151868481518110611df557611df56132c0565b602002602001015160200151604051602001611e149493929190613578565b60405160208183030381529060405291508080611e30906132ec565b915050611da1565b5080516020820120611e4e906006890190612821565b159d9c50505050505050505050505050565b6040516331a9108f60e11b815260048101839052829030908190636352211e90602401602060405180830381865afa158015611ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec4919061333f565b6001600160a01b0316336001600160a01b031614611ef45760405162461bcd60e51b81526004016106459061335c565b8280600003611f155760405162461bcd60e51b815260040161064590613227565b60008051602061375583398151915254811115611f445760405162461bcd60e51b81526004016106459061326c565b60008481527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43760205260409020546000805160206137558339815191529060ff1615611fa25760405162461bcd60e51b8152600401610645906135b9565b600086815260038201602090815260408083208884529091529020546001600160a01b0316611fe35760405162461bcd60e51b815260040161064590613606565b611fed86866125ce565b604080516001808252818301909252600091602080830190803683370190505090508581600081518110612023576120236132c0565b60200260200101818152505086336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab63836040516120699190613467565b60405180910390a36111d7876126c4565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa1580156120ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120de919061333f565b6001600160a01b0316336001600160a01b03161461210e5760405162461bcd60e51b81526004016106459061335c565b8261212b5760405162461bcd60e51b8152600401610645906134ab565b60008051602061375583398151915260005b8481101561225c576000868683818110612159576121596132c0565b905060200201359050600081118015612173575082548111155b6121cd5760405162461bcd60e51b815260206004820152602560248201527f496e76656e746f727946616365742e5f756e65717569703a20496e76616c6964604482015264081cdb1bdd60da1b6064820152608401610645565b600081815260018401602052604090205460ff16156121fe5760405162461bcd60e51b8152600401610645906135b9565b600088815260038401602090815260408083208484529091529020546001600160a01b031661223f5760405162461bcd60e51b815260040161064590613606565b61224988826125ce565b5080612254816132ec565b91505061213d565b5085336001600160a01b03167f3822f2cd6d118934e31e6171da74d9d46131fb402be1861b3cb4460440aeab638787604051612299929190613508565b60405180910390a36122aa866126c4565b50505050505050565b60007ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa726118d1565b6122e58133612839565b50565b6000805160206137558339815191528054600190829060009061230c908490613541565b9091555050805460008181526001830160205260409020805460ff198116881515908117835587929161ffff191661ff00199091161761010083600281111561235757612357612f51565b0217905550821561236d5761236d818585610962565b336001600160a01b03167fc1ea46ff33b3d61e148e5bff5dfe54ccae9db30b899a3e7645618fb1e3d9dc118288886040516123aa93929190613650565b60405180910390a2505050505050565b60008051602061375583398151915260005b6000848152600483016020526040902054811015612570578260200135826004016000868152602001908152602001600020828154811061240f5761240f6132c0565b9060005260206000209060020201600101540361255e576000848152600483016020526040902080546124449060019061366c565b81548110612454576124546132c0565b90600052602060002090600202018260040160008681526020019081526020016000208281548110612488576124886132c0565b60009182526020808320845460029093020180546001600160a01b0319166001600160a01b039093169290921782556001938401549184019190915586825260048501905260409020805490916124de9161366c565b815481106124ee576124ee6132c0565b60009182526020808320600290920290910180546001600160a01b0319168155600101829055858252600484019052604090208054806125305761253061367f565b60008281526020812060026000199093019283020180546001600160a01b0319168155600101559055612570565b80612568816132ec565b9150506123cc565b5060058101600061258460208501856132a3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008360200135815260200190815260200160002060009055505050565b600061061b838361289f565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d439602090815260408083208484529091529020805460008051602061375583398151915291906001600160a01b031680156126bd57600180830154604051637921219560e11b81526001600160a01b0384169263f242432a9261265d92309233929160040161342f565b600060405180830381600087803b15801561267757600080fd5b505af115801561268b573d6000803e3d6000fd5b50505060008681526003850160209081526040808320888452909152812080546001600160a01b031916815560010155505b5050505050565b60008080527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43860205260008051602061375583398151915260607f845ff02802177e9909faef63e536d995d5be20fadd26c667f4235942a02dfdd9836127298261280b565b905060005b818110156127aa5760006127428483612815565b600089815260038801602090815260408083208484528252918290208054600182015493519495509093612784938a9387936001600160a01b03169201613578565b6040516020818303038152906040529550505080806127a2906132ec565b91505061272e565b50825160208401206127bf6006860182612821565b6000888152600887016020526040902054901596506127e29060068701906128e2565b506127f060068601826125c2565b50600096875260089094016020525050604090932055919050565b6000610314825490565b600061061b83836128ee565b6000818152600183016020526040812054151561061b565b612843828261293a565b61289b57612859816001600160a01b0316612971565b612864836020612983565b604051602001612875929190613695565b60408051601f198184030181529082905262461bcd60e51b82526106459160040161370a565b5050565b6000818152600183016020526040812054610314575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b600061061b8383612ad5565b815460009082106129125760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110612927576129276132c0565b9060005260206000200154905092915050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061061b9083612b9a565b60606103146001600160a01b03831660145b6060600061299283600261373d565b61299d906002613541565b6001600160401b038111156129b4576129b4612bfb565b6040519080825280601f01601f1916602001820160405280156129de576020820181803683370190505b509050600360fc1b816000815181106129f9576129f96132c0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612a2857612a286132c0565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115612ab5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a7857612a786132c0565b1a60f81b828281518110612a8e57612a8e6132c0565b60200101906001600160f81b031916908160001a90535060049490941c9360001901612a47565b50831561061b5760405163c913478560e01b815260040160405180910390fd5b60008181526001830160205260408120548015612b9357835460009085906000198101908110612b0757612b076132c0565b9060005260206000200154905080856000016001840381548110612b2d57612b2d6132c0565b6000918252602080832090910192909255918252600186019052604090208190558354849080612b5f57612b5f61367f565b6001900381819060005260206000200160009055905583600101600084815260200190815260200160002060009055600191505b5092915050565b6001600160a01b0381166000908152600183016020526040812054151561061b565b600060208284031215612bce57600080fd5b81356001600160e01b03198116811461061b57600080fd5b6001600160a01b03811681146122e557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c3957612c39612bfb565b604052919050565b600082601f830112612c5257600080fd5b81356001600160401b03811115612c6b57612c6b612bfb565b612c7e601f8201601f1916602001612c11565b818152846020838601011115612c9357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612cc657600080fd5b8435612cd181612be6565b93506020850135612ce181612be6565b92506040850135915060608501356001600160401b03811115612d0357600080fd5b612d0f87828801612c41565b91505092959194509250565b600060208284031215612d2d57600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b82811015612d8757612d7784835180516001600160a01b03168252602090810151910152565b9284019290850190600101612d51565b5091979650505050505050565b600060408284031215612da657600080fd5b50919050565b600060408284031215612dbe57600080fd5b61061b8383612d94565b60008083601f840112612dda57600080fd5b5081356001600160401b03811115612df157600080fd5b6020830191508360208260061b8501011115612e0c57600080fd5b9250929050565b600080600060408486031215612e2857600080fd5b8335925060208401356001600160401b03811115612e4557600080fd5b612e5186828701612dc8565b9497909650939450505050565b600080600060808486031215612e7357600080fd5b8335925060208401359150612e8b8560408601612d94565b90509250925092565b60008083601f840112612ea657600080fd5b5081356001600160401b03811115612ebd57600080fd5b6020830191508360208260051b8501011115612e0c57600080fd5b600080600080600060608688031215612ef057600080fd5b8535945060208601356001600160401b0380821115612f0e57600080fd5b612f1a89838a01612e94565b90965094506040880135915080821115612f3357600080fd5b50612f4088828901612dc8565b969995985093965092949392505050565b634e487b7160e01b600052602160045260246000fd5b60038110612f8557634e487b7160e01b600052602160045260246000fd5b9052565b8151151581526020808301516040830191612b9390840182612f67565b60008060408385031215612fb957600080fd5b50508035926020909101359150565b600080600060408486031215612fdd57600080fd5b8335925060208401356001600160401b03811115612ffa57600080fd5b612e5186828701612e94565b6000806000806060858703121561301c57600080fd5b8435801515811461302c57600080fd5b935060208501356003811061304057600080fd5b925060408501356001600160401b0381111561305b57600080fd5b61306787828801612dc8565b95989497509550505050565b600082601f83011261308457600080fd5b813560206001600160401b0382111561309f5761309f612bfb565b8160051b6130ae828201612c11565b92835284810182019282810190878511156130c857600080fd5b83870192505b848310156130e7578235825291830191908301906130ce565b979650505050505050565b600080600080600060a0868803121561310a57600080fd5b853561311581612be6565b9450602086013561312581612be6565b935060408601356001600160401b038082111561314157600080fd5b61314d89838a01613073565b9450606088013591508082111561316357600080fd5b61316f89838a01613073565b9350608088013591508082111561318557600080fd5b5061319288828901612c41565b9150509295509295909350565b81516001600160a01b031681526020808301519082015260408101610314565b600080600080600060a086880312156131d757600080fd5b85356131e281612be6565b945060208601356131f281612be6565b9350604086013592506060860135915060808601356001600160401b0381111561321b57600080fd5b61319288828901612c41565b60208082526025908201527f496e76656e746f727946616365743a20536c6f742069642063616e2774206265604082015264207a65726f60d81b606082015260800190565b6020808252601c908201527f496e76656e746f727946616365743a20496e76616c696420736c6f7400000000604082015260600190565b6000602082840312156132b557600080fd5b813561061b81612be6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016132fe576132fe6132d6565b5060010190565b813561331081612be6565b6001600160a01b0381166bffffffffffffffffffffffff60a01b83541617825550602082013560018201555050565b60006020828403121561335157600080fd5b815161061b81612be6565b6020808252603b908201527f496e76656e746f727946616365743a204d6573736167652073656e646572206960408201527f73206e6f74206f776e6572206f662074686520617263616469616e0000000000606082015260800190565b6020808252603c908201527f496e76656e746f727946616365742e65717569703a20556e657175697070616260408201527f6c6520736c6f747320616c72656164792068617320616e206974656d00000000606082015260800190565b60006020828403121561342857600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6020808252825182820181905260009190848201906040850190845b8181101561349f57835183529284019291840191600101613483565b50909695505050505050565b60208082526039908201527f496e76656e746f727946616365742e5f756e65717569703a2053686f756c642060408201527f73706563696679206174206c65617374206f6e6520736c6f7400000000000000606082015260800190565b6020808252810182905260006001600160fb1b0383111561352857600080fd5b8260051b80856040850137919091016040019392505050565b80820180821115610314576103146132d6565b60005b8381101561356f578181015183820152602001613557565b50506000910152565b6000855161358a818460208a01613554565b919091019384525060609190911b6bffffffffffffffffffffffff191660208301526034820152605401919050565b6020808252602d908201527f496e76656e746f727946616365742e5f756e65717569703a20536c6f7420697360408201526c20756e65717569707061626c6560981b606082015260800190565b6020808252602a908201527f496e76656e746f727946616365742e5f756e65717569703a20536c6f74206e6f6040820152691d08195c5d5a5c1c195960b21b606082015260800190565b8381528215156020820152606081016103236040830184612f67565b81810381811115610314576103146132d6565b634e487b7160e01b600052603160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516136cd816017850160208801613554565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516136fe816028840160208801613554565b01602801949350505050565b6020815260008251806020840152613729816040850160208701613554565b601f01601f19169190910160400192915050565b8082028115828204841417610314576103146132d656fef672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a264697066735822122067c213a93cc77e78ae82aca41ad1eb02ef506eafb17f03e3533eee7770ca9cf664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}