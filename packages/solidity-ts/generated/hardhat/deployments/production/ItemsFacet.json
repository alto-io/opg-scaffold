{
  "address": "0xf605734752638eB2858459290b390BA84e5C6F51",
  "abi": [
    {
      "inputs": [],
      "name": "ERC1155Base__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BurnExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__BurnFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__ERC1155ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__ERC1155ReceiverRejected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__TransferExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1155Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_InputsLengthMistatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_InvalidItemId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_ItemsBasicStatusAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_MaximumItemMintsExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Items_MintingNonBasicItem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingAdminRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingAutomationRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingManagerRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "accountsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInventoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "migrate",
          "type": "bool"
        }
      ],
      "name": "migrateToIPFS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inventoryAddress",
          "type": "address"
        }
      ],
      "name": "setInventoryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interface",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tokensByAccount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4283f48fe91d3790a9351133f9ca27d30acdc41568e1e76b734a6aa7c0ecc154",
  "receipt": {
    "to": null,
    "from": "0xC1580afC68C82E110325b09313e059a8F5Cd68E9",
    "contractAddress": "0xf605734752638eB2858459290b390BA84e5C6F51",
    "transactionIndex": 1,
    "gasUsed": "2582904",
    "logsBloom": "0x
    "blockHash": "0x2414021931437e05d83b7f5e67c5e2b4e7cc8ad4b8a07ef0b5e55adda21b9c44",
    "transactionHash": "0x4283f48fe91d3790a9351133f9ca27d30acdc41568e1e76b734a6aa7c0ecc154",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 43445945,
        "transactionHash": "0x4283f48fe91d3790a9351133f9ca27d30acdc41568e1e76b734a6aa7c0ecc154",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c1580afc68c82e110325b09313e059a8f5cd68e9",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000007a17bcd3716bad8000000000000000000000000000000000000000000000000f23e2f896202e8e8000000000000000000000000000000000000000000021b77e1bb3ed4b69839c4000000000000000000000000000000000000000000000000ea9cb3bc2aec2e10000000000000000000000000000000000000000000021b77e95cbaa1edaef49c",
        "logIndex": 7,
        "blockHash": "0x2414021931437e05d83b7f5e67c5e2b4e7cc8ad4b8a07ef0b5e55adda21b9c44"
      }
    ],
    "blockNumber": 43445945,
    "cumulativeGasUsed": "3018931",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3e3d4f461e0f2b62facd0504ca9078d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC1155Base__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BurnExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__BurnFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__ERC1155ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__ERC1155ReceiverRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__TransferExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_InputsLengthMistatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_InvalidItemId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_ItemsBasicStatusAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_MaximumItemMintsExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Items_MintingNonBasicItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingAdminRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingAutomationRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingManagerRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"accountsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInventoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"migrate\",\"type\":\"bool\"}],\"name\":\"migrateToIPFS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inventoryAddress\",\"type\":\"address\"}],\"name\":\"setInventoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interface\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokensByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract handles the creation and management of items It uses ERC1155 tokens to represent items and provides methods to mint new items, claim items via Merkle tree or a whitelist, and set the base and URIs for the items. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.\",\"kind\":\"dev\",\"methods\":{\"accountsByToken(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"list of holder addresses\"}},\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"burn(uint256,uint256)\":{\"params\":{\"amount\":\"The item amount to burn\",\"itemId\":\"The ID of the item to burn\"}},\"burnBatch(uint256[],uint256[])\":{\"params\":{\"amounts\":\"The item amounts to be minted\",\"itemIds\":\"The item ID burn\"}},\"getInventoryAddress()\":{\"details\":\"Returns the current inventory address\",\"returns\":{\"_0\":\"The address of the inventory contract\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"migrateToIPFS(string,bool)\":{\"details\":\"Only the manager role can call this function\",\"params\":{\"migrate\":\"Should migrate to IPFS\",\"newBaseURI\":\"The new base URI\"}},\"mint(address,uint256,uint256)\":{\"params\":{\"amount\":\"The item amount to be minted\",\"itemId\":\"The ID of the item to mint\",\"to\":\"The address to mint the item to\"}},\"mintBatch(address,uint256[],uint256[])\":{\"params\":{\"amounts\":\"The items amounts to be minted\",\"itemIds\":\"An array of items IDs to be minted\",\"to\":\"The address to receive the minted items\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"array of function call data payloads\"},\"returns\":{\"results\":\"array of function call results\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"setBaseURI(string)\":{\"details\":\"Only the manager role can call this function\",\"params\":{\"baseURI\":\"The new base URI\"}},\"setInventoryAddress(address)\":{\"details\":\"Sets the inventory address\",\"params\":{\"inventoryAddress\":\"The new address of the inventory contract\"}},\"setTokenURI(uint256,string)\":{\"details\":\"Only the manager role can call this function\",\"params\":{\"tokenId\":\"The ID of the item to set the URI for\",\"tokenURI\":\"The new item URI\"}},\"tokensByAccount(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"list of token ids\"}},\"totalHolders(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"quantity of holders\"}},\"totalSupply(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"token supply\"}}},\"title\":\"ItemsFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountsByToken(uint256)\":{\"notice\":\"query holders of given token\"},\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"burn(uint256,uint256)\":{\"notice\":\"Burn an amount of an item\"},\"burnBatch(uint256[],uint256[])\":{\"notice\":\"Burn amounts of items\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"migrateToIPFS(string,bool)\":{\"notice\":\"Set the base URI for all items metadata\"},\"mint(address,uint256,uint256)\":{\"notice\":\"Mints a new item. Only minter role account can mint\"},\"mintBatch(address,uint256[],uint256[])\":{\"notice\":\"Mint a batch of items to a specific address. Only minter role account can mint\"},\"multicall(bytes[])\":{\"notice\":\"batch function calls to the contract and return the results of each\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"},\"setBaseURI(string)\":{\"notice\":\"Set the base URI for all items metadata\"},\"setTokenURI(uint256,string)\":{\"notice\":\"Set the URI for a specific item ID\"},\"tokensByAccount(address)\":{\"notice\":\"query tokens held by given address\"},\"totalHolders(uint256)\":{\"notice\":\"query total number of holders for given token\"},\"totalSupply(uint256)\":{\"notice\":\"query total minted supply of given token\"},\"uri(uint256)\":{\"notice\":\"Override ERC1155Metadata\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/items/ItemsFacet.sol\":\"ItemsFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8688f1b897b4ddde7ebd48ee5ce1063f56d8af8ea3aa80aa1df12ff669d133a4\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155 } from '../../../interfaces/IERC1155.sol';\\nimport { IERC1155Receiver } from '../../../interfaces/IERC1155Receiver.sol';\\nimport { IERC1155Base } from './IERC1155Base.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from './ERC1155BaseInternal.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155Base, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) public view virtual returns (uint256) {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                if (accounts[i] == address(0))\\n                    revert ERC1155Base__BalanceQueryZeroAddress();\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) public view virtual returns (bool) {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status) public virtual {\\n        if (msg.sender == operator) revert ERC1155Base__SelfApproval();\\n        ERC1155BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        if (from != msg.sender && !isApprovedForAll(from, msg.sender))\\n            revert ERC1155Base__NotOwnerOrApproved();\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        if (from != msg.sender && !isApprovedForAll(from, msg.sender))\\n            revert ERC1155Base__NotOwnerOrApproved();\\n        _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x3e36cb8094f6e5a890b8a599a76275a8d992f7e877a9021e8abd090a3dce2331\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155Receiver } from '../../../interfaces/IERC1155Receiver.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC1155BaseInternal } from './IERC1155BaseInternal.sol';\\nimport { ERC1155BaseStorage } from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155BaseInternal {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(\\n        address account,\\n        uint256 id\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0))\\n            revert ERC1155Base__BalanceQueryZeroAddress();\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__MintToZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        ERC1155BaseStorage.layout().balances[id][account] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__MintToZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            balances[ids[i]][account] += amounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__BurnFromZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            ''\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n\\n        unchecked {\\n            if (amount > balances[account])\\n                revert ERC1155Base__BurnExceedsBalance();\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        if (account == address(0)) revert ERC1155Base__BurnFromZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                if (amounts[i] > balances[id][account])\\n                    revert ERC1155Base__BurnExceedsBalance();\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (recipient == address(0))\\n            revert ERC1155Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            sender,\\n            recipient,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            if (amount > senderBalance)\\n                revert ERC1155Base__TransferExceedsBalance();\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (recipient == address(0))\\n            revert ERC1155Base__TransferToZeroAddress();\\n        if (ids.length != amounts.length)\\n            revert ERC1155Base__ArrayLengthMismatch();\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n\\n                if (amount > senderBalance)\\n                    revert ERC1155Base__TransferExceedsBalance();\\n\\n                balances[token][sender] = senderBalance - amount;\\n\\n                i++;\\n            }\\n\\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(\\n        uint256 element\\n    ) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector)\\n                    revert ERC1155Base__ERC1155ReceiverRejected();\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert ERC1155Base__ERC1155ReceiverNotImplemented();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\\n                ) revert ERC1155Base__ERC1155ReceiverRejected();\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert ERC1155Base__ERC1155ReceiverNotImplemented();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x347e1d1bbff3001b09b0ac140f8d0ff8d526d34e310610c7fe31cdbf418059ed\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bc1fde9bab7b338312099733e21c7bbbc44597fd25970bd68187eb65e622ef1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/IERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155 } from '../../../interfaces/IERC1155.sol';\\nimport { IERC1155BaseInternal } from './IERC1155BaseInternal.sol';\\n\\n/**\\n * @title ERC1155 base interface\\n */\\ninterface IERC1155Base is IERC1155BaseInternal, IERC1155 {\\n\\n}\\n\",\"keccak256\":\"0x1031b70a5355e29a4f729ec602bbf6e1d074e4e1ab86bff29b486f31eb639ffe\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/IERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155Internal } from '../../../interfaces/IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 base interface\\n */\\ninterface IERC1155BaseInternal is IERC1155Internal {\\n    error ERC1155Base__ArrayLengthMismatch();\\n    error ERC1155Base__BalanceQueryZeroAddress();\\n    error ERC1155Base__NotOwnerOrApproved();\\n    error ERC1155Base__SelfApproval();\\n    error ERC1155Base__BurnExceedsBalance();\\n    error ERC1155Base__BurnFromZeroAddress();\\n    error ERC1155Base__ERC1155ReceiverRejected();\\n    error ERC1155Base__ERC1155ReceiverNotImplemented();\\n    error ERC1155Base__MintToZeroAddress();\\n    error ERC1155Base__TransferExceedsBalance();\\n    error ERC1155Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0xece161d9a4ab29e5b539b8b0f808660fcdd6b8c35bb1920dd99acdb5c576efbc\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC1155BaseInternal } from '../base/ERC1155BaseInternal.sol';\\nimport { IERC1155Enumerable } from './IERC1155Enumerable.sol';\\nimport { ERC1155EnumerableInternal, ERC1155EnumerableStorage } from './ERC1155EnumerableInternal.sol';\\n\\n/**\\n * @title ERC1155 implementation including enumerable and aggregate functions\\n */\\nabstract contract ERC1155Enumerable is\\n    IERC1155Enumerable,\\n    ERC1155EnumerableInternal\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalHolders(uint256 id) public view virtual returns (uint256) {\\n        return _totalHolders(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function accountsByToken(\\n        uint256 id\\n    ) public view virtual returns (address[] memory) {\\n        return _accountsByToken(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function tokensByAccount(\\n        address account\\n    ) public view virtual returns (uint256[] memory) {\\n        return _tokensByAccount(account);\\n    }\\n}\\n\",\"keccak256\":\"0x452201121747be0d0af28279da9e824d1e99a261a6cd34abd156c432b97f0338\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from '../base/ERC1155BaseInternal.sol';\\nimport { ERC1155EnumerableStorage } from './ERC1155EnumerableStorage.sol';\\n\\n/**\\n * @title ERC1155Enumerable internal functions\\n */\\nabstract contract ERC1155EnumerableInternal is ERC1155BaseInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function _totalSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155EnumerableStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function _totalHolders(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155EnumerableStorage.layout().accountsByToken[id].length();\\n    }\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function _accountsByToken(\\n        uint256 id\\n    ) internal view virtual returns (address[] memory) {\\n        EnumerableSet.AddressSet storage accounts = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[id];\\n\\n        address[] memory addresses = new address[](accounts.length());\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length(); i++) {\\n                addresses[i] = accounts.at(i);\\n            }\\n        }\\n\\n        return addresses;\\n    }\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function _tokensByAccount(\\n        address account\\n    ) internal view virtual returns (uint256[] memory) {\\n        EnumerableSet.UintSet storage tokens = ERC1155EnumerableStorage\\n            .layout()\\n            .tokensByAccount[account];\\n\\n        uint256[] memory ids = new uint256[](tokens.length());\\n\\n        unchecked {\\n            for (uint256 i; i < tokens.length(); i++) {\\n                ids[i] = tokens.at(i);\\n            }\\n        }\\n\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from != to) {\\n            ERC1155EnumerableStorage.Layout storage l = ERC1155EnumerableStorage\\n                .layout();\\n            mapping(uint256 => EnumerableSet.AddressSet)\\n                storage tokenAccounts = l.accountsByToken;\\n            EnumerableSet.UintSet storage fromTokens = l.tokensByAccount[from];\\n            EnumerableSet.UintSet storage toTokens = l.tokensByAccount[to];\\n\\n            for (uint256 i; i < ids.length; ) {\\n                uint256 amount = amounts[i];\\n\\n                if (amount > 0) {\\n                    uint256 id = ids[i];\\n\\n                    if (from == address(0)) {\\n                        l.totalSupply[id] += amount;\\n                    } else if (_balanceOf(from, id) == amount) {\\n                        tokenAccounts[id].remove(from);\\n                        fromTokens.remove(id);\\n                    }\\n\\n                    if (to == address(0)) {\\n                        l.totalSupply[id] -= amount;\\n                    } else if (_balanceOf(to, id) == 0) {\\n                        tokenAccounts[id].add(to);\\n                        toTokens.add(id);\\n                    }\\n                }\\n\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa60052b304f895a1893378f757223a3081f9d53044776ddc4bc283a51fd62388\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC1155EnumerableStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\n        mapping(address => EnumerableSet.UintSet) tokensByAccount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Enumerable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x89e73d6d5c7f19d54927dcbeb8b3bf782c8a9f51ad2f12e67b6491b3681a1549\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/IERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155BaseInternal } from '../base/IERC1155BaseInternal.sol';\\n\\n/**\\n * @title ERC1155 enumerable and aggregate function interface\\n */\\ninterface IERC1155Enumerable is IERC1155BaseInternal {\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function totalHolders(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function accountsByToken(\\n        uint256 id\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function tokensByAccount(\\n        address account\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x2e31e7a736871d52e5d24b0f0917a63bbdc25503bdc70ba6d8d001888aa0049f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { IERC1155Metadata } from './IERC1155Metadata.sol';\\nimport { ERC1155MetadataInternal } from './ERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @title ERC1155 metadata extensions\\n */\\nabstract contract ERC1155Metadata is IERC1155Metadata, ERC1155MetadataInternal {\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId) public view virtual returns (string memory) {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ea046fa006ec93948d00a4c93d0423d2cc3fa7f6bb5a4f4fa7dd59f8025404e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @title ERC1155Metadata internal functions\\n */\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataInternal {\\n    /**\\n     * @notice set base metadata URI\\n     * @dev base URI is a non-standard feature adapted from the ERC721 specification\\n     * @param baseURI base URI\\n     */\\n    function _setBaseURI(string memory baseURI) internal {\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @notice set per-token metadata URI\\n     * @param tokenId token whose metadata URI to set\\n     * @param tokenURI per-token URI\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xaf972740ad8d28ccc306fa49c5b0e581fc637f3706eb77fd5bb08d02b3b2a762\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC1155 metadata extensions\\n */\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Metadata');\\n\\n    struct Layout {\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e8228a4c843b8bb45252d360370ba12839e7bb53a3f6c97b1aee482d77d4ec\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata is IERC1155MetadataInternal {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x5996ccbe41ca8000926401f9172fe777853be594ca516bed5d56513f24b35798\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155Metadata interface needed by internal functions\\n */\\ninterface IERC1155MetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0x394093a86fbfebdcda356fe9407480d81434aa162afc6a3e8efbf72a4c05b98d\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 minValue = bytes32(type(uint256).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(address[] memory array) internal pure returns (address) {\\n        address minValue = address(type(uint160).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 minValue = type(uint256).max;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 maxValue = bytes32(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(address[] memory array) internal pure returns (address) {\\n        address maxValue = address(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 maxValue = 0;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86a2953855b8df5a5ded23a79016f1584b6321ef2c04f44466ebfbb6d23e728c\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Interface for the Multicall utility contract\\n */\\ninterface IMulticall {\\n    /**\\n     * @notice batch function calls to the contract and return the results of each\\n     * @param data array of function call data payloads\\n     * @return results array of function call results\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x39e630bc189607ae119c1208a632009fe418cc4eb2687b28e7fdbe78af7b79b0\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IMulticall } from './IMulticall.sol';\\n\\n/**\\n * @title Utility contract for supporting processing of multiple function calls in a single transaction\\n */\\nabstract contract Multicall is IMulticall {\\n    /**\\n     * @inheritdoc IMulticall\\n     */\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        unchecked {\\n            for (uint256 i; i < data.length; i++) {\\n                (bool success, bytes memory returndata) = address(this)\\n                    .delegatecall(data[i]);\\n\\n                if (success) {\\n                    results[i] = returndata;\\n                } else {\\n                    assembly {\\n                        returndatacopy(0, 0, returndatasize())\\n                        revert(0, returndatasize())\\n                    }\\n                }\\n            }\\n        }\\n\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x762f15ac4c28be19d0d7fb303ade8dea6ba52ff558fb6fba36df84a839e216b3\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/items/ItemsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { ERC1155Base } from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\\\";\\nimport { ERC1155BaseInternal } from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\\\";\\nimport { ERC1155Enumerable } from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\\\";\\nimport { ERC1155EnumerableInternal } from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\\\";\\nimport { ERC1155Metadata } from \\\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\\\";\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ItemsInternal } from \\\"./ItemsInternal.sol\\\";\\nimport { ItemsStorage } from \\\"./ItemsStorage.sol\\\";\\nimport { Multicall } from \\\"@solidstate/contracts/utils/Multicall.sol\\\";\\nimport { IERC1155 } from '@solidstate/contracts/interfaces/IERC1155.sol';\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\n\\n/**\\n * @title ItemsFacet\\n * @dev This contract handles the creation and management of items\\n * It uses ERC1155 tokens to represent items and provides methods to mint new items,\\n * claim items via Merkle tree or a whitelist, and set the base and URIs for\\n * the items. It also uses the ReentrancyGuard and Multicall contracts for security\\n * and gas efficiency.\\n */\\ncontract ItemsFacet is ERC1155Base, ERC1155Enumerable, ERC1155Metadata, ReentrancyGuard, ItemsInternal, Multicall, RolesInternal {\\n    \\n    // /**\\n    //  * @notice Claims an item if present in the Merkle tree\\n    //  * @param itemId The ID of the item to claim\\n    //  * @param amount The amount of the item to claim\\n    //  * @param proof The Merkle proof for the item\\n    //  */\\n    // function claimMerkle(uint itemId, uint amount, bytes32[] calldata proof)\\n    //     public nonReentrant\\n    // {\\n    //     _claimMerkle(msg.sender, itemId, amount, proof);\\n    // }\\n\\n    // /**\\n    //  * @notice Claims items if present in the Merkle tree\\n    //  * @param itemsIds The IDs of the items to claim\\n    //  * @param amounts The amounts of the items to claim\\n    //  * @param proofs The Merkle proofs for the items\\n    //  */\\n    // function claimMerkleBatch(uint[] calldata itemsIds, uint[] calldata amounts, bytes32[][] calldata proofs) external nonReentrant {\\n    //     _claimMerkleBatch(msg.sender, itemsIds, amounts, proofs);\\n    // }\\n\\n    // /**\\n    //  * @notice Claims items from a whitelist\\n    //  * @param itemIds The IDs of the items to claim\\n    //  * @param amounts The amounts of the items to claim\\n    //  */\\n    // function claimWhitelist(uint[] calldata itemIds, uint[] calldata amounts) external nonReentrant {\\n    //     _claimWhitelist(itemIds, amounts);\\n    // }\\n\\n    // /**\\n    //  * @notice Amount claimed by an address of a specific item\\n    //  * @param account the account to query\\n    //  * @param itemId the item id to query\\n    //  * @return amount returns the claimed amount given an account and an item id\\n    //  */\\n    // function claimedAmount(address account, uint itemId) external view returns (uint amount) {\\n    //     return _claimedAmount(account, itemId);\\n    // }\\n\\n    /**\\n     * @notice Burn an amount of an item\\n     * @param itemId The ID of the item to burn\\n     * @param amount The item amount to burn\\n     */\\n    function burn(uint itemId, uint amount)\\n        public\\n    {\\n        _burn(msg.sender, itemId, amount);\\n    }\\n\\n    /**\\n     * @notice Burn amounts of items\\n     * @param itemIds The item ID burn\\n     * @param amounts The item amounts to be minted\\n     */\\n    function burnBatch(uint256[] memory itemIds, uint256[] memory amounts)\\n        public\\n    {\\n        _burnBatch(msg.sender, itemIds, amounts);\\n    }\\n\\n    /**\\n     * @notice Mints a new item. Only minter role account can mint\\n     * @param to The address to mint the item to\\n     * @param itemId The ID of the item to mint\\n     * @param amount The item amount to be minted\\n     */\\n    function mint(address to, uint itemId, uint amount)\\n        public onlyManager\\n    {\\n        _mint(to, itemId, amount);\\n    }\\n\\n    /**\\n     * @notice Mint a batch of items to a specific address. Only minter role account can mint\\n     * @param to The address to receive the minted items\\n     * @param itemIds An array of items IDs to be minted\\n     * @param amounts The items amounts to be minted\\n     */\\n    function mintBatch(address to, uint[] calldata itemIds, uint[] calldata amounts)\\n        public onlyManager\\n    {\\n        _mintBatch(to, itemIds, amounts);\\n    }\\n\\n    /**\\n     * @notice Set the base URI for all items metadata\\n     * @dev Only the manager role can call this function\\n     * @param baseURI The new base URI\\n     */\\n    function setBaseURI(string calldata baseURI) external onlyManager {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /**\\n     * @notice Set the base URI for all items metadata\\n     * @dev Only the manager role can call this function\\n     * @param newBaseURI The new base URI\\n     * @param migrate Should migrate to IPFS\\n     */\\n    function migrateToIPFS(string calldata newBaseURI, bool migrate) external onlyManager {\\n        _migrateToIPFS(newBaseURI, migrate);\\n    }\\n\\n    /**\\n     * @dev Returns the current inventory address\\n     * @return The address of the inventory contract\\n     */\\n    function getInventoryAddress() external view returns (address) {\\n        return _getInventoryAddress();\\n    }\\n\\n    /**\\n     * @dev Sets the inventory address\\n     * @param inventoryAddress The new address of the inventory contract\\n     */\\n    function setInventoryAddress(address inventoryAddress) external onlyManager {\\n        _setInventoryAddress(inventoryAddress);\\n    }\\n\\n    /**\\n     * @notice Override ERC1155Metadata\\n     */\\n    function uri(uint tokenId) public view override returns (string memory) {\\n        if (ItemsStorage.layout().isMigratedToIPFS) {\\n            return string.concat(super.uri(tokenId), \\\".json\\\");\\n        } else {\\n            return super.uri(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the URI for a specific item ID\\n     * @dev Only the manager role can call this function\\n     * @param tokenId The ID of the item to set the URI for\\n     * @param tokenURI The new item URI\\n     */\\n    function setTokenURI(uint tokenId, string calldata tokenURI) external onlyManager {\\n        _setTokenURI(tokenId, tokenURI);\\n    }\\n\\n\\n    // overrides\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint id,\\n        uint amount,\\n        bytes memory data\\n    ) public override (ERC1155Base) {\\n        // Add red carpet logic for the inventory\\n        if (from != msg.sender && !isApprovedForAll(from, msg.sender) && _getInventoryAddress() != msg.sender )\\n            revert ERC1155Base__NotOwnerOrApproved();\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    function supportsInterface(bytes4 _interface) external pure returns (bool) {\\n        return type(IERC1155).interfaceId == _interface;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint[] memory ids,\\n        uint[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override (ERC1155BaseInternal, ERC1155EnumerableInternal, ItemsInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\",\"keccak256\":\"0xdca80c66cdebe39b42823a7a7bd6ec9cec72ec18f94be3355649ee03eb1e90ec\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/items/ItemsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { ERC1155BaseInternal } from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\\\";\\nimport { ERC1155EnumerableInternal } from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\\\";\\nimport { ERC1155MetadataInternal } from \\\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\\\";\\nimport { ItemsStorage } from \\\"./ItemsStorage.sol\\\";\\n// import { MerkleInternal } from \\\"../merkle/MerkleInternal.sol\\\";\\n// import { WhitelistInternal } from \\\"../whitelist/WhitelistInternal.sol\\\";\\nimport { ArrayUtils } from \\\"@solidstate/contracts/utils/ArrayUtils.sol\\\";\\n// import { WhitelistStorage } from \\\"../whitelist/WhitelistStorage.sol\\\";\\n\\ncontract ItemsInternal is ERC1155BaseInternal, ERC1155EnumerableInternal, ERC1155MetadataInternal {\\n\\n    error Items_InputsLengthMistatch();\\n    error Items_InvalidItemId();\\n    error Items_ItemsBasicStatusAlreadyUpdated();\\n    error Items_MintingNonBasicItem();\\n    error Items_MaximumItemMintsExceeded();\\n\\n    // event ItemsClaimedMerkle(address indexed to, uint[] itemsIds, uint[] amounts);\\n\\n    using ArrayUtils for uint[];\\n\\n    // function _claimMerkle(address to, uint itemId, uint amount, bytes32[] memory proof)\\n    //     internal\\n    // {\\n    //     if (itemId < 1) revert Items_InvalidItemId();\\n\\n    //     ItemsStorage.Layout storage itemsSL = ItemsStorage.layout();\\n\\n    //     bytes memory leaf = abi.encode(to, itemId, amount);\\n    //     _consumeLeaf(proof, leaf);\\n\\n    //     ERC1155BaseInternal._mint(to, itemId, amount, \\\"\\\");\\n\\n    //     itemsSL.amountClaimed[to][itemId] += amount;\\n        \\n    //     uint[] memory itemsIds = new uint[](1);\\n    //     itemsIds[0] = itemId;\\n    //     uint[] memory amounts = new uint[](1);\\n    //     amounts[0] = amount;\\n    //     emit ItemsClaimedMerkle(to, itemsIds, amounts);\\n    // }\\n\\n    // function _claimMerkleBatch(address to, uint[] calldata itemsIds, uint[] calldata amounts, bytes32[][] calldata proofs) \\n    //     internal\\n    // {\\n    //     if (itemsIds.length != amounts.length) \\n    //         revert Items_InputsLengthMistatch();\\n\\n    //     ItemsStorage.Layout storage itemsSL = ItemsStorage.layout();\\n\\n    //     for (uint i = 0; i < itemsIds.length; i++) {\\n\\n    //         if (itemsIds[i] < 1) revert Items_InvalidItemId();\\n\\n    //         bytes memory leaf = abi.encode(to, itemsIds[i], amounts[i]);\\n    //         _consumeLeaf(proofs[i], leaf);\\n\\n    //         ERC1155BaseInternal._mint(to, itemsIds[i], amounts[i], \\\"\\\");\\n\\n    //         itemsSL.amountClaimed[to][itemsIds[i]] += amounts[i];\\n    //     }\\n\\n    //     emit ItemsClaimedMerkle(to, itemsIds, amounts);\\n    // }\\n    \\n    // function _claimWhitelist(uint[] calldata itemIds, uint[] calldata amounts) internal {\\n    //     if (itemIds.length != amounts.length) \\n    //         revert Items_InputsLengthMistatch();\\n\\n\\n    //     uint totalAmount = 0;\\n    //     for (uint i = 0; i < itemIds.length; i++) {\\n    //         if (itemIds[i] < 1) \\n    //             revert Items_InvalidItemId();\\n\\n    //         ERC1155BaseInternal._mint(msg.sender, itemIds[i], amounts[i], \\\"\\\");\\n    //         totalAmount += amounts[i];\\n    //     }\\n    //     _consumeWhitelist(WhitelistStorage.PoolId.Guaranteed, msg.sender, totalAmount);\\n    // }\\n\\n    function _claimedAmount(address account, uint itemId) internal view returns (uint) {\\n        return ItemsStorage.layout().amountClaimed[account][itemId];\\n    }\\n\\n    function _mint(address to, uint itemId, uint amount)\\n        internal\\n    {\\n        if (itemId < 1) revert Items_InvalidItemId();\\n\\n        ERC1155BaseInternal._mint(to, itemId, amount, \\\"\\\");\\n    }\\n\\n    function _mintBatch(address to, uint[] calldata itemsIds, uint[] calldata amounts)\\n        internal\\n    {\\n        if (itemsIds.min() < 1) revert Items_InvalidItemId();\\n\\n        ERC1155BaseInternal._mintBatch(to, itemsIds, amounts, \\\"\\\");\\n    }\\n\\n    function _migrateToIPFS(string calldata newBaseURI, bool migrate) internal {\\n        _setBaseURI(newBaseURI);\\n        ItemsStorage.layout().isMigratedToIPFS = migrate;\\n    }\\n\\n    function _getInventoryAddress() internal view returns (address) {\\n        return ItemsStorage.layout().inventoryAddress;\\n    }\\n\\n    function _setInventoryAddress(address inventoryAddress) internal {\\n        ItemsStorage.layout().inventoryAddress = inventoryAddress;\\n    }\\n\\n    // overrides\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint[] memory ids,\\n        uint[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override (ERC1155BaseInternal, ERC1155EnumerableInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\",\"keccak256\":\"0xaae325727a44e3cd82e0f599ab15d1dd78b79794a355e9dc4717df4b3663da96\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/items/ItemsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary ItemsStorage {\\n\\n    bytes32 constant ITEMS_STORAGE_POSITION =\\n        keccak256(\\\"items.storage.position\\\");\\n\\n    struct Layout {\\n        // wallet address => token id => is claimed \\n        mapping(address => mapping(uint => uint)) amountClaimed;\\n        bool isMigratedToIPFS;\\n\\n        // token id => is basic item\\n        mapping(uint => bool) isBasicItem;\\n        uint[] basicItemsIds;\\n        address inventoryAddress;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ITEMS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x3402a30b584291bdf9a4e3b0f0c4514a5a076e2015fb6ccefe497d5970dd01a2\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    error Roles_MissingAdminRole();\\n    error Roles_MissingManagerRole();\\n    error Roles_MissingAutomationRole();\\n\\n    modifier onlyDefaultAdmin() {\\n        if (!_hasRole(_defaultAdminRole(), msg.sender))\\n            revert Roles_MissingAdminRole();\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        if (!_hasRole(_managerRole(), msg.sender))\\n            revert Roles_MissingManagerRole();\\n        _;\\n    }\\n\\n    modifier onlyAutomation() {\\n        if (!_hasRole(_managerRole(), msg.sender) && !_hasRole(_automationRole(), msg.sender))\\n            revert Roles_MissingAutomationRole();\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _automationRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().automationRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.automationRole = keccak256(\\\"automation.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0x3bbcaec7bceb8497e1e96785c524e1cf67b54ba34713086686887d13502b5264\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 automationRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x6eb213b99e10477f695528196487fafafaeceb2b11c6f9f43f3ddb9e83f9e8d3\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612dc2806100206000396000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c806385bff2e7116100b8578063bd85b0391161007c578063bd85b039146102ed578063c22cbb5d14610300578063cdc11b1114610313578063d81d0a1514610326578063e985e9c514610339578063f242432a1461034c57600080fd5b806385bff2e714610274578063a22cb46514610287578063ac9650d81461029a578063b390c0ab146102ba578063ba58bb17146102cd57600080fd5b8063162094c41161010a578063162094c4146101e85780632eb2c2d6146101fb5780634e1273f41461020e57806355f804b31461022e5780636dcfd8411461024157806383ca4b6f1461026157600080fd5b8062fdd58e1461014657806301ffc9a71461016c5780630e89341c146101a057806313ba55df146101c0578063156e29f6146101d3575b600080fd5b6101596101543660046120c9565b61035f565b6040519081526020015b60405180910390f35b61019061017a366004612109565b6001600160e01b031916636cdb3d1360e11b1490565b6040519015158152602001610163565b6101b36101ae36600461212d565b610374565b6040516101639190612196565b6101596101ce36600461212d565b6103de565b6101e66101e13660046121a9565b6103e9565b005b6101e66101f6366004612224565b610435565b6101e66102093660046123b8565b6104ab565b61022161021c366004612461565b6104fd565b6040516101639190612566565b6101e661023c366004612579565b610667565b61025461024f36600461212d565b6106e0565b60405161016391906125ba565b6101e661026f366004612607565b6106eb565b610221610282366004612653565b6106f6565b6101e661029536600461267e565b610701565b6102ad6102a83660046126f5565b6107b5565b604051610163919061272a565b6101e66102c836600461278c565b6108cf565b6102d56108da565b6040516001600160a01b039091168152602001610163565b6101596102fb36600461212d565b610912565b6101e661030e366004612653565b610945565b6101e66103213660046127ae565b6109c8565b6101e6610334366004612801565b610a09565b610190610347366004612881565b610a4c565b6101e661035a3660046128ab565b610a99565b600061036b8383610b29565b90505b92915050565b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d75460609060ff16156103d0576103aa82610b87565b6040516020016103ba919061290f565b6040516020818303038152906040529050919050565b61036e82610b87565b919050565b600061036e82610d56565b610408610402600080516020612d4d8339815191525490565b33610d8c565b6104255760405163d0befa1d60e01b815260040160405180910390fd5b610430838383610dc3565b505050565b61044e610402600080516020612d4d8339815191525490565b61046b5760405163d0befa1d60e01b815260040160405180910390fd5b6104308383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e0092505050565b6001600160a01b03851633148015906104cb57506104c98533610a4c565b155b156104e8576040516212efed60e91b815260040160405180910390fd5b6104f6338686868686610e74565b5050505050565b6060815183511461052157604051633e7e0b6d60e11b815260040160405180910390fd5b8251600080516020612d6d833981519152906000906001600160401b0381111561054d5761054d61226f565b604051908082528060200260200182016040528015610576578160200160208202803683370190505b50905060005b855181101561065e5760006001600160a01b03168682815181106105a2576105a2612938565b60200260200101516001600160a01b0316036105d15760405163db5d879760e01b815260040160405180910390fd5b8260008683815181106105e6576105e6612938565b60200260200101518152602001908152602001600020600087838151811061061057610610612938565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061064b5761064b612938565b602090810291909101015260010161057c565b50949350505050565b610680610402600080516020612d4d8339815191525490565b61069d5760405163d0befa1d60e01b815260040160405180910390fd5b6106dc82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e9892505050565b5050565b606061036e82610ec3565b6106dc338383610f96565b606061036e82611150565b6001600160a01b038216330361072a57604051637b30a93360e11b815260040160405180910390fd5b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b038111156107cf576107cf61226f565b60405190808252806020026020018201604052801561080257816020015b60608152602001906001900390816107ed5790505b50905060005b828110156108c8576000803086868581811061082657610826612938565b9050602002810190610838919061294e565b604051610846929190612994565b600060405180830381855af49150503d8060008114610881576040519150601f19603f3d011682016040523d82523d6000602084013e610886565b606091505b509150915081156108b457808484815181106108a4576108a4612938565b60200260200101819052506108be565b3d6000803e3d6000fd5b5050600101610808565b5092915050565b6106dc338383611218565b600061090d7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da546001600160a01b031690565b905090565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea602052604081205461036e565b61095e610402600080516020612d4d8339815191525490565b61097b5760405163d0befa1d60e01b815260040160405180910390fd5b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b50565b6109e1610402600080516020612d4d8339815191525490565b6109fe5760405163d0befa1d60e01b815260040160405180910390fd5b610430838383611317565b610a22610402600080516020612d4d8339815191525490565b610a3f5760405163d0befa1d60e01b815260040160405180910390fd5b6104f6858585858561138a565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b6001600160a01b0385163314801590610ab95750610ab78533610a4c565b155b8015610afe575033610af27f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da546001600160a01b031690565b6001600160a01b031614155b15610b1b576040516212efed60e91b815260040160405180910390fd5b6104f6338686868686611463565b60006001600160a01b038316610b525760405163db5d879760e01b815260040160405180910390fd5b600080516020612d6d8339815191526000928352602090815260408084206001600160a01b0395909516845293905250205490565b60008181527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f56020526040812080546060927f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f4929091610be6906129a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c12906129a4565b8015610c5f5780601f10610c3457610100808354040283529160200191610c5f565b820191906000526020600020905b815481529060010190602001808311610c4257829003601f168201915b505050505090506000826000018054610c77906129a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca3906129a4565b8015610cf05780601f10610cc557610100808354040283529160200191610cf0565b820191906000526020600020905b815481529060010190602001808311610cd357829003601f168201915b505050505090508051600003610d0857509392505050565b815115610d3b578082604051602001610d229291906129de565b6040516020818303038152906040529350505050919050565b80610d458661147f565b604051602001610d229291906129de565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb6020526040812061036e90611587565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061036b9083611591565b6001821015610de55760405163225c19bb60e11b815260040160405180910390fd5b610430838383604051806020016040528060008152506115b3565b60008281527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f560205260409020610e378282612a53565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051610e689190612196565b60405180910390a25050565b610e82868686868686611683565b610e9086868686868661182c565b505050505050565b7f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f46106dc8282612a53565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb60205260408120606091610efc82611587565b6001600160401b03811115610f1357610f1361226f565b604051908082528060200260200182016040528015610f3c578160200160208202803683370190505b50905060005b610f4b83611587565b811015610f8e57610f5c838261194e565b828281518110610f6e57610f6e612938565b6001600160a01b0390921660209283029190910190910152600101610f42565b509392505050565b6001600160a01b038316610fbd5760405163baa75df760e01b815260040160405180910390fd5b8051825114610fdf57604051633e7e0b6d60e11b815260040160405180910390fd5b610ffd3384600085856040518060200160405280600081525061195a565b600080516020612d6d83398151915260005b83518110156110f157600084828151811061102c5761102c612938565b602002602001015190508260008281526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000205484838151811061107e5761107e612938565b602002602001015111156110a557604051634190713d60e01b815260040160405180910390fd5b8382815181106110b7576110b7612938565b602090810291909101810151600092835284825260408084206001600160a01b038a1685529092529120805491909103905560010161100f565b5060006001600160a01b0316846001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611142929190612b12565b60405180910390a450505050565b6001600160a01b03811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040812060609161119382611587565b6001600160401b038111156111aa576111aa61226f565b6040519080825280602002602001820160405280156111d3578160200160208202803683370190505b50905060005b6111e283611587565b811015610f8e576111f3838261194e565b82828151811061120557611205612938565b60209081029190910101526001016111d9565b6001600160a01b03831661123f5760405163baa75df760e01b815260040160405180910390fd5b61126d3384600061124f86611968565b61125886611968565b6040518060200160405280600081525061195a565b6000828152600080516020612d6d833981519152602090815260408083206001600160a01b038716845291829052909120548211156112bf57604051634190713d60e01b815260040160405180910390fd5b6001600160a01b03841660008181526020838152604080832080548790039055805187815291820186905291929133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611142565b61135683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e9892505050565b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d7805460ff19169115159190911790555050565b60016113c88585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506119b392505050565b10156113e75760405163225c19bb60e11b815260040160405180910390fd5b6104f68585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092018290525060408051602081019091529081529250611a09915050565b611471868686868686611b60565b610e90868686868686611c76565b6060816000036114a65750506040805180820190915260018152600360fc1b602082015290565b8160005b81156114d057806114ba81612b56565b91506114c99050600a83612b85565b91506114aa565b6000816001600160401b038111156114ea576114ea61226f565b6040519080825280601f01601f191660200182016040528015611514576020820181803683370190505b5090505b841561157f57611529600183612b99565b9150611536600a86612bac565b611541906030612bc0565b60f81b81838151811061155657611556612938565b60200101906001600160f81b031916908160001a905350611578600a86612b85565b9450611518565b949350505050565b600061036e825490565b6001600160a01b0381166000908152600183016020526040812054151561036b565b6001600160a01b0384166115da576040516301c8efbf60e11b815260040160405180910390fd5b6115f9336000866115ea87611968565b6115f387611968565b8661195a565b6000838152600080516020612d6d833981519152602090815260408083206001600160a01b038816845290915281208054849290611638908490612bc0565b909155505060408051848152602081018490526001600160a01b0386169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611142565b6001600160a01b0384166116aa5760405163f5cadad560e01b815260040160405180910390fd5b81518351146116cc57604051633e7e0b6d60e11b815260040160405180910390fd5b6116da86868686868661195a565b600080516020612d6d83398151915260005b84518110156117cb57600085828151811061170957611709612938565b60200260200101519050600085838151811061172757611727612938565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150808211156117785760405163119ac6bb60e31b815260040160405180910390fd5b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a1681529081208054600195909501948392906117be908490612bc0565b909155506116ec92505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161181b929190612b12565b60405180910390a450505050505050565b6001600160a01b0384163b15610e905760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906118709089908990889088908890600401612bd3565b6020604051808303816000875af19250505080156118ab575060408051601f3d908101601f191682019092526118a891810190612c31565b60015b611914576118b7612c4e565b806308c379a0036118f957506118cb612c6a565b806118d657506118fb565b8060405162461bcd60e51b81526004016118f09190612196565b60405180910390fd5b505b60405163380147a960e01b815260040160405180910390fd5b6001600160e01b0319811663bc197c8160e01b1461194557604051633744db2960e01b815260040160405180910390fd5b50505050505050565b600061036b8383611d32565b610e90868686868686611d7e565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106119a2576119a2612938565b602090810291909101015292915050565b6000600019815b83518110156108c857818482815181106119d6576119d6612938565b60200260200101511015611a01578381815181106119f6576119f6612938565b602002602001015191505b6001016119ba565b6001600160a01b038416611a30576040516301c8efbf60e11b815260040160405180910390fd5b8151835114611a5257604051633e7e0b6d60e11b815260040160405180910390fd5b611a613360008686868661195a565b600080516020612d6d83398151915260005b8451811015611b0057838181518110611a8e57611a8e612938565b6020026020010151826000878481518110611aab57611aab612938565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611af39190612bc0565b9091555050600101611a73565b50846001600160a01b031660006001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b51929190612b12565b60405180910390a45050505050565b6001600160a01b038416611b875760405163f5cadad560e01b815260040160405180910390fd5b611b968686866115ea87611968565b6000838152600080516020612d6d833981519152602081815260408084206001600160a01b038a1685529091529091205480841115611be85760405163119ac6bb60e31b815260040160405180910390fd5b6000858152602083815260408083206001600160a01b038b81168552925280832093879003909355871681529081208054859290611c27908490612bc0565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910161181b565b6001600160a01b0384163b15610e905760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611cba9089908990889088908890600401612cf3565b6020604051808303816000875af1925050508015611cf5575060408051601f3d908101601f19168201909252611cf291810190612c31565b60015b611d01576118b7612c4e565b6001600160e01b0319811663f23a6e6160e01b1461194557604051633744db2960e01b815260040160405180910390fd5b81546000908210611d565760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110611d6b57611d6b612938565b9060005260206000200154905092915050565b610e90868686868686836001600160a01b0316856001600160a01b031614610e90576001600160a01b0385811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040808220928716825281207fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea927fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb929091905b8751811015611f66576000878281518110611e4557611e45612938565b602002602001015190506000811115611f5d576000898381518110611e6c57611e6c612938565b6020026020010151905060006001600160a01b03168c6001600160a01b031603611eb95760008181526020889052604081208054849290611eae908490612bc0565b90915550611eee9050565b81611ec48d83610b29565b03611eee576000818152602087905260409020611ee1908d611f73565b50611eec8582611f88565b505b6001600160a01b038b16611f255760008181526020889052604081208054849290611f1a908490612b99565b90915550611f5b9050565b611f2f8b82610b29565b600003611f5b576000818152602087905260409020611f4e908c611f94565b50611f598482611fa9565b505b505b50600101611e28565b5050505050505050505050565b600061036b836001600160a01b038416611fb5565b600061036b8383611fb5565b600061036b836001600160a01b03841661206f565b600061036b838361206f565b600081815260018301602052604081205480156108c857835460009085906000198101908110611fe757611fe7612938565b906000526020600020015490508085600001600184038154811061200d5761200d612938565b600091825260208083209091019290925591825260018601905260409020819055835484908061203f5761203f612d36565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b600081815260018301602052604081205461036e575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b80356001600160a01b03811681146103d957600080fd5b600080604083850312156120dc57600080fd5b6120e5836120b2565b946020939093013593505050565b6001600160e01b0319811681146109c557600080fd5b60006020828403121561211b57600080fd5b8135612126816120f3565b9392505050565b60006020828403121561213f57600080fd5b5035919050565b60005b83811015612161578181015183820152602001612149565b50506000910152565b60008151808452612182816020860160208601612146565b601f01601f19169290920160200192915050565b60208152600061036b602083018461216a565b6000806000606084860312156121be57600080fd5b6121c7846120b2565b95602085013595506040909401359392505050565b60008083601f8401126121ee57600080fd5b5081356001600160401b0381111561220557600080fd5b60208301915083602082850101111561221d57600080fd5b9250929050565b60008060006040848603121561223957600080fd5b8335925060208401356001600160401b0381111561225657600080fd5b612262868287016121dc565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156122aa576122aa61226f565b6040525050565b60006001600160401b038211156122ca576122ca61226f565b5060051b60200190565b600082601f8301126122e557600080fd5b813560206122f2826122b1565b6040516122ff8282612285565b83815260059390931b850182019282810191508684111561231f57600080fd5b8286015b8481101561233a5780358352918301918301612323565b509695505050505050565b600082601f83011261235657600080fd5b81356001600160401b0381111561236f5761236f61226f565b604051612386601f8301601f191660200182612285565b81815284602083860101111561239b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156123d057600080fd5b6123d9866120b2565b94506123e7602087016120b2565b935060408601356001600160401b038082111561240357600080fd5b61240f89838a016122d4565b9450606088013591508082111561242557600080fd5b61243189838a016122d4565b9350608088013591508082111561244757600080fd5b5061245488828901612345565b9150509295509295909350565b6000806040838503121561247457600080fd5b82356001600160401b038082111561248b57600080fd5b818501915085601f83011261249f57600080fd5b813560206124ac826122b1565b6040516124b98282612285565b83815260059390931b85018201928281019150898411156124d957600080fd5b948201945b838610156124fe576124ef866120b2565b825294820194908201906124de565b9650508601359250508082111561251457600080fd5b50612521858286016122d4565b9150509250929050565b600081518084526020808501945080840160005b8381101561255b5781518752958201959082019060010161253f565b509495945050505050565b60208152600061036b602083018461252b565b6000806020838503121561258c57600080fd5b82356001600160401b038111156125a257600080fd5b6125ae858286016121dc565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156125fb5783516001600160a01b0316835292840192918401916001016125d6565b50909695505050505050565b6000806040838503121561261a57600080fd5b82356001600160401b038082111561263157600080fd5b61263d868387016122d4565b9350602085013591508082111561251457600080fd5b60006020828403121561266557600080fd5b61036b826120b2565b803580151581146103d957600080fd5b6000806040838503121561269157600080fd5b61269a836120b2565b91506126a86020840161266e565b90509250929050565b60008083601f8401126126c357600080fd5b5081356001600160401b038111156126da57600080fd5b6020830191508360208260051b850101111561221d57600080fd5b6000806020838503121561270857600080fd5b82356001600160401b0381111561271e57600080fd5b6125ae858286016126b1565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561277f57603f1988860301845261276d85835161216a565b94509285019290850190600101612751565b5092979650505050505050565b6000806040838503121561279f57600080fd5b50508035926020909101359150565b6000806000604084860312156127c357600080fd5b83356001600160401b038111156127d957600080fd5b6127e5868287016121dc565b90945092506127f890506020850161266e565b90509250925092565b60008060008060006060868803121561281957600080fd5b612822866120b2565b945060208601356001600160401b038082111561283e57600080fd5b61284a89838a016126b1565b9096509450604088013591508082111561286357600080fd5b50612870888289016126b1565b969995985093965092949392505050565b6000806040838503121561289457600080fd5b61289d836120b2565b91506126a8602084016120b2565b600080600080600060a086880312156128c357600080fd5b6128cc866120b2565b94506128da602087016120b2565b9350604086013592506060860135915060808601356001600160401b0381111561290357600080fd5b61245488828901612345565b60008251612921818460208701612146565b64173539b7b760d91b920191825250600501919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261296557600080fd5b8301803591506001600160401b0382111561297f57600080fd5b60200191503681900382131561221d57600080fd5b8183823760009101908152919050565b600181811c908216806129b857607f821691505b6020821081036129d857634e487b7160e01b600052602260045260246000fd5b50919050565b600083516129f0818460208801612146565b835190830190612a04818360208801612146565b01949350505050565b601f82111561043057600081815260208120601f850160051c81016020861015612a345750805b601f850160051c820191505b81811015610e9057828155600101612a40565b81516001600160401b03811115612a6c57612a6c61226f565b612a8081612a7a84546129a4565b84612a0d565b602080601f831160018114612ab55760008415612a9d5750858301515b600019600386901b1c1916600185901b178555610e90565b600085815260208120601f198616915b82811015612ae457888601518255948401946001909101908401612ac5565b5085821015612b025787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000612b25604083018561252b565b8281036020840152612b37818561252b565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201612b6857612b68612b40565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082612b9457612b94612b6f565b500490565b8181038181111561036e5761036e612b40565b600082612bbb57612bbb612b6f565b500690565b8082018082111561036e5761036e612b40565b60006001600160a01b03808816835280871660208401525060a06040830152612bff60a083018661252b565b8281036060840152612c11818661252b565b90508281036080840152612c25818561216a565b98975050505050505050565b600060208284031215612c4357600080fd5b8151612126816120f3565b600060033d1115612c675760046000803e5060005160e01c5b90565b600060443d1015612c785790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612ca757505050505090565b8285019150815181811115612cbf5750505050505090565b843d8701016020828501011115612cd95750505050505090565b612ce860208286010187612285565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612d2b60a083018461216a565b979650505050505050565b634e487b7160e01b600052603160045260246000fdfef6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa721799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68ba2646970667358221220660e06dff5a93b450d5cade08516d68459130955cd4cf9487add558684d1270564736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101415760003560e01c806385bff2e7116100b8578063bd85b0391161007c578063bd85b039146102ed578063c22cbb5d14610300578063cdc11b1114610313578063d81d0a1514610326578063e985e9c514610339578063f242432a1461034c57600080fd5b806385bff2e714610274578063a22cb46514610287578063ac9650d81461029a578063b390c0ab146102ba578063ba58bb17146102cd57600080fd5b8063162094c41161010a578063162094c4146101e85780632eb2c2d6146101fb5780634e1273f41461020e57806355f804b31461022e5780636dcfd8411461024157806383ca4b6f1461026157600080fd5b8062fdd58e1461014657806301ffc9a71461016c5780630e89341c146101a057806313ba55df146101c0578063156e29f6146101d3575b600080fd5b6101596101543660046120c9565b61035f565b6040519081526020015b60405180910390f35b61019061017a366004612109565b6001600160e01b031916636cdb3d1360e11b1490565b6040519015158152602001610163565b6101b36101ae36600461212d565b610374565b6040516101639190612196565b6101596101ce36600461212d565b6103de565b6101e66101e13660046121a9565b6103e9565b005b6101e66101f6366004612224565b610435565b6101e66102093660046123b8565b6104ab565b61022161021c366004612461565b6104fd565b6040516101639190612566565b6101e661023c366004612579565b610667565b61025461024f36600461212d565b6106e0565b60405161016391906125ba565b6101e661026f366004612607565b6106eb565b610221610282366004612653565b6106f6565b6101e661029536600461267e565b610701565b6102ad6102a83660046126f5565b6107b5565b604051610163919061272a565b6101e66102c836600461278c565b6108cf565b6102d56108da565b6040516001600160a01b039091168152602001610163565b6101596102fb36600461212d565b610912565b6101e661030e366004612653565b610945565b6101e66103213660046127ae565b6109c8565b6101e6610334366004612801565b610a09565b610190610347366004612881565b610a4c565b6101e661035a3660046128ab565b610a99565b600061036b8383610b29565b90505b92915050565b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d75460609060ff16156103d0576103aa82610b87565b6040516020016103ba919061290f565b6040516020818303038152906040529050919050565b61036e82610b87565b919050565b600061036e82610d56565b610408610402600080516020612d4d8339815191525490565b33610d8c565b6104255760405163d0befa1d60e01b815260040160405180910390fd5b610430838383610dc3565b505050565b61044e610402600080516020612d4d8339815191525490565b61046b5760405163d0befa1d60e01b815260040160405180910390fd5b6104308383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e0092505050565b6001600160a01b03851633148015906104cb57506104c98533610a4c565b155b156104e8576040516212efed60e91b815260040160405180910390fd5b6104f6338686868686610e74565b5050505050565b6060815183511461052157604051633e7e0b6d60e11b815260040160405180910390fd5b8251600080516020612d6d833981519152906000906001600160401b0381111561054d5761054d61226f565b604051908082528060200260200182016040528015610576578160200160208202803683370190505b50905060005b855181101561065e5760006001600160a01b03168682815181106105a2576105a2612938565b60200260200101516001600160a01b0316036105d15760405163db5d879760e01b815260040160405180910390fd5b8260008683815181106105e6576105e6612938565b60200260200101518152602001908152602001600020600087838151811061061057610610612938565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061064b5761064b612938565b602090810291909101015260010161057c565b50949350505050565b610680610402600080516020612d4d8339815191525490565b61069d5760405163d0befa1d60e01b815260040160405180910390fd5b6106dc82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e9892505050565b5050565b606061036e82610ec3565b6106dc338383610f96565b606061036e82611150565b6001600160a01b038216330361072a57604051637b30a93360e11b815260040160405180910390fd5b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b038111156107cf576107cf61226f565b60405190808252806020026020018201604052801561080257816020015b60608152602001906001900390816107ed5790505b50905060005b828110156108c8576000803086868581811061082657610826612938565b9050602002810190610838919061294e565b604051610846929190612994565b600060405180830381855af49150503d8060008114610881576040519150601f19603f3d011682016040523d82523d6000602084013e610886565b606091505b509150915081156108b457808484815181106108a4576108a4612938565b60200260200101819052506108be565b3d6000803e3d6000fd5b5050600101610808565b5092915050565b6106dc338383611218565b600061090d7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da546001600160a01b031690565b905090565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea602052604081205461036e565b61095e610402600080516020612d4d8339815191525490565b61097b5760405163d0befa1d60e01b815260040160405180910390fd5b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b50565b6109e1610402600080516020612d4d8339815191525490565b6109fe5760405163d0befa1d60e01b815260040160405180910390fd5b610430838383611317565b610a22610402600080516020612d4d8339815191525490565b610a3f5760405163d0befa1d60e01b815260040160405180910390fd5b6104f6858585858561138a565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b6001600160a01b0385163314801590610ab95750610ab78533610a4c565b155b8015610afe575033610af27f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906da546001600160a01b031690565b6001600160a01b031614155b15610b1b576040516212efed60e91b815260040160405180910390fd5b6104f6338686868686611463565b60006001600160a01b038316610b525760405163db5d879760e01b815260040160405180910390fd5b600080516020612d6d8339815191526000928352602090815260408084206001600160a01b0395909516845293905250205490565b60008181527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f56020526040812080546060927f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f4929091610be6906129a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c12906129a4565b8015610c5f5780601f10610c3457610100808354040283529160200191610c5f565b820191906000526020600020905b815481529060010190602001808311610c4257829003601f168201915b505050505090506000826000018054610c77906129a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca3906129a4565b8015610cf05780601f10610cc557610100808354040283529160200191610cf0565b820191906000526020600020905b815481529060010190602001808311610cd357829003601f168201915b505050505090508051600003610d0857509392505050565b815115610d3b578082604051602001610d229291906129de565b6040516020818303038152906040529350505050919050565b80610d458661147f565b604051602001610d229291906129de565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb6020526040812061036e90611587565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061036b9083611591565b6001821015610de55760405163225c19bb60e11b815260040160405180910390fd5b610430838383604051806020016040528060008152506115b3565b60008281527f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f560205260409020610e378282612a53565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051610e689190612196565b60405180910390a25050565b610e82868686868686611683565b610e9086868686868661182c565b505050505050565b7f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f46106dc8282612a53565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb60205260408120606091610efc82611587565b6001600160401b03811115610f1357610f1361226f565b604051908082528060200260200182016040528015610f3c578160200160208202803683370190505b50905060005b610f4b83611587565b811015610f8e57610f5c838261194e565b828281518110610f6e57610f6e612938565b6001600160a01b0390921660209283029190910190910152600101610f42565b509392505050565b6001600160a01b038316610fbd5760405163baa75df760e01b815260040160405180910390fd5b8051825114610fdf57604051633e7e0b6d60e11b815260040160405180910390fd5b610ffd3384600085856040518060200160405280600081525061195a565b600080516020612d6d83398151915260005b83518110156110f157600084828151811061102c5761102c612938565b602002602001015190508260008281526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000205484838151811061107e5761107e612938565b602002602001015111156110a557604051634190713d60e01b815260040160405180910390fd5b8382815181106110b7576110b7612938565b602090810291909101810151600092835284825260408084206001600160a01b038a1685529092529120805491909103905560010161100f565b5060006001600160a01b0316846001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611142929190612b12565b60405180910390a450505050565b6001600160a01b03811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040812060609161119382611587565b6001600160401b038111156111aa576111aa61226f565b6040519080825280602002602001820160405280156111d3578160200160208202803683370190505b50905060005b6111e283611587565b811015610f8e576111f3838261194e565b82828151811061120557611205612938565b60209081029190910101526001016111d9565b6001600160a01b03831661123f5760405163baa75df760e01b815260040160405180910390fd5b61126d3384600061124f86611968565b61125886611968565b6040518060200160405280600081525061195a565b6000828152600080516020612d6d833981519152602090815260408083206001600160a01b038716845291829052909120548211156112bf57604051634190713d60e01b815260040160405180910390fd5b6001600160a01b03841660008181526020838152604080832080548790039055805187815291820186905291929133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611142565b61135683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e9892505050565b7f333d4b734a9ca3847483bf4c14a14709d21907ff5f12a881347e2fb2ad8906d7805460ff19169115159190911790555050565b60016113c88585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506119b392505050565b10156113e75760405163225c19bb60e11b815260040160405180910390fd5b6104f68585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092018290525060408051602081019091529081529250611a09915050565b611471868686868686611b60565b610e90868686868686611c76565b6060816000036114a65750506040805180820190915260018152600360fc1b602082015290565b8160005b81156114d057806114ba81612b56565b91506114c99050600a83612b85565b91506114aa565b6000816001600160401b038111156114ea576114ea61226f565b6040519080825280601f01601f191660200182016040528015611514576020820181803683370190505b5090505b841561157f57611529600183612b99565b9150611536600a86612bac565b611541906030612bc0565b60f81b81838151811061155657611556612938565b60200101906001600160f81b031916908160001a905350611578600a86612b85565b9450611518565b949350505050565b600061036e825490565b6001600160a01b0381166000908152600183016020526040812054151561036b565b6001600160a01b0384166115da576040516301c8efbf60e11b815260040160405180910390fd5b6115f9336000866115ea87611968565b6115f387611968565b8661195a565b6000838152600080516020612d6d833981519152602090815260408083206001600160a01b038816845290915281208054849290611638908490612bc0565b909155505060408051848152602081018490526001600160a01b0386169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611142565b6001600160a01b0384166116aa5760405163f5cadad560e01b815260040160405180910390fd5b81518351146116cc57604051633e7e0b6d60e11b815260040160405180910390fd5b6116da86868686868661195a565b600080516020612d6d83398151915260005b84518110156117cb57600085828151811061170957611709612938565b60200260200101519050600085838151811061172757611727612938565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150808211156117785760405163119ac6bb60e31b815260040160405180910390fd5b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a1681529081208054600195909501948392906117be908490612bc0565b909155506116ec92505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161181b929190612b12565b60405180910390a450505050505050565b6001600160a01b0384163b15610e905760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906118709089908990889088908890600401612bd3565b6020604051808303816000875af19250505080156118ab575060408051601f3d908101601f191682019092526118a891810190612c31565b60015b611914576118b7612c4e565b806308c379a0036118f957506118cb612c6a565b806118d657506118fb565b8060405162461bcd60e51b81526004016118f09190612196565b60405180910390fd5b505b60405163380147a960e01b815260040160405180910390fd5b6001600160e01b0319811663bc197c8160e01b1461194557604051633744db2960e01b815260040160405180910390fd5b50505050505050565b600061036b8383611d32565b610e90868686868686611d7e565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106119a2576119a2612938565b602090810291909101015292915050565b6000600019815b83518110156108c857818482815181106119d6576119d6612938565b60200260200101511015611a01578381815181106119f6576119f6612938565b602002602001015191505b6001016119ba565b6001600160a01b038416611a30576040516301c8efbf60e11b815260040160405180910390fd5b8151835114611a5257604051633e7e0b6d60e11b815260040160405180910390fd5b611a613360008686868661195a565b600080516020612d6d83398151915260005b8451811015611b0057838181518110611a8e57611a8e612938565b6020026020010151826000878481518110611aab57611aab612938565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611af39190612bc0565b9091555050600101611a73565b50846001600160a01b031660006001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b51929190612b12565b60405180910390a45050505050565b6001600160a01b038416611b875760405163f5cadad560e01b815260040160405180910390fd5b611b968686866115ea87611968565b6000838152600080516020612d6d833981519152602081815260408084206001600160a01b038a1685529091529091205480841115611be85760405163119ac6bb60e31b815260040160405180910390fd5b6000858152602083815260408083206001600160a01b038b81168552925280832093879003909355871681529081208054859290611c27908490612bc0565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910161181b565b6001600160a01b0384163b15610e905760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611cba9089908990889088908890600401612cf3565b6020604051808303816000875af1925050508015611cf5575060408051601f3d908101601f19168201909252611cf291810190612c31565b60015b611d01576118b7612c4e565b6001600160e01b0319811663f23a6e6160e01b1461194557604051633744db2960e01b815260040160405180910390fd5b81546000908210611d565760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110611d6b57611d6b612938565b9060005260206000200154905092915050565b610e90868686868686836001600160a01b0316856001600160a01b031614610e90576001600160a01b0385811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040808220928716825281207fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea927fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb929091905b8751811015611f66576000878281518110611e4557611e45612938565b602002602001015190506000811115611f5d576000898381518110611e6c57611e6c612938565b6020026020010151905060006001600160a01b03168c6001600160a01b031603611eb95760008181526020889052604081208054849290611eae908490612bc0565b90915550611eee9050565b81611ec48d83610b29565b03611eee576000818152602087905260409020611ee1908d611f73565b50611eec8582611f88565b505b6001600160a01b038b16611f255760008181526020889052604081208054849290611f1a908490612b99565b90915550611f5b9050565b611f2f8b82610b29565b600003611f5b576000818152602087905260409020611f4e908c611f94565b50611f598482611fa9565b505b505b50600101611e28565b5050505050505050505050565b600061036b836001600160a01b038416611fb5565b600061036b8383611fb5565b600061036b836001600160a01b03841661206f565b600061036b838361206f565b600081815260018301602052604081205480156108c857835460009085906000198101908110611fe757611fe7612938565b906000526020600020015490508085600001600184038154811061200d5761200d612938565b600091825260208083209091019290925591825260018601905260409020819055835484908061203f5761203f612d36565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b600081815260018301602052604081205461036e575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b80356001600160a01b03811681146103d957600080fd5b600080604083850312156120dc57600080fd5b6120e5836120b2565b946020939093013593505050565b6001600160e01b0319811681146109c557600080fd5b60006020828403121561211b57600080fd5b8135612126816120f3565b9392505050565b60006020828403121561213f57600080fd5b5035919050565b60005b83811015612161578181015183820152602001612149565b50506000910152565b60008151808452612182816020860160208601612146565b601f01601f19169290920160200192915050565b60208152600061036b602083018461216a565b6000806000606084860312156121be57600080fd5b6121c7846120b2565b95602085013595506040909401359392505050565b60008083601f8401126121ee57600080fd5b5081356001600160401b0381111561220557600080fd5b60208301915083602082850101111561221d57600080fd5b9250929050565b60008060006040848603121561223957600080fd5b8335925060208401356001600160401b0381111561225657600080fd5b612262868287016121dc565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156122aa576122aa61226f565b6040525050565b60006001600160401b038211156122ca576122ca61226f565b5060051b60200190565b600082601f8301126122e557600080fd5b813560206122f2826122b1565b6040516122ff8282612285565b83815260059390931b850182019282810191508684111561231f57600080fd5b8286015b8481101561233a5780358352918301918301612323565b509695505050505050565b600082601f83011261235657600080fd5b81356001600160401b0381111561236f5761236f61226f565b604051612386601f8301601f191660200182612285565b81815284602083860101111561239b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156123d057600080fd5b6123d9866120b2565b94506123e7602087016120b2565b935060408601356001600160401b038082111561240357600080fd5b61240f89838a016122d4565b9450606088013591508082111561242557600080fd5b61243189838a016122d4565b9350608088013591508082111561244757600080fd5b5061245488828901612345565b9150509295509295909350565b6000806040838503121561247457600080fd5b82356001600160401b038082111561248b57600080fd5b818501915085601f83011261249f57600080fd5b813560206124ac826122b1565b6040516124b98282612285565b83815260059390931b85018201928281019150898411156124d957600080fd5b948201945b838610156124fe576124ef866120b2565b825294820194908201906124de565b9650508601359250508082111561251457600080fd5b50612521858286016122d4565b9150509250929050565b600081518084526020808501945080840160005b8381101561255b5781518752958201959082019060010161253f565b509495945050505050565b60208152600061036b602083018461252b565b6000806020838503121561258c57600080fd5b82356001600160401b038111156125a257600080fd5b6125ae858286016121dc565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156125fb5783516001600160a01b0316835292840192918401916001016125d6565b50909695505050505050565b6000806040838503121561261a57600080fd5b82356001600160401b038082111561263157600080fd5b61263d868387016122d4565b9350602085013591508082111561251457600080fd5b60006020828403121561266557600080fd5b61036b826120b2565b803580151581146103d957600080fd5b6000806040838503121561269157600080fd5b61269a836120b2565b91506126a86020840161266e565b90509250929050565b60008083601f8401126126c357600080fd5b5081356001600160401b038111156126da57600080fd5b6020830191508360208260051b850101111561221d57600080fd5b6000806020838503121561270857600080fd5b82356001600160401b0381111561271e57600080fd5b6125ae858286016126b1565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561277f57603f1988860301845261276d85835161216a565b94509285019290850190600101612751565b5092979650505050505050565b6000806040838503121561279f57600080fd5b50508035926020909101359150565b6000806000604084860312156127c357600080fd5b83356001600160401b038111156127d957600080fd5b6127e5868287016121dc565b90945092506127f890506020850161266e565b90509250925092565b60008060008060006060868803121561281957600080fd5b612822866120b2565b945060208601356001600160401b038082111561283e57600080fd5b61284a89838a016126b1565b9096509450604088013591508082111561286357600080fd5b50612870888289016126b1565b969995985093965092949392505050565b6000806040838503121561289457600080fd5b61289d836120b2565b91506126a8602084016120b2565b600080600080600060a086880312156128c357600080fd5b6128cc866120b2565b94506128da602087016120b2565b9350604086013592506060860135915060808601356001600160401b0381111561290357600080fd5b61245488828901612345565b60008251612921818460208701612146565b64173539b7b760d91b920191825250600501919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261296557600080fd5b8301803591506001600160401b0382111561297f57600080fd5b60200191503681900382131561221d57600080fd5b8183823760009101908152919050565b600181811c908216806129b857607f821691505b6020821081036129d857634e487b7160e01b600052602260045260246000fd5b50919050565b600083516129f0818460208801612146565b835190830190612a04818360208801612146565b01949350505050565b601f82111561043057600081815260208120601f850160051c81016020861015612a345750805b601f850160051c820191505b81811015610e9057828155600101612a40565b81516001600160401b03811115612a6c57612a6c61226f565b612a8081612a7a84546129a4565b84612a0d565b602080601f831160018114612ab55760008415612a9d5750858301515b600019600386901b1c1916600185901b178555610e90565b600085815260208120601f198616915b82811015612ae457888601518255948401946001909101908401612ac5565b5085821015612b025787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000612b25604083018561252b565b8281036020840152612b37818561252b565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201612b6857612b68612b40565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082612b9457612b94612b6f565b500490565b8181038181111561036e5761036e612b40565b600082612bbb57612bbb612b6f565b500690565b8082018082111561036e5761036e612b40565b60006001600160a01b03808816835280871660208401525060a06040830152612bff60a083018661252b565b8281036060840152612c11818661252b565b90508281036080840152612c25818561216a565b98975050505050505050565b600060208284031215612c4357600080fd5b8151612126816120f3565b600060033d1115612c675760046000803e5060005160e01c5b90565b600060443d1015612c785790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612ca757505050505090565b8285019150815181811115612cbf5750505050505090565b843d8701016020828501011115612cd95750505050505090565b612ce860208286010187612285565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612d2b60a083018461216a565b979650505050505050565b634e487b7160e01b600052603160045260246000fdfef6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa721799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68ba2646970667358221220660e06dff5a93b450d5cade08516d68459130955cd4cf9487add558684d1270564736f6c63430008130033",
  "devdoc": {
    "details": "This contract handles the creation and management of items It uses ERC1155 tokens to represent items and provides methods to mint new items, claim items via Merkle tree or a whitelist, and set the base and URIs for the items. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.",
    "kind": "dev",
    "methods": {
      "accountsByToken(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "list of holder addresses"
        }
      },
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "burn(uint256,uint256)": {
        "params": {
          "amount": "The item amount to burn",
          "itemId": "The ID of the item to burn"
        }
      },
      "burnBatch(uint256[],uint256[])": {
        "params": {
          "amounts": "The item amounts to be minted",
          "itemIds": "The item ID burn"
        }
      },
      "getInventoryAddress()": {
        "details": "Returns the current inventory address",
        "returns": {
          "_0": "The address of the inventory contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "migrateToIPFS(string,bool)": {
        "details": "Only the manager role can call this function",
        "params": {
          "migrate": "Should migrate to IPFS",
          "newBaseURI": "The new base URI"
        }
      },
      "mint(address,uint256,uint256)": {
        "params": {
          "amount": "The item amount to be minted",
          "itemId": "The ID of the item to mint",
          "to": "The address to mint the item to"
        }
      },
      "mintBatch(address,uint256[],uint256[])": {
        "params": {
          "amounts": "The items amounts to be minted",
          "itemIds": "An array of items IDs to be minted",
          "to": "The address to receive the minted items"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "array of function call data payloads"
        },
        "returns": {
          "results": "array of function call results"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "setBaseURI(string)": {
        "details": "Only the manager role can call this function",
        "params": {
          "baseURI": "The new base URI"
        }
      },
      "setInventoryAddress(address)": {
        "details": "Sets the inventory address",
        "params": {
          "inventoryAddress": "The new address of the inventory contract"
        }
      },
      "setTokenURI(uint256,string)": {
        "details": "Only the manager role can call this function",
        "params": {
          "tokenId": "The ID of the item to set the URI for",
          "tokenURI": "The new item URI"
        }
      },
      "tokensByAccount(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "list of token ids"
        }
      },
      "totalHolders(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "quantity of holders"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "token supply"
        }
      }
    },
    "title": "ItemsFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accountsByToken(uint256)": {
        "notice": "query holders of given token"
      },
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "burn(uint256,uint256)": {
        "notice": "Burn an amount of an item"
      },
      "burnBatch(uint256[],uint256[])": {
        "notice": "Burn amounts of items"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "migrateToIPFS(string,bool)": {
        "notice": "Set the base URI for all items metadata"
      },
      "mint(address,uint256,uint256)": {
        "notice": "Mints a new item. Only minter role account can mint"
      },
      "mintBatch(address,uint256[],uint256[])": {
        "notice": "Mint a batch of items to a specific address. Only minter role account can mint"
      },
      "multicall(bytes[])": {
        "notice": "batch function calls to the contract and return the results of each"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      },
      "setBaseURI(string)": {
        "notice": "Set the base URI for all items metadata"
      },
      "setTokenURI(uint256,string)": {
        "notice": "Set the URI for a specific item ID"
      },
      "tokensByAccount(address)": {
        "notice": "query tokens held by given address"
      },
      "totalHolders(uint256)": {
        "notice": "query total number of holders for given token"
      },
      "totalSupply(uint256)": {
        "notice": "query total minted supply of given token"
      },
      "uri(uint256)": {
        "notice": "Override ERC1155Metadata"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}