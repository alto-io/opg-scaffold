{
  "address": "0x2309296c3945e56ab0c18df71ff35e59c7987b82",
  "abi": [
    {
      "inputs": [],
      "name": "Inventory_ArcadianNotUnique",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_CouponNeededToModifyBaseSlots",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InputDataMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InsufficientItemBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InvalidERC1155Contract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_InvalidSlotId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemAlreadyEquippedInSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_ItemDoesNotHaveSlotAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NonBaseSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NotAllBaseSlotsEquipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_NotArcadianOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingBaseSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingEmptySlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Inventory_UnequippingPermanentSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuard__ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingAdminRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingAutomationRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingManagerRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "slotsIds",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "BaseModifierCouponAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "slotsIds",
          "type": "uint8[]"
        }
      ],
      "name": "BaseModifierCouponConsumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "ItemsAllowedInSlotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "slots",
          "type": "uint8[]"
        }
      ],
      "name": "ItemsEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "slotsIds",
          "type": "uint8[]"
        }
      ],
      "name": "ItemsUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "slotId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "permanent",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBase",
          "type": "bool"
        }
      ],
      "name": "SlotCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "slotsIds",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "addBaseModifierCoupons",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slotId",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "allowItemsInSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "allowedSlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        }
      ],
      "name": "arcadianToBaseItemHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "permanent",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isBase",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "createSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "disallowItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "equip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "slotId",
          "type": "uint8"
        }
      ],
      "name": "equipped",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "slotId",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryInternal.ItemInSlot",
          "name": "item",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        }
      ],
      "name": "equippedAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "slotId",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryInternal.ItemInSlot[]",
          "name": "equippedSlot",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "slotsIds",
          "type": "uint8[]"
        }
      ],
      "name": "equippedBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "slotId",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryInternal.ItemInSlot[]",
          "name": "equippedSlot",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "slotId",
          "type": "uint8"
        }
      ],
      "name": "getBaseModifierCoupon",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBaseModifierCouponAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "slotId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryInternal.BaseModifierCoupon[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseSlotsIds",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "isArcadianUnique",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSlots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc1155Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct InventoryStorage.Item[]",
          "name": "items",
          "type": "tuple[]"
        },
        {
          "internalType": "bool[]",
          "name": "requiresTransfer",
          "type": "bool[]"
        }
      ],
      "name": "setItemsTransferRequired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slotId",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isBase",
          "type": "bool"
        }
      ],
      "name": "setSlotBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slotId",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "permanent",
          "type": "bool"
        }
      ],
      "name": "setSlotPermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slotId",
          "type": "uint8"
        }
      ],
      "name": "slot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "id",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "permanent",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isBase",
              "type": "bool"
            }
          ],
          "internalType": "struct InventoryStorage.Slot",
          "name": "existentSlot",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotsAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "id",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "permanent",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isBase",
              "type": "bool"
            }
          ],
          "internalType": "struct InventoryStorage.Slot[]",
          "name": "existentSlots",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arcadianId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "slotsIds",
          "type": "uint8[]"
        }
      ],
      "name": "unequip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a2df66738cec18be784bba28aff35daa8015052263ffa61e1419db671f2c0b6",
  "receipt": {
    "to": null,
    "from": "0xc1580afc68c82e110325b09313e059a8f5cd68e9",
    "contractAddress": "0x2309296c3945e56ab0c18df71ff35e59c7987b82",
    "transactionIndex": "0x0",
    "gasUsed": "0x2f15c9",
    "logsBloom": "0x
    "blockHash": "0x52c2f73c24cc988b241e86302655b109c551b0b85e752c76ee4c3b0d5f25ad4d",
    "transactionHash": "0x026b19e2f495fd4bdfdfea5bb5ed8140ae5b6ac964ae91cb99613d4b35d64588",
    "logs": [
      {
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c1580afc68c82e110325b09313e059a8f5cd68e9",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000099de634a27bcbf000000000000000000000000000000000000000000000000104e9e0ebcf60b4e80000000000000000000000000000000000000000000001dc7cce2ae16ee042b7000000000000000000000000000000000000000000000000fb4bfab72ce4e8f80000000000000000000000000000000000000000000001dc866c1116115c0ea7",
        "blockNumber": "0x296eeae",
        "transactionHash": "0x026b19e2f495fd4bdfdfea5bb5ed8140ae5b6ac964ae91cb99613d4b35d64588",
        "transactionIndex": "0x0",
        "blockHash": "0x52c2f73c24cc988b241e86302655b109c551b0b85e752c76ee4c3b0d5f25ad4d",
        "logIndex": "0x0",
        "removed": false
      }
    ],
    "blockNumber": "0x296eeae",
    "cumulativeGasUsed": "0x2f15c9",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3e3d4f461e0f2b62facd0504ca9078d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Inventory_ArcadianNotUnique\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_CouponNeededToModifyBaseSlots\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InputDataMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InsufficientItemBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InvalidERC1155Contract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_InvalidSlotId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemAlreadyEquippedInSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_ItemDoesNotHaveSlotAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NonBaseSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NotAllBaseSlotsEquipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_NotArcadianOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingBaseSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingEmptySlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Inventory_UnequippingPermanentSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingAdminRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingAutomationRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingManagerRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"slotsIds\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BaseModifierCouponAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"slotsIds\",\"type\":\"uint8[]\"}],\"name\":\"BaseModifierCouponConsumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"ItemsAllowedInSlotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"slots\",\"type\":\"uint8[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"slotsIds\",\"type\":\"uint8[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBase\",\"type\":\"bool\"}],\"name\":\"SlotCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"slotsIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addBaseModifierCoupons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"allowItemsInSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"allowedSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"}],\"name\":\"arcadianToBaseItemHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBase\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"createSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"disallowItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"}],\"name\":\"equipped\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryInternal.ItemInSlot\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"}],\"name\":\"equippedAll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryInternal.ItemInSlot[]\",\"name\":\"equippedSlot\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"slotsIds\",\"type\":\"uint8[]\"}],\"name\":\"equippedBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryInternal.ItemInSlot[]\",\"name\":\"equippedSlot\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"}],\"name\":\"getBaseModifierCoupon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBaseModifierCouponAll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryInternal.BaseModifierCoupon[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSlotsIds\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"isArcadianUnique\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSlots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct InventoryStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"requiresTransfer\",\"type\":\"bool[]\"}],\"name\":\"setItemsTransferRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isBase\",\"type\":\"bool\"}],\"name\":\"setSlotBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"}],\"name\":\"setSlotPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"}],\"name\":\"slot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBase\",\"type\":\"bool\"}],\"internalType\":\"struct InventoryStorage.Slot\",\"name\":\"existentSlot\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotsAll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBase\",\"type\":\"bool\"}],\"internalType\":\"struct InventoryStorage.Slot[]\",\"name\":\"existentSlots\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arcadianId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"slotsIds\",\"type\":\"uint8[]\"}],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is responsible for managing the inventory system for the Arcadians using slots.  It defines the functionality to equip and unequip items to Arcadians, check if a combination of items  are unique, and retrieve the inventory slots and allowed items for a slot.  This contract also implements ERC1155Holder to handle ERC1155 token transfers This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.\",\"kind\":\"dev\",\"methods\":{\"addBaseModifierCoupons(address,uint8[],uint256[])\":{\"params\":{\"account\":\"The account to increase the number of coupons\",\"amounts\":\"the amounts of coupons to increase\",\"slotsIds\":\"The slots ids to increase the number of coupons\"}},\"allowItemsInSlot(uint8,(address,uint256)[])\":{\"params\":{\"items\":\"The list of items to allow in the slot\",\"slotId\":\"The slot id\"}},\"allowedSlot((address,uint256))\":{\"params\":{\"item\":\"The item to check\"},\"returns\":{\"_0\":\"The allowed slot id for the item. Slots are 1-indexed.\"}},\"createSlot(bool,bool,(address,uint256)[])\":{\"details\":\"This function is only accessible to the manager roleSlots are 1-indexed\",\"params\":{\"isBase\":\"If the slot is base\",\"items\":\"The list of items to allow in the slot\",\"permanent\":\"Whether or not the slot can be unequipped once equipped\"}},\"disallowItems((address,uint256)[])\":{\"params\":{\"items\":\"The list of items to disallow in the slot\"}},\"equip(uint256,(address,uint256)[])\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to equip the items for\",\"items\":\"An array of items to equip in the corresponding slots\"}},\"equipped(uint256,uint8)\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\",\"slotId\":\"The slot id to query\"}},\"equippedAll(uint256)\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\"}},\"equippedBatch(uint256,uint8[])\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\",\"slotsIds\":\"The slots ids to query\"}},\"getBaseModifierCoupon(address,uint8)\":{\"params\":{\"account\":\"The accounts to increase the number of coupons\",\"slotId\":\"The slot to get the coupon amount from\"}},\"getBaseModifierCouponAll(address)\":{\"params\":{\"account\":\"The accounts to increase the number of coupons\"}},\"getBaseSlotsIds()\":{\"returns\":{\"_0\":\"List of base slots ids\"}},\"isArcadianUnique(uint256,(address,uint256)[])\":{\"details\":\"The uniqueness is calculated using the existent arcadian items and the input items as wellOnly items equipped in 'base' slots are considered for uniqueness\",\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to query\",\"items\":\"An array of items to check for uniqueness after \\\"equipped\\\" over the existent arcadian items.\"}},\"numSlots()\":{\"details\":\"Slots are 1-indexed\",\"returns\":{\"_0\":\"The number of inventory slots \"}},\"setItemsTransferRequired((address,uint256)[],bool[])\":{\"params\":{\"items\":\"The list of items\",\"requiresTransfer\":\"If it requires item transfer to be equipped\"}},\"setSlotBase(uint8,bool)\":{\"details\":\"This function is only accessible to the manager roleSlots are 1-indexed\",\"params\":{\"isBase\":\"Whether or not the slot is base\"}},\"setSlotPermanent(uint8,bool)\":{\"details\":\"This function is only accessible to the manager roleSlots are 1-indexed\",\"params\":{\"permanent\":\"Whether or not the slot is permanent\"}},\"slot(uint8)\":{\"details\":\"Slots are 1-indexed\",\"params\":{\"slotId\":\"The ID of the inventory slot\"},\"returns\":{\"existentSlot\":\"The details of the inventory slot\"}},\"slotsAll()\":{\"details\":\"Slots are 1-indexed\",\"returns\":{\"existentSlots\":\"The details of all the inventory slots\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unequip(uint256,uint8[])\":{\"params\":{\"arcadianId\":\"The ID of the Arcadian NFT to equip the item for\",\"slotsIds\":\"The slots ids in which the items will be unequipped\"}}},\"title\":\"InventoryFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBaseModifierCoupons(address,uint8[],uint256[])\":{\"notice\":\"Adds coupons to accounts that allow to modify the base traits\"},\"allowItemsInSlot(uint8,(address,uint256)[])\":{\"notice\":\"Adds items to the list of allowed items for an inventory slot\"},\"allowedSlot((address,uint256))\":{\"notice\":\"Returns the allowed slot for a given item\"},\"createSlot(bool,bool,(address,uint256)[])\":{\"notice\":\"Creates a new inventory slot\"},\"disallowItems((address,uint256)[])\":{\"notice\":\"Removes items from the list of allowed items\"},\"equip(uint256,(address,uint256)[])\":{\"notice\":\"Equips multiple items to multiple slots for a specified Arcadian NFT\"},\"equipped(uint256,uint8)\":{\"notice\":\"Retrieves the equipped item in a slot for a specified Arcadian NFT\"},\"equippedAll(uint256)\":{\"notice\":\"Retrieves all the equipped items for a specified Arcadian NFT\"},\"equippedBatch(uint256,uint8[])\":{\"notice\":\"Retrieves the equipped items in the slot of an Arcadian NFT\"},\"getBaseModifierCoupon(address,uint8)\":{\"notice\":\"Returns the number coupons available for an account that allow to modify the base traits\"},\"getBaseModifierCouponAll(address)\":{\"notice\":\"Returns the number coupons available for an account that allow to modify the base traits\"},\"getBaseSlotsIds()\":{\"notice\":\"Returns all the base slots ids\"},\"isArcadianUnique(uint256,(address,uint256)[])\":{\"notice\":\"Indicates if a list of items applied to an the arcadian is unique\"},\"numSlots()\":{\"notice\":\"Returns the number of inventory slots\"},\"setItemsTransferRequired((address,uint256)[],bool[])\":{\"notice\":\"Sets the items transfer required on equip\"},\"setSlotBase(uint8,bool)\":{\"notice\":\"Sets the slot base property\"},\"setSlotPermanent(uint8,bool)\":{\"notice\":\"Sets the slot permanent property\"},\"slot(uint8)\":{\"notice\":\"Returns the details of an inventory slot given its ID\"},\"slotsAll()\":{\"notice\":\"Returns the details of all the existent slots\"},\"unequip(uint256,uint8[])\":{\"notice\":\"Unequips the items equipped in multiple slots for a specified Arcadian NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/inventory/InventoryFacet.sol\":\"InventoryFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 minValue = bytes32(type(uint256).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(address[] memory array) internal pure returns (address) {\\n        address minValue = address(type(uint160).max);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get minimum value in given array\\n     * @param array array to search\\n     * @return minimum value\\n     */\\n    function min(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 minValue = type(uint256).max;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] < minValue) {\\n                    minValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return minValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(bytes32[] memory array) internal pure returns (bytes32) {\\n        bytes32 maxValue = bytes32(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(address[] memory array) internal pure returns (address) {\\n        address maxValue = address(0);\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n\\n    /**\\n     * @notice get maximum value in given array\\n     * @param array array to search\\n     * @return maximum value\\n     */\\n    function max(uint256[] memory array) internal pure returns (uint256) {\\n        uint256 maxValue = 0;\\n\\n        unchecked {\\n            for (uint256 i; i < array.length; i++) {\\n                if (array[i] > maxValue) {\\n                    maxValue = array[i];\\n                }\\n            }\\n        }\\n\\n        return maxValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86a2953855b8df5a5ded23a79016f1584b6321ef2c04f44466ebfbb6d23e728c\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Layout storage l = ReentrancyGuardStorage\\n            .layout();\\n        if (l.status == 2) revert ReentrancyGuard__ReentrantCall();\\n        l.status = 2;\\n        _;\\n        l.status = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x99f5d1cfd648094cc080d2d21cbc6e16fda3aaab501fd5e69333c0c8abc6c937\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053868fae9badd6d7895ffa02b29e3e0205c5e546c17e9de56cdec69f5f02c29\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/inventory/InventoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\n/**\\n * Crated based in the following work:\\n * Authors: Moonstream DAO (engineering@moonstream.to)\\n * GitHub: https://github.com/G7DAO/contracts\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ERC1155Holder } from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { InventoryInternal } from \\\"./InventoryInternal.sol\\\";\\n\\n/**\\n * @title InventoryFacet\\n * @dev This contract is responsible for managing the inventory system for the Arcadians using slots. \\n * It defines the functionality to equip and unequip items to Arcadians, check if a combination of items \\n * are unique, and retrieve the inventory slots and allowed items for a slot. \\n * This contract also implements ERC1155Holder to handle ERC1155 token transfers\\n * This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard.\\n * It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.\\n */\\ncontract InventoryFacet is\\n    ERC1155Holder,\\n    ReentrancyGuard,\\n    InventoryInternal\\n{\\n\\n    /**\\n     * @notice Returns the number of inventory slots\\n     * @dev Slots are 1-indexed\\n     * @return The number of inventory slots \\n     */\\n    function numSlots() external view returns (uint) {\\n        return _numSlots();\\n    }\\n\\n    function arcadianToBaseItemHash(uint arcadianId) external view returns (bytes32) {\\n        return InventoryStorage.layout().arcadianToBaseItemHash[arcadianId];\\n    }\\n\\n    /**\\n     * @notice Returns the details of an inventory slot given its ID\\n     * @dev Slots are 1-indexed\\n     * @param slotId The ID of the inventory slot\\n     * @return existentSlot The details of the inventory slot\\n     */\\n    function slot(uint8 slotId) external view returns (InventoryStorage.Slot memory existentSlot) {\\n        return _slot(slotId);\\n    }\\n\\n    /**\\n     * @notice Returns the details of all the existent slots\\n     * @dev Slots are 1-indexed\\n     * @return existentSlots The details of all the inventory slots\\n     */\\n    function slotsAll() external view returns (InventoryStorage.Slot[] memory existentSlots) {\\n        return _slotsAll();\\n    }\\n\\n    /**\\n     * @notice Creates a new inventory slot\\n     * @dev This function is only accessible to the manager role\\n     * @dev Slots are 1-indexed\\n     * @param permanent Whether or not the slot can be unequipped once equipped\\n     * @param isBase If the slot is base\\n     * @param items The list of items to allow in the slot\\n     */\\n    function createSlot(\\n        bool permanent,\\n        bool isBase,\\n        InventoryStorage.Item[] calldata items\\n    ) external onlyManager {\\n        _createSlot(permanent, isBase, items);\\n    }\\n\\n    /**\\n     * @notice Sets the slot permanent property\\n     * @dev This function is only accessible to the manager role\\n     * @dev Slots are 1-indexed\\n     * @param permanent Whether or not the slot is permanent\\n     */\\n    function setSlotPermanent(\\n        uint8 slotId,\\n        bool permanent\\n    ) external onlyManager {\\n        _setSlotPermanent(slotId, permanent);\\n    }\\n\\n    /**\\n     * @notice Sets the slot base property\\n     * @dev This function is only accessible to the manager role\\n     * @dev Slots are 1-indexed\\n     * @param isBase Whether or not the slot is base\\n     */\\n    function setSlotBase(\\n        uint8 slotId,\\n        bool isBase\\n    ) external onlyManager {\\n        _setSlotBase(slotId, isBase);\\n    }\\n\\n    /**\\n     * @notice Returns the number coupons available for an account that allow to modify the base traits\\n     * @param account The accounts to increase the number of coupons\\n     * @param slotId The slot to get the coupon amount from\\n     */\\n    function getBaseModifierCoupon(\\n        address account,\\n        uint8 slotId\\n    ) external view returns (uint) {\\n        return _getbaseModifierCoupon(account, slotId);\\n    }\\n\\n    /**\\n     * @notice Returns the number coupons available for an account that allow to modify the base traits\\n     * @param account The accounts to increase the number of coupons\\n     */\\n    function getBaseModifierCouponAll(\\n        address account\\n    ) external view returns (BaseModifierCoupon[] memory) {\\n        return _getBaseModifierCouponAll(account);\\n    }\\n\\n    /**\\n     * @notice Returns all the base slots ids\\n     * @return List of base slots ids\\n     */\\n    function getBaseSlotsIds() external view returns (uint8[] memory) {\\n        return _getBaseSlotsIds();\\n    }\\n\\n    /**\\n     * @notice Adds coupons to accounts that allow to modify the base traits\\n     * @param account The account to increase the number of coupons\\n     * @param slotsIds The slots ids to increase the number of coupons\\n     * @param amounts the amounts of coupons to increase\\n     */\\n    function addBaseModifierCoupons(\\n        address account,\\n        uint8[] calldata slotsIds,\\n        uint[] calldata amounts\\n    ) external onlyAutomation {\\n        _addBaseModifierCoupons(account, slotsIds, amounts);\\n    }\\n\\n    /**\\n     * @notice Sets the items transfer required on equip\\n     * @param items The list of items\\n     * @param requiresTransfer If it requires item transfer to be equipped\\n     */\\n    function setItemsTransferRequired(\\n        InventoryStorage.Item[] calldata items,\\n        bool[] calldata requiresTransfer\\n    ) external onlyManager {\\n        _setItemsTransferRequired(items, requiresTransfer);\\n    }\\n\\n    /**\\n     * @notice Adds items to the list of allowed items for an inventory slot\\n     * @param slotId The slot id\\n     * @param items The list of items to allow in the slot\\n     */\\n    function allowItemsInSlot(\\n        uint8 slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) external onlyManager {\\n        _allowItemsInSlot(slotId, items);\\n    }\\n    \\n    /**\\n     * @notice Removes items from the list of allowed items\\n     * @param items The list of items to disallow in the slot\\n     */\\n    function disallowItems(\\n        InventoryStorage.Item[] calldata items\\n    ) external onlyManager {\\n        _disallowItems(items);\\n    }\\n\\n    /**\\n     * @notice Returns the allowed slot for a given item\\n     * @param item The item to check\\n     * @return The allowed slot id for the item. Slots are 1-indexed.\\n     */\\n    function allowedSlot(InventoryStorage.Item calldata item) external view returns (uint) {\\n        return _allowedSlot(item);\\n    }\\n\\n    /**\\n     * @notice Equips multiple items to multiple slots for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to equip the items for\\n     * @param items An array of items to equip in the corresponding slots\\n     */\\n    function equip(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items\\n    ) external nonReentrant {\\n        _equip(arcadianId, items, false);\\n    }\\n\\n    /**\\n     * @notice Unequips the items equipped in multiple slots for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to equip the item for\\n     * @param slotsIds The slots ids in which the items will be unequipped\\n     */\\n    function unequip(\\n        uint arcadianId,\\n        uint8[] calldata slotsIds\\n    ) external nonReentrant {\\n        _unequip(arcadianId, slotsIds);\\n    }\\n\\n    /**\\n     * @notice Retrieves the equipped item in a slot for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     * @param slotId The slot id to query\\n     */\\n    function equipped(\\n        uint arcadianId,\\n        uint8 slotId\\n    ) external view returns (ItemInSlot memory item) {\\n        return _equipped(arcadianId, slotId);\\n    }\\n\\n    /**\\n     * @notice Retrieves the equipped items in the slot of an Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     * @param slotsIds The slots ids to query\\n     */\\n    function equippedBatch(\\n        uint arcadianId,\\n        uint8[] calldata slotsIds\\n    ) external view returns (ItemInSlot[] memory equippedSlot) {\\n        return _equippedBatch(arcadianId, slotsIds);\\n    }\\n\\n    /**\\n     * @notice Retrieves all the equipped items for a specified Arcadian NFT\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     */\\n    function equippedAll(\\n        uint arcadianId\\n    ) external view returns (ItemInSlot[] memory equippedSlot) {\\n        return _equippedAll(arcadianId);\\n    }\\n\\n    /**\\n     * @notice Indicates if a list of items applied to an the arcadian is unique\\n     * @dev The uniqueness is calculated using the existent arcadian items and the input items as well\\n     * @dev Only items equipped in 'base' slots are considered for uniqueness\\n     * @param arcadianId The ID of the Arcadian NFT to query\\n     * @param items An array of items to check for uniqueness after \\\"equipped\\\" over the existent arcadian items.\\n     */\\n    function isArcadianUnique(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items\\n    ) external view returns (bool) {\\n        return _isArcadianUnique(arcadianId, items);\\n    }\\n}\",\"keccak256\":\"0x76260b05902886ee5247bacb2e900ae9cf097d0f108e746f53a9b508c9779ff8\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/inventory/InventoryInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { AddressUtils } from \\\"@solidstate/contracts/utils/AddressUtils.sol\\\";\\nimport { ArrayUtils } from \\\"@solidstate/contracts/utils/ArrayUtils.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { InventoryStorage } from \\\"./InventoryStorage.sol\\\";\\nimport { IERC1155 } from \\\"@solidstate/contracts/interfaces/IERC1155.sol\\\";\\n\\ncontract InventoryInternal is\\n    ReentrancyGuard,\\n    RolesInternal\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using AddressUtils for address;\\n\\n    error Inventory_InvalidERC1155Contract();\\n    error Inventory_UnequippingPermanentSlot();\\n    error Inventory_InvalidSlotId();\\n    error Inventory_ItemDoesNotHaveSlotAssigned();\\n    error Inventory_InsufficientItemBalance();\\n    error Inventory_UnequippingEmptySlot();\\n    error Inventory_UnequippingBaseSlot();\\n    error Inventory_NotArcadianOwner();\\n    error Inventory_ArcadianNotUnique();\\n    error Inventory_NotAllBaseSlotsEquipped();\\n    error Inventory_InputDataMismatch();\\n    error Inventory_ItemAlreadyEquippedInSlot();\\n    error Inventory_CouponNeededToModifyBaseSlots();\\n    error Inventory_NonBaseSlot();\\n\\n    event ItemsAllowedInSlotUpdated(\\n        address indexed by,\\n        InventoryStorage.Item[] items\\n    );\\n\\n    event ItemsEquipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint8[] slots\\n    );\\n\\n    event ItemsUnequipped(\\n        address indexed by,\\n        uint indexed arcadianId,\\n        uint8[] slotsIds\\n    );\\n\\n    event SlotCreated(\\n        address indexed by,\\n        uint8 indexed slotId,\\n        bool permanent,\\n        bool isBase\\n    );\\n\\n    event BaseModifierCouponAdded(\\n        address indexed by,\\n        address indexed to,\\n        uint8[] slotsIds,\\n        uint[] amounts\\n    );\\n\\n    event BaseModifierCouponConsumed(\\n        address indexed account,\\n        uint indexed arcadianId,\\n        uint8[] slotsIds\\n    );\\n\\n    // Helper structs only used in view functions to ease data reading from web3\\n    struct ItemInSlot {\\n        uint8 slotId;\\n        address erc1155Contract;\\n        uint itemId;\\n    }\\n    struct BaseModifierCoupon {\\n        uint8 slotId;\\n        uint amount;\\n    }\\n\\n    modifier onlyValidSlot(uint8 slotId) {\\n        if (slotId == 0 || slotId > InventoryStorage.layout().numSlots) revert Inventory_InvalidSlotId();\\n        _;\\n    }\\n\\n    modifier onlyArcadianOwner(uint arcadianId) {\\n        IERC721 arcadiansContract = IERC721(address(this));\\n        if (msg.sender != arcadiansContract.ownerOf(arcadianId)) revert Inventory_NotArcadianOwner();\\n        _;\\n    }\\n\\n    function _numSlots() internal view returns (uint) {\\n        return InventoryStorage.layout().numSlots;\\n    }\\n\\n    function _equip(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items,\\n        bool freeBaseModifier\\n    ) internal onlyArcadianOwner(arcadianId) {\\n\\n        if (items.length == 0) \\n            return;\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint8 numBaseSlotsModified;\\n        uint8[] memory slotsIds = new uint8[](items.length);\\n        for (uint i = 0; i < items.length; i++) {\\n            uint8 slotId = inventorySL.itemSlot[items[i].erc1155Contract][items[i].id];\\n            slotsIds[i] = slotId;\\n\\n            InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n            if (existingItem.erc1155Contract == items[i].erc1155Contract && existingItem.id == items[i].id) {\\n                continue;\\n            }\\n\\n            _equipSingleSlot(arcadianId, items[i], freeBaseModifier);\\n            if (inventorySL.slots[slotId].isBase) {\\n                numBaseSlotsModified++;\\n            }\\n        }\\n\\n        if (!_baseAndPermanentSlotsEquipped(arcadianId)) \\n            revert Inventory_NotAllBaseSlotsEquipped();\\n\\n        if (numBaseSlotsModified > 0) {\\n            if (!_hashBaseItemsUnchecked(arcadianId))\\n                revert Inventory_ArcadianNotUnique();\\n\\n            if (!freeBaseModifier) {\\n                uint8[] memory baseSlotsModified = new uint8[](numBaseSlotsModified);\\n                uint counter;\\n                for (uint i = 0; i < items.length; i++) {\\n                    uint8 slotId = inventorySL.itemSlot[items[i].erc1155Contract][items[i].id];\\n                    if (inventorySL.slots[slotId].isBase) {\\n                        baseSlotsModified[counter] = slotId;\\n                        counter++;\\n                    }\\n                }\\n                emit BaseModifierCouponConsumed(msg.sender, arcadianId, baseSlotsModified);\\n            }\\n        }\\n\\n        emit ItemsEquipped(msg.sender, arcadianId, slotsIds);\\n    }\\n\\n    function _equipSingleSlot(\\n        uint arcadianId,\\n        InventoryStorage.Item calldata item,\\n        bool freeBaseModifier\\n    ) internal returns (uint8 slotId) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        slotId = inventorySL.itemSlot[item.erc1155Contract][item.id];\\n        \\n        if (slotId == 0 || slotId > InventoryStorage.layout().numSlots) \\n            revert Inventory_ItemDoesNotHaveSlotAssigned();\\n        \\n        if (!freeBaseModifier && inventorySL.slots[slotId].isBase) {\\n            if (inventorySL.baseModifierCoupon[msg.sender][slotId] == 0)\\n                revert Inventory_CouponNeededToModifyBaseSlots();\\n\\n            inventorySL.baseModifierCoupon[msg.sender][slotId]--;\\n        }\\n\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n        if (inventorySL.slots[slotId].permanent && existingItem.erc1155Contract != address(0)) \\n            revert Inventory_UnequippingPermanentSlot();\\n\\n        if (inventorySL.equippedItems[arcadianId][slotId].erc1155Contract != address(0))\\n            _unequipUnchecked(arcadianId, slotId);\\n\\n        bool requiresTransfer = inventorySL.requiresTransfer[item.erc1155Contract][item.id];\\n        if (requiresTransfer) {\\n            IERC1155 erc1155Contract = IERC1155(item.erc1155Contract);\\n            if (erc1155Contract.balanceOf(msg.sender, item.id) < 1)\\n                revert Inventory_InsufficientItemBalance();\\n\\n            erc1155Contract.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                item.id,\\n                1,\\n                ''\\n            );\\n        }\\n\\n        inventorySL.equippedItems[arcadianId][slotId] = item;\\n    }\\n\\n    function _baseAndPermanentSlotsEquipped(uint arcadianId) internal view returns (bool) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint8 numSlots = inventorySL.numSlots;\\n        for (uint8 i = 0; i < numSlots; i++) {\\n            uint8 slotId = i + 1;\\n            InventoryStorage.Slot storage slot = inventorySL.slots[slotId];\\n            if (!slot.isBase && !slot.permanent)\\n                continue;\\n            if (inventorySL.equippedItems[arcadianId][slotId].erc1155Contract == address(0)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _unequipUnchecked(\\n        uint arcadianId,\\n        uint8 slotId\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        InventoryStorage.Item storage existingItem = inventorySL.equippedItems[arcadianId][slotId];\\n\\n        bool requiresTransfer = inventorySL.requiresTransfer[existingItem.erc1155Contract][existingItem.id];\\n        if (requiresTransfer) {\\n            IERC1155 erc1155Contract = IERC1155(existingItem.erc1155Contract);\\n            erc1155Contract.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                existingItem.id,\\n                1,\\n                ''\\n            );\\n        }\\n        delete inventorySL.equippedItems[arcadianId][slotId];\\n    }\\n\\n    function _unequip(\\n        uint arcadianId,\\n        uint8[] calldata slotsIds\\n    ) internal onlyArcadianOwner(arcadianId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        if (slotsIds.length == 0) \\n            return;\\n\\n        for (uint i = 0; i < slotsIds.length; i++) {\\n            if (inventorySL.slots[slotsIds[i]].permanent) \\n                revert Inventory_UnequippingPermanentSlot();\\n\\n            if (inventorySL.equippedItems[arcadianId][slotsIds[i]].erc1155Contract == address(0)) \\n                revert Inventory_UnequippingEmptySlot();\\n            \\n            if (inventorySL.slots[slotsIds[i]].isBase)\\n                revert Inventory_UnequippingBaseSlot();\\n\\n            _unequipUnchecked(arcadianId, slotsIds[i]);\\n        }\\n\\n        _hashBaseItemsUnchecked(arcadianId);\\n\\n        emit ItemsUnequipped(\\n            msg.sender,\\n            arcadianId,\\n            slotsIds\\n        );\\n    }\\n\\n    function _equipped(\\n        uint arcadianId,\\n        uint8 slotId\\n    ) internal view returns (ItemInSlot memory) {\\n        InventoryStorage.Item storage item = InventoryStorage.layout().equippedItems[arcadianId][slotId];\\n        return ItemInSlot(slotId, item.erc1155Contract, item.id);\\n    }\\n\\n    function _equippedBatch(\\n        uint arcadianId,\\n        uint8[] calldata slotsIds\\n    ) internal view returns (ItemInSlot[] memory equippedSlots) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        equippedSlots = new ItemInSlot[](slotsIds.length);\\n        for (uint i = 0; i < slotsIds.length; i++) {\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotsIds[i]];\\n            equippedSlots[i] = ItemInSlot(slotsIds[i], equippedItem.erc1155Contract, equippedItem.id);\\n        }\\n    }\\n\\n    function _equippedAll(\\n        uint arcadianId\\n    ) internal view returns (ItemInSlot[] memory equippedSlots) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint8 numSlots = inventorySL.numSlots;\\n        equippedSlots = new ItemInSlot[](numSlots);\\n        for (uint8 i = 0; i < numSlots; i++) {\\n            uint8 slotId = i + 1;\\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotId];\\n            equippedSlots[i] = ItemInSlot(slotId, equippedItem.erc1155Contract, equippedItem.id);\\n        }\\n    }\\n\\n    function _isArcadianUnique(\\n        uint arcadianId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal view returns (bool) {\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        bytes memory encodedItems;\\n        uint numBaseSlots = inventorySL.baseSlotsIds.length;\\n\\n        for (uint8 i = 0; i < numBaseSlots; i++) {\\n            uint8 slotId = inventorySL.baseSlotsIds[i];\\n\\n            InventoryStorage.Item memory item;\\n            for (uint j = 0; j < items.length; j++) {\\n                if (_allowedSlot(items[j]) == slotId) {\\n                    item = items[j];\\n                    break;\\n                }\\n            }\\n            if (item.erc1155Contract == address(0)) {\\n                if (inventorySL.equippedItems[arcadianId][slotId].erc1155Contract != address(0)) {\\n                    item = inventorySL.equippedItems[arcadianId][slotId];\\n                } else {\\n                    revert Inventory_NotAllBaseSlotsEquipped();\\n                }\\n            }\\n            \\n            encodedItems = abi.encodePacked(encodedItems, slotId, item.erc1155Contract, item.id);\\n        }\\n\\n        return inventorySL.arcadianToBaseItemHash[arcadianId] == keccak256(encodedItems) || !inventorySL.baseItemsHashes.contains(keccak256(encodedItems));\\n    }\\n\\n    function _hashBaseItemsUnchecked(\\n        uint arcadianId\\n    ) internal returns (bool isUnique) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        bytes memory encodedItems;\\n        uint numBaseSlots = inventorySL.baseSlotsIds.length;\\n\\n        for (uint8 i = 0; i < numBaseSlots; i++) {\\n            uint8 slotId = inventorySL.baseSlotsIds[i];\\n            \\n            InventoryStorage.Item storage equippedItem = inventorySL.equippedItems[arcadianId][slotId];\\n            encodedItems = abi.encodePacked(encodedItems, slotId, equippedItem.erc1155Contract, equippedItem.id);\\n        }\\n\\n        bytes32 baseItemsHash = keccak256(encodedItems);\\n\\n        isUnique = inventorySL.arcadianToBaseItemHash[arcadianId] == baseItemsHash || !inventorySL.baseItemsHashes.contains(baseItemsHash);\\n        inventorySL.baseItemsHashes.remove(inventorySL.arcadianToBaseItemHash[arcadianId]);\\n        inventorySL.baseItemsHashes.add(baseItemsHash);\\n        inventorySL.arcadianToBaseItemHash[arcadianId] = baseItemsHash;\\n    }\\n\\n    function _createSlot(\\n        bool permanent,\\n        bool isBase,\\n        InventoryStorage.Item[] calldata allowedItems\\n    ) internal {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        // slots are 1-index\\n        inventorySL.numSlots += 1;\\n        uint8 newSlotId = inventorySL.numSlots;\\n        inventorySL.slots[newSlotId].permanent = permanent;\\n        inventorySL.slots[newSlotId].isBase = isBase;\\n        inventorySL.slots[newSlotId].id = newSlotId;\\n\\n        _setSlotBase(newSlotId, isBase);\\n\\n        if (allowedItems.length > 0) {\\n            _allowItemsInSlot(newSlotId, allowedItems);\\n        }\\n\\n        emit SlotCreated(msg.sender, newSlotId, permanent, isBase);\\n    }\\n\\n    function _setSlotBase(\\n        uint8 slotId,\\n        bool isBase\\n    ) internal onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        uint8[] storage baseSlotsIds = inventorySL.baseSlotsIds;\\n        uint numBaseSlots = baseSlotsIds.length;\\n\\n        if (isBase) {\\n            bool alreadyInBaseList;\\n            for (uint i = 0; i < numBaseSlots; i++) {\\n                if (baseSlotsIds[i] == slotId) {\\n                    alreadyInBaseList = true;\\n                    break;\\n                }\\n            }\\n            if (!alreadyInBaseList) {\\n                baseSlotsIds.push(slotId);\\n            }\\n        } else {\\n            for (uint i = 0; i < numBaseSlots; i++) {\\n                if (baseSlotsIds[i] == slotId) {\\n                    baseSlotsIds[i] = baseSlotsIds[numBaseSlots - 1];\\n                    baseSlotsIds.pop();\\n                    break;\\n                }\\n            }\\n        }\\n\\n        inventorySL.slots[slotId].isBase = isBase;\\n    }\\n\\n    function _setSlotPermanent(\\n        uint8 slotId,\\n        bool permanent\\n    ) internal onlyValidSlot(slotId) {\\n        InventoryStorage.layout().slots[slotId].permanent = permanent;\\n    }\\n\\n    function _addBaseModifierCoupons(\\n        address account,\\n        uint8[] calldata slotsIds,\\n        uint[] calldata amounts\\n    ) internal {\\n        if (slotsIds.length != amounts.length)\\n            revert Inventory_InputDataMismatch();\\n\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        uint8 numSlots = inventorySL.numSlots;\\n\\n        for (uint i = 0; i < slotsIds.length; i++) {\\n            if (slotsIds[i] == 0 && slotsIds[i] > numSlots) \\n                revert Inventory_InvalidSlotId();\\n            if (!inventorySL.slots[slotsIds[i]].isBase) {\\n                revert Inventory_NonBaseSlot();\\n            }\\n            InventoryStorage.layout().baseModifierCoupon[account][slotsIds[i]] += amounts[i];\\n        }\\n\\n        emit BaseModifierCouponAdded(msg.sender, account, slotsIds, amounts);\\n    }\\n\\n    function _getbaseModifierCoupon(address account, uint8 slotId) internal view onlyValidSlot(slotId) returns (uint) {\\n        if (!InventoryStorage.layout().slots[slotId].isBase) {\\n            revert Inventory_NonBaseSlot();\\n        }\\n        return InventoryStorage.layout().baseModifierCoupon[account][slotId];\\n    }\\n\\n    function _getBaseModifierCouponAll(address account) internal view returns (BaseModifierCoupon[] memory) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        uint numBaseSlots = inventorySL.baseSlotsIds.length;\\n\\n        BaseModifierCoupon[] memory coupons = new BaseModifierCoupon[](numBaseSlots);\\n        uint counter;\\n        for (uint8 i = 0; i < numBaseSlots; i++) {\\n            uint8 slotId = uint8(inventorySL.baseSlotsIds[i]);\\n\\n            coupons[counter].slotId = slotId;\\n            coupons[counter].amount = inventorySL.baseModifierCoupon[account][slotId];\\n            counter++;\\n        }\\n        return coupons;\\n    }\\n\\n    function _getBaseSlotsIds() internal view returns (uint8[] memory) {\\n        return InventoryStorage.layout().baseSlotsIds;\\n    }\\n\\n    function _setItemsTransferRequired(\\n        InventoryStorage.Item[] calldata items,\\n        bool[] calldata requiresTransfer\\n    ) internal {\\n        if (items.length != requiresTransfer.length)\\n            revert Inventory_InputDataMismatch();\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < items.length; i++) {\\n            inventorySL.requiresTransfer[items[i].erc1155Contract][items[i].id] = requiresTransfer[i];\\n        }\\n    }\\n    \\n    function _allowItemsInSlot(\\n        uint8 slotId,\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual onlyValidSlot(slotId) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n\\n        for (uint i = 0; i < items.length; i++) {\\n            if (!items[i].erc1155Contract.isContract()) \\n                revert Inventory_InvalidERC1155Contract();\\n\\n            inventorySL.itemSlot[items[i].erc1155Contract][items[i].id] = slotId;\\n        }\\n\\n        emit ItemsAllowedInSlotUpdated(msg.sender, items);\\n    }\\n\\n    function _disallowItems(\\n        InventoryStorage.Item[] calldata items\\n    ) internal virtual {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        for (uint i = 0; i < items.length; i++) {\\n            delete inventorySL.itemSlot[items[i].erc1155Contract][items[i].id];\\n        }\\n\\n        emit ItemsAllowedInSlotUpdated(msg.sender, items);\\n    }\\n\\n    function _allowedSlot(InventoryStorage.Item calldata item) internal view returns (uint) {\\n        return InventoryStorage.layout().itemSlot[item.erc1155Contract][item.id];\\n    }\\n\\n    function _slot(uint8 slotId) internal view returns (InventoryStorage.Slot storage slot) {\\n        return InventoryStorage.layout().slots[slotId];\\n    }\\n\\n    function _slotsAll() internal view returns (InventoryStorage.Slot[] memory slotsAll) {\\n        InventoryStorage.Layout storage inventorySL = InventoryStorage.layout();\\n        \\n        uint8 numSlots = inventorySL.numSlots;\\n        slotsAll = new InventoryStorage.Slot[](numSlots);\\n\\n        for (uint8 i = 0; i < numSlots; i++) {\\n            uint8 slotId = i + 1;\\n            slotsAll[i] = inventorySL.slots[slotId];\\n        }\\n    }\\n}\",\"keccak256\":\"0xf30790d80b68e1b2e707c9388a5f3328685ceceb402fd989a06edc3984475925\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/inventory/InventoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { RolesInternal } from \\\"../roles/RolesInternal.sol\\\";\\nimport { EnumerableSet } from \\\"@solidstate/contracts/data/EnumerableSet.sol\\\";\\n\\n/**\\nLibInventory defines the storage structure used by the Inventory contract as a facet for an EIP-2535 Diamond\\nproxy.\\n */\\nlibrary InventoryStorage {\\n    bytes32 constant INVENTORY_STORAGE_POSITION =\\n        keccak256(\\\"inventory.storage.position\\\");\\n\\n    // Holds the information needed to identify an ERC1155 item\\n    struct Item {\\n        address erc1155Contract;\\n        uint id;\\n    }\\n\\n    // Holds the general information about a slot\\n    struct Slot {\\n        uint8 id;\\n        bool permanent;\\n        bool isBase;\\n    }\\n\\n    struct Layout {\\n        uint8 numSlots;\\n\\n        // Slot id => Slot\\n        mapping(uint8 => Slot) slots;\\n\\n        // arcadian id => slot id => Items equipped\\n        mapping(uint => mapping(uint8 => Item)) equippedItems;\\n\\n        // item address => item id => allowed slot id\\n        mapping(address => mapping(uint => uint8)) itemSlot;\\n        \\n        // item address => item id => equip items requires transfer\\n        mapping(address => mapping(uint => bool)) requiresTransfer;\\n\\n        // List of all the existent hashes\\n        EnumerableSet.Bytes32Set baseItemsHashes;\\n        // arcadian id => base items hash\\n        mapping(uint => bytes32) arcadianToBaseItemHash;\\n\\n        // account => slotId => number of coupons to modify the base traits\\n        mapping(address => mapping(uint => uint)) baseModifierCoupon;\\n\\n        // List of all the base slots ids\\n        uint8[] baseSlotsIds;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage istore)\\n    {\\n        bytes32 position = INVENTORY_STORAGE_POSITION;\\n        assembly {\\n            istore.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x2662787bb95595cd004bb2915835b1b3419e4ab7285ccd526d0cbdf486c61e34\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    error Roles_MissingAdminRole();\\n    error Roles_MissingManagerRole();\\n    error Roles_MissingAutomationRole();\\n\\n    modifier onlyDefaultAdmin() {\\n        if (!_hasRole(_defaultAdminRole(), msg.sender))\\n            revert Roles_MissingAdminRole();\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        if (!_hasRole(_managerRole(), msg.sender))\\n            revert Roles_MissingManagerRole();\\n        _;\\n    }\\n\\n    modifier onlyAutomation() {\\n        if (!_hasRole(_managerRole(), msg.sender) && !_hasRole(_automationRole(), msg.sender))\\n            revert Roles_MissingAutomationRole();\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _automationRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().automationRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.automationRole = keccak256(\\\"automation.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0x3bbcaec7bceb8497e1e96785c524e1cf67b54ba34713086686887d13502b5264\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 automationRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x6eb213b99e10477f695528196487fafafaeceb2b11c6f9f43f3ddb9e83f9e8d3\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506136dd806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638d0e5a9a116100c3578063acb5fe3d1161007c578063acb5fe3d146103a9578063b1b2fef4146103bc578063bc197c81146103d1578063c33d7d1614610409578063ddac20081461041c578063f23a6e611461042f57600080fd5b80638d0e5a9a146102bb5780638e980d4d146103555780638ed4110014610368578063947687e71461037b5780639621ff251461038e5780639e3ccb2a1461039657600080fd5b806351bb1e051161011557806351bb1e051461020e5780635cf715ee14610221578063603f40ec146102415780637a8455a1146102805780637b2ddc1d146102935780638074edd5146102a657600080fd5b806301ffc9a71461015d5780630416c01f146101855780631da7c70a1461019a57806320b82e68146101ba5780632f8bd3c8146101da5780634605777d146101fb575b600080fd5b61017061016b366004612b49565b61044e565b60405190151581526020015b60405180910390f35b610198610193366004612b99565b610485565b005b6101ad6101a8366004612be4565b6104cf565b60405161017c9190612c01565b6101cd6101c8366004612c53565b6104da565b60405161017c9190612c76565b6101ed6101e8366004612ca3565b610571565b60405190815260200161017c565b610198610209366004612d4a565b61057c565b61019861021c366004612db5565b6105c4565b61023461022f366004612e37565b610644565b60405161017c9190612e82565b6101ed61024f366004612ef0565b60009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43d602052604090205490565b61017061028e366004612f09565b610659565b6101986102a1366004612e37565b610666565b6102ae6106c1565b60405161017c9190612f47565b6103486102c9366004612f82565b604080516060810182526000808252602080830182905282840182905260ff851682527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43790529190912060408051606081018252915460ff80821684526101008204811615156020850152620100009091041615159082015292915050565b60405161017c9190612f9d565b610198610363366004612f09565b6106d0565b610198610376366004612b99565b610724565b610198610389366004612fc5565b610764565b6101ed6107a6565b6102346103a4366004612ef0565b6107c1565b6101986103b7366004613019565b6107cc565b6103c4610812565b60405161017c9190613052565b6103f06103df3660046131d8565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161017c565b6101ed610417366004613285565b61081c565b61019861042a3660046132b1565b610828565b6103f061043d3660046132f2565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061047f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6104a461049e6000805160206136688339815191525490565b33610868565b6104c15760405163d0befa1d60e01b815260040160405180910390fd5b6104cb828261089f565b5050565b606061047f8261092f565b6040805160608082018352600080835260208084018290528385018290528451808401865282815280820183905285018290528682527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d438815284822060ff8716808452908252918590208551938401865291835281546001600160a01b0316908301526001015492810192909252905b9392505050565b600061047f82610aaa565b61059561049e6000805160206136688339815191525490565b6105b25760405163d0befa1d60e01b815260040160405180910390fd5b6105be84848484610b0f565b50505050565b6105dd61049e6000805160206136688339815191525490565b158015610612575061061061049e7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa735490565b155b1561063057604051630b24262960e31b815260040160405180910390fd5b61063d8585858585610c1c565b5050505050565b6060610651848484610e47565b949350505050565b6000610651848484610fa5565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036106a957604051635db5c7cd60e11b815260040160405180910390fd5b600281556106b88484846111cc565b60019055505050565b60606106cb611465565b905090565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361071357604051635db5c7cd60e11b815260040160405180910390fd5b600281556106b884848460006114eb565b61073d61049e6000805160206136688339815191525490565b61075a5760405163d0befa1d60e01b815260040160405180910390fd5b6104cb82826119b9565b61077d61049e6000805160206136688339815191525490565b61079a5760405163d0befa1d60e01b815260040160405180910390fd5b6105be84848484611c1f565b60006106cb6000805160206136888339815191525460ff1690565b606061047f82611cfe565b6107e561049e6000805160206136688339815191525490565b6108025760405163d0befa1d60e01b815260040160405180910390fd5b61080d838383611e2a565b505050565b60606106cb611fd0565b600061056a83836120f4565b61084161049e6000805160206136688339815191525490565b61085e5760405163d0befa1d60e01b815260040160405180910390fd5b6104cb82826121e1565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061056a90836122dc565b8160ff811615806108c557506000805160206136888339815191525460ff908116908216115b156108e35760405163d751397d60e01b815260040160405180910390fd5b5060ff9190911660009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4376020526040902080549115156101000261ff0019909216919091179055565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f54606090600080516020613688833981519152906000816001600160401b0381111561097e5761097e6130af565b6040519080825280602002602001820160405280156109c357816020015b604080518082019091526000808252602082015281526020019060019003908161099c5790505b5090506000805b838160ff161015610a9f576000856009018260ff16815481106109ef576109ef61335a565b90600052602060002090602091828204019190069054906101000a900460ff16905080848481518110610a2457610a2461335a565b60209081029190910181015160ff92831690526001600160a01b038a166000908152600889018252604080822093851682529290915220548451859085908110610a7057610a7061335a565b602090810291909101810151015282610a8881613386565b935050508080610a979061339f565b9150506109ca565b509095945050505050565b60007ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43981610adb6020850185612be4565b6001600160a01b0316815260208082019290925260409081016000908120948301358152939091529091205460ff16919050565b828114610b2f576040516303f7219d60e41b815260040160405180910390fd5b60008051602061368883398151915260005b84811015610c1457838382818110610b5b57610b5b61335a565b9050602002016020810190610b7091906133be565b826004016000888885818110610b8857610b8861335a565b610b9e9260206040909202019081019150612be4565b6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110610bd257610bd261335a565b90506040020160200135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610c0c90613386565b915050610b41565b505050505050565b828114610c3c576040516303f7219d60e41b815260040160405180910390fd5b600080516020613688833981519152805460ff1660005b85811015610dec57868682818110610c6d57610c6d61335a565b9050602002016020810190610c829190612f82565b60ff16158015610cbd57508160ff16878783818110610ca357610ca361335a565b9050602002016020810190610cb89190612f82565b60ff16115b15610cdb5760405163d751397d60e01b815260040160405180910390fd5b826001016000888884818110610cf357610cf361335a565b9050602002016020810190610d089190612f82565b60ff908116825260208201929092526040016000205462010000900416610d42576040516332fa2abb60e01b815260040160405180910390fd5b848482818110610d5457610d5461335a565b90506020020135610d7060008051602061368883398151915290565b6001600160a01b038a1660009081526008919091016020526040812090898985818110610d9f57610d9f61335a565b9050602002016020810190610db49190612f82565b60ff1681526020019081526020016000206000828254610dd491906133d9565b90915550819050610de481613386565b915050610c53565b50866001600160a01b0316336001600160a01b03167f9d7a20d7eaa55f66adf8df546f4264a6d863831fcf5a590c02a66c132f8c10cc88888888604051610e36949392919061342d565b60405180910390a350505050505050565b6060600080516020613688833981519152826001600160401b03811115610e7057610e706130af565b604051908082528060200260200182016040528015610ebb57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610e8e5790505b50915060005b83811015610f9c576000868152600283016020526040812081878785818110610eec57610eec61335a565b9050602002016020810190610f019190612f82565b60ff1660ff16815260200190815260200160002090506040518060600160405280878785818110610f3457610f3461335a565b9050602002016020810190610f499190612f82565b60ff16815282546001600160a01b0316602082015260018301546040909101528451859084908110610f7d57610f7d61335a565b6020026020010181905250508080610f9490613386565b915050610ec1565b50509392505050565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f5460009060008051602061368883398151915290606090835b818160ff161015611184576000846009018260ff16815481106110045761100461335a565b60009182526020808320818304015460408051808201909152848152918201849052601f9092166101000a90910460ff169250905b888110156110ab578260ff166110658b8b8481811061105a5761105a61335a565b905060400201610aaa565b036110995789898281811061107c5761107c61335a565b9050604002018036038101906110929190613479565b91506110ab565b806110a381613386565b915050611039565b5080516001600160a01b03166111435760008a8152600287016020908152604080832060ff861684529091529020546001600160a01b03161561112a57506000898152600286016020908152604080832060ff85168452825291829020825180840190935280546001600160a01b031683526001015490820152611143565b60405163a9614f1560e01b815260040160405180910390fd5b805160208083015160405161115e93899387939192016134d0565b60405160208183030381529060405294505050808061117c9061339f565b915050610fdf565b5081805190602001208360070160008981526020019081526020016000205414806111c15750815160208301206111bf9060058501906122fe565b155b979650505050505050565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa15801561120c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112309190613531565b6001600160a01b0316336001600160a01b0316146112615760405163aee05b5d60e01b815260040160405180910390fd5b600080516020613688833981519152600084900361127f575061063d565b60005b8481101561140e578160010160008787848181106112a2576112a261335a565b90506020020160208101906112b79190612f82565b60ff9081168252602082019290925260400160002054610100900416156112f15760405163bd8a5e1560e01b815260040160405180910390fd5b60008781526002830160205260408120818888858181106113145761131461335a565b90506020020160208101906113299190612f82565b60ff1681526020810191909152604001600020546001600160a01b03160361136457604051632755285560e01b815260040160405180910390fd5b81600101600087878481811061137c5761137c61335a565b90506020020160208101906113919190612f82565b60ff908116825260208201929092526040016000205462010000900416156113cc5760405163abfc1e6160e01b815260040160405180910390fd5b6113fc878787848181106113e2576113e261335a565b90506020020160208101906113f79190612f82565b612316565b8061140681613386565b915050611282565b5061141886612475565b5085336001600160a01b03167fa3319ad5631c1ffca6596869c7a4151599263f1ab87e5bff0b2a61730d9e7f52878760405161145592919061354e565b60405180910390a3505050505050565b60606000805160206136888339815191526009018054806020026020016040519081016040528092919081815260200182805480156114e157602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116114b25790505b5050505050905090565b6040516331a9108f60e11b815260048101859052849030908190636352211e90602401602060405180830381865afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f9190613531565b6001600160a01b0316336001600160a01b0316146115805760405163aee05b5d60e01b815260040160405180910390fd5b8315610c1457600080516020613688833981519152600080866001600160401b038111156115b0576115b06130af565b6040519080825280602002602001820160405280156115d9578160200160208202803683370190505b50905060005b8781101561178a5760008460030160008b8b858181106116015761160161335a565b6116179260206040909202019081019150612be4565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008b8b8581811061164b5761164b61335a565b90506040020160200135815260200190815260200160002060009054906101000a900460ff169050808383815181106116865761168661335a565b60ff92831660209182029290920181019190915260008d81526002880182526040808220938516825292909152208a8a848181106116c6576116c661335a565b6116dc9260206040909202019081019150612be4565b81546001600160a01b03908116911614801561171657508a8a848181106117055761170561335a565b905060400201602001358160010154145b15611722575050611778565b6117448c8c8c868181106117385761173861335a565b9050604002018b6125d8565b5060ff8083166000908152600188016020526040902054620100009004161561177557846117718161339f565b9550505b50505b8061178281613386565b9150506115df565b5061179489612964565b6117b15760405163a9614f1560e01b815260040160405180910390fd5b60ff82161561196c576117c389612475565b6117df5760405162ecf30560e51b815260040160405180910390fd5b8561196c5760008260ff166001600160401b03811115611801576118016130af565b60405190808252806020026020018201604052801561182a578160200160208202803683370190505b5090506000805b898110156119265760008660030160008d8d858181106118535761185361335a565b6118699260206040909202019081019150612be4565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008d8d8581811061189d5761189d61335a565b60206040918202939093018301358452838301949094525090820160009081205460ff90811680835260018c0190935292902054909250620100009004161561191357808484815181106118f3576118f361335a565b60ff909216602092830291909101909101528261190f81613386565b9350505b508061191e81613386565b915050611831565b508a336001600160a01b03167f26f48489610b9379e1312f6d4ab3e8ae7daaeb6e9c3fc4fd435e31efe4b5b905846040516119619190612f47565b60405180910390a350505b88336001600160a01b03167f9327c3082659d71242f39580f98c14533249a2555a5e35f7c1dd6114c014acbd836040516119a69190612f47565b60405180910390a3505050505050505050565b8160ff811615806119df57506000805160206136888339815191525460ff908116908216115b156119fd5760405163d751397d60e01b815260040160405180910390fd5b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f805460008051602061368883398151915291908415611ada576000805b82811015611a99578760ff16848281548110611a5957611a5961335a565b60009182526020918290209181049091015460ff601f9092166101000a90041603611a875760019150611a99565b80611a9181613386565b915050611a3b565b5080611ad4578254600181018455600084815260209081902090820401805460ff808b16601f9094166101000a938402930219169190911790555b50611beb565b60005b81811015611be9578660ff16838281548110611afb57611afb61335a565b60009182526020918290209181049091015460ff601f9092166101000a90041603611bd75782611b2c600184613562565b81548110611b3c57611b3c61335a565b90600052602060002090602091828204019190069054906101000a900460ff16838281548110611b6e57611b6e61335a565b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555082805480611ba857611ba8613575565b60019003818190600052602060002090602091828204019190066101000a81549060ff02191690559055611be9565b80611be181613386565b915050611add565b505b505060ff909316600090815260019093016020525060409091208054911515620100000262ff000019909216919091179055565b60008051602061368883398151915280546001908290600090611c4690849060ff1661358b565b825461010092830a60ff818102199092169282160291909117909255835490911660008181526001850160205260409020805462ffff00191689151590930262ff000019169290921762010000881515021760ff191681179091559050611cad81866119b9565b8215611cbe57611cbe818585611e2a565b604080518715158152861515602082015260ff83169133917f6cc736ebc0a380aff8bb8965c1da3507f88c72faaa11d947a8cee380437eee389101611455565b60008051602061368883398151915280546060919060ff16806001600160401b03811115611d2e57611d2e6130af565b604051908082528060200260200182016040528015611d7957816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181611d4c5790505b50925060005b8160ff168160ff161015611e22576000611d9a82600161358b565b6000878152600286016020908152604080832060ff80861680865291845293829020825160608101845291825280546001600160a01b0316938201939093526001830154918101919091528851939450909290918891908616908110611e0257611e0261335a565b602002602001018190525050508080611e1a9061339f565b915050611d7f565b505050919050565b8260ff81161580611e5057506000805160206136888339815191525460ff908116908216115b15611e6e5760405163d751397d60e01b815260040160405180910390fd5b60008051602061368883398151915260005b83811015611f8557611ec2858583818110611e9d57611e9d61335a565b611eb39260206040909202019081019150612be4565b6001600160a01b03163b151590565b611edf57604051633c65e02b60e21b815260040160405180910390fd5b85826003016000878785818110611ef857611ef861335a565b611f0e9260206040909202019081019150612be4565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110611f4257611f4261335a565b90506040020160200135815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080611f7d90613386565b915050611e80565b50336001600160a01b03167fe4b3865dba5d4ccb0b3d6c20155d67038ad51ad7205218a541036a99804571b78585604051611fc19291906135a4565b60405180910390a25050505050565b60008051602061368883398151915280546060919060ff16806001600160401b03811115612000576120006130af565b60405190808252806020026020018201604052801561204b57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161201e5790505b50925060005b8160ff168160ff1610156120ee57600061206c82600161358b565b60ff808216600090815260018701602090815260409182902082516060810184529054808516825261010081048516151592820192909252620100009091048316151591810191909152875192935091879185169081106120cf576120cf61335a565b60200260200101819052505080806120e69061339f565b915050612051565b50505090565b60008160ff8116158061211c57506000805160206136888339815191525460ff908116908216115b1561213a5760405163d751397d60e01b815260040160405180910390fd5b60ff83811660009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d437602052604090205462010000900416612191576040516332fa2abb60e01b815260040160405180910390fd5b6001600160a01b03841660009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43e6020908152604080832060ff8716845290915290205491505b5092915050565b60008051602061368883398151915260005b82811015612293578160030160008585848181106122135761221361335a565b6122299260206040909202019081019150612be4565b6001600160a01b03166001600160a01b03168152602001908152602001600020600085858481811061225d5761225d61335a565b602060409182029390930183013584529183019390935201600020805460ff19169055508061228b81613386565b9150506121f3565b50336001600160a01b03167fe4b3865dba5d4ccb0b3d6c20155d67038ad51ad7205218a541036a99804571b784846040516122cf9291906135a4565b60405180910390a2505050565b6001600160a01b0381166000908152600183016020526040812054151561056a565b6000818152600183016020526040812054151561056a565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020908152604080832060ff858116855290835281842080546001600160a01b031685527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a84528285206001820154865290935292205460008051602061368883398151915292168015612434578154600180840154604051637921219560e11b81523060048201523360248201526044810191909152606481019190915260a06084820152600060a48201526001600160a01b0390911690819063f242432a9060c401600060405180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b50505050505b505060009283526002016020908152604080842060ff90931684529190528120805473ffffffffffffffffffffffffffffffffffffffff1916815560010155565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f5460009060008051602061368883398151915290606090835b818160ff161015612557576000846009018260ff16815481106124d4576124d461335a565b6000918252602080832081830401548a84526002890182526040808520601f9094166101000a90910460ff1680855292825292839020805460018201549451939550909361253193899387936001600160a01b03169291016134d0565b60405160208183030381529060405294505050808061254f9061339f565b9150506124af565b50815160208084019190912060008781526007860190925260409091205481148061258c575061258a60058501826122fe565b155b60008781526007860160205260409020549095506125ae906005860190612a34565b506125bc6005850182612a40565b5060009586526007909301602052505060409092209190915590565b60006000805160206136888339815191527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d439826126186020870187612be4565b6001600160a01b031681526020808201929092526040908101600090812087840135825290925290205460ff16915081158061266957506000805160206136888339815191525460ff908116908316115b15612687576040516363efa0e360e01b815260040160405180910390fd5b821580156126ae575060ff8083166000908152600183016020526040902054620100009004165b1561272357336000908152600882016020908152604080832060ff8616845290915281205490036126f25760405163bbd28dfd60e01b815260040160405180910390fd5b336000908152600882016020908152604080832060ff86168452909152812080549161271d836135fd565b91905055505b6000858152600282016020908152604080832060ff808716855290835281842060018601909352922054909161010090910416801561276b575080546001600160a01b031615155b156127895760405163bd8a5e1560e01b815260040160405180910390fd5b6000868152600283016020908152604080832060ff871684529091529020546001600160a01b0316156127c0576127c08684612316565b600060048301816127d46020890189612be4565b6001600160a01b031681526020808201929092526040908101600090812089840135825290925290205460ff169050801561292d5760006128186020880188612be4565b604051627eeac760e11b8152336004820152602089013560248201529091506001906001600160a01b0383169062fdd58e90604401602060405180830381865afa15801561286a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288e9190613614565b10156128ad576040516335ba250d60e11b815260040160405180910390fd5b604051637921219560e11b8152336004820152306024820152602088013560448201526001606482015260a06084820152600060a48201526001600160a01b0382169063f242432a9060c401600060405180830381600087803b15801561291357600080fd5b505af1158015612927573d6000803e3d6000fd5b50505050505b6000878152600284016020908152604080832060ff8816845290915290208690612957828261362d565b9050505050509392505050565b60008051602061368883398151915280546000919060ff16825b8160ff168160ff161015612a2957600061299982600161358b565b60ff80821660009081526001870160205260409020805492935091620100009004161580156129cf57508054610100900460ff16155b156129db575050612a17565b6000878152600286016020908152604080832060ff861684529091529020546001600160a01b0316612a14575060009695505050505050565b50505b80612a218161339f565b91505061297e565b506001949350505050565b600061056a8383612a4c565b600061056a8383612b06565b600081815260018301602052604081205480156121da57835460009085906000198101908110612a7e57612a7e61335a565b9060005260206000200154905080856000016001840381548110612aa457612aa461335a565b6000918252602080832090910192909255918252600186019052604090208190558354849080612ad657612ad6613575565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b600081815260018301602052604081205461047f575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b600060208284031215612b5b57600080fd5b81356001600160e01b03198116811461056a57600080fd5b803560ff81168114612b8457600080fd5b919050565b80358015158114612b8457600080fd5b60008060408385031215612bac57600080fd5b612bb583612b73565b9150612bc360208401612b89565b90509250929050565b6001600160a01b0381168114612be157600080fd5b50565b600060208284031215612bf657600080fd5b813561056a81612bcc565b602080825282518282018190526000919060409081850190868401855b82811015612c46578151805160ff168552860151868501529284019290850190600101612c1e565b5091979650505050505050565b60008060408385031215612c6657600080fd5b82359150612bc360208401612b73565b815160ff1681526020808301516001600160a01b031690820152604080830151908201526060810161047f565b600060408284031215612cb557600080fd5b50919050565b60008083601f840112612ccd57600080fd5b5081356001600160401b03811115612ce457600080fd5b6020830191508360208260061b8501011115612cff57600080fd5b9250929050565b60008083601f840112612d1857600080fd5b5081356001600160401b03811115612d2f57600080fd5b6020830191508360208260051b8501011115612cff57600080fd5b60008060008060408587031215612d6057600080fd5b84356001600160401b0380821115612d7757600080fd5b612d8388838901612cbb565b90965094506020870135915080821115612d9c57600080fd5b50612da987828801612d06565b95989497509550505050565b600080600080600060608688031215612dcd57600080fd5b8535612dd881612bcc565b945060208601356001600160401b0380821115612df457600080fd5b612e0089838a01612d06565b90965094506040880135915080821115612e1957600080fd5b50612e2688828901612d06565b969995985093965092949392505050565b600080600060408486031215612e4c57600080fd5b8335925060208401356001600160401b03811115612e6957600080fd5b612e7586828701612d06565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015612ee457612ed1838551805160ff1682526020808201516001600160a01b031690830152604090810151910152565b9284019260609290920191600101612e9e565b50909695505050505050565b600060208284031215612f0257600080fd5b5035919050565b600080600060408486031215612f1e57600080fd5b8335925060208401356001600160401b03811115612f3b57600080fd5b612e7586828701612cbb565b6020808252825182820181905260009190848201906040850190845b81811015612ee457835160ff1683529284019291840191600101612f63565b600060208284031215612f9457600080fd5b61056a82612b73565b815160ff1681526020808301511515908201526040808301511515908201526060810161047f565b60008060008060608587031215612fdb57600080fd5b612fe485612b89565b9350612ff260208601612b89565b925060408501356001600160401b0381111561300d57600080fd5b612da987828801612cbb565b60008060006040848603121561302e57600080fd5b61303784612b73565b925060208401356001600160401b03811115612f3b57600080fd5b6020808252825182820181905260009190848201906040850190845b81811015612ee45761309c838551805160ff1682526020808201511515908301526040908101511515910152565b928401926060929092019160010161306e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156130ed576130ed6130af565b604052919050565b600082601f83011261310657600080fd5b813560206001600160401b03821115613121576131216130af565b8160051b6131308282016130c5565b928352848101820192828101908785111561314a57600080fd5b83870192505b848310156111c157823582529183019190830190613150565b600082601f83011261317a57600080fd5b81356001600160401b03811115613193576131936130af565b6131a6601f8201601f19166020016130c5565b8181528460208386010111156131bb57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156131f057600080fd5b85356131fb81612bcc565b9450602086013561320b81612bcc565b935060408601356001600160401b038082111561322757600080fd5b61323389838a016130f5565b9450606088013591508082111561324957600080fd5b61325589838a016130f5565b9350608088013591508082111561326b57600080fd5b5061327888828901613169565b9150509295509295909350565b6000806040838503121561329857600080fd5b82356132a381612bcc565b9150612bc360208401612b73565b600080602083850312156132c457600080fd5b82356001600160401b038111156132da57600080fd5b6132e685828601612cbb565b90969095509350505050565b600080600080600060a0868803121561330a57600080fd5b853561331581612bcc565b9450602086013561332581612bcc565b9350604086013592506060860135915060808601356001600160401b0381111561334e57600080fd5b61327888828901613169565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161339857613398613370565b5060010190565b600060ff821660ff81036133b5576133b5613370565b60010192915050565b6000602082840312156133d057600080fd5b61056a82612b89565b8082018082111561047f5761047f613370565b8183526000602080850194508260005b858110156134225760ff61340f83612b73565b16875295820195908201906001016133fc565b509495945050505050565b6040815260006134416040830186886133ec565b82810360208401528381526001600160fb1b0384111561346057600080fd5b8360051b80866020840137016020019695505050505050565b60006040828403121561348b57600080fd5b604051604081018181106001600160401b03821117156134ad576134ad6130af565b60405282356134bb81612bcc565b81526020928301359281019290925250919050565b6000855160005b818110156134f157602081890181015185830152016134d7565b5060f89590951b6001600160f81b0319169190940190815260609290921b6bffffffffffffffffffffffff19166001830152601582015260350192915050565b60006020828403121561354357600080fd5b815161056a81612bcc565b6020815260006106516020830184866133ec565b8181038181111561047f5761047f613370565b634e487b7160e01b600052603160045260246000fd5b60ff818116838216019081111561047f5761047f613370565b6020808252818101839052600090604080840186845b878110156135f05781356135cd81612bcc565b6001600160a01b03168352818501358584015291830191908301906001016135ba565b5090979650505050505050565b60008161360c5761360c613370565b506000190190565b60006020828403121561362657600080fd5b5051919050565b813561363881612bcc565b6001600160a01b0381166bffffffffffffffffffffffff60a01b8354161782555060208201356001820155505056fef6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa72f672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220ba278967f04d8c19b588d260f5e49cc1b6d2143958ed5bc24f8ac77e6f999d9f64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638d0e5a9a116100c3578063acb5fe3d1161007c578063acb5fe3d146103a9578063b1b2fef4146103bc578063bc197c81146103d1578063c33d7d1614610409578063ddac20081461041c578063f23a6e611461042f57600080fd5b80638d0e5a9a146102bb5780638e980d4d146103555780638ed4110014610368578063947687e71461037b5780639621ff251461038e5780639e3ccb2a1461039657600080fd5b806351bb1e051161011557806351bb1e051461020e5780635cf715ee14610221578063603f40ec146102415780637a8455a1146102805780637b2ddc1d146102935780638074edd5146102a657600080fd5b806301ffc9a71461015d5780630416c01f146101855780631da7c70a1461019a57806320b82e68146101ba5780632f8bd3c8146101da5780634605777d146101fb575b600080fd5b61017061016b366004612b49565b61044e565b60405190151581526020015b60405180910390f35b610198610193366004612b99565b610485565b005b6101ad6101a8366004612be4565b6104cf565b60405161017c9190612c01565b6101cd6101c8366004612c53565b6104da565b60405161017c9190612c76565b6101ed6101e8366004612ca3565b610571565b60405190815260200161017c565b610198610209366004612d4a565b61057c565b61019861021c366004612db5565b6105c4565b61023461022f366004612e37565b610644565b60405161017c9190612e82565b6101ed61024f366004612ef0565b60009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43d602052604090205490565b61017061028e366004612f09565b610659565b6101986102a1366004612e37565b610666565b6102ae6106c1565b60405161017c9190612f47565b6103486102c9366004612f82565b604080516060810182526000808252602080830182905282840182905260ff851682527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43790529190912060408051606081018252915460ff80821684526101008204811615156020850152620100009091041615159082015292915050565b60405161017c9190612f9d565b610198610363366004612f09565b6106d0565b610198610376366004612b99565b610724565b610198610389366004612fc5565b610764565b6101ed6107a6565b6102346103a4366004612ef0565b6107c1565b6101986103b7366004613019565b6107cc565b6103c4610812565b60405161017c9190613052565b6103f06103df3660046131d8565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161017c565b6101ed610417366004613285565b61081c565b61019861042a3660046132b1565b610828565b6103f061043d3660046132f2565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061047f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6104a461049e6000805160206136688339815191525490565b33610868565b6104c15760405163d0befa1d60e01b815260040160405180910390fd5b6104cb828261089f565b5050565b606061047f8261092f565b6040805160608082018352600080835260208084018290528385018290528451808401865282815280820183905285018290528682527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d438815284822060ff8716808452908252918590208551938401865291835281546001600160a01b0316908301526001015492810192909252905b9392505050565b600061047f82610aaa565b61059561049e6000805160206136688339815191525490565b6105b25760405163d0befa1d60e01b815260040160405180910390fd5b6105be84848484610b0f565b50505050565b6105dd61049e6000805160206136688339815191525490565b158015610612575061061061049e7ff6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa735490565b155b1561063057604051630b24262960e31b815260040160405180910390fd5b61063d8585858585610c1c565b5050505050565b6060610651848484610e47565b949350505050565b6000610651848484610fa5565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc80546002036106a957604051635db5c7cd60e11b815260040160405180910390fd5b600281556106b88484846111cc565b60019055505050565b60606106cb611465565b905090565b7f09acf4e54214992e70883cf7dcd6957ff2c71cd9e14df4bec4383bc0d11607dc805460020361071357604051635db5c7cd60e11b815260040160405180910390fd5b600281556106b884848460006114eb565b61073d61049e6000805160206136688339815191525490565b61075a5760405163d0befa1d60e01b815260040160405180910390fd5b6104cb82826119b9565b61077d61049e6000805160206136688339815191525490565b61079a5760405163d0befa1d60e01b815260040160405180910390fd5b6105be84848484611c1f565b60006106cb6000805160206136888339815191525460ff1690565b606061047f82611cfe565b6107e561049e6000805160206136688339815191525490565b6108025760405163d0befa1d60e01b815260040160405180910390fd5b61080d838383611e2a565b505050565b60606106cb611fd0565b600061056a83836120f4565b61084161049e6000805160206136688339815191525490565b61085e5760405163d0befa1d60e01b815260040160405180910390fd5b6104cb82826121e1565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061056a90836122dc565b8160ff811615806108c557506000805160206136888339815191525460ff908116908216115b156108e35760405163d751397d60e01b815260040160405180910390fd5b5060ff9190911660009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4376020526040902080549115156101000261ff0019909216919091179055565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f54606090600080516020613688833981519152906000816001600160401b0381111561097e5761097e6130af565b6040519080825280602002602001820160405280156109c357816020015b604080518082019091526000808252602082015281526020019060019003908161099c5790505b5090506000805b838160ff161015610a9f576000856009018260ff16815481106109ef576109ef61335a565b90600052602060002090602091828204019190069054906101000a900460ff16905080848481518110610a2457610a2461335a565b60209081029190910181015160ff92831690526001600160a01b038a166000908152600889018252604080822093851682529290915220548451859085908110610a7057610a7061335a565b602090810291909101810151015282610a8881613386565b935050508080610a979061339f565b9150506109ca565b509095945050505050565b60007ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43981610adb6020850185612be4565b6001600160a01b0316815260208082019290925260409081016000908120948301358152939091529091205460ff16919050565b828114610b2f576040516303f7219d60e41b815260040160405180910390fd5b60008051602061368883398151915260005b84811015610c1457838382818110610b5b57610b5b61335a565b9050602002016020810190610b7091906133be565b826004016000888885818110610b8857610b8861335a565b610b9e9260206040909202019081019150612be4565b6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110610bd257610bd261335a565b90506040020160200135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610c0c90613386565b915050610b41565b505050505050565b828114610c3c576040516303f7219d60e41b815260040160405180910390fd5b600080516020613688833981519152805460ff1660005b85811015610dec57868682818110610c6d57610c6d61335a565b9050602002016020810190610c829190612f82565b60ff16158015610cbd57508160ff16878783818110610ca357610ca361335a565b9050602002016020810190610cb89190612f82565b60ff16115b15610cdb5760405163d751397d60e01b815260040160405180910390fd5b826001016000888884818110610cf357610cf361335a565b9050602002016020810190610d089190612f82565b60ff908116825260208201929092526040016000205462010000900416610d42576040516332fa2abb60e01b815260040160405180910390fd5b848482818110610d5457610d5461335a565b90506020020135610d7060008051602061368883398151915290565b6001600160a01b038a1660009081526008919091016020526040812090898985818110610d9f57610d9f61335a565b9050602002016020810190610db49190612f82565b60ff1681526020019081526020016000206000828254610dd491906133d9565b90915550819050610de481613386565b915050610c53565b50866001600160a01b0316336001600160a01b03167f9d7a20d7eaa55f66adf8df546f4264a6d863831fcf5a590c02a66c132f8c10cc88888888604051610e36949392919061342d565b60405180910390a350505050505050565b6060600080516020613688833981519152826001600160401b03811115610e7057610e706130af565b604051908082528060200260200182016040528015610ebb57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610e8e5790505b50915060005b83811015610f9c576000868152600283016020526040812081878785818110610eec57610eec61335a565b9050602002016020810190610f019190612f82565b60ff1660ff16815260200190815260200160002090506040518060600160405280878785818110610f3457610f3461335a565b9050602002016020810190610f499190612f82565b60ff16815282546001600160a01b0316602082015260018301546040909101528451859084908110610f7d57610f7d61335a565b6020026020010181905250508080610f9490613386565b915050610ec1565b50509392505050565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f5460009060008051602061368883398151915290606090835b818160ff161015611184576000846009018260ff16815481106110045761100461335a565b60009182526020808320818304015460408051808201909152848152918201849052601f9092166101000a90910460ff169250905b888110156110ab578260ff166110658b8b8481811061105a5761105a61335a565b905060400201610aaa565b036110995789898281811061107c5761107c61335a565b9050604002018036038101906110929190613479565b91506110ab565b806110a381613386565b915050611039565b5080516001600160a01b03166111435760008a8152600287016020908152604080832060ff861684529091529020546001600160a01b03161561112a57506000898152600286016020908152604080832060ff85168452825291829020825180840190935280546001600160a01b031683526001015490820152611143565b60405163a9614f1560e01b815260040160405180910390fd5b805160208083015160405161115e93899387939192016134d0565b60405160208183030381529060405294505050808061117c9061339f565b915050610fdf565b5081805190602001208360070160008981526020019081526020016000205414806111c15750815160208301206111bf9060058501906122fe565b155b979650505050505050565b6040516331a9108f60e11b815260048101849052839030908190636352211e90602401602060405180830381865afa15801561120c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112309190613531565b6001600160a01b0316336001600160a01b0316146112615760405163aee05b5d60e01b815260040160405180910390fd5b600080516020613688833981519152600084900361127f575061063d565b60005b8481101561140e578160010160008787848181106112a2576112a261335a565b90506020020160208101906112b79190612f82565b60ff9081168252602082019290925260400160002054610100900416156112f15760405163bd8a5e1560e01b815260040160405180910390fd5b60008781526002830160205260408120818888858181106113145761131461335a565b90506020020160208101906113299190612f82565b60ff1681526020810191909152604001600020546001600160a01b03160361136457604051632755285560e01b815260040160405180910390fd5b81600101600087878481811061137c5761137c61335a565b90506020020160208101906113919190612f82565b60ff908116825260208201929092526040016000205462010000900416156113cc5760405163abfc1e6160e01b815260040160405180910390fd5b6113fc878787848181106113e2576113e261335a565b90506020020160208101906113f79190612f82565b612316565b8061140681613386565b915050611282565b5061141886612475565b5085336001600160a01b03167fa3319ad5631c1ffca6596869c7a4151599263f1ab87e5bff0b2a61730d9e7f52878760405161145592919061354e565b60405180910390a3505050505050565b60606000805160206136888339815191526009018054806020026020016040519081016040528092919081815260200182805480156114e157602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116114b25790505b5050505050905090565b6040516331a9108f60e11b815260048101859052849030908190636352211e90602401602060405180830381865afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f9190613531565b6001600160a01b0316336001600160a01b0316146115805760405163aee05b5d60e01b815260040160405180910390fd5b8315610c1457600080516020613688833981519152600080866001600160401b038111156115b0576115b06130af565b6040519080825280602002602001820160405280156115d9578160200160208202803683370190505b50905060005b8781101561178a5760008460030160008b8b858181106116015761160161335a565b6116179260206040909202019081019150612be4565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008b8b8581811061164b5761164b61335a565b90506040020160200135815260200190815260200160002060009054906101000a900460ff169050808383815181106116865761168661335a565b60ff92831660209182029290920181019190915260008d81526002880182526040808220938516825292909152208a8a848181106116c6576116c661335a565b6116dc9260206040909202019081019150612be4565b81546001600160a01b03908116911614801561171657508a8a848181106117055761170561335a565b905060400201602001358160010154145b15611722575050611778565b6117448c8c8c868181106117385761173861335a565b9050604002018b6125d8565b5060ff8083166000908152600188016020526040902054620100009004161561177557846117718161339f565b9550505b50505b8061178281613386565b9150506115df565b5061179489612964565b6117b15760405163a9614f1560e01b815260040160405180910390fd5b60ff82161561196c576117c389612475565b6117df5760405162ecf30560e51b815260040160405180910390fd5b8561196c5760008260ff166001600160401b03811115611801576118016130af565b60405190808252806020026020018201604052801561182a578160200160208202803683370190505b5090506000805b898110156119265760008660030160008d8d858181106118535761185361335a565b6118699260206040909202019081019150612be4565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008d8d8581811061189d5761189d61335a565b60206040918202939093018301358452838301949094525090820160009081205460ff90811680835260018c0190935292902054909250620100009004161561191357808484815181106118f3576118f361335a565b60ff909216602092830291909101909101528261190f81613386565b9350505b508061191e81613386565b915050611831565b508a336001600160a01b03167f26f48489610b9379e1312f6d4ab3e8ae7daaeb6e9c3fc4fd435e31efe4b5b905846040516119619190612f47565b60405180910390a350505b88336001600160a01b03167f9327c3082659d71242f39580f98c14533249a2555a5e35f7c1dd6114c014acbd836040516119a69190612f47565b60405180910390a3505050505050505050565b8160ff811615806119df57506000805160206136888339815191525460ff908116908216115b156119fd5760405163d751397d60e01b815260040160405180910390fd5b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f805460008051602061368883398151915291908415611ada576000805b82811015611a99578760ff16848281548110611a5957611a5961335a565b60009182526020918290209181049091015460ff601f9092166101000a90041603611a875760019150611a99565b80611a9181613386565b915050611a3b565b5080611ad4578254600181018455600084815260209081902090820401805460ff808b16601f9094166101000a938402930219169190911790555b50611beb565b60005b81811015611be9578660ff16838281548110611afb57611afb61335a565b60009182526020918290209181049091015460ff601f9092166101000a90041603611bd75782611b2c600184613562565b81548110611b3c57611b3c61335a565b90600052602060002090602091828204019190069054906101000a900460ff16838281548110611b6e57611b6e61335a565b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555082805480611ba857611ba8613575565b60019003818190600052602060002090602091828204019190066101000a81549060ff02191690559055611be9565b80611be181613386565b915050611add565b505b505060ff909316600090815260019093016020525060409091208054911515620100000262ff000019909216919091179055565b60008051602061368883398151915280546001908290600090611c4690849060ff1661358b565b825461010092830a60ff818102199092169282160291909117909255835490911660008181526001850160205260409020805462ffff00191689151590930262ff000019169290921762010000881515021760ff191681179091559050611cad81866119b9565b8215611cbe57611cbe818585611e2a565b604080518715158152861515602082015260ff83169133917f6cc736ebc0a380aff8bb8965c1da3507f88c72faaa11d947a8cee380437eee389101611455565b60008051602061368883398151915280546060919060ff16806001600160401b03811115611d2e57611d2e6130af565b604051908082528060200260200182016040528015611d7957816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181611d4c5790505b50925060005b8160ff168160ff161015611e22576000611d9a82600161358b565b6000878152600286016020908152604080832060ff80861680865291845293829020825160608101845291825280546001600160a01b0316938201939093526001830154918101919091528851939450909290918891908616908110611e0257611e0261335a565b602002602001018190525050508080611e1a9061339f565b915050611d7f565b505050919050565b8260ff81161580611e5057506000805160206136888339815191525460ff908116908216115b15611e6e5760405163d751397d60e01b815260040160405180910390fd5b60008051602061368883398151915260005b83811015611f8557611ec2858583818110611e9d57611e9d61335a565b611eb39260206040909202019081019150612be4565b6001600160a01b03163b151590565b611edf57604051633c65e02b60e21b815260040160405180910390fd5b85826003016000878785818110611ef857611ef861335a565b611f0e9260206040909202019081019150612be4565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110611f4257611f4261335a565b90506040020160200135815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080611f7d90613386565b915050611e80565b50336001600160a01b03167fe4b3865dba5d4ccb0b3d6c20155d67038ad51ad7205218a541036a99804571b78585604051611fc19291906135a4565b60405180910390a25050505050565b60008051602061368883398151915280546060919060ff16806001600160401b03811115612000576120006130af565b60405190808252806020026020018201604052801561204b57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161201e5790505b50925060005b8160ff168160ff1610156120ee57600061206c82600161358b565b60ff808216600090815260018701602090815260409182902082516060810184529054808516825261010081048516151592820192909252620100009091048316151591810191909152875192935091879185169081106120cf576120cf61335a565b60200260200101819052505080806120e69061339f565b915050612051565b50505090565b60008160ff8116158061211c57506000805160206136888339815191525460ff908116908216115b1561213a5760405163d751397d60e01b815260040160405180910390fd5b60ff83811660009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d437602052604090205462010000900416612191576040516332fa2abb60e01b815260040160405180910390fd5b6001600160a01b03841660009081527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43e6020908152604080832060ff8716845290915290205491505b5092915050565b60008051602061368883398151915260005b82811015612293578160030160008585848181106122135761221361335a565b6122299260206040909202019081019150612be4565b6001600160a01b03166001600160a01b03168152602001908152602001600020600085858481811061225d5761225d61335a565b602060409182029390930183013584529183019390935201600020805460ff19169055508061228b81613386565b9150506121f3565b50336001600160a01b03167fe4b3865dba5d4ccb0b3d6c20155d67038ad51ad7205218a541036a99804571b784846040516122cf9291906135a4565b60405180910390a2505050565b6001600160a01b0381166000908152600183016020526040812054151561056a565b6000818152600183016020526040812054151561056a565b60008281527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d4386020908152604080832060ff858116855290835281842080546001600160a01b031685527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43a84528285206001820154865290935292205460008051602061368883398151915292168015612434578154600180840154604051637921219560e11b81523060048201523360248201526044810191909152606481019190915260a06084820152600060a48201526001600160a01b0390911690819063f242432a9060c401600060405180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b50505050505b505060009283526002016020908152604080842060ff90931684529190528120805473ffffffffffffffffffffffffffffffffffffffff1916815560010155565b7ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d43f5460009060008051602061368883398151915290606090835b818160ff161015612557576000846009018260ff16815481106124d4576124d461335a565b6000918252602080832081830401548a84526002890182526040808520601f9094166101000a90910460ff1680855292825292839020805460018201549451939550909361253193899387936001600160a01b03169291016134d0565b60405160208183030381529060405294505050808061254f9061339f565b9150506124af565b50815160208084019190912060008781526007860190925260409091205481148061258c575061258a60058501826122fe565b155b60008781526007860160205260409020549095506125ae906005860190612a34565b506125bc6005850182612a40565b5060009586526007909301602052505060409092209190915590565b60006000805160206136888339815191527ff672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d439826126186020870187612be4565b6001600160a01b031681526020808201929092526040908101600090812087840135825290925290205460ff16915081158061266957506000805160206136888339815191525460ff908116908316115b15612687576040516363efa0e360e01b815260040160405180910390fd5b821580156126ae575060ff8083166000908152600183016020526040902054620100009004165b1561272357336000908152600882016020908152604080832060ff8616845290915281205490036126f25760405163bbd28dfd60e01b815260040160405180910390fd5b336000908152600882016020908152604080832060ff86168452909152812080549161271d836135fd565b91905055505b6000858152600282016020908152604080832060ff808716855290835281842060018601909352922054909161010090910416801561276b575080546001600160a01b031615155b156127895760405163bd8a5e1560e01b815260040160405180910390fd5b6000868152600283016020908152604080832060ff871684529091529020546001600160a01b0316156127c0576127c08684612316565b600060048301816127d46020890189612be4565b6001600160a01b031681526020808201929092526040908101600090812089840135825290925290205460ff169050801561292d5760006128186020880188612be4565b604051627eeac760e11b8152336004820152602089013560248201529091506001906001600160a01b0383169062fdd58e90604401602060405180830381865afa15801561286a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288e9190613614565b10156128ad576040516335ba250d60e11b815260040160405180910390fd5b604051637921219560e11b8152336004820152306024820152602088013560448201526001606482015260a06084820152600060a48201526001600160a01b0382169063f242432a9060c401600060405180830381600087803b15801561291357600080fd5b505af1158015612927573d6000803e3d6000fd5b50505050505b6000878152600284016020908152604080832060ff8816845290915290208690612957828261362d565b9050505050509392505050565b60008051602061368883398151915280546000919060ff16825b8160ff168160ff161015612a2957600061299982600161358b565b60ff80821660009081526001870160205260409020805492935091620100009004161580156129cf57508054610100900460ff16155b156129db575050612a17565b6000878152600286016020908152604080832060ff861684529091529020546001600160a01b0316612a14575060009695505050505050565b50505b80612a218161339f565b91505061297e565b506001949350505050565b600061056a8383612a4c565b600061056a8383612b06565b600081815260018301602052604081205480156121da57835460009085906000198101908110612a7e57612a7e61335a565b9060005260206000200154905080856000016001840381548110612aa457612aa461335a565b6000918252602080832090910192909255918252600186019052604090208190558354849080612ad657612ad6613575565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b600081815260018301602052604081205461047f575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b600060208284031215612b5b57600080fd5b81356001600160e01b03198116811461056a57600080fd5b803560ff81168114612b8457600080fd5b919050565b80358015158114612b8457600080fd5b60008060408385031215612bac57600080fd5b612bb583612b73565b9150612bc360208401612b89565b90509250929050565b6001600160a01b0381168114612be157600080fd5b50565b600060208284031215612bf657600080fd5b813561056a81612bcc565b602080825282518282018190526000919060409081850190868401855b82811015612c46578151805160ff168552860151868501529284019290850190600101612c1e565b5091979650505050505050565b60008060408385031215612c6657600080fd5b82359150612bc360208401612b73565b815160ff1681526020808301516001600160a01b031690820152604080830151908201526060810161047f565b600060408284031215612cb557600080fd5b50919050565b60008083601f840112612ccd57600080fd5b5081356001600160401b03811115612ce457600080fd5b6020830191508360208260061b8501011115612cff57600080fd5b9250929050565b60008083601f840112612d1857600080fd5b5081356001600160401b03811115612d2f57600080fd5b6020830191508360208260051b8501011115612cff57600080fd5b60008060008060408587031215612d6057600080fd5b84356001600160401b0380821115612d7757600080fd5b612d8388838901612cbb565b90965094506020870135915080821115612d9c57600080fd5b50612da987828801612d06565b95989497509550505050565b600080600080600060608688031215612dcd57600080fd5b8535612dd881612bcc565b945060208601356001600160401b0380821115612df457600080fd5b612e0089838a01612d06565b90965094506040880135915080821115612e1957600080fd5b50612e2688828901612d06565b969995985093965092949392505050565b600080600060408486031215612e4c57600080fd5b8335925060208401356001600160401b03811115612e6957600080fd5b612e7586828701612d06565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015612ee457612ed1838551805160ff1682526020808201516001600160a01b031690830152604090810151910152565b9284019260609290920191600101612e9e565b50909695505050505050565b600060208284031215612f0257600080fd5b5035919050565b600080600060408486031215612f1e57600080fd5b8335925060208401356001600160401b03811115612f3b57600080fd5b612e7586828701612cbb565b6020808252825182820181905260009190848201906040850190845b81811015612ee457835160ff1683529284019291840191600101612f63565b600060208284031215612f9457600080fd5b61056a82612b73565b815160ff1681526020808301511515908201526040808301511515908201526060810161047f565b60008060008060608587031215612fdb57600080fd5b612fe485612b89565b9350612ff260208601612b89565b925060408501356001600160401b0381111561300d57600080fd5b612da987828801612cbb565b60008060006040848603121561302e57600080fd5b61303784612b73565b925060208401356001600160401b03811115612f3b57600080fd5b6020808252825182820181905260009190848201906040850190845b81811015612ee45761309c838551805160ff1682526020808201511515908301526040908101511515910152565b928401926060929092019160010161306e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156130ed576130ed6130af565b604052919050565b600082601f83011261310657600080fd5b813560206001600160401b03821115613121576131216130af565b8160051b6131308282016130c5565b928352848101820192828101908785111561314a57600080fd5b83870192505b848310156111c157823582529183019190830190613150565b600082601f83011261317a57600080fd5b81356001600160401b03811115613193576131936130af565b6131a6601f8201601f19166020016130c5565b8181528460208386010111156131bb57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156131f057600080fd5b85356131fb81612bcc565b9450602086013561320b81612bcc565b935060408601356001600160401b038082111561322757600080fd5b61323389838a016130f5565b9450606088013591508082111561324957600080fd5b61325589838a016130f5565b9350608088013591508082111561326b57600080fd5b5061327888828901613169565b9150509295509295909350565b6000806040838503121561329857600080fd5b82356132a381612bcc565b9150612bc360208401612b73565b600080602083850312156132c457600080fd5b82356001600160401b038111156132da57600080fd5b6132e685828601612cbb565b90969095509350505050565b600080600080600060a0868803121561330a57600080fd5b853561331581612bcc565b9450602086013561332581612bcc565b9350604086013592506060860135915060808601356001600160401b0381111561334e57600080fd5b61327888828901613169565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161339857613398613370565b5060010190565b600060ff821660ff81036133b5576133b5613370565b60010192915050565b6000602082840312156133d057600080fd5b61056a82612b89565b8082018082111561047f5761047f613370565b8183526000602080850194508260005b858110156134225760ff61340f83612b73565b16875295820195908201906001016133fc565b509495945050505050565b6040815260006134416040830186886133ec565b82810360208401528381526001600160fb1b0384111561346057600080fd5b8360051b80866020840137016020019695505050505050565b60006040828403121561348b57600080fd5b604051604081018181106001600160401b03821117156134ad576134ad6130af565b60405282356134bb81612bcc565b81526020928301359281019290925250919050565b6000855160005b818110156134f157602081890181015185830152016134d7565b5060f89590951b6001600160f81b0319169190940190815260609290921b6bffffffffffffffffffffffff19166001830152601582015260350192915050565b60006020828403121561354357600080fd5b815161056a81612bcc565b6020815260006106516020830184866133ec565b8181038181111561047f5761047f613370565b634e487b7160e01b600052603160045260246000fd5b60ff818116838216019081111561047f5761047f613370565b6020808252818101839052600090604080840186845b878110156135f05781356135cd81612bcc565b6001600160a01b03168352818501358584015291830191908301906001016135ba565b5090979650505050505050565b60008161360c5761360c613370565b506000190190565b60006020828403121561362657600080fd5b5051919050565b813561363881612bcc565b6001600160a01b0381166bffffffffffffffffffffffff60a01b8354161782555060208201356001820155505056fef6deb63e40d71b08820818e006e23fcceb1fce7a499bc15b71b2526cbf9efa72f672b8dc84d117c1e14949d8bc3977392b5ab7de9d01b854d389cdc31bf0d436a2646970667358221220ba278967f04d8c19b588d260f5e49cc1b6d2143958ed5bc24f8ac77e6f999d9f64736f6c63430008130033",
  "devdoc": {
    "details": "This contract is responsible for managing the inventory system for the Arcadians using slots.  It defines the functionality to equip and unequip items to Arcadians, check if a combination of items  are unique, and retrieve the inventory slots and allowed items for a slot.  This contract also implements ERC1155Holder to handle ERC1155 token transfers This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard. It also uses the ReentrancyGuard and Multicall contracts for security and gas efficiency.",
    "kind": "dev",
    "methods": {
      "addBaseModifierCoupons(address,uint8[],uint256[])": {
        "params": {
          "account": "The account to increase the number of coupons",
          "amounts": "the amounts of coupons to increase",
          "slotsIds": "The slots ids to increase the number of coupons"
        }
      },
      "allowItemsInSlot(uint8,(address,uint256)[])": {
        "params": {
          "items": "The list of items to allow in the slot",
          "slotId": "The slot id"
        }
      },
      "allowedSlot((address,uint256))": {
        "params": {
          "item": "The item to check"
        },
        "returns": {
          "_0": "The allowed slot id for the item. Slots are 1-indexed."
        }
      },
      "createSlot(bool,bool,(address,uint256)[])": {
        "details": "This function is only accessible to the manager roleSlots are 1-indexed",
        "params": {
          "isBase": "If the slot is base",
          "items": "The list of items to allow in the slot",
          "permanent": "Whether or not the slot can be unequipped once equipped"
        }
      },
      "disallowItems((address,uint256)[])": {
        "params": {
          "items": "The list of items to disallow in the slot"
        }
      },
      "equip(uint256,(address,uint256)[])": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to equip the items for",
          "items": "An array of items to equip in the corresponding slots"
        }
      },
      "equipped(uint256,uint8)": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query",
          "slotId": "The slot id to query"
        }
      },
      "equippedAll(uint256)": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query"
        }
      },
      "equippedBatch(uint256,uint8[])": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query",
          "slotsIds": "The slots ids to query"
        }
      },
      "getBaseModifierCoupon(address,uint8)": {
        "params": {
          "account": "The accounts to increase the number of coupons",
          "slotId": "The slot to get the coupon amount from"
        }
      },
      "getBaseModifierCouponAll(address)": {
        "params": {
          "account": "The accounts to increase the number of coupons"
        }
      },
      "getBaseSlotsIds()": {
        "returns": {
          "_0": "List of base slots ids"
        }
      },
      "isArcadianUnique(uint256,(address,uint256)[])": {
        "details": "The uniqueness is calculated using the existent arcadian items and the input items as wellOnly items equipped in 'base' slots are considered for uniqueness",
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to query",
          "items": "An array of items to check for uniqueness after \"equipped\" over the existent arcadian items."
        }
      },
      "numSlots()": {
        "details": "Slots are 1-indexed",
        "returns": {
          "_0": "The number of inventory slots "
        }
      },
      "setItemsTransferRequired((address,uint256)[],bool[])": {
        "params": {
          "items": "The list of items",
          "requiresTransfer": "If it requires item transfer to be equipped"
        }
      },
      "setSlotBase(uint8,bool)": {
        "details": "This function is only accessible to the manager roleSlots are 1-indexed",
        "params": {
          "isBase": "Whether or not the slot is base"
        }
      },
      "setSlotPermanent(uint8,bool)": {
        "details": "This function is only accessible to the manager roleSlots are 1-indexed",
        "params": {
          "permanent": "Whether or not the slot is permanent"
        }
      },
      "slot(uint8)": {
        "details": "Slots are 1-indexed",
        "params": {
          "slotId": "The ID of the inventory slot"
        },
        "returns": {
          "existentSlot": "The details of the inventory slot"
        }
      },
      "slotsAll()": {
        "details": "Slots are 1-indexed",
        "returns": {
          "existentSlots": "The details of all the inventory slots"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unequip(uint256,uint8[])": {
        "params": {
          "arcadianId": "The ID of the Arcadian NFT to equip the item for",
          "slotsIds": "The slots ids in which the items will be unequipped"
        }
      }
    },
    "title": "InventoryFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBaseModifierCoupons(address,uint8[],uint256[])": {
        "notice": "Adds coupons to accounts that allow to modify the base traits"
      },
      "allowItemsInSlot(uint8,(address,uint256)[])": {
        "notice": "Adds items to the list of allowed items for an inventory slot"
      },
      "allowedSlot((address,uint256))": {
        "notice": "Returns the allowed slot for a given item"
      },
      "createSlot(bool,bool,(address,uint256)[])": {
        "notice": "Creates a new inventory slot"
      },
      "disallowItems((address,uint256)[])": {
        "notice": "Removes items from the list of allowed items"
      },
      "equip(uint256,(address,uint256)[])": {
        "notice": "Equips multiple items to multiple slots for a specified Arcadian NFT"
      },
      "equipped(uint256,uint8)": {
        "notice": "Retrieves the equipped item in a slot for a specified Arcadian NFT"
      },
      "equippedAll(uint256)": {
        "notice": "Retrieves all the equipped items for a specified Arcadian NFT"
      },
      "equippedBatch(uint256,uint8[])": {
        "notice": "Retrieves the equipped items in the slot of an Arcadian NFT"
      },
      "getBaseModifierCoupon(address,uint8)": {
        "notice": "Returns the number coupons available for an account that allow to modify the base traits"
      },
      "getBaseModifierCouponAll(address)": {
        "notice": "Returns the number coupons available for an account that allow to modify the base traits"
      },
      "getBaseSlotsIds()": {
        "notice": "Returns all the base slots ids"
      },
      "isArcadianUnique(uint256,(address,uint256)[])": {
        "notice": "Indicates if a list of items applied to an the arcadian is unique"
      },
      "numSlots()": {
        "notice": "Returns the number of inventory slots"
      },
      "setItemsTransferRequired((address,uint256)[],bool[])": {
        "notice": "Sets the items transfer required on equip"
      },
      "setSlotBase(uint8,bool)": {
        "notice": "Sets the slot base property"
      },
      "setSlotPermanent(uint8,bool)": {
        "notice": "Sets the slot permanent property"
      },
      "slot(uint8)": {
        "notice": "Returns the details of an inventory slot given its ID"
      },
      "slotsAll()": {
        "notice": "Returns the details of all the existent slots"
      },
      "unequip(uint256,uint8[])": {
        "notice": "Unequips the items equipped in multiple slots for a specified Arcadian NFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}