{
  "address": "0xf48a018b39355f0a3c77cddffbcfcbe4237ad214",
  "abi": [
    {
      "inputs": [],
      "name": "Roles_MissingAdminRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingAutomationRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Roles_MissingManagerRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ClaimInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ClaimStateAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_ExceedsElegibleAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Whitelist_InputDataMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum WhitelistStorage.PoolId",
          "name": "poolId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalElegibleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimedAmount",
          "type": "uint256"
        }
      ],
      "name": "WhitelistBalanceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimedGuaranteedPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimedRestrictedPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "elegibleGuaranteedPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "elegibleRestrictedPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseElegibleGuaranteedPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "increaseElegibleGuaranteedPoolBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseElegibleRestrictedPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "increaseElegibleRestrictedPoolBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClaimActiveGuaranteedPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClaimActiveRestrictedPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setClaimActiveGuaranteedPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setClaimActiveRestrictedPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "setElegibleGuaranteedPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "totalAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "setElegibleGuaranteedPoolBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "setElegibleRestrictedPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "totalAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "setElegibleRestrictedPoolBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimedGuaranteedPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimedRestrictedPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalElegibleGuaranteedPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalElegibleRestrictedPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b1ae71f7e2368a57216d337ba40dbef0d241c1a21af07e7195b32e5ab73d17c",
  "receipt": {
    "from": "0xc1580afc68c82e110325b09313e059a8f5cd68e9",
    "contractAddress": "0xf48a018b39355f0a3c77cddffbcfcbe4237ad214",
    "transactionIndex": "0x0",
    "gasUsed": "0xf36c1",
    "logsBloom": "0x
    "blockHash": "0x11c6bfe591f6ee77339c8c3252f6e80d876d3a8c7a2e7a533f6b211923f48962",
    "transactionHash": "0xe383d999282358ff0d70db81541f9642f34e05d2f05e21ca549da5596332a63a",
    "logs": [
      {
        "transactionHash": "0xe383d999282358ff0d70db81541f9642f34e05d2f05e21ca549da5596332a63a",
        "address": "0x0000000000000000000000000000000000001010",
        "blockHash": "0x11c6bfe591f6ee77339c8c3252f6e80d876d3a8c7a2e7a533f6b211923f48962",
        "blockNumber": "0x296ee3b",
        "data": "0x000000000000000000000000000000000000000000000001e2a94023631f6ade000000000000000000000000000000000000000000000002e934e8fb3ef5e4e80000000000000000000000000000000000000000000005edc2980e7d1f20e57b000000000000000000000000000000000000000000000001068ba8d7dbd67a0a0000000000000000000000000000000000000000000005efa5414ea082405059",
        "logIndex": "0x0",
        "removed": false,
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c1580afc68c82e110325b09313e059a8f5cd68e9",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "transactionIndex": "0x0"
      }
    ],
    "blockNumber": "0x296ee3b",
    "cumulativeGasUsed": "0xf36c1",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3e3d4f461e0f2b62facd0504ca9078d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Roles_MissingAdminRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingAutomationRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Roles_MissingManagerRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ClaimInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ClaimStateAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_ExceedsElegibleAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Whitelist_InputDataMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum WhitelistStorage.PoolId\",\"name\":\"poolId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalElegibleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"}],\"name\":\"WhitelistBalanceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimedGuaranteedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimedRestrictedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"elegibleGuaranteedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"elegibleRestrictedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseElegibleGuaranteedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"increaseElegibleGuaranteedPoolBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseElegibleRestrictedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"increaseElegibleRestrictedPoolBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimActiveGuaranteedPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimActiveRestrictedPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setClaimActiveGuaranteedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setClaimActiveRestrictedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"setElegibleGuaranteedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"setElegibleGuaranteedPoolBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"setElegibleRestrictedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"setElegibleRestrictedPoolBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedGuaranteedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRestrictedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalElegibleGuaranteedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalElegibleRestrictedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimedGuaranteedPool(address)\":{\"returns\":{\"_0\":\"The amount claimed from the guaranteed pool by the account\"}},\"claimedRestrictedPool(address)\":{\"returns\":{\"_0\":\"The amount claimed from the restricted pool by the account \"}},\"elegibleGuaranteedPool(address)\":{\"returns\":{\"_0\":\"The account elegible amount from the guaranteed pool\"}},\"elegibleRestrictedPool(address)\":{\"returns\":{\"_0\":\"The account elegible amount from the restricted pool\"}},\"increaseElegibleGuaranteedPool(address,uint256)\":{\"details\":\"This function can only be called by an address with the manager role\",\"params\":{\"account\":\"The address to add to the whitelist\",\"amount\":\"The amount to whitelist for the address\"}},\"increaseElegibleGuaranteedPoolBatch(address[],uint256[])\":{\"details\":\"This function can only be called by an address with the manager role\",\"params\":{\"accounts\":\"An array of addresses to add to the whitelist\",\"amounts\":\"An array of amounts to whitelist for each address\"}},\"increaseElegibleRestrictedPool(address,uint256)\":{\"details\":\"This function can only be called by an address with the manager role\",\"params\":{\"account\":\"The address to add to the whitelist\",\"amount\":\"The amount to whitelist for the address\"}},\"increaseElegibleRestrictedPoolBatch(address[],uint256[])\":{\"details\":\"This function can only be called by an address with the manager role\",\"params\":{\"accounts\":\"An array of addresses to add to the whitelist\",\"amounts\":\"An array of amounts to whitelist for each address\"}},\"isClaimActiveGuaranteedPool()\":{\"returns\":{\"active\":\"bool indicating if claim is active\"}},\"isClaimActiveRestrictedPool()\":{\"returns\":{\"active\":\"bool indicating if claim is active\"}},\"setClaimActiveGuaranteedPool(bool)\":{\"details\":\"This function can only be called by an address with the manager role\"},\"setClaimActiveRestrictedPool(bool)\":{\"details\":\"This function can only be called by an address with the manager role\"},\"setElegibleGuaranteedPool(address,uint256)\":{\"details\":\"This function can only be called by an address with the manager role\",\"params\":{\"account\":\"The address to add to the whitelist\",\"totalAmount\":\"The amount to whitelist for the address\"}},\"setElegibleGuaranteedPoolBatch(address[],uint256[])\":{\"details\":\"This function can only be called by an address with the manager role\",\"params\":{\"accounts\":\"An array of addresses to add to the whitelist\",\"totalAmounts\":\"An array of amounts to whitelist for each address\"}},\"setElegibleRestrictedPool(address,uint256)\":{\"details\":\"This function can only be called by an address with the manager role\",\"params\":{\"account\":\"The address to add to the whitelist\",\"totalAmount\":\"The amount to whitelist for the address\"}},\"setElegibleRestrictedPoolBatch(address[],uint256[])\":{\"details\":\"This function can only be called by an address with the manager role\",\"params\":{\"accounts\":\"An array of addresses to add to the whitelist\",\"totalAmounts\":\"An array of amounts to whitelist for each address\"}},\"totalClaimedGuaranteedPool()\":{\"returns\":{\"_0\":\"The total claimed amount from the Guaranteed pool\"}},\"totalClaimedRestrictedPool()\":{\"returns\":{\"_0\":\"The total claimed amount from the Restricted pool\"}},\"totalElegibleGuaranteedPool()\":{\"returns\":{\"_0\":\"The total elegible amount from the Guaranteed pool\"}},\"totalElegibleRestrictedPool()\":{\"returns\":{\"_0\":\"The total elegible amount from the Restricted pool\"}}},\"title\":\"WhitelistFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"increaseElegibleGuaranteedPool(address,uint256)\":{\"notice\":\"Increase the account whitelist elegible amount in the Guaranteed pool\"},\"increaseElegibleGuaranteedPoolBatch(address[],uint256[])\":{\"notice\":\"Increase the guaranteed pool elegible amounts for multiple addresses\"},\"increaseElegibleRestrictedPool(address,uint256)\":{\"notice\":\"Increase the account whitelist elegible amount in the restricted pool\"},\"increaseElegibleRestrictedPoolBatch(address[],uint256[])\":{\"notice\":\"Increase the restricted pool elegible amounts for multiple addresses\"},\"isClaimActiveGuaranteedPool()\":{\"notice\":\"Returns true if elegible tokens can be claimed in the guaranteed pool, or false otherwise\"},\"isClaimActiveRestrictedPool()\":{\"notice\":\"Returns true if elegible tokens can be claimed in the restricted pool, or false otherwise\"},\"setClaimActiveGuaranteedPool(bool)\":{\"notice\":\"Updates the claim state to active and enables the guaranteed pool token claim\"},\"setClaimActiveRestrictedPool(bool)\":{\"notice\":\"Updates the claim state to active and enables the restricted pool token claim\"},\"setElegibleGuaranteedPool(address,uint256)\":{\"notice\":\"Adds a new address to the Guaranteed Pool with a specific amount\"},\"setElegibleGuaranteedPoolBatch(address[],uint256[])\":{\"notice\":\"Adds multiple addresses to the Guaranteed Pool with specific amounts\"},\"setElegibleRestrictedPool(address,uint256)\":{\"notice\":\"Adds a new address to the Restricted Pool with a specific amount\"},\"setElegibleRestrictedPoolBatch(address[],uint256[])\":{\"notice\":\"Adds multiple addresses to the Restricted Pool with specific amounts\"}},\"notice\":\"This contract allows the admins to whitelist an address with a specific amount, which can then be used to claim tokens in other contracts. To consume the whitelist, the token contracts should call the internal functions from WhitelistInternal. This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arcadiaDiamonds/whitelist/WhitelistFacet.sol\":\"WhitelistFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/arcadiaDiamonds/roles/RolesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { AccessControlStorage } from \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport { RolesStorage } from './RolesStorage.sol';\\n\\ncontract RolesInternal is AccessControlInternal {\\n\\n    error Roles_MissingAdminRole();\\n    error Roles_MissingManagerRole();\\n    error Roles_MissingAutomationRole();\\n\\n    modifier onlyDefaultAdmin() {\\n        if (!_hasRole(_defaultAdminRole(), msg.sender))\\n            revert Roles_MissingAdminRole();\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        if (!_hasRole(_managerRole(), msg.sender))\\n            revert Roles_MissingManagerRole();\\n        _;\\n    }\\n\\n    modifier onlyAutomation() {\\n        if (!_hasRole(_managerRole(), msg.sender) && !_hasRole(_automationRole(), msg.sender))\\n            revert Roles_MissingAutomationRole();\\n        _;\\n    }\\n\\n    function _defaultAdminRole() internal pure returns (bytes32) {\\n        return AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    function _managerRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().managerRole;\\n    }\\n\\n    function _automationRole() internal view returns (bytes32) {\\n        return RolesStorage.layout().automationRole;\\n    }\\n\\n    function _initRoles() internal {\\n        RolesStorage.Layout storage rolesSL = RolesStorage.layout();\\n        rolesSL.managerRole = keccak256(\\\"manager.role\\\");\\n        rolesSL.automationRole = keccak256(\\\"automation.role\\\");\\n\\n        _grantRole(_defaultAdminRole(), msg.sender);\\n        _grantRole(_managerRole(), msg.sender);\\n    }\\n}\",\"keccak256\":\"0x3bbcaec7bceb8497e1e96785c524e1cf67b54ba34713086686887d13502b5264\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/roles/RolesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary RolesStorage {\\n\\n    bytes32 constant ROLES_STORAGE_POSITION =\\n        keccak256(\\\"roles.storage.position\\\");\\n\\n    struct Layout {\\n        bytes32 managerRole;\\n        bytes32 automationRole;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = ROLES_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x6eb213b99e10477f695528196487fafafaeceb2b11c6f9f43f3ddb9e83f9e8d3\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { WhitelistInternal } from './WhitelistInternal.sol';\\nimport { WhitelistStorage } from \\\"./WhitelistStorage.sol\\\";\\n\\n/**\\n * @title WhitelistFacet\\n * @notice This contract allows the admins to whitelist an address with a specific amount,\\n * which can then be used to claim tokens in other contracts.\\n * To consume the whitelist, the token contracts should call the internal functions from WhitelistInternal.\\n * This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard.\\n */\\ncontract WhitelistFacet is WhitelistInternal {\\n    WhitelistStorage.PoolId constant GuaranteedPool = WhitelistStorage.PoolId.Guaranteed;\\n    WhitelistStorage.PoolId constant RestrictedPool = WhitelistStorage.PoolId.Restricted;\\n\\n    /**\\n     * @return The amount claimed from the guaranteed pool by the account\\n     */\\n    function claimedGuaranteedPool(address account) external view returns (uint) {\\n        return _claimedWhitelist(GuaranteedPool, account);\\n    }\\n\\n    /**\\n     * @return The amount claimed from the restricted pool by the account \\n     */\\n    function claimedRestrictedPool(address account) external view returns (uint) {\\n        return _claimedWhitelist(RestrictedPool, account);\\n    }\\n\\n    /**\\n     * @return The account elegible amount from the guaranteed pool\\n     */\\n    function elegibleGuaranteedPool(address account) external view returns (uint) {\\n        return _elegibleWhitelist(GuaranteedPool, account);\\n    }\\n\\n    /**\\n     * @return The account elegible amount from the restricted pool\\n     */\\n    function elegibleRestrictedPool(address account) external view returns (uint) {\\n        return _elegibleWhitelist(RestrictedPool, account);\\n    }\\n    \\n    /**\\n     * @return The total claimed amount from the Guaranteed pool\\n     */\\n    function totalClaimedGuaranteedPool() external view returns (uint) {\\n        return _totalClaimedWhitelist(GuaranteedPool);\\n    }\\n    \\n    /**\\n     * @return The total claimed amount from the Restricted pool\\n     */\\n    function totalClaimedRestrictedPool() external view returns (uint) {\\n        return _totalClaimedWhitelist(RestrictedPool);\\n    }\\n    \\n    /**\\n     * @return The total elegible amount from the Guaranteed pool\\n     */\\n    function totalElegibleGuaranteedPool() external view returns (uint) {\\n        return _totalElegibleWhitelist(GuaranteedPool);\\n    }\\n\\n    /**\\n     * @return The total elegible amount from the Restricted pool\\n     */\\n    function totalElegibleRestrictedPool() external view returns (uint) {\\n        return _totalElegibleWhitelist(RestrictedPool);\\n    }\\n\\n    /**\\n     * @notice Increase the account whitelist elegible amount in the Guaranteed pool\\n     * @dev This function can only be called by an address with the manager role\\n     * @param account The address to add to the whitelist\\n     * @param amount The amount to whitelist for the address\\n     */\\n    function increaseElegibleGuaranteedPool(address account, uint amount) onlyManager external {\\n        _increaseWhitelistElegible(GuaranteedPool, account, amount);\\n    }\\n\\n    /**\\n     * @notice Increase the account whitelist elegible amount in the restricted pool\\n     * @dev This function can only be called by an address with the manager role\\n     * @param account The address to add to the whitelist\\n     * @param amount The amount to whitelist for the address\\n     */\\n    function increaseElegibleRestrictedPool(address account, uint amount) onlyManager external {\\n        _increaseWhitelistElegible(RestrictedPool, account, amount);\\n    }\\n\\n    /**\\n     * @notice Increase the guaranteed pool elegible amounts for multiple addresses\\n     * @dev This function can only be called by an address with the manager role\\n     * @param accounts An array of addresses to add to the whitelist\\n     * @param amounts An array of amounts to whitelist for each address\\n     */\\n    function increaseElegibleGuaranteedPoolBatch(address[] calldata accounts, uint[] calldata amounts) external onlyManager {\\n        _increaseWhitelistElegibleBatch(GuaranteedPool, accounts, amounts);\\n    }\\n\\n    /**\\n     * @notice Increase the restricted pool elegible amounts for multiple addresses\\n     * @dev This function can only be called by an address with the manager role\\n     * @param accounts An array of addresses to add to the whitelist\\n     * @param amounts An array of amounts to whitelist for each address\\n     */\\n    function increaseElegibleRestrictedPoolBatch(address[] calldata accounts, uint[] calldata amounts) external onlyManager {\\n        _increaseWhitelistElegibleBatch(RestrictedPool, accounts, amounts);\\n    }\\n\\n    /**\\n     * @notice Adds a new address to the Guaranteed Pool with a specific amount\\n     * @dev This function can only be called by an address with the manager role\\n     * @param account The address to add to the whitelist\\n     * @param totalAmount The amount to whitelist for the address\\n     */\\n    function setElegibleGuaranteedPool(address account, uint totalAmount) onlyManager external {\\n        _setWhitelistElegible(GuaranteedPool, account, totalAmount);\\n    }\\n\\n    /**\\n     * @notice Adds a new address to the Restricted Pool with a specific amount\\n     * @dev This function can only be called by an address with the manager role\\n     * @param account The address to add to the whitelist\\n     * @param totalAmount The amount to whitelist for the address\\n     */\\n    function setElegibleRestrictedPool(address account, uint totalAmount) onlyManager external {\\n        _setWhitelistElegible(RestrictedPool, account, totalAmount);\\n    }\\n\\n    /**\\n     * @notice Adds multiple addresses to the Guaranteed Pool with specific amounts\\n     * @dev This function can only be called by an address with the manager role\\n     * @param accounts An array of addresses to add to the whitelist\\n     * @param totalAmounts An array of amounts to whitelist for each address\\n     */\\n    function setElegibleGuaranteedPoolBatch(address[] calldata accounts, uint[] calldata totalAmounts) external onlyManager {\\n        _setWhitelistElegibleBatch(GuaranteedPool, accounts, totalAmounts);\\n    }\\n\\n    /**\\n     * @notice Adds multiple addresses to the Restricted Pool with specific amounts\\n     * @dev This function can only be called by an address with the manager role\\n     * @param accounts An array of addresses to add to the whitelist\\n     * @param totalAmounts An array of amounts to whitelist for each address\\n     */\\n    function setElegibleRestrictedPoolBatch(address[] calldata accounts, uint[] calldata totalAmounts) external onlyManager {\\n        _setWhitelistElegibleBatch(RestrictedPool, accounts, totalAmounts);\\n    }\\n\\n    /**\\n     * @notice Updates the claim state to active and enables the guaranteed pool token claim\\n     * @dev This function can only be called by an address with the manager role\\n     */\\n    function setClaimActiveGuaranteedPool(bool active) external onlyManager {\\n        _setWhitelistClaimActive(GuaranteedPool, active);\\n    }\\n\\n    /**\\n     * @notice Updates the claim state to active and enables the restricted pool token claim\\n     * @dev This function can only be called by an address with the manager role\\n     */\\n    function setClaimActiveRestrictedPool(bool active) external onlyManager {\\n        _setWhitelistClaimActive(RestrictedPool, active);\\n    }\\n\\n    /**\\n     * @notice Returns true if elegible tokens can be claimed in the guaranteed pool, or false otherwise\\n     * @return active bool indicating if claim is active\\n     */\\n    function isClaimActiveGuaranteedPool() view external returns (bool active) {\\n        return _isWhitelistClaimActive(GuaranteedPool);\\n    }\\n\\n    /**\\n     * @notice Returns true if elegible tokens can be claimed in the restricted pool, or false otherwise\\n     * @return active bool indicating if claim is active\\n     */\\n    function isClaimActiveRestrictedPool() view external returns (bool active) {\\n        return _isWhitelistClaimActive(RestrictedPool);\\n    }\\n}\",\"keccak256\":\"0xe6de26d219d5cb23c4550469c6e0ab2fc571e5ce0fe7a36507b8e5b65749af61\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nimport { WhitelistStorage } from \\\"./WhitelistStorage.sol\\\";\\nimport { RolesInternal } from \\\"./../roles/RolesInternal.sol\\\";\\ncontract WhitelistInternal is RolesInternal {\\n\\n    error Whitelist_ExceedsElegibleAmount();\\n    error Whitelist_InputDataMismatch();\\n    error Whitelist_ClaimStateAlreadyUpdated();\\n    error Whitelist_ClaimInactive();\\n\\n    event WhitelistBalanceChanged(address indexed account, WhitelistStorage.PoolId poolId, uint totalElegibleAmount, uint totalClaimedAmount);\\n\\n    function _totalClaimedWhitelist(WhitelistStorage.PoolId poolId) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].totalClaimed;\\n    }\\n\\n    function _totalElegibleWhitelist(WhitelistStorage.PoolId poolId) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].totalElegible;\\n    }\\n\\n    function _claimedWhitelist(WhitelistStorage.PoolId poolId, address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].claimed[account];\\n    }\\n\\n    function _elegibleWhitelist(WhitelistStorage.PoolId poolId, address account) internal view returns (uint) {\\n        return WhitelistStorage.layout().pools[poolId].elegible[account];\\n    }\\n\\n    function _consumeWhitelist(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        if (!pool.claimActive)\\n            revert Whitelist_ClaimInactive();\\n\\n        if (pool.elegible[account] < amount) \\n            revert Whitelist_ExceedsElegibleAmount();\\n\\n        pool.elegible[account] -= amount;\\n        pool.claimed[account] += amount;\\n        pool.totalClaimed += amount;\\n        pool.totalElegible -= amount;\\n\\n        emit WhitelistBalanceChanged(account, poolId, pool.elegible[account], pool.claimed[account]);\\n    }\\n\\n    function _increaseWhitelistElegible(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n        pool.elegible[account] += amount;\\n        pool.totalElegible += amount;\\n        \\n        emit WhitelistBalanceChanged(account, poolId, pool.elegible[account], pool.claimed[account]);\\n    }\\n\\n    function _increaseWhitelistElegibleBatch(WhitelistStorage.PoolId poolId, address[] calldata accounts, uint[] calldata amounts) internal {\\n        if (accounts.length != amounts.length) revert Whitelist_InputDataMismatch();\\n\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        for (uint i = 0; i < accounts.length; i++) {\\n            pool.elegible[accounts[i]] += amounts[i];\\n            pool.totalElegible += amounts[i];\\n            emit WhitelistBalanceChanged(accounts[i], poolId, pool.elegible[accounts[i]], pool.claimed[accounts[i]]);\\n        }\\n    }\\n\\n    function _setWhitelistElegible(WhitelistStorage.PoolId poolId, address account, uint amount) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        pool.totalElegible += amount - pool.elegible[account];\\n        pool.elegible[account] += amount;\\n        emit WhitelistBalanceChanged(account, poolId, pool.elegible[account], pool.claimed[account]);\\n    }\\n\\n    function _setWhitelistElegibleBatch(WhitelistStorage.PoolId poolId, address[] calldata accounts, uint[] calldata amounts) internal {\\n        if (accounts.length != amounts.length) revert Whitelist_InputDataMismatch();\\n\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n\\n        for (uint i = 0; i < accounts.length; i++) {\\n            pool.totalElegible += amounts[i] - pool.elegible[accounts[i]];\\n            pool.elegible[accounts[i]] = amounts[i];\\n            emit WhitelistBalanceChanged(accounts[i], poolId, pool.elegible[accounts[i]], pool.claimed[accounts[i]]);\\n        }\\n    }\\n\\n    function _isWhitelistClaimActive(WhitelistStorage.PoolId poolId) view internal returns (bool) {\\n        return WhitelistStorage.layout().pools[poolId].claimActive;\\n    }\\n\\n    function _setWhitelistClaimActive(WhitelistStorage.PoolId poolId, bool active) internal {\\n        WhitelistStorage.Layout storage whitelistSL = WhitelistStorage.layout();\\n        WhitelistStorage.Pool storage pool = whitelistSL.pools[poolId];\\n        \\n        pool.claimActive = active;\\n    }\\n}\",\"keccak256\":\"0x680f347ea3539a2471f2348e90975112f23bcc14905113ceea7a1626d850d591\",\"license\":\"GPL-2.0\"},\"contracts/arcadiaDiamonds/whitelist/WhitelistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.8.19;\\n\\nlibrary WhitelistStorage {\\n\\n    bytes32 constant WHITELIST_STORAGE_POSITION =\\n        keccak256(\\\"whitelist.storage.position\\\");\\n\\n    enum PoolId { Guaranteed, Restricted }\\n    \\n    struct Pool {\\n        mapping(address => uint) claimed;\\n        mapping(address => uint) elegible;\\n        uint totalClaimed;\\n        uint totalElegible;\\n        bool claimActive;\\n    }\\n\\n    struct Layout {\\n        // pool id => tokens pool\\n        mapping(PoolId => Pool) pools;\\n    }\\n\\n    function layout()\\n        internal\\n        pure\\n        returns (Layout storage es)\\n    {\\n        bytes32 position = WHITELIST_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xe7be89f6f179b20a27648d166a17cc0f91abd01fc7898cf6963dacb299cf4ae1\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimedGuaranteedPool(address)": {
        "returns": {
          "_0": "The amount claimed from the guaranteed pool by the account"
        }
      },
      "claimedRestrictedPool(address)": {
        "returns": {
          "_0": "The amount claimed from the restricted pool by the account "
        }
      },
      "elegibleGuaranteedPool(address)": {
        "returns": {
          "_0": "The account elegible amount from the guaranteed pool"
        }
      },
      "elegibleRestrictedPool(address)": {
        "returns": {
          "_0": "The account elegible amount from the restricted pool"
        }
      },
      "increaseElegibleGuaranteedPool(address,uint256)": {
        "details": "This function can only be called by an address with the manager role",
        "params": {
          "account": "The address to add to the whitelist",
          "amount": "The amount to whitelist for the address"
        }
      },
      "increaseElegibleGuaranteedPoolBatch(address[],uint256[])": {
        "details": "This function can only be called by an address with the manager role",
        "params": {
          "accounts": "An array of addresses to add to the whitelist",
          "amounts": "An array of amounts to whitelist for each address"
        }
      },
      "increaseElegibleRestrictedPool(address,uint256)": {
        "details": "This function can only be called by an address with the manager role",
        "params": {
          "account": "The address to add to the whitelist",
          "amount": "The amount to whitelist for the address"
        }
      },
      "increaseElegibleRestrictedPoolBatch(address[],uint256[])": {
        "details": "This function can only be called by an address with the manager role",
        "params": {
          "accounts": "An array of addresses to add to the whitelist",
          "amounts": "An array of amounts to whitelist for each address"
        }
      },
      "isClaimActiveGuaranteedPool()": {
        "returns": {
          "active": "bool indicating if claim is active"
        }
      },
      "isClaimActiveRestrictedPool()": {
        "returns": {
          "active": "bool indicating if claim is active"
        }
      },
      "setClaimActiveGuaranteedPool(bool)": {
        "details": "This function can only be called by an address with the manager role"
      },
      "setClaimActiveRestrictedPool(bool)": {
        "details": "This function can only be called by an address with the manager role"
      },
      "setElegibleGuaranteedPool(address,uint256)": {
        "details": "This function can only be called by an address with the manager role",
        "params": {
          "account": "The address to add to the whitelist",
          "totalAmount": "The amount to whitelist for the address"
        }
      },
      "setElegibleGuaranteedPoolBatch(address[],uint256[])": {
        "details": "This function can only be called by an address with the manager role",
        "params": {
          "accounts": "An array of addresses to add to the whitelist",
          "totalAmounts": "An array of amounts to whitelist for each address"
        }
      },
      "setElegibleRestrictedPool(address,uint256)": {
        "details": "This function can only be called by an address with the manager role",
        "params": {
          "account": "The address to add to the whitelist",
          "totalAmount": "The amount to whitelist for the address"
        }
      },
      "setElegibleRestrictedPoolBatch(address[],uint256[])": {
        "details": "This function can only be called by an address with the manager role",
        "params": {
          "accounts": "An array of addresses to add to the whitelist",
          "totalAmounts": "An array of amounts to whitelist for each address"
        }
      },
      "totalClaimedGuaranteedPool()": {
        "returns": {
          "_0": "The total claimed amount from the Guaranteed pool"
        }
      },
      "totalClaimedRestrictedPool()": {
        "returns": {
          "_0": "The total claimed amount from the Restricted pool"
        }
      },
      "totalElegibleGuaranteedPool()": {
        "returns": {
          "_0": "The total elegible amount from the Guaranteed pool"
        }
      },
      "totalElegibleRestrictedPool()": {
        "returns": {
          "_0": "The total elegible amount from the Restricted pool"
        }
      }
    },
    "title": "WhitelistFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "increaseElegibleGuaranteedPool(address,uint256)": {
        "notice": "Increase the account whitelist elegible amount in the Guaranteed pool"
      },
      "increaseElegibleGuaranteedPoolBatch(address[],uint256[])": {
        "notice": "Increase the guaranteed pool elegible amounts for multiple addresses"
      },
      "increaseElegibleRestrictedPool(address,uint256)": {
        "notice": "Increase the account whitelist elegible amount in the restricted pool"
      },
      "increaseElegibleRestrictedPoolBatch(address[],uint256[])": {
        "notice": "Increase the restricted pool elegible amounts for multiple addresses"
      },
      "isClaimActiveGuaranteedPool()": {
        "notice": "Returns true if elegible tokens can be claimed in the guaranteed pool, or false otherwise"
      },
      "isClaimActiveRestrictedPool()": {
        "notice": "Returns true if elegible tokens can be claimed in the restricted pool, or false otherwise"
      },
      "setClaimActiveGuaranteedPool(bool)": {
        "notice": "Updates the claim state to active and enables the guaranteed pool token claim"
      },
      "setClaimActiveRestrictedPool(bool)": {
        "notice": "Updates the claim state to active and enables the restricted pool token claim"
      },
      "setElegibleGuaranteedPool(address,uint256)": {
        "notice": "Adds a new address to the Guaranteed Pool with a specific amount"
      },
      "setElegibleGuaranteedPoolBatch(address[],uint256[])": {
        "notice": "Adds multiple addresses to the Guaranteed Pool with specific amounts"
      },
      "setElegibleRestrictedPool(address,uint256)": {
        "notice": "Adds a new address to the Restricted Pool with a specific amount"
      },
      "setElegibleRestrictedPoolBatch(address[],uint256[])": {
        "notice": "Adds multiple addresses to the Restricted Pool with specific amounts"
      }
    },
    "notice": "This contract allows the admins to whitelist an address with a specific amount, which can then be used to claim tokens in other contracts. To consume the whitelist, the token contracts should call the internal functions from WhitelistInternal. This contract can be used as a facet of a diamond which follows the EIP-2535 diamond standard.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}